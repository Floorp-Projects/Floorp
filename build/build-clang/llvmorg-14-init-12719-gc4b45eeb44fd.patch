From c4b45eeb44fdc49d1b6199f242082268f8c017d0 Mon Sep 17 00:00:00 2001
From: Nico Weber <thakis@chromium.org>
Date: Fri, 17 Dec 2021 12:35:52 -0500
Subject: [PATCH] [lld/mac] Don't lose "weak ref" bit when doing LTO

Fixes #52778.

Probably fixes Chromium crashing on startup on macOS 10.15 (and older) systems
when building with LTO, but I haven't verified that yet.

Differential Revision: https://reviews.llvm.org/D115949
---
 lld/MachO/InputFiles.cpp       |  3 +--
 lld/test/MachO/lto-weak-ref.ll | 45 ++++++++++++++++++++++++++++++++++
 2 files changed, 46 insertions(+), 2 deletions(-)
 create mode 100644 lld/test/MachO/lto-weak-ref.ll

diff --git a/lld/MachO/InputFiles.cpp b/lld/MachO/InputFiles.cpp
index a4fb9035193c..14cd224520f7 100644
--- a/lld/MachO/InputFiles.cpp
+++ b/lld/MachO/InputFiles.cpp
@@ -1272,9 +1272,8 @@ static macho::Symbol *createBitcodeSymbol(const lto::InputFile::Symbol &objSym,
                                           BitcodeFile &file) {
   StringRef name = saver.save(objSym.getName());
 
-  // TODO: support weak references
   if (objSym.isUndefined())
-    return symtab->addUndefined(name, &file, /*isWeakRef=*/false);
+    return symtab->addUndefined(name, &file, /*isWeakRef=*/objSym.isWeak());
 
   assert(!objSym.isCommon() && "TODO: support common symbols in LTO");
 
diff --git a/lld/test/MachO/lto-weak-ref.ll b/lld/test/MachO/lto-weak-ref.ll
new file mode 100644
index 000000000000..b9dbd47dd415
--- /dev/null
+++ b/lld/test/MachO/lto-weak-ref.ll
@@ -0,0 +1,45 @@
+; REQUIRES: x86
+
+; RUN: rm -rf %t; split-file %s %t
+
+; RUN: llvm-mc -filetype=obj -triple=x86_64-apple-darwin %t/dylib.s -o %t/dylib.o
+; RUN: %lld -dylib -lSystem %t/dylib.o -o %t/dylib.dylib
+
+;; As baseline, compile the .ll file to a real .o file and check behavior.
+; RUN: llc -filetype=obj %t/weak-ref.ll -o %t/obj.o
+; RUN: %lld -dylib -lSystem %t/obj.o %t/dylib.dylib -o %t/test.obj
+; RUN: llvm-objdump --macho --syms %t/test.obj | FileCheck %s --check-prefixes=WEAK-REF
+
+;; Check that we get the same behavior compiling the .ll file to a bitcode .o
+;; file and linking that.
+; RUN: opt -module-summary %t/weak-ref.ll -o %t/bitcode.o
+; RUN: %lld -dylib -lSystem %t/bitcode.o %t/dylib.dylib -o %t/test.lto
+; RUN: llvm-objdump --macho --syms %t/test.lto | FileCheck %s --check-prefixes=WEAK-REF
+
+; WEAK-REF: SYMBOL TABLE:
+; WEAK-REF: w      *UND* _my_weak_extern_function
+
+;--- dylib.s
+
+.globl	_my_weak_extern_function
+_my_weak_extern_function:
+  ret
+
+;--- weak-ref.ll
+target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+target triple = "x86_64-apple-macosx10.15.0"
+
+declare extern_weak void @my_weak_extern_function()
+
+; Function Attrs: noinline nounwind optnone ssp uwtable
+define i32 @bar(i1 zeroext %0) {
+entry:
+  br i1 %0, label %if.then, label %if.end
+
+if.then:                                          ; preds = %entry
+  call void @my_weak_extern_function()
+  br label %if.end
+
+if.end:                                           ; preds = %if.then, %entry
+  ret i32 0
+}
-- 
2.34.0.1.g4c8d2d0e3e

