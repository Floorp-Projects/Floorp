Task Kinds
==========

This section lists and documents the available task kinds.

build
-----

Builds are tasks that produce an installer or other output that can be run by
users or automated tests.  This is more restrictive than most definitions of
"build" in a Mozilla context: it does not include tasks that run build-like
actions for static analysis or to produce instrumented artifacts.

build-fat-aar
-------------

Build architecture-independent GeckoView AAR (Android ARchive) files. This build-like tasks is an
artifact build (ARMv7, but this is arbitrary) that itself depends on arch-specific Android build
jobs. It fetches arch-specific AAR files, extracts arch-specific libraries and preference files,
and then assembles a multi-architecture "fat AAR". Downstream consumers are expected to use
per-ABI feature splits to produce arch-specific APKs.

If you want to run this task locally, you need to specify these environment variable:
  - MOZ_ANDROID_FAT_AAR_ARCHITECTURES: must be a comma-separated list of architecture.
    Eg: "armeabi-v7a,arm64-v8a,x86,x86_64".
  - each of MOZ_ANDROID_FAT_AAR_ARM64_V8A, MOZ_ANDROID_FAT_AAR_ARMEABI_V7A,
    MOZ_ANDROID_FAT_AAR_X86, MOZ_ANDROID_FAT_AAR_X86_64 must be a path relative to
    MOZ_FETCHES_DIR.

build-signing
-------------

Many builds must be signed. The build-signing task takes the unsigned `build`
kind artifacts and passes them through signingscriptworker to a signing server
and returns signed results.

For mac notarization, we download the signed bits that have been notarized by Apple, and we staple the notarization to the app and pkg.

build-notarization-part-1
-------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the first task, which signs the files and submits them for notarization.

build-notarization-poller
-------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the second task, which polls Apple for notarization status. Because this is run in a separate, special notarization poller pool, we free up the mac notarization pool for actual signing work.

artifact-build
--------------

This kind performs an artifact build: one based on precompiled binaries
discovered via the TaskCluster index.  This task verifies that such builds
continue to work correctly.

hazard
------

Hazard builds are similar to "regular' builds, but use a compiler extension to
extract a bunch of data from the build and then analyze that data looking for
hazardous behaviors.

l10n
----

The l10n kind takes the last published nightly build, and generates localized builds
from it. You can read more about how to trigger these on the `wiki
<https://wiki.mozilla.org/ReleaseEngineering/TryServer#Desktop_l10n_jobs_.28on_Taskcluster.29>`_.

shippable-l10n
--------------

The nightly l10n kind repacks a specific nightly build (from the same source code)
in order to provide localized versions of the same source.

shippable-l10n-signing
----------------------

The shippable l10n signing kind takes artifacts from the shippable-l10n kind and
passes them to signing servers to have their contents signed appropriately, based
on an appropriate signing format. One signing job is created for each shippable-l10n
job (usually chunked).

For mac notarization, we download the signed bits that have been notarized by Apple, and we staple the notarization to the app and pkg.

shippable-l10n-notarization-part-1
----------------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the first task, which signs the files and submits them for notarization.

shippable-l10n-notarization-poller
----------------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the second task, which polls Apple for notarization status. Because this is run in a separate, special notarization poller pool, we free up the mac notarization pool for actual signing work.

source-test
-----------

Source-tests are tasks that run directly from the Gecko source. This can include linting,
unit tests, source-code analysis, or measurement work. While source-test tasks run from
a source checkout, it is still possible for them to depend on a build artifact, though
often they do not.

code-review
-----------

Publish issues found by source-test tasks on Phabricator.
This is a part of Release Management code review Bot.

upload-symbols
--------------

Upload-symbols tasks run after builds and upload the symbols files generated by
build tasks to Socorro for later use in crash analysis.

upload-generated-sources
------------------------

Upload-generated-sources tasks run after builds and upload source files that were generated as part of the build process to an s3 bucket for later use in links from crash reports or when debugging shipped builds.

valgrind
--------

Valgrind tasks produce builds instrumented by valgrind.

searchfox
---------

Searchfox builds generate C++ index data for Searchfox.

static-analysis-autotest
------------------------

Static analysis autotest utility in order to be sure that there is no regression
when upgrading utilities that impact static-analysis.

toolchain
---------

Toolchain builds create the compiler toolchains used to build Firefox.  These
will eventually be dependencies of the builds themselves, but for the moment
are run manually via try pushes and the results uploaded to tooltool.

spidermonkey
------------

Spidermonkey tasks check out the full gecko source tree, then compile only the
spidermonkey portion.  Each task runs specific tests after the build.

test
----

See the :doc:`test kind documentation <kinds/test>` for more info.

.. toctree::
   :hidden:

   kinds/test


docker-image
------------

Tasks of the ``docker-image`` kind build the Docker images in which other
Docker tasks run.

The tasks to generate each docker image have predictable labels:
``docker-image-<name>``.

Docker images are built from subdirectories of ``taskcluster/docker``, using
``docker build``.  There is currently no capability for one Docker image to
depend on another in-tree docker image, without uploading the latter to a
Docker repository.

balrog
------

Balrog tasks are responsible for submitting metadata to our update server (Balrog).
They are typically downstream of a beetmover job that moves signed MARs somewhere
(eg: beetmover and beetmover-l10n for releases, beetmover-repackage for nightlies).

beetmover
---------

Beetmover, takes specific artifacts, "Beets", and pushes them to a location outside
of Taskcluster's task artifacts, (archive.mozilla.org as one place) and in the
process determines the final location and a "pretty" name (versioned product name)

beetmover-l10n
--------------

Beetmover L10n, takes specific artifacts, "Beets", and pushes them to a location outside
of Taskcluster's task artifacts, (archive.mozilla.org as one place) and in the
process determines the final location and a "pretty" name (versioned product name)
This separate kind uses logic specific to localized artifacts, such as including
the language in the final artifact names.

beetmover-repackage
-------------------

Beetmover-repackage is beetmover but for tasks that need an intermediate step
between signing and packaging, such as OSX. For more details see the definitions
of the Beetmover kind above and the repackage kind below.

release-beetmover-push-to-release
---------------------------------

release-beetmover-push-to-release publishes promoted releases from the
candidates directory to the release directory. This is part of release
promotion.

beetmover-snap
--------------
Beetmover-source publishes Ubuntu's snap. This is part of release promotion.

beetmover-source
----------------
Beetmover-source publishes release source. This is part of release promotion.

beetmover-geckoview
-------------------
Beetmover-geckoview publishes the Android library called "geckoview".

condprof
--------
condprof creates and updates realistic profiles.

release-source-checksums-signing
--------------------------------
release-source-checksums-signing take as input the checksums file generated by
source-related beetmover task and sign it via the signing scriptworkers.
Returns the same file signed and additional detached signature.

beetmover-checksums
-------------------
Beetmover, takes specific artifact checksums and pushes it to a location outside
of Taskcluster's task artifacts (archive.mozilla.org as one place) and in the
process determines the final location and "pretty" names it (version product name)

release-beetmover-source-checksums
----------------------------------
Beetmover, takes source specific artifact checksums and pushes it to a location outside
of Taskcluster's task artifacts (archive.mozilla.org as one place) and in the
process determines the final location and "pretty" names it (version product name)

perftest
--------
Runs performance tests using mozperftest.

release-balrog-submit-toplevel
------------------------------
Toplevel tasks are responsible for submitting metadata to Balrog that is not specific to any
particular platform+locale. For example: fileUrl templates, versions, and platform aliases.

Toplevel tasks are also responsible for updating test channel rules to point at the Release
being generated.

release-secondary-balrog-submit-toplevel
----------------------------------------
Performs the same function as `release-balrog-submit-toplevel`, but against the beta channel
during RC builds.

release-balrog-scheduling
-------------------------
Schedules a Release for shipping in Balrog. If a `release_eta` was provided when starting the Release,
it will be scheduled to go live at that day and time.

release-secondary-balrog-scheduling
-----------------------------------
Performs the same function as `release-balrog-scheduling`, except for the beta channel as part of RC
Releases.

release-binary-transparency
---------------------------
Binary transparency creates a publicly verifiable log of binary shas for downstream
release auditing. https://wiki.mozilla.org/Security/Binary_Transparency

release-snap-repackage
----------------------
Generate an installer using Ubuntu's Snap format.

release-flatpak-repackage
-------------------------
Generate an installer using Flathub's Flatpak format.

release-flatpak-push
--------------------
Pushes Flatpak repackage on Flathub

release-secondary-flatpak-push
------------------------------
Performs the same function as `release-flatpak-push`, except for the beta channel as part of RC
Releases.

release-notify-av-announce
--------------------------
Notify anti-virus vendors when a release is likely shipping.

release-notify-push
-------------------
Notify when a release has been pushed to CDNs.

release-notify-ship
-------------------
Notify when a release has been shipped.

release-secondary-notify-ship
-----------------------------
Notify when an RC release has been shipped to the beta channel.

release-notify-promote
----------------------
Notify when a release has been promoted.

release-notify-started
----------------------
Notify when a release has been started.

release-bouncer-sub
-------------------
Submits bouncer information for releases.

release-mark-as-shipped
-----------------------
Marks releases as shipped in Ship-It v1

release-bouncer-aliases
-----------------------
Update Bouncer's (download.mozilla.org) "latest" aliases.

cron-bouncer-check
------------------
Checks Bouncer (download.mozilla.org) uptake.

bouncer-locations
-----------------
Updates nightly bouncer locations for version bump.

release-bouncer-check
---------------------
Checks Bouncer (download.mozilla.org) uptake as part of the release tasks.

release-generate-checksums
--------------------------
Generate the per-release checksums along with the summaries

release-generate-checksums-signing
----------------------------------
Sign the pre-release checksums produced by the above task

release-generate-checksums-beetmover
------------------------------------
Submit to S3 the artifacts produced by the release-checksums task and its signing counterpart.

release-final-verify
--------------------
Verifies the contents and package of release update MARs.

release-secondary-final-verify
------------------------------
Verifies the contents and package of release update MARs for RC releases.

release-push-langpacks
-------------------------------
Publishes language packs onto addons.mozilla.org.

release-beetmover-signed-langpacks
----------------------------------
Publishes signed langpacks to archive.mozilla.org

release-beetmover-signed-langpacks-checksums
--------------------------------------------
Publishes signed langpacks to archive.mozilla.org

release-update-verify
---------------------
Verifies the contents and package of release update MARs.
release-secondary-update-verify
-------------------------------
Verifies the contents and package of release update MARs.

release-update-verify-next
--------------------------
Verifies the contents and package of release and updare MARs from the previous ESR release.

release-update-verify-config
----------------------------
Creates configs for release-update-verify tasks

release-secondary-update-verify-config
--------------------------------------
Creates configs for release-secondary-update-verify tasks

release-update-verify-config-next
---------------------------------
Creates configs for release-update-verify-next tasks

release-updates-builder
-----------------------
Top level Balrog blob submission & patcher/update verify config updates.

release-version-bump
--------------------
Bumps to the next version.

release-source
--------------
Generates source for the release

release-source-signing
----------------------
Signs source for the release

release-partner-repack
----------------------
Generates customized versions of releases for partners.

release-partner-attribution
---------------------------
Generates attributed versions of releases for partners.

release-partner-repack-chunking-dummy
-------------------------------------
Chunks the partner repacks by locale.

release-partner-repack-signing
------------------------------
Internal signing of partner repacks.

For mac notarization, we download the signed bits that have been notarized by Apple, and we staple the notarization to the app and pkg.

release-partner-repack-notarization-part-1
------------------------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the first task, which signs the files and submits them for notarization.

release-partner-repack-notarization-poller
------------------------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the second task, which polls Apple for notarization status. Because this is run in a separate, special notarization poller pool, we free up the mac notarization pool for actual signing work.

release-partner-repack-repackage
--------------------------------
Repackaging of partner repacks.

release-partner-repack-repackage-signing
----------------------------------------
External signing of partner repacks.

release-partner-repack-beetmover
--------------------------------
Moves the partner repacks to S3 buckets.

release-partner-attribution-beetmover
-------------------------------------
Moves the partner attributions to S3 buckets.

release-partner-repack-bouncer-sub
----------------------------------
Sets up bouncer products for partners.

release-early-tagging
---------------------
Utilises treescript to perform tagging that should happen near the start of a release.

release-eme-free-repack
-----------------------
Generates customized versions of releases for eme-free repacks.

release-eme-free-repack-signing
-------------------------------
Internal signing of eme-free repacks

For mac notarization, we download the signed bits that have been notarized by Apple, and we staple the notarization to the app and pkg.

release-eme-free-repack-notarization-part-1
-------------------------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the first task, which signs the files and submits them for notarization.

release-eme-free-repack-notarization-poller
-------------------------------------------

We switched to a 3-part mac notarization workflow in bug 1562412. This is the second task, which polls Apple for notarization status. Because this is run in a separate, special notarization poller pool, we free up the mac notarization pool for actual signing work.

release-eme-free-repack-repackage
---------------------------------
Repackaging of eme-free repacks.

release-eme-free-repack-repackage-signing
-----------------------------------------
External signing of eme-free repacks.

release-eme-free-repack-beetmover
---------------------------------
Moves the eme-free repacks to S3 buckets.

release-eme-free-repack-beetmover-checksums
-------------------------------------------
Moves the beetmover checksum for eme-free repacks to S3 buckets.

repackage
---------
Repackage tasks take a signed output and package them up into something suitable
for shipping to our users. For example, on OSX we return a tarball as the signed output
and this task would package that up as an Apple Disk Image (.dmg)

repackage-l10n
--------------
Repackage-L10n is a ```Repackage``` task split up to be suitable for use after l10n repacks.


repackage-signing
-----------------
Repackage-signing take the repackaged installers (windows) and signs them.

repackage-signing-l10n
----------------------
Repackage-signing-l10n take the repackaged installers (windows) and signs them for localized versions.

mar-signing
-----------
Mar-signing takes the complete update MARs and signs them.

mar-signing-l10n
----------------
Mar-signing-l10n takes the complete update MARs and signs them for localized versions.

mar-signing-autograph-stage
---------------------------
These tasks are only to test autograph-stage, when the autograph team asks for their staging environment to be tested.

repackage-msi
-------------
Repackage-msi takes the signed full installer and produces an msi installer (that wraps the full installer)
Using the ```./mach repackage``` command

repackage-signing-msi
---------------------
Repackage-signing-msi takes the repackaged msi installers and signs them.

repackage-msix
--------------
Repackage-msix takes a (possibly unsigned) package and produces a Windows MSIX package containing no langpacks using the
```./mach repackage``` command.

These tasks are supposed intended for rapid iteration in ```try```.

repackage-shippable-l10n-msix
-----------------------------
Repackage-msix takes a signed package and a list of signed langpacks and produces a Windows MSIX package using the
```./mach repackage``` command.

The signed langpacks are produced on Linux, since langpacks are platform agnostic.

These tasks are for releases; they are complete, and therefore slower, and not intended for rapid iteration in
```try```.

repackage-signing-msix
----------------------
Repackage-signing-msix takes Windows MSIX packages produced in ```repackage-msix``` and signs them.

repackage-signing-shippable-l10n-msix
-------------------------------------
Repackage-signing-shippable-l10n-msix takes Windows MSIX packages produced in
```repackage-signing-shippable-l10n-msix``` and signs them.

repo-update
-----------
Repo-Update tasks are tasks that perform some action on the project repo itself,
in order to update its state in some way.

partials
--------
Partials takes the complete.mar files produced in previous tasks and generates partial
updates between previous nightly releases and the new one. Requires a release_history
in the parameters. See ``mach release-history`` if doing this manually.

partials-signing
----------------
Partials-signing takes the partial updates produced in Partials and signs them.

post-balrog-dummy
-----------------
Dummy tasks to consolidate balrog dependencies to avoid taskcluster limits on number of dependencies per task.

post-beetmover-dummy
--------------------
Dummy tasks to consolidate beetmover dependencies to avoid taskcluster limits on number of dependencies per task.

post-beetmover-checksums-dummy
------------------------------
Dummy tasks to consolidate beetmover-checksums dependencies to avoid taskcluster limits on number of dependencies per task.

post-langpack-dummy
-------------------
Dummy tasks to consolidate language pack beetmover dependencies to avoid taskcluster limits on number of dependencies per task.

post-update-verify-dummy
------------------------
Dummy tasks to consolidate update verify dependencies to avoid taskcluster limits on number of dependencies per task.

fetch
-----
Tasks that obtain something from a remote service and re-expose it as a
task artifact. These tasks are used to effectively cache and re-host
remote content so it is reliably and deterministically available.

packages
--------
Tasks used to build packages for use in docker images.

diffoscope
----------
Tasks used to compare pairs of Firefox builds using https://diffoscope.org/.
As of writing, this is mainly meant to be used in try builds, by editing
taskcluster/ci/diffoscope/kind.yml for your needs.

addon
-----
Tasks used to build/package add-ons.

openh264-plugin
---------------
Tasks used to build the openh264 plugin.

openh264-signing
----------------
Signing for the openh264 plugin.

webrender
---------
Tasks used to do testing of WebRender standalone (without gecko). The
WebRender code lives in gfx/wr and has its own testing infrastructure.

github-sync
------------
Tasks used to do synchronize parts of Gecko that have downstream GitHub
repositories.

instrumented-build
------------------
Tasks that generate builds with PGO instrumentation enabled. This is an
intermediate build that can be used to generate profiling information for a
final PGO build. This is the 1st stage of the full 3-step PGO process.

generate-profile
----------------
Tasks that take a build configured for PGO and run the binary against a sample
set to generate profile data. This is the 2nd stage of the full 3-step PGO
process.

geckodriver-signing
-------------------
Signing for geckodriver binary.

visual-metrics
--------------
Tasks that compute visual performance metrics from videos and images captured
by other tasks.

visual-metrics-dep
------------------
Tasks that compute visual performance metrics from videos and images captured
by another task that produces a jobs.json artifact

iris
----
Iris testing suite

maybe-release
-------------
A shipitscript task that does the following:

1. Checks if automated releases are disabled
2. Checks if the changes between the current revision and the previous releases
   revision are considered "worthwhile" for a new release.
3. Triggers the release via ship-it, which will then create an action task.

l10n-bump
---------
Cron-driven tasks that bump l10n-changesets files in-tree, using data from the l10n dashboard.

merge-automation
----------------
Hook-driven tasks that automate "Merge Day" tasks during the release cycle.

sentry
------
Interact with Sentry, such as by publishing new project releases.

system-symbols
--------------
Generate missing macOS and windows system symbols from crash reports.

system-symbols-upload
---------------------
Upload macOS and windows system symbols to tecken.

scriptworker-canary
-------------------
Push tasks to try to test new scriptworker deployments.

updatebot
------------------
Check for updates to (supported) third party libraries, and manage their lifecycle.

fuzzing
-------

Performs fuzzing smoke tests

startup-test
------------

Runs Firefox for a short period of time to see if it crashes

l10n-cross-channel
------------------

Compiles a set of en-US strings from all shipping release trains and pushes to
the quarantine strings repo.

fxrecord
--------

Visual metrics computation of desktop Firefox startup. The performance team
monitors this task to watch for regressions in Firefox startup performance.
