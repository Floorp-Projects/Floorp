[parsing-internal.https.html]
  [Relative URL scope keys should work with /s, ?s, and #s]
    expected: FAIL

  [Mismatching scopes schema: should throw if a scope's value is not an object: array]
    expected: FAIL

  [Mismatching the top-level schema: should throw if scopes is a non-object: string]
    expected: FAIL

  [Failing addresses: mismatched trailing slashes]
    expected: FAIL

  [Mismatching the top-level schema: should throw for top-level non-objects: boolean]
    expected: FAIL

  [Relative URL-like addresses: should ignore percent-encoded variants of ./, ../, or /]
    expected: FAIL

  [Relative URL specifier keys should absolutize strings prefixed with ./, ../, or / into the corresponding URLs]
    expected: FAIL

  [Relative URL specifier keys should work with /s, ?s, and #s]
    expected: FAIL

  [Absolute URL specifier keys should accept all absolute URL specifier keys, with or without fetch schemes]
    expected: FAIL

  [Relative URL specifier keys should ignore an empty string key]
    expected: FAIL

  [Mismatching the top-level schema: should throw for top-level non-objects: array]
    expected: FAIL

  [Mismatching the top-level schema: should throw if imports is a non-object: string]
    expected: FAIL

  [Specifier keys should be sort correctly (issue #181) - Test #1]
    expected: FAIL

  [Specifier keys should be sort correctly (issue #181) - Test #2]
    expected: FAIL

  [Mismatching scopes schema: should throw if a scope's value is not an object: string]
    expected: FAIL

  [Normalization: should normalize an import map without imports to have imports]
    expected: FAIL

  [Mismatching the specifier map schema: should ignore entries where the specifier key is an empty string]
    expected: FAIL

  [Relative URL specifier keys should deduplicate based on URL parsing rules]
    expected: FAIL

  [Relative URL specifier keys should treat percent-encoded variants of ./, ../, or / as bare specifiers]
    expected: FAIL

  [Mismatching the top-level schema: should throw if scopes is a non-object: number]
    expected: FAIL

  [Mismatching the top-level schema: should ignore unspecified top-level entries]
    expected: FAIL

  [Mismatching the top-level schema: should throw if imports is a non-object: null]
    expected: FAIL

  [Mismatching scopes schema: should throw if a scope's value is not an object: null]
    expected: FAIL

  [Relative URL scope keys should work with no prefix]
    expected: FAIL

  [Mismatching the top-level schema: should throw if imports is a non-object: boolean]
    expected: FAIL

  [Invalid JSON]
    expected: FAIL

  [Other invalid addresses: should ignore unprefixed strings that are not absolute URLs]
    expected: FAIL

  [Normalization: should normalize an import map without scopes to have scopes]
    expected: FAIL

  [Mismatching the top-level schema: should throw if imports is a non-object: number]
    expected: FAIL

  [Relative URL scope keys should deduplicate based on URL parsing rules]
    expected: FAIL

  [Relative URL scope keys should work with ./, ../, and / prefixes]
    expected: FAIL

  [Normalization: should normalize empty import maps to have imports and scopes keys]
    expected: FAIL

  [Mismatching the top-level schema: should throw if imports is a non-object: array]
    expected: FAIL

  [Relative URL specifier keys should not absolutize strings prefixed with ./, ../, or / with a data: URL base]
    expected: FAIL

  [Mismatching the top-level schema: should throw if scopes is a non-object: array]
    expected: FAIL

  [Mismatching the top-level schema: should throw for top-level non-objects: string]
    expected: FAIL

  [Relative URL scope keys should work with ./, ../, or / with no suffix]
    expected: FAIL

  [Relative URL scope keys should work with / suffixes]
    expected: FAIL

  [Relative URL scope keys should work with an empty string scope key]
    expected: FAIL

  [Mismatching scopes schema: should throw if a scope's value is not an object: boolean]
    expected: FAIL

  [Mismatching the top-level schema: should throw if scopes is a non-object: boolean]
    expected: FAIL

  [Relative URL-like addresses: should accept strings prefixed with ./, ../, or /]
    expected: FAIL

  [Absolute URL scope keys should ignore relative URL scope keys when the base URL is a data: URL]
    expected: FAIL

  [Absolute URL scope keys should accept all absolute URL scope keys, with or without fetch schemes]
    expected: FAIL

  [Mismatching the top-level schema: should throw if scopes is a non-object: null]
    expected: FAIL

  [Absolute URL scope keys should parse absolute URL scope keys, ignoring unparseable ones]
    expected: FAIL

  [Relative URL specifier keys should absolutize the literal strings ./, ../, or / with no suffix]
    expected: FAIL

  [Mismatching the top-level schema: should throw for top-level non-objects: null]
    expected: FAIL

  [Relative URL-like addresses: should accept the literal strings ./, ../, or / with no suffix]
    expected: FAIL

  [Mismatching the specifier map schema: should ignore entries where the address is not a string]
    expected: FAIL

  [Absolute URL addresses: should parse absolute URLs, ignoring unparseable ones]
    expected: FAIL

  [Mismatching the top-level schema: should throw for top-level non-objects: number]
    expected: FAIL

  [Absolute URL specifier keys should parse absolute URLs, treating unparseable ones as bare specifiers]
    expected: FAIL

  [Absolute URL addresses: should only accept absolute URL addresses with fetch schemes]
    expected: FAIL

  [Relative URL-like addresses: should not accept strings prefixed with ./, ../, or / for data: base URLs]
    expected: FAIL

  [Mismatching scopes schema: should throw if a scope's value is not an object: number]
    expected: FAIL

