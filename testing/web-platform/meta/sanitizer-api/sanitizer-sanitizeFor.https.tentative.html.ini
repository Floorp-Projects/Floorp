[sanitizer-sanitizeFor.https.tentative.html]
  [Sanitizer.sanitizeFor(element, ..)]
    expected: FAIL

  [Sanitizer.sanitizeFor("template", "<em>Hello</em>") obeys parse context.]
    expected: FAIL

  [Sanitizer.sanitizeFor("template", "<td>data</td>") obeys parse context.]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: string]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: html fragment]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: empty object]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: number]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: zeros]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: arithmetic]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: undefined]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: document]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: html without close tag]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: onclick scripts]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: plaintext]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: xmp]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: invalid config_input]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: empty dropElements list]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: test html without close tag with dropElements list ['div'\]]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: default behavior for custom elements]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allow custom elements]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allow custom elements with allow elements]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: disallow custom elements]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allow custom elements with drop list contains ["custom-element"\]]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropElements list ["test-element", "i"\]}]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropElements list ["I", "DL"\]}]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropElements list ["dl", "p"\]}]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropElements list with invalid values]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: blockElements list with invalid values]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allowElements list ["p"\]]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allowElements list ["p", "test"\]]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allowElements list has no influence to dropElements]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropAttributes list {"style": ["p"\]} with style attribute]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropAttributes list {"*": ["a"\]} with style attribute]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: empty dropAttributes list with id attribute]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropAttributes list {"id": ["*"\]} with id attribute]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropAttributes list {"ID": ["*"\]} with id attribute]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: dropAttributes list {"data-attribute-with-dashes": ["*"\]} with dom dataset js access]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allowAttributes list {"id": ["div"\]} with id attribute]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allowAttributes list {"id": ["*"\]} with id attribute and onclick scripts]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allowAttributes list {"*": ["a"\]} with style attribute]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: allowAttributes list has no influence to dropAttributes]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: Template element]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLAnchorElement with javascript protocal]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLAnchorElement with javascript protocal start with space]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLAnchorElement]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLAreaElement with javascript protocal]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLAreaElement with javascript protocal start with space]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLAreaElement]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLFormElement with javascript action]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLFormElement with javascript action start with space]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLFormElement]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLInputElement with javascript formaction]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLInputElement with javascript formaction start with space]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLInputElement]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLButtonElement with javascript formaction]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLButtonElement with javascript formaction start with space]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTMLButtonElement]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: malformed HTML]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTML with comments; comments not allowed]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTML with comments; allowComments]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTML with comments; !allowComments]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTML with comments deeper in the tree]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTML with comments deeper in the tree, allowComments]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: HTML with comments deeper in the tree, !allowComments]
    expected: FAIL

  [Sanitizer.sanitizeFor("script", ...) should fail.]
    expected:
      if (os == "mac") and not debug: [PASS, FAIL]

  [Sanitizer.sanitizeFor("object", ...) should fail.]
    expected:
      if (os == "mac") and not debug: [PASS, FAIL]

  [Sanitizer.sanitizeFor("iframe", ...) should fail.]
    expected:
      if (os == "mac") and not debug: [PASS, FAIL]

  [Sanitizer.sanitizeFor with config: script not as root]
    expected: FAIL

  [Sanitizer.sanitizeFor with config: script deeper in the tree]
    expected: FAIL
