[cache-match.https.html]
  expected:
    if (os == "win") and not debug and not fission and (processor == "x86_64"): [OK, TIMEOUT]
  [Cache.match with Request]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, TIMEOUT]

  [Cache.match with multiple cache hits]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with new Request]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with HEAD]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with ignoreSearch option (request with no search parameters)]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with ignoreSearch option (request with search parameter)]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match supports ignoreMethod]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match supports ignoreVary]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match does not support cacheName option]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with URL containing fragment]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with string fragment "http" as query]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with responses containing "Vary" header]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with Request and Response objects with different URLs]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match invoked multiple times for the same Request/Response]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match blob should be sliceable]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with POST Request]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache.match with a non-2xx Response]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, TIMEOUT, NOTRUN]

  [Cache.match with a network error Response]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [Cache produces large Responses that can be cloned and read correctly.]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [cors-exposed header should be stored correctly.]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [MIME type should be set from content-header correctly.]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]

  [MIME type should reflect Content-Type headers of response.]
    expected:
      if (os == "win") and not debug and not fission and (processor == "x86_64"): [PASS, NOTRUN]
