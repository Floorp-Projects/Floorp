[strategies.any.html]
  [writableStrategy highWaterMark should work]
    expected: FAIL

  [readableStrategy highWaterMark should work]
    expected: FAIL

  [writable should have the correct size() function]
    expected: FAIL

  [default writable strategy should be equivalent to { highWaterMark: 1 }]
    expected: FAIL

  [default readable strategy should be equivalent to { highWaterMark: 0 }]
    expected: FAIL

  [a RangeError should be thrown for an invalid highWaterMark]
    expected: FAIL

  [writableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [readableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [a bad readableStrategy size function should cause writer.write() to reject on an identity transform]
    expected: FAIL

  [a bad readableStrategy size function should error the stream on enqueue even when transformer.transform() catches the exception]
    expected: FAIL


[strategies.any.serviceworker.html]
  [writableStrategy highWaterMark should work]
    expected: FAIL

  [readableStrategy highWaterMark should work]
    expected: FAIL

  [writable should have the correct size() function]
    expected: FAIL

  [default writable strategy should be equivalent to { highWaterMark: 1 }]
    expected: FAIL

  [default readable strategy should be equivalent to { highWaterMark: 0 }]
    expected: FAIL

  [a RangeError should be thrown for an invalid highWaterMark]
    expected: FAIL

  [writableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [readableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [a bad readableStrategy size function should cause writer.write() to reject on an identity transform]
    expected: FAIL

  [a bad readableStrategy size function should error the stream on enqueue even when transformer.transform() catches the exception]
    expected: FAIL


[strategies.any.sharedworker.html]
  [writableStrategy highWaterMark should work]
    expected: FAIL

  [readableStrategy highWaterMark should work]
    expected: FAIL

  [writable should have the correct size() function]
    expected: FAIL

  [default writable strategy should be equivalent to { highWaterMark: 1 }]
    expected: FAIL

  [default readable strategy should be equivalent to { highWaterMark: 0 }]
    expected: FAIL

  [a RangeError should be thrown for an invalid highWaterMark]
    expected: FAIL

  [writableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [readableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [a bad readableStrategy size function should cause writer.write() to reject on an identity transform]
    expected: FAIL

  [a bad readableStrategy size function should error the stream on enqueue even when transformer.transform() catches the exception]
    expected: FAIL


[strategies.any.worker.html]
  [writableStrategy highWaterMark should work]
    expected: FAIL

  [readableStrategy highWaterMark should work]
    expected: FAIL

  [writable should have the correct size() function]
    expected: FAIL

  [default writable strategy should be equivalent to { highWaterMark: 1 }]
    expected: FAIL

  [default readable strategy should be equivalent to { highWaterMark: 0 }]
    expected: FAIL

  [a RangeError should be thrown for an invalid highWaterMark]
    expected: FAIL

  [writableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [readableStrategy highWaterMark should be converted to a number]
    expected: FAIL

  [a bad readableStrategy size function should cause writer.write() to reject on an identity transform]
    expected: FAIL

  [a bad readableStrategy size function should error the stream on enqueue even when transformer.transform() catches the exception]
    expected: FAIL
