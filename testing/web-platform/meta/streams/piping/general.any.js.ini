[general.any.html]
  [Piping must lock both the ReadableStream and WritableStream]
    expected: FAIL

  [Piping finishing must unlock both the ReadableStream and WritableStream]
    expected: FAIL

  [pipeTo must check the brand of its ReadableStream this value]
    expected: FAIL

  [pipeTo must check the brand of its WritableStream argument]
    expected: FAIL

  [pipeTo must fail if the ReadableStream is locked, and not lock the WritableStream]
    expected: FAIL

  [pipeTo must fail if the WritableStream is locked, and not lock the ReadableStream]
    expected: FAIL

  [Piping from a ReadableStream from which lots of chunks are synchronously readable]
    expected: FAIL

  [Piping from a ReadableStream for which a chunk becomes asynchronously readable after the pipeTo]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is true]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is false]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is true]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is false]
    expected: FAIL

  [pipeTo() should reject if an option getter grabs a writer]
    expected: FAIL

  [pipeTo() promise should resolve if null is passed]
    expected: FAIL


[general.any.serviceworker.html]
  [Piping must lock both the ReadableStream and WritableStream]
    expected: FAIL

  [Piping finishing must unlock both the ReadableStream and WritableStream]
    expected: FAIL

  [pipeTo must check the brand of its ReadableStream this value]
    expected: FAIL

  [pipeTo must check the brand of its WritableStream argument]
    expected: FAIL

  [pipeTo must fail if the ReadableStream is locked, and not lock the WritableStream]
    expected: FAIL

  [pipeTo must fail if the WritableStream is locked, and not lock the ReadableStream]
    expected: FAIL

  [Piping from a ReadableStream from which lots of chunks are synchronously readable]
    expected: FAIL

  [Piping from a ReadableStream for which a chunk becomes asynchronously readable after the pipeTo]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is true]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is false]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is true]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is false]
    expected: FAIL

  [pipeTo() should reject if an option getter grabs a writer]
    expected: FAIL

  [pipeTo() promise should resolve if null is passed]
    expected: FAIL


[general.any.worker.html]
  [Piping must lock both the ReadableStream and WritableStream]
    expected: FAIL

  [Piping finishing must unlock both the ReadableStream and WritableStream]
    expected: FAIL

  [pipeTo must check the brand of its ReadableStream this value]
    expected: FAIL

  [pipeTo must check the brand of its WritableStream argument]
    expected: FAIL

  [pipeTo must fail if the ReadableStream is locked, and not lock the WritableStream]
    expected: FAIL

  [pipeTo must fail if the WritableStream is locked, and not lock the ReadableStream]
    expected: FAIL

  [Piping from a ReadableStream from which lots of chunks are synchronously readable]
    expected: FAIL

  [Piping from a ReadableStream for which a chunk becomes asynchronously readable after the pipeTo]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is true]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is false]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is true]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is false]
    expected: FAIL

  [pipeTo() should reject if an option getter grabs a writer]
    expected: FAIL

  [pipeTo() promise should resolve if null is passed]
    expected: FAIL


[general.any.sharedworker.html]
  [Piping must lock both the ReadableStream and WritableStream]
    expected: FAIL

  [Piping finishing must unlock both the ReadableStream and WritableStream]
    expected: FAIL

  [pipeTo must check the brand of its ReadableStream this value]
    expected: FAIL

  [pipeTo must check the brand of its WritableStream argument]
    expected: FAIL

  [pipeTo must fail if the ReadableStream is locked, and not lock the WritableStream]
    expected: FAIL

  [pipeTo must fail if the WritableStream is locked, and not lock the ReadableStream]
    expected: FAIL

  [Piping from a ReadableStream from which lots of chunks are synchronously readable]
    expected: FAIL

  [Piping from a ReadableStream for which a chunk becomes asynchronously readable after the pipeTo]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is true]
    expected: FAIL

  [an undefined rejection from pull should cause pipeTo() to reject when preventAbort is false]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is true]
    expected: FAIL

  [an undefined rejection from write should cause pipeTo() to reject when preventCancel is false]
    expected: FAIL

  [pipeTo() should reject if an option getter grabs a writer]
    expected: FAIL

  [pipeTo() promise should resolve if null is passed]
    expected: FAIL
