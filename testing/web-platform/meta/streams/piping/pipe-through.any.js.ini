[pipe-through.any.html]
  [Piping through a duck-typed pass-through transform stream should work]
    expected: FAIL

  [Piping through a transform errored on the writable end does not cause an unhandled promise rejection]
    expected: FAIL

  [pipeThrough should not call pipeTo on this]
    expected: FAIL

  [pipeThrough should not call pipeTo on the ReadableStream prototype]
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'ReadableStream']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '[object ReadableStream\]']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'WritableStream']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '[object WritableStream\]']
    expected: FAIL

  [pipeThrough should rethrow errors from accessing readable or writable]
    expected: FAIL

  [pipeThrough should accept a real AbortSignal]
    expected: FAIL

  [pipeThrough should not care if readable is locked]
    expected: FAIL

  [preventCancel should work]
    expected: FAIL

  [preventClose should work]
    expected: FAIL

  [preventAbort should work]
    expected: FAIL

  [pipeThrough() should not throw if option is null]
    expected: FAIL

  [pipeThrough() should not throw if signal is undefined]
    expected: FAIL

  [pipeThrough() should throw if readable/writable getters throw]
    expected: FAIL


[pipe-through.any.sharedworker.html]
  [Piping through a duck-typed pass-through transform stream should work]
    expected: FAIL

  [Piping through a transform errored on the writable end does not cause an unhandled promise rejection]
    expected: FAIL

  [pipeThrough should not call pipeTo on this]
    expected: FAIL

  [pipeThrough should not call pipeTo on the ReadableStream prototype]
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'ReadableStream']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '[object ReadableStream\]']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'WritableStream']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '[object WritableStream\]']
    expected: FAIL

  [pipeThrough should rethrow errors from accessing readable or writable]
    expected: FAIL

  [pipeThrough should accept a real AbortSignal]
    expected: FAIL

  [pipeThrough should not care if readable is locked]
    expected: FAIL

  [preventCancel should work]
    expected: FAIL

  [preventClose should work]
    expected: FAIL

  [preventAbort should work]
    expected: FAIL

  [pipeThrough() should not throw if option is null]
    expected: FAIL

  [pipeThrough() should not throw if signal is undefined]
    expected: FAIL

  [pipeThrough() should throw if readable/writable getters throw]
    expected: FAIL


[pipe-through.any.worker.html]
  [Piping through a duck-typed pass-through transform stream should work]
    expected: FAIL

  [Piping through a transform errored on the writable end does not cause an unhandled promise rejection]
    expected: FAIL

  [pipeThrough should not call pipeTo on this]
    expected: FAIL

  [pipeThrough should not call pipeTo on the ReadableStream prototype]
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'ReadableStream']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '[object ReadableStream\]']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'WritableStream']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '[object WritableStream\]']
    expected: FAIL

  [pipeThrough should rethrow errors from accessing readable or writable]
    expected: FAIL

  [pipeThrough should accept a real AbortSignal]
    expected: FAIL

  [pipeThrough should not care if readable is locked]
    expected: FAIL

  [preventCancel should work]
    expected: FAIL

  [preventClose should work]
    expected: FAIL

  [preventAbort should work]
    expected: FAIL

  [pipeThrough() should not throw if option is null]
    expected: FAIL

  [pipeThrough() should not throw if signal is undefined]
    expected: FAIL

  [pipeThrough() should throw if readable/writable getters throw]
    expected: FAIL


[pipe-through.any.serviceworker.html]
  [Piping through a duck-typed pass-through transform stream should work]
    expected: FAIL

  [Piping through a transform errored on the writable end does not cause an unhandled promise rejection]
    expected: FAIL

  [pipeThrough should not call pipeTo on this]
    expected: FAIL

  [pipeThrough should not call pipeTo on the ReadableStream prototype]
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check this and not allow 'ReadableStream']
    expected: FAIL

  [pipeThrough should brand-check this and not allow '[object ReadableStream\]']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'null']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'undefined']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '0']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'NaN']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'true']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow 'WritableStream']
    expected: FAIL

  [pipeThrough should brand-check writable and not allow '[object WritableStream\]']
    expected: FAIL

  [pipeThrough should rethrow errors from accessing readable or writable]
    expected: FAIL

  [pipeThrough should accept a real AbortSignal]
    expected: FAIL

  [pipeThrough should not care if readable is locked]
    expected: FAIL

  [preventCancel should work]
    expected: FAIL

  [preventClose should work]
    expected: FAIL

  [preventAbort should work]
    expected: FAIL

  [pipeThrough() should not throw if option is null]
    expected: FAIL

  [pipeThrough() should not throw if signal is undefined]
    expected: FAIL

  [pipeThrough() should throw if readable/writable getters throw]
    expected: FAIL
