{"version":3,"sources":["vendor/ember-cli/vendor-prefix.js","vendor/loader/loader.js","vendor/ember/jquery/jquery.js","license.js","loader.js","@glimmer/node.js","@glimmer/reference.js","@glimmer/runtime.js","@glimmer/util.js","@glimmer/wire-format.js","backburner.js","container.js","dag-map.js","ember-application/index.js","ember-application/initializers/dom-templates.js","ember-application/system/application-instance.js","ember-application/system/application.js","ember-application/system/engine-instance.js","ember-application/system/engine-parent.js","ember-application/system/engine.js","ember-application/system/resolver.js","ember-application/utils/validate-type.js","ember-babel.js","ember-console.js","ember-debug/deprecate.js","ember-debug/error.js","ember-debug/features.js","ember-debug/handlers.js","ember-debug/index.js","ember-debug/testing.js","ember-debug/warn.js","ember-environment.js","ember-extension-support/container_debug_adapter.js","ember-extension-support/data_adapter.js","ember-extension-support/index.js","ember-glimmer/component-managers/abstract.js","ember-glimmer/component-managers/curly.js","ember-glimmer/component-managers/mount.js","ember-glimmer/component-managers/outlet.js","ember-glimmer/component-managers/render.js","ember-glimmer/component-managers/root.js","ember-glimmer/component-managers/template-only.js","ember-glimmer/component.js","ember-glimmer/components/checkbox.js","ember-glimmer/components/link-to.js","ember-glimmer/components/text_area.js","ember-glimmer/components/text_field.js","ember-glimmer/dom.js","ember-glimmer/environment.js","ember-glimmer/helper.js","ember-glimmer/helpers/-class.js","ember-glimmer/helpers/-html-safe.js","ember-glimmer/helpers/-input-type.js","ember-glimmer/helpers/-normalize-class.js","ember-glimmer/helpers/action.js","ember-glimmer/helpers/component.js","ember-glimmer/helpers/concat.js","ember-glimmer/helpers/each-in.js","ember-glimmer/helpers/get.js","ember-glimmer/helpers/hash.js","ember-glimmer/helpers/if-unless.js","ember-glimmer/helpers/loc.js","ember-glimmer/helpers/log.js","ember-glimmer/helpers/mut.js","ember-glimmer/helpers/query-param.js","ember-glimmer/helpers/readonly.js","ember-glimmer/helpers/unbound.js","ember-glimmer/index.js","ember-glimmer/modifiers/action.js","ember-glimmer/protocol-for-url.js","ember-glimmer/renderer.js","ember-glimmer/setup-registry.js","ember-glimmer/syntax.js","ember-glimmer/syntax/-text-area.js","ember-glimmer/syntax/dynamic-component.js","ember-glimmer/syntax/input.js","ember-glimmer/syntax/mount.js","ember-glimmer/syntax/outlet.js","ember-glimmer/syntax/render.js","ember-glimmer/syntax/utils.js","ember-glimmer/template.js","ember-glimmer/template_registry.js","ember-glimmer/templates/component.js","ember-glimmer/templates/empty.js","ember-glimmer/templates/link-to.js","ember-glimmer/templates/outlet.js","ember-glimmer/templates/root.js","ember-glimmer/utils/bindings.js","ember-glimmer/utils/curly-component-state-bucket.js","ember-glimmer/utils/debug-stack.js","ember-glimmer/utils/iterable.js","ember-glimmer/utils/process-args.js","ember-glimmer/utils/references.js","ember-glimmer/utils/string.js","ember-glimmer/utils/to-bool.js","ember-glimmer/views/outlet.js","ember-metal.js","ember-routing/ext/controller.js","ember-routing/ext/run_loop.js","ember-routing/index.js","ember-routing/location/api.js","ember-routing/location/auto_location.js","ember-routing/location/hash_location.js","ember-routing/location/history_location.js","ember-routing/location/none_location.js","ember-routing/location/util.js","ember-routing/services/router.js","ember-routing/services/routing.js","ember-routing/system/cache.js","ember-routing/system/controller_for.js","ember-routing/system/dsl.js","ember-routing/system/generate_controller.js","ember-routing/system/query_params.js","ember-routing/system/route.js","ember-routing/system/router.js","ember-routing/system/router_state.js","ember-routing/utils.js","ember-runtime/compare.js","ember-runtime/computed/computed_macros.js","ember-runtime/computed/reduce_computed_macros.js","ember-runtime/controllers/controller.js","ember-runtime/copy.js","ember-runtime/ext/function.js","ember-runtime/ext/rsvp.js","ember-runtime/ext/string.js","ember-runtime/index.js","ember-runtime/inject.js","ember-runtime/is-equal.js","ember-runtime/mixins/-proxy.js","ember-runtime/mixins/action_handler.js","ember-runtime/mixins/array.js","ember-runtime/mixins/comparable.js","ember-runtime/mixins/container_proxy.js","ember-runtime/mixins/controller.js","ember-runtime/mixins/copyable.js","ember-runtime/mixins/enumerable.js","ember-runtime/mixins/evented.js","ember-runtime/mixins/mutable_array.js","ember-runtime/mixins/mutable_enumerable.js","ember-runtime/mixins/observable.js","ember-runtime/mixins/promise_proxy.js","ember-runtime/mixins/registry_proxy.js","ember-runtime/mixins/target_action_support.js","ember-runtime/string_registry.js","ember-runtime/system/application.js","ember-runtime/system/array_proxy.js","ember-runtime/system/core_object.js","ember-runtime/system/lazy_load.js","ember-runtime/system/namespace.js","ember-runtime/system/native_array.js","ember-runtime/system/object.js","ember-runtime/system/object_proxy.js","ember-runtime/system/service.js","ember-runtime/system/string.js","ember-runtime/utils.js","ember-template-compiler/compat.js","ember-template-compiler/index.js","ember-template-compiler/plugins/assert-input-helper-without-block.js","ember-template-compiler/plugins/assert-reserved-named-arguments.js","ember-template-compiler/plugins/deprecate-render-model.js","ember-template-compiler/plugins/deprecate-render.js","ember-template-compiler/plugins/extract-pragma-tag.js","ember-template-compiler/plugins/index.js","ember-template-compiler/plugins/transform-action-syntax.js","ember-template-compiler/plugins/transform-angle-bracket-components.js","ember-template-compiler/plugins/transform-attrs-into-args.js","ember-template-compiler/plugins/transform-dot-component-invocation.js","ember-template-compiler/plugins/transform-each-in-into-each.js","ember-template-compiler/plugins/transform-has-block-syntax.js","ember-template-compiler/plugins/transform-inline-link-to.js","ember-template-compiler/plugins/transform-input-type-syntax.js","ember-template-compiler/plugins/transform-old-binding-syntax.js","ember-template-compiler/plugins/transform-old-class-binding-syntax.js","ember-template-compiler/plugins/transform-quoted-bindings-into-just-bindings.js","ember-template-compiler/plugins/transform-top-level-components.js","ember-template-compiler/system/bootstrap.js","ember-template-compiler/system/calculate-location-display.js","ember-template-compiler/system/compile-options.js","ember-template-compiler/system/compile.js","ember-template-compiler/system/precompile.js","ember-testing/adapters/adapter.js","ember-testing/adapters/qunit.js","ember-testing/events.js","ember-testing/ext/application.js","ember-testing/ext/rsvp.js","ember-testing/helpers.js","ember-testing/helpers/and_then.js","ember-testing/helpers/click.js","ember-testing/helpers/current_path.js","ember-testing/helpers/current_route_name.js","ember-testing/helpers/current_url.js","ember-testing/helpers/fill_in.js","ember-testing/helpers/find.js","ember-testing/helpers/find_with_assert.js","ember-testing/helpers/key_event.js","ember-testing/helpers/pause_test.js","ember-testing/helpers/trigger_event.js","ember-testing/helpers/visit.js","ember-testing/helpers/wait.js","ember-testing/index.js","ember-testing/initializers.js","ember-testing/setup_for_testing.js","ember-testing/support.js","ember-testing/test.js","ember-testing/test/adapter.js","ember-testing/test/helpers.js","ember-testing/test/on_inject_helpers.js","ember-testing/test/pending_requests.js","ember-testing/test/promise.js","ember-testing/test/run.js","ember-testing/test/waiters.js","ember-utils.js","ember-views/compat/attrs.js","ember-views/compat/fallback-view-registry.js","ember-views/component_lookup.js","ember-views/index.js","ember-views/mixins/action_support.js","ember-views/mixins/child_views_support.js","ember-views/mixins/class_names_support.js","ember-views/mixins/text_support.js","ember-views/mixins/view_state_support.js","ember-views/mixins/view_support.js","ember-views/system/action_manager.js","ember-views/system/event_dispatcher.js","ember-views/system/ext.js","ember-views/system/jquery.js","ember-views/system/lookup_partial.js","ember-views/system/utils.js","ember-views/utils/lookup-component.js","ember-views/views/core_view.js","ember-views/views/states.js","ember-views/views/states/default.js","ember-views/views/states/destroying.js","ember-views/views/states/has_element.js","ember-views/views/states/in_dom.js","ember-views/views/states/pre_render.js","ember/features.js","ember/index.js","ember/version.js","handlebars.js","node-module.js","route-recognizer.js","router.js","rsvp.js","bootstrap","vendor/ember-cli-shims/deprecations.js","vendor/ember-cli-shims/app-shims.js","vendor/ember-resolver/legacy-shims.js","addon-tree-output/ember-ajax/-private/promise.js","addon-tree-output/ember-ajax/-private/utils/get-header.js","addon-tree-output/ember-ajax/-private/utils/is-fastboot.js","addon-tree-output/ember-ajax/-private/utils/is-string.js","addon-tree-output/ember-ajax/-private/utils/parse-response-headers.js","addon-tree-output/ember-ajax/-private/utils/url-helpers.js","addon-tree-output/ember-ajax/ajax-request.js","addon-tree-output/ember-ajax/errors.js","addon-tree-output/ember-ajax/index.js","addon-tree-output/ember-ajax/mixins/ajax-request.js","addon-tree-output/ember-ajax/mixins/ajax-support.js","addon-tree-output/ember-ajax/mixins/legacy/normalize-error-response.js","addon-tree-output/ember-ajax/raw.js","addon-tree-output/ember-ajax/request.js","addon-tree-output/ember-ajax/services/ajax.js","addon-tree-output/ember-ajax/utils/ajax.js","addon-tree-output/ember-cli-app-version/initializer-factory.js","addon-tree-output/ember-cli-app-version/utils/regexp.js","addon-tree-output/ember-inflector/index.js","addon-tree-output/ember-inflector/lib/ext/string.js","addon-tree-output/ember-inflector/lib/helpers/pluralize.js","addon-tree-output/ember-inflector/lib/helpers/singularize.js","addon-tree-output/ember-inflector/lib/system.js","addon-tree-output/ember-inflector/lib/system/inflections.js","addon-tree-output/ember-inflector/lib/system/inflector.js","addon-tree-output/ember-inflector/lib/system/string.js","addon-tree-output/ember-inflector/lib/utils/make-helper.js","addon-tree-output/ember-load-initializers/index.js","addon-tree-output/ember-resolver/features.js","addon-tree-output/ember-resolver/index.js","addon-tree-output/ember-resolver/resolver.js","addon-tree-output/ember-resolver/resolvers/classic/container-debug-adapter.js","addon-tree-output/ember-resolver/resolvers/classic/index.js","addon-tree-output/ember-resolver/utils/class-factory.js","addon-tree-output/ember-resolver/utils/make-dictionary.js","addon-tree-output/ember-welcome-page/components/welcome-page.js","addon-tree-output/ember-welcome-page/templates/components/welcome-page.js","addon-tree-output/modules/ember-data/-debug/index.js","addon-tree-output/modules/ember-data/-private.js","addon-tree-output/modules/ember-data/adapter.js","addon-tree-output/modules/ember-data/adapters/errors.js","addon-tree-output/modules/ember-data/adapters/json-api.js","addon-tree-output/modules/ember-data/adapters/rest.js","addon-tree-output/modules/ember-data/attr.js","addon-tree-output/modules/ember-data/index.js","addon-tree-output/modules/ember-data/initialize-store-service.js","addon-tree-output/modules/ember-data/model.js","addon-tree-output/modules/ember-data/relationships.js","addon-tree-output/modules/ember-data/serializer.js","addon-tree-output/modules/ember-data/serializers/embedded-records-mixin.js","addon-tree-output/modules/ember-data/serializers/json-api.js","addon-tree-output/modules/ember-data/serializers/json.js","addon-tree-output/modules/ember-data/serializers/rest.js","addon-tree-output/modules/ember-data/setup-container.js","addon-tree-output/modules/ember-data/store.js","addon-tree-output/modules/ember-data/transform.js","addon-tree-output/modules/ember-data/transforms/boolean.js","addon-tree-output/modules/ember-data/transforms/date.js","addon-tree-output/modules/ember-data/transforms/number.js","addon-tree-output/modules/ember-data/transforms/string.js","addon-tree-output/modules/ember-data/transforms/transform.js","addon-tree-output/modules/ember-data/version.js","vendor/ember-cli/vendor-suffix.js"],"sourcesContent":["window.EmberENV = {\"FEATURES\":{},\"EXTEND_PROTOTYPES\":{\"Date\":false}};\nvar runningTests = false;\n\n\n","var loader, define, requireModule, require, requirejs;\n\n(function (global) {\n  'use strict';\n\n  function dict() {\n    var obj = Object.create(null);\n    obj['__'] = undefined;\n    delete obj['__'];\n    return obj;\n  }\n\n  // Save off the original values of these globals, so we can restore them if someone asks us to\n  var oldGlobals = {\n    loader: loader,\n    define: define,\n    requireModule: requireModule,\n    require: require,\n    requirejs: requirejs\n  };\n\n  requirejs = require = requireModule = function (id) {\n    var pending = [];\n    var mod = findModule(id, '(require)', pending);\n\n    for (var i = pending.length - 1; i >= 0; i--) {\n      pending[i].exports();\n    }\n\n    return mod.module.exports;\n  };\n\n  loader = {\n    noConflict: function (aliases) {\n      var oldName, newName;\n\n      for (oldName in aliases) {\n        if (aliases.hasOwnProperty(oldName)) {\n          if (oldGlobals.hasOwnProperty(oldName)) {\n            newName = aliases[oldName];\n\n            global[newName] = global[oldName];\n            global[oldName] = oldGlobals[oldName];\n          }\n        }\n      }\n    },\n    // Option to enable or disable the generation of default exports\n    makeDefaultExport: true\n  };\n\n  var registry = dict();\n  var seen = dict();\n\n  var uuid = 0;\n\n  function unsupportedModule(length) {\n    throw new Error('an unsupported module was defined, expected `define(id, deps, module)` instead got: `' + length + '` arguments to define`');\n  }\n\n  var defaultDeps = ['require', 'exports', 'module'];\n\n  function Module(id, deps, callback, alias) {\n    this.uuid = uuid++;\n    this.id = id;\n    this.deps = !deps.length && callback.length ? defaultDeps : deps;\n    this.module = { exports: {} };\n    this.callback = callback;\n    this.hasExportsAsDep = false;\n    this.isAlias = alias;\n    this.reified = new Array(deps.length);\n\n    /*\n       Each module normally passes through these states, in order:\n         new       : initial state\n         pending   : this module is scheduled to be executed\n         reifying  : this module's dependencies are being executed\n         reified   : this module's dependencies finished executing successfully\n         errored   : this module's dependencies failed to execute\n         finalized : this module executed successfully\n     */\n    this.state = 'new';\n  }\n\n  Module.prototype.makeDefaultExport = function () {\n    var exports = this.module.exports;\n    if (exports !== null && (typeof exports === 'object' || typeof exports === 'function') && exports['default'] === undefined && Object.isExtensible(exports)) {\n      exports['default'] = exports;\n    }\n  };\n\n  Module.prototype.exports = function () {\n    // if finalized, there is no work to do. If reifying, there is a\n    // circular dependency so we must return our (partial) exports.\n    if (this.state === 'finalized' || this.state === 'reifying') {\n      return this.module.exports;\n    }\n\n\n    if (loader.wrapModules) {\n      this.callback = loader.wrapModules(this.id, this.callback);\n    }\n\n    this.reify();\n\n    var result = this.callback.apply(this, this.reified);\n    this.reified.length = 0;\n    this.state = 'finalized';\n\n    if (!(this.hasExportsAsDep && result === undefined)) {\n      this.module.exports = result;\n    }\n    if (loader.makeDefaultExport) {\n      this.makeDefaultExport();\n    }\n    return this.module.exports;\n  };\n\n  Module.prototype.unsee = function () {\n    this.state = 'new';\n    this.module = { exports: {} };\n  };\n\n  Module.prototype.reify = function () {\n    if (this.state === 'reified') {\n      return;\n    }\n    this.state = 'reifying';\n    try {\n      this.reified = this._reify();\n      this.state = 'reified';\n    } finally {\n      if (this.state === 'reifying') {\n        this.state = 'errored';\n      }\n    }\n  };\n\n  Module.prototype._reify = function () {\n    var reified = this.reified.slice();\n    for (var i = 0; i < reified.length; i++) {\n      var mod = reified[i];\n      reified[i] = mod.exports ? mod.exports : mod.module.exports();\n    }\n    return reified;\n  };\n\n  Module.prototype.findDeps = function (pending) {\n    if (this.state !== 'new') {\n      return;\n    }\n\n    this.state = 'pending';\n\n    var deps = this.deps;\n\n    for (var i = 0; i < deps.length; i++) {\n      var dep = deps[i];\n      var entry = this.reified[i] = { exports: undefined, module: undefined };\n      if (dep === 'exports') {\n        this.hasExportsAsDep = true;\n        entry.exports = this.module.exports;\n      } else if (dep === 'require') {\n        entry.exports = this.makeRequire();\n      } else if (dep === 'module') {\n        entry.exports = this.module;\n      } else {\n        entry.module = findModule(resolve(dep, this.id), this.id, pending);\n      }\n    }\n  };\n\n  Module.prototype.makeRequire = function () {\n    var id = this.id;\n    var r = function (dep) {\n      return require(resolve(dep, id));\n    };\n    r['default'] = r;\n    r.moduleId = id;\n    r.has = function (dep) {\n      return has(resolve(dep, id));\n    };\n    return r;\n  };\n\n  define = function (id, deps, callback) {\n    var module = registry[id];\n\n    // If a module for this id has already been defined and is in any state\n    // other than `new` (meaning it has been or is currently being required),\n    // then we return early to avoid redefinition.\n    if (module && module.state !== 'new') {\n      return;\n    }\n\n    if (arguments.length < 2) {\n      unsupportedModule(arguments.length);\n    }\n\n    if (!Array.isArray(deps)) {\n      callback = deps;\n      deps = [];\n    }\n\n    if (callback instanceof Alias) {\n      registry[id] = new Module(callback.id, deps, callback, true);\n    } else {\n      registry[id] = new Module(id, deps, callback, false);\n    }\n  };\n\n  define.exports = function (name, defaultExport) {\n    var module = registry[name];\n\n    // If a module for this name has already been defined and is in any state\n    // other than `new` (meaning it has been or is currently being required),\n    // then we return early to avoid redefinition.\n    if (module && module.state !== 'new') {\n      return;\n    }\n\n    module = new Module(name, [], noop, null);\n    module.module.exports = defaultExport;\n    module.state = 'finalized';\n    registry[name] = module;\n\n    return module;\n  };\n\n  function noop() {}\n  // we don't support all of AMD\n  // define.amd = {};\n\n  function Alias(id) {\n    this.id = id;\n  }\n\n  define.alias = function (id, target) {\n    if (arguments.length === 2) {\n      return define(target, new Alias(id));\n    }\n\n    return new Alias(id);\n  };\n\n  function missingModule(id, referrer) {\n    throw new Error('Could not find module `' + id + '` imported from `' + referrer + '`');\n  }\n\n  function findModule(id, referrer, pending) {\n    var mod = registry[id] || registry[id + '/index'];\n\n    while (mod && mod.isAlias) {\n      mod = registry[mod.id];\n    }\n\n    if (!mod) {\n      missingModule(id, referrer);\n    }\n\n    if (pending && mod.state !== 'pending' && mod.state !== 'finalized') {\n      mod.findDeps(pending);\n      pending.push(mod);\n    }\n    return mod;\n  }\n\n  function resolve(child, id) {\n    if (child.charAt(0) !== '.') {\n      return child;\n    }\n\n\n    var parts = child.split('/');\n    var nameParts = id.split('/');\n    var parentBase = nameParts.slice(0, -1);\n\n    for (var i = 0, l = parts.length; i < l; i++) {\n      var part = parts[i];\n\n      if (part === '..') {\n        if (parentBase.length === 0) {\n          throw new Error('Cannot access parent module of root');\n        }\n        parentBase.pop();\n      } else if (part === '.') {\n        continue;\n      } else {\n        parentBase.push(part);\n      }\n    }\n\n    return parentBase.join('/');\n  }\n\n  function has(id) {\n    return !!(registry[id] || registry[id + '/index']);\n  }\n\n  requirejs.entries = requirejs._eak_seen = registry;\n  requirejs.has = has;\n  requirejs.unsee = function (id) {\n    findModule(id, '(unsee)', false).unsee();\n  };\n\n  requirejs.clear = function () {\n    requirejs.entries = requirejs._eak_seen = registry = dict();\n    seen = dict();\n  };\n\n  // This code primes the JS engine for good performance by warming the\n  // JIT compiler for these functions.\n  define('foo', function () {});\n  define('foo/bar', [], function () {});\n  define('foo/asdf', ['module', 'exports', 'require'], function (module, exports, require) {\n    if (require.has('foo/bar')) {\n      require('foo/bar');\n    }\n  });\n  define('foo/baz', [], define.alias('foo'));\n  define('foo/quz', define.alias('foo'));\n  define.alias('foo', 'foo/qux');\n  define('foo/bar', ['foo', './quz', './baz', './asdf', './bar', '../foo'], function () {});\n  define('foo/main', ['foo/bar'], function () {});\n  define.exports('foo/exports', {});\n\n  require('foo/exports');\n  require('foo/main');\n  require.unsee('foo/bar');\n\n  requirejs.clear();\n\n  if (typeof exports === 'object' && typeof module === 'object' && module.exports) {\n    module.exports = { require: require, define: define };\n  }\n})(this);","/*!\n * jQuery JavaScript Library v3.3.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2018-01-20T17:24Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, doc, node ) {\n\t\tdoc = doc || document;\n\n\t\tvar i,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\t\tif ( node[ i ] ) {\n\t\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.3.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc, node );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = div.offsetWidth === 36 || \"absolute\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\t\t) );\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\t\tval = curCSS( elem, dimension, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox;\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = valueIsBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ dimension ] );\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\tif ( val === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) {\n\n\t\tval = elem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];\n\n\t\t// offsetWidth/offsetHeight provide border-box values\n\t\tvalueIsBorderBox = true;\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\t\t\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra && boxModelAdjustment(\n\t\t\t\t\telem,\n\t\t\t\t\tdimension,\n\t\t\t\t\textra,\n\t\t\t\t\tisBorderBox,\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && support.scrollboxSize() === styles.position ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","/*!\n * @overview  Ember - JavaScript Application Framework\n * @copyright Copyright 2011-2018 Tilde Inc. and contributors\n *            Portions Copyright 2006-2011 Strobe Inc.\n *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.\n * @license   Licensed under MIT license\n *            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n * @version   3.0.0\n */\n","/*globals process */\nvar enifed, requireModule, Ember;\n\n// Used in ember-environment/lib/global.js\nmainContext = this; // eslint-disable-line no-undef\n\n(function() {\n    function missingModule(name, referrerName) {\n      if (referrerName) {\n        throw new Error('Could not find module ' + name + ' required by: ' + referrerName);\n      } else {\n        throw new Error('Could not find module ' + name);\n      }\n    }\n\n    function internalRequire(_name, referrerName) {\n      var name = _name;\n      var mod = registry[name];\n\n      if (!mod) {\n        name = name + '/index';\n        mod = registry[name];\n      }\n\n      var exports = seen[name];\n\n      if (exports !== undefined) {\n        return exports;\n      }\n\n      exports = seen[name] = {};\n\n      if (!mod) {\n        missingModule(_name, referrerName);\n      }\n\n      var deps = mod.deps;\n      var callback = mod.callback;\n      var reified = new Array(deps.length);\n\n      for (var i = 0; i < deps.length; i++) {\n        if (deps[i] === 'exports') {\n          reified[i] = exports;\n        } else if (deps[i] === 'require') {\n          reified[i] = requireModule;\n        } else {\n          reified[i] = internalRequire(deps[i], name);\n        }\n      }\n\n      callback.apply(this, reified);\n\n      return exports;\n    }\n\n  var isNode = typeof window === 'undefined' &&\n    typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n  if (!isNode) {\n    Ember = this.Ember = this.Ember || {};\n  }\n\n  if (typeof Ember === 'undefined') { Ember = {}; }\n\n  if (typeof Ember.__loader === 'undefined') {\n    var registry = {};\n    var seen = {};\n\n    enifed = function(name, deps, callback) {\n      var value = { };\n\n      if (!callback) {\n        value.deps = [];\n        value.callback = deps;\n      } else {\n        value.deps = deps;\n        value.callback = callback;\n      }\n\n      registry[name] = value;\n    };\n\n    requireModule = function(name) {\n      return internalRequire(name, null);\n    };\n\n    // setup `require` module\n    requireModule['default'] = requireModule;\n\n    requireModule.has = function registryHas(moduleName) {\n      return !!registry[moduleName] || !!registry[moduleName + '/index'];\n    };\n\n    requireModule._eak_seen = registry;\n\n    Ember.__loader = {\n      define: enifed,\n      require: requireModule,\n      registry: registry\n    };\n  } else {\n    enifed = Ember.__loader.define;\n    requireModule = Ember.__loader.require;\n  }\n})();\n","enifed(\"@glimmer/node\", [\"exports\", \"@glimmer/runtime\"], function (exports, _runtime) {\n    \"use strict\";\n\n    exports.NodeDOMTreeConstruction = undefined;\n\n\n    function _defaults(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n    }\n\n    var NodeDOMTreeConstruction = function (_DOMTreeConstruction) {\n        _inherits(NodeDOMTreeConstruction, _DOMTreeConstruction);\n\n        function NodeDOMTreeConstruction(doc) {\n            _classCallCheck(this, NodeDOMTreeConstruction);\n\n            return _possibleConstructorReturn(this, _DOMTreeConstruction.call(this, doc));\n        }\n        // override to prevent usage of `this.document` until after the constructor\n\n\n        NodeDOMTreeConstruction.prototype.setupUselessElement = function setupUselessElement() {};\n\n        NodeDOMTreeConstruction.prototype.insertHTMLBefore = function insertHTMLBefore(parent, reference, html) {\n            var prev = reference ? reference.previousSibling : parent.lastChild;\n            var raw = this.document.createRawHTMLSection(html);\n            parent.insertBefore(raw, reference);\n            var first = prev ? prev.nextSibling : parent.firstChild;\n            var last = reference ? reference.previousSibling : parent.lastChild;\n            return new _runtime.ConcreteBounds(parent, first, last);\n        };\n        // override to avoid SVG detection/work when in node (this is not needed in SSR)\n\n\n        NodeDOMTreeConstruction.prototype.createElement = function createElement(tag) {\n            return this.document.createElement(tag);\n        };\n        // override to avoid namespace shenanigans when in node (this is not needed in SSR)\n\n\n        NodeDOMTreeConstruction.prototype.setAttribute = function setAttribute(element, name, value) {\n            element.setAttribute(name, value);\n        };\n\n        return NodeDOMTreeConstruction;\n    }(_runtime.DOMTreeConstruction);\n\n    exports.NodeDOMTreeConstruction = NodeDOMTreeConstruction;\n});","enifed(\"@glimmer/reference\", [\"exports\", \"@glimmer/util\"], function (exports, _util) {\n    \"use strict\";\n\n    exports.isModified = exports.ReferenceCache = exports.map = exports.CachedReference = exports.UpdatableTag = exports.CachedTag = exports.combine = exports.combineSlice = exports.combineTagged = exports.DirtyableTag = exports.CURRENT_TAG = exports.VOLATILE_TAG = exports.CONSTANT_TAG = exports.TagWrapper = exports.RevisionTag = exports.VOLATILE = exports.INITIAL = exports.CONSTANT = exports.IteratorSynchronizer = exports.ReferenceIterator = exports.IterationArtifacts = exports.referenceFromParts = exports.ListItem = exports.isConst = exports.ConstReference = undefined;\n\n\n    function _defaults(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n    }\n\n    function _classCallCheck$1(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var CONSTANT = 0;\n    var INITIAL = 1;\n    var VOLATILE = NaN;\n    var RevisionTag = function () {\n        function RevisionTag() {\n            _classCallCheck$1(this, RevisionTag);\n        }\n\n        RevisionTag.prototype.validate = function validate(snapshot) {\n            return this.value() === snapshot;\n        };\n\n        return RevisionTag;\n    }();\n    RevisionTag.id = 0;\n    var VALUE = [];\n    var VALIDATE = [];\n    var TagWrapper = function () {\n        function TagWrapper(type, inner) {\n            _classCallCheck$1(this, TagWrapper);\n\n            this.type = type;\n            this.inner = inner;\n        }\n\n        TagWrapper.prototype.value = function value() {\n            var func = VALUE[this.type];\n            return func(this.inner);\n        };\n\n        TagWrapper.prototype.validate = function validate(snapshot) {\n            var func = VALIDATE[this.type];\n            return func(this.inner, snapshot);\n        };\n\n        return TagWrapper;\n    }();\n    function register(Type) {\n        var type = VALUE.length;\n        VALUE.push(function (tag) {\n            return tag.value();\n        });\n        VALIDATE.push(function (tag, snapshot) {\n            return tag.validate(snapshot);\n        });\n        Type.id = type;\n    }\n    ///\n    // CONSTANT: 0\n    VALUE.push(function () {\n        return CONSTANT;\n    });\n    VALIDATE.push(function (_tag, snapshot) {\n        return snapshot === CONSTANT;\n    });\n    var CONSTANT_TAG = new TagWrapper(0, null);\n    // VOLATILE: 1\n    VALUE.push(function () {\n        return VOLATILE;\n    });\n    VALIDATE.push(function (_tag, snapshot) {\n        return snapshot === VOLATILE;\n    });\n    var VOLATILE_TAG = new TagWrapper(1, null);\n    // CURRENT: 2\n    VALUE.push(function () {\n        return $REVISION;\n    });\n    VALIDATE.push(function (_tag, snapshot) {\n        return snapshot === $REVISION;\n    });\n    var CURRENT_TAG = new TagWrapper(2, null);\n    ///\n    var $REVISION = INITIAL;\n    var DirtyableTag = function (_RevisionTag) {\n        _inherits(DirtyableTag, _RevisionTag);\n\n        DirtyableTag.create = function create() {\n            var revision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $REVISION;\n\n            return new TagWrapper(this.id, new DirtyableTag(revision));\n        };\n\n        function DirtyableTag() {\n            var revision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $REVISION;\n\n            _classCallCheck$1(this, DirtyableTag);\n\n            var _this = _possibleConstructorReturn(this, _RevisionTag.call(this));\n\n            _this.revision = revision;\n            return _this;\n        }\n\n        DirtyableTag.prototype.value = function value() {\n            return this.revision;\n        };\n\n        DirtyableTag.prototype.dirty = function dirty() {\n            this.revision = ++$REVISION;\n        };\n\n        return DirtyableTag;\n    }(RevisionTag);\n    register(DirtyableTag);\n    function combineTagged(tagged) {\n        var optimized = [];\n        for (var i = 0, l = tagged.length; i < l; i++) {\n            var tag = tagged[i].tag;\n            if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n            if (tag === CONSTANT_TAG) continue;\n            optimized.push(tag);\n        }\n        return _combine(optimized);\n    }\n    function combineSlice(slice) {\n        var optimized = [];\n        var node = slice.head();\n        while (node !== null) {\n            var tag = node.tag;\n            if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n            if (tag !== CONSTANT_TAG) optimized.push(tag);\n            node = slice.nextNode(node);\n        }\n        return _combine(optimized);\n    }\n    function combine(tags) {\n        var optimized = [];\n        for (var i = 0, l = tags.length; i < l; i++) {\n            var tag = tags[i];\n            if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n            if (tag === CONSTANT_TAG) continue;\n            optimized.push(tag);\n        }\n        return _combine(optimized);\n    }\n    function _combine(tags) {\n        switch (tags.length) {\n            case 0:\n                return CONSTANT_TAG;\n            case 1:\n                return tags[0];\n            case 2:\n                return TagsPair.create(tags[0], tags[1]);\n            default:\n                return TagsCombinator.create(tags);\n        }\n    }\n    var CachedTag = function (_RevisionTag2) {\n        _inherits(CachedTag, _RevisionTag2);\n\n        function CachedTag() {\n            _classCallCheck$1(this, CachedTag);\n\n            var _this2 = _possibleConstructorReturn(this, _RevisionTag2.apply(this, arguments));\n\n            _this2.lastChecked = null;\n            _this2.lastValue = null;\n            return _this2;\n        }\n\n        CachedTag.prototype.value = function value() {\n            var lastChecked = this.lastChecked,\n                lastValue = this.lastValue;\n\n            if (lastChecked !== $REVISION) {\n                this.lastChecked = $REVISION;\n                this.lastValue = lastValue = this.compute();\n            }\n            return this.lastValue;\n        };\n\n        CachedTag.prototype.invalidate = function invalidate() {\n            this.lastChecked = null;\n        };\n\n        return CachedTag;\n    }(RevisionTag);\n\n    var TagsPair = function (_CachedTag) {\n        _inherits(TagsPair, _CachedTag);\n\n        TagsPair.create = function create(first, second) {\n            return new TagWrapper(this.id, new TagsPair(first, second));\n        };\n\n        function TagsPair(first, second) {\n            _classCallCheck$1(this, TagsPair);\n\n            var _this3 = _possibleConstructorReturn(this, _CachedTag.call(this));\n\n            _this3.first = first;\n            _this3.second = second;\n            return _this3;\n        }\n\n        TagsPair.prototype.compute = function compute() {\n            return Math.max(this.first.value(), this.second.value());\n        };\n\n        return TagsPair;\n    }(CachedTag);\n\n    register(TagsPair);\n\n    var TagsCombinator = function (_CachedTag2) {\n        _inherits(TagsCombinator, _CachedTag2);\n\n        TagsCombinator.create = function create(tags) {\n            return new TagWrapper(this.id, new TagsCombinator(tags));\n        };\n\n        function TagsCombinator(tags) {\n            _classCallCheck$1(this, TagsCombinator);\n\n            var _this4 = _possibleConstructorReturn(this, _CachedTag2.call(this));\n\n            _this4.tags = tags;\n            return _this4;\n        }\n\n        TagsCombinator.prototype.compute = function compute() {\n            var tags = this.tags;\n\n            var max = -1;\n            for (var i = 0; i < tags.length; i++) {\n                var value = tags[i].value();\n                max = Math.max(value, max);\n            }\n            return max;\n        };\n\n        return TagsCombinator;\n    }(CachedTag);\n\n    register(TagsCombinator);\n    var UpdatableTag = function (_CachedTag3) {\n        _inherits(UpdatableTag, _CachedTag3);\n\n        UpdatableTag.create = function create(tag) {\n            return new TagWrapper(this.id, new UpdatableTag(tag));\n        };\n\n        function UpdatableTag(tag) {\n            _classCallCheck$1(this, UpdatableTag);\n\n            var _this5 = _possibleConstructorReturn(this, _CachedTag3.call(this));\n\n            _this5.tag = tag;\n            _this5.lastUpdated = INITIAL;\n            return _this5;\n        }\n\n        UpdatableTag.prototype.compute = function compute() {\n            return Math.max(this.lastUpdated, this.tag.value());\n        };\n\n        UpdatableTag.prototype.update = function update(tag) {\n            if (tag !== this.tag) {\n                this.tag = tag;\n                this.lastUpdated = $REVISION;\n                this.invalidate();\n            }\n        };\n\n        return UpdatableTag;\n    }(CachedTag);\n    register(UpdatableTag);\n    var CachedReference = function () {\n        function CachedReference() {\n            _classCallCheck$1(this, CachedReference);\n\n            this.lastRevision = null;\n            this.lastValue = null;\n        }\n\n        CachedReference.prototype.value = function value() {\n            var tag = this.tag,\n                lastRevision = this.lastRevision,\n                lastValue = this.lastValue;\n\n            if (!lastRevision || !tag.validate(lastRevision)) {\n                lastValue = this.lastValue = this.compute();\n                this.lastRevision = tag.value();\n            }\n            return lastValue;\n        };\n\n        CachedReference.prototype.invalidate = function invalidate() {\n            this.lastRevision = null;\n        };\n\n        return CachedReference;\n    }();\n\n    var MapperReference = function (_CachedReference) {\n        _inherits(MapperReference, _CachedReference);\n\n        function MapperReference(reference, mapper) {\n            _classCallCheck$1(this, MapperReference);\n\n            var _this6 = _possibleConstructorReturn(this, _CachedReference.call(this));\n\n            _this6.tag = reference.tag;\n            _this6.reference = reference;\n            _this6.mapper = mapper;\n            return _this6;\n        }\n\n        MapperReference.prototype.compute = function compute() {\n            var reference = this.reference,\n                mapper = this.mapper;\n\n            return mapper(reference.value());\n        };\n\n        return MapperReference;\n    }(CachedReference);\n\n    function map(reference, mapper) {\n        return new MapperReference(reference, mapper);\n    }\n    //////////\n    var ReferenceCache = function () {\n        function ReferenceCache(reference) {\n            _classCallCheck$1(this, ReferenceCache);\n\n            this.lastValue = null;\n            this.lastRevision = null;\n            this.initialized = false;\n            this.tag = reference.tag;\n            this.reference = reference;\n        }\n\n        ReferenceCache.prototype.peek = function peek() {\n            if (!this.initialized) {\n                return this.initialize();\n            }\n            return this.lastValue;\n        };\n\n        ReferenceCache.prototype.revalidate = function revalidate() {\n            if (!this.initialized) {\n                return this.initialize();\n            }\n            var reference = this.reference,\n                lastRevision = this.lastRevision;\n\n            var tag = reference.tag;\n            if (tag.validate(lastRevision)) return NOT_MODIFIED;\n            this.lastRevision = tag.value();\n            var lastValue = this.lastValue;\n\n            var value = reference.value();\n            if (value === lastValue) return NOT_MODIFIED;\n            this.lastValue = value;\n            return value;\n        };\n\n        ReferenceCache.prototype.initialize = function initialize() {\n            var reference = this.reference;\n\n            var value = this.lastValue = reference.value();\n            this.lastRevision = reference.tag.value();\n            this.initialized = true;\n            return value;\n        };\n\n        return ReferenceCache;\n    }();\n    var NOT_MODIFIED = \"adb3b78e-3d22-4e4b-877a-6317c2c5c145\";\n    function isModified(value) {\n        return value !== NOT_MODIFIED;\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var ConstReference = function () {\n        function ConstReference(inner) {\n            _classCallCheck(this, ConstReference);\n\n            this.inner = inner;\n            this.tag = CONSTANT_TAG;\n        }\n\n        ConstReference.prototype.value = function value() {\n            return this.inner;\n        };\n\n        return ConstReference;\n    }();\n    function isConst(reference) {\n        return reference.tag === CONSTANT_TAG;\n    }\n\n    function _defaults$1(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$2(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$1(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$1(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$1(subClass, superClass);\n    }\n\n    var ListItem = function (_ListNode) {\n        _inherits$1(ListItem, _ListNode);\n\n        function ListItem(iterable, result) {\n            _classCallCheck$2(this, ListItem);\n\n            var _this = _possibleConstructorReturn$1(this, _ListNode.call(this, iterable.valueReferenceFor(result)));\n\n            _this.retained = false;\n            _this.seen = false;\n            _this.key = result.key;\n            _this.iterable = iterable;\n            _this.memo = iterable.memoReferenceFor(result);\n            return _this;\n        }\n\n        ListItem.prototype.update = function update(item) {\n            this.retained = true;\n            this.iterable.updateValueReference(this.value, item);\n            this.iterable.updateMemoReference(this.memo, item);\n        };\n\n        ListItem.prototype.shouldRemove = function shouldRemove() {\n            return !this.retained;\n        };\n\n        ListItem.prototype.reset = function reset() {\n            this.retained = false;\n            this.seen = false;\n        };\n\n        return ListItem;\n    }(_util.ListNode);\n    var IterationArtifacts = function () {\n        function IterationArtifacts(iterable) {\n            _classCallCheck$2(this, IterationArtifacts);\n\n            this.map = (0, _util.dict)();\n            this.list = new _util.LinkedList();\n            this.tag = iterable.tag;\n            this.iterable = iterable;\n        }\n\n        IterationArtifacts.prototype.isEmpty = function isEmpty() {\n            var iterator = this.iterator = this.iterable.iterate();\n            return iterator.isEmpty();\n        };\n\n        IterationArtifacts.prototype.iterate = function iterate() {\n            var iterator = this.iterator || this.iterable.iterate();\n            this.iterator = null;\n            return iterator;\n        };\n\n        IterationArtifacts.prototype.has = function has(key) {\n            return !!this.map[key];\n        };\n\n        IterationArtifacts.prototype.get = function get(key) {\n            return this.map[key];\n        };\n\n        IterationArtifacts.prototype.wasSeen = function wasSeen(key) {\n            var node = this.map[key];\n            return node && node.seen;\n        };\n\n        IterationArtifacts.prototype.append = function append(item) {\n            var map = this.map,\n                list = this.list,\n                iterable = this.iterable;\n\n            var node = map[item.key] = new ListItem(iterable, item);\n            list.append(node);\n            return node;\n        };\n\n        IterationArtifacts.prototype.insertBefore = function insertBefore(item, reference) {\n            var map = this.map,\n                list = this.list,\n                iterable = this.iterable;\n\n            var node = map[item.key] = new ListItem(iterable, item);\n            node.retained = true;\n            list.insertBefore(node, reference);\n            return node;\n        };\n\n        IterationArtifacts.prototype.move = function move(item, reference) {\n            var list = this.list;\n\n            item.retained = true;\n            list.remove(item);\n            list.insertBefore(item, reference);\n        };\n\n        IterationArtifacts.prototype.remove = function remove(item) {\n            var list = this.list;\n\n            list.remove(item);\n            delete this.map[item.key];\n        };\n\n        IterationArtifacts.prototype.nextNode = function nextNode(item) {\n            return this.list.nextNode(item);\n        };\n\n        IterationArtifacts.prototype.head = function head() {\n            return this.list.head();\n        };\n\n        return IterationArtifacts;\n    }();\n    var ReferenceIterator = function () {\n        // if anyone needs to construct this object with something other than\n        // an iterable, let @wycats know.\n        function ReferenceIterator(iterable) {\n            _classCallCheck$2(this, ReferenceIterator);\n\n            this.iterator = null;\n            var artifacts = new IterationArtifacts(iterable);\n            this.artifacts = artifacts;\n        }\n\n        ReferenceIterator.prototype.next = function next() {\n            var artifacts = this.artifacts;\n\n            var iterator = this.iterator = this.iterator || artifacts.iterate();\n            var item = iterator.next();\n            if (!item) return null;\n            return artifacts.append(item);\n        };\n\n        return ReferenceIterator;\n    }();\n    var Phase;\n    (function (Phase) {\n        Phase[Phase[\"Append\"] = 0] = \"Append\";\n        Phase[Phase[\"Prune\"] = 1] = \"Prune\";\n        Phase[Phase[\"Done\"] = 2] = \"Done\";\n    })(Phase || (Phase = {}));\n    var IteratorSynchronizer = function () {\n        function IteratorSynchronizer(_ref) {\n            var target = _ref.target,\n                artifacts = _ref.artifacts;\n\n            _classCallCheck$2(this, IteratorSynchronizer);\n\n            this.target = target;\n            this.artifacts = artifacts;\n            this.iterator = artifacts.iterate();\n            this.current = artifacts.head();\n        }\n\n        IteratorSynchronizer.prototype.sync = function sync() {\n            var phase = Phase.Append;\n            while (true) {\n                switch (phase) {\n                    case Phase.Append:\n                        phase = this.nextAppend();\n                        break;\n                    case Phase.Prune:\n                        phase = this.nextPrune();\n                        break;\n                    case Phase.Done:\n                        this.nextDone();\n                        return;\n                }\n            }\n        };\n\n        IteratorSynchronizer.prototype.advanceToKey = function advanceToKey(key) {\n            var current = this.current,\n                artifacts = this.artifacts;\n\n            var seek = current;\n            while (seek && seek.key !== key) {\n                seek.seen = true;\n                seek = artifacts.nextNode(seek);\n            }\n            this.current = seek && artifacts.nextNode(seek);\n        };\n\n        IteratorSynchronizer.prototype.nextAppend = function nextAppend() {\n            var iterator = this.iterator,\n                current = this.current,\n                artifacts = this.artifacts;\n\n            var item = iterator.next();\n            if (item === null) {\n                return this.startPrune();\n            }\n            var key = item.key;\n\n            if (current && current.key === key) {\n                this.nextRetain(item);\n            } else if (artifacts.has(key)) {\n                this.nextMove(item);\n            } else {\n                this.nextInsert(item);\n            }\n            return Phase.Append;\n        };\n\n        IteratorSynchronizer.prototype.nextRetain = function nextRetain(item) {\n            var artifacts = this.artifacts,\n                current = this.current;\n\n            current = current;\n            current.update(item);\n            this.current = artifacts.nextNode(current);\n            this.target.retain(item.key, current.value, current.memo);\n        };\n\n        IteratorSynchronizer.prototype.nextMove = function nextMove(item) {\n            var current = this.current,\n                artifacts = this.artifacts,\n                target = this.target;\n            var key = item.key;\n\n            var found = artifacts.get(item.key);\n            found.update(item);\n            if (artifacts.wasSeen(item.key)) {\n                artifacts.move(found, current);\n                target.move(found.key, found.value, found.memo, current ? current.key : null);\n            } else {\n                this.advanceToKey(key);\n            }\n        };\n\n        IteratorSynchronizer.prototype.nextInsert = function nextInsert(item) {\n            var artifacts = this.artifacts,\n                target = this.target,\n                current = this.current;\n\n            var node = artifacts.insertBefore(item, current);\n            target.insert(node.key, node.value, node.memo, current ? current.key : null);\n        };\n\n        IteratorSynchronizer.prototype.startPrune = function startPrune() {\n            this.current = this.artifacts.head();\n            return Phase.Prune;\n        };\n\n        IteratorSynchronizer.prototype.nextPrune = function nextPrune() {\n            var artifacts = this.artifacts,\n                target = this.target,\n                current = this.current;\n\n            if (current === null) {\n                return Phase.Done;\n            }\n            var node = current;\n            this.current = artifacts.nextNode(node);\n            if (node.shouldRemove()) {\n                artifacts.remove(node);\n                target.delete(node.key);\n            } else {\n                node.reset();\n            }\n            return Phase.Prune;\n        };\n\n        IteratorSynchronizer.prototype.nextDone = function nextDone() {\n            this.target.done();\n        };\n\n        return IteratorSynchronizer;\n    }();\n\n    function referenceFromParts(root, parts) {\n        var reference = root;\n        for (var i = 0; i < parts.length; i++) {\n            reference = reference.get(parts[i]);\n        }\n        return reference;\n    }\n\n    exports.ConstReference = ConstReference;\n    exports.isConst = isConst;\n    exports.ListItem = ListItem;\n    exports.referenceFromParts = referenceFromParts;\n    exports.IterationArtifacts = IterationArtifacts;\n    exports.ReferenceIterator = ReferenceIterator;\n    exports.IteratorSynchronizer = IteratorSynchronizer;\n    exports.CONSTANT = CONSTANT;\n    exports.INITIAL = INITIAL;\n    exports.VOLATILE = VOLATILE;\n    exports.RevisionTag = RevisionTag;\n    exports.TagWrapper = TagWrapper;\n    exports.CONSTANT_TAG = CONSTANT_TAG;\n    exports.VOLATILE_TAG = VOLATILE_TAG;\n    exports.CURRENT_TAG = CURRENT_TAG;\n    exports.DirtyableTag = DirtyableTag;\n    exports.combineTagged = combineTagged;\n    exports.combineSlice = combineSlice;\n    exports.combine = combine;\n    exports.CachedTag = CachedTag;\n    exports.UpdatableTag = UpdatableTag;\n    exports.CachedReference = CachedReference;\n    exports.map = map;\n    exports.ReferenceCache = ReferenceCache;\n    exports.isModified = isModified;\n});","enifed('@glimmer/runtime', ['exports', '@glimmer/util', '@glimmer/reference', '@glimmer/wire-format'], function (exports, _util, _reference2, _wireFormat) {\n    'use strict';\n\n    exports.ConcreteBounds = exports.ElementStack = exports.insertHTMLBefore = exports.isWhitespace = exports.DOMTreeConstruction = exports.IDOMChanges = exports.DOMChanges = exports.isComponentDefinition = exports.ComponentDefinition = exports.PartialDefinition = exports.Environment = exports.Scope = exports.isSafeString = exports.RenderResult = exports.UpdatingVM = exports.compileExpression = exports.compileList = exports.InlineMacros = exports.BlockMacros = exports.getDynamicVar = exports.resetDebuggerCallback = exports.setDebuggerCallback = exports.normalizeTextValue = exports.debugSlice = exports.Register = exports.readDOMAttr = exports.defaultPropertyManagers = exports.defaultAttributeManagers = exports.defaultManagers = exports.INPUT_VALUE_PROPERTY_MANAGER = exports.PropertyManager = exports.AttributeManager = exports.IAttributeManager = exports.CompiledDynamicTemplate = exports.CompiledStaticTemplate = exports.compileLayout = exports.OpcodeBuilderDSL = exports.ConditionalReference = exports.PrimitiveReference = exports.UNDEFINED_REFERENCE = exports.NULL_REFERENCE = exports.templateFactory = exports.Simple = undefined;\n\n\n    function _defaults(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    /**\n     * Registers\n     *\n     * For the most part, these follows MIPS naming conventions, however the\n     * register numbers are different.\n     */\n    var Register;\n    (function (Register) {\n        // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit\n        Register[Register[\"pc\"] = 0] = \"pc\";\n        // $1 or $ra (return address): pointer into `program` for the return\n        Register[Register[\"ra\"] = 1] = \"ra\";\n        // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack\n        Register[Register[\"fp\"] = 2] = \"fp\";\n        // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack\n        Register[Register[\"sp\"] = 3] = \"sp\";\n        // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers\n        Register[Register[\"s0\"] = 4] = \"s0\";\n        Register[Register[\"s1\"] = 5] = \"s1\";\n        // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers\n        Register[Register[\"t0\"] = 6] = \"t0\";\n        Register[Register[\"t1\"] = 7] = \"t1\";\n    })(Register || (exports.Register = Register = {}));\n    function debugSlice(env, start, end) {}\n    var AppendOpcodes = function () {\n        function AppendOpcodes() {\n            _classCallCheck(this, AppendOpcodes);\n\n            this.evaluateOpcode = (0, _util.fillNulls)(72 /* Size */).slice();\n        }\n\n        AppendOpcodes.prototype.add = function add(name, evaluate) {\n            this.evaluateOpcode[name] = evaluate;\n        };\n\n        AppendOpcodes.prototype.evaluate = function evaluate(vm, opcode, type) {\n            var func = this.evaluateOpcode[type];\n            func(vm, opcode);\n        };\n\n        return AppendOpcodes;\n    }();\n    var APPEND_OPCODES = new AppendOpcodes();\n    var AbstractOpcode = function () {\n        function AbstractOpcode() {\n            _classCallCheck(this, AbstractOpcode);\n\n            (0, _util.initializeGuid)(this);\n        }\n\n        AbstractOpcode.prototype.toJSON = function toJSON() {\n            return { guid: this._guid, type: this.type };\n        };\n\n        return AbstractOpcode;\n    }();\n    var UpdatingOpcode = function (_AbstractOpcode) {\n        _inherits(UpdatingOpcode, _AbstractOpcode);\n\n        function UpdatingOpcode() {\n            _classCallCheck(this, UpdatingOpcode);\n\n            var _this = _possibleConstructorReturn(this, _AbstractOpcode.apply(this, arguments));\n\n            _this.next = null;\n            _this.prev = null;\n            return _this;\n        }\n\n        return UpdatingOpcode;\n    }(AbstractOpcode);\n\n    function _defaults$1(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$1(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$1(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$1(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$1(subClass, superClass);\n    }\n\n    var PrimitiveReference = function (_ConstReference) {\n        _inherits$1(PrimitiveReference, _ConstReference);\n\n        function PrimitiveReference(value) {\n            _classCallCheck$1(this, PrimitiveReference);\n\n            return _possibleConstructorReturn$1(this, _ConstReference.call(this, value));\n        }\n\n        PrimitiveReference.create = function create(value) {\n            if (value === undefined) {\n                return UNDEFINED_REFERENCE;\n            } else if (value === null) {\n                return NULL_REFERENCE;\n            } else if (value === true) {\n                return TRUE_REFERENCE;\n            } else if (value === false) {\n                return FALSE_REFERENCE;\n            } else if (typeof value === 'number') {\n                return new ValueReference(value);\n            } else {\n                return new StringReference(value);\n            }\n        };\n\n        PrimitiveReference.prototype.get = function get(_key) {\n            return UNDEFINED_REFERENCE;\n        };\n\n        return PrimitiveReference;\n    }(_reference2.ConstReference);\n\n    var StringReference = function (_PrimitiveReference) {\n        _inherits$1(StringReference, _PrimitiveReference);\n\n        function StringReference() {\n            _classCallCheck$1(this, StringReference);\n\n            var _this2 = _possibleConstructorReturn$1(this, _PrimitiveReference.apply(this, arguments));\n\n            _this2.lengthReference = null;\n            return _this2;\n        }\n\n        StringReference.prototype.get = function get(key) {\n            if (key === 'length') {\n                var lengthReference = this.lengthReference;\n\n                if (lengthReference === null) {\n                    lengthReference = this.lengthReference = new ValueReference(this.inner.length);\n                }\n                return lengthReference;\n            } else {\n                return _PrimitiveReference.prototype.get.call(this, key);\n            }\n        };\n\n        return StringReference;\n    }(PrimitiveReference);\n\n    var ValueReference = function (_PrimitiveReference2) {\n        _inherits$1(ValueReference, _PrimitiveReference2);\n\n        function ValueReference(value) {\n            _classCallCheck$1(this, ValueReference);\n\n            return _possibleConstructorReturn$1(this, _PrimitiveReference2.call(this, value));\n        }\n\n        return ValueReference;\n    }(PrimitiveReference);\n\n    var UNDEFINED_REFERENCE = new ValueReference(undefined);\n    var NULL_REFERENCE = new ValueReference(null);\n    var TRUE_REFERENCE = new ValueReference(true);\n    var FALSE_REFERENCE = new ValueReference(false);\n    var ConditionalReference = function () {\n        function ConditionalReference(inner) {\n            _classCallCheck$1(this, ConditionalReference);\n\n            this.inner = inner;\n            this.tag = inner.tag;\n        }\n\n        ConditionalReference.prototype.value = function value() {\n            return this.toBool(this.inner.value());\n        };\n\n        ConditionalReference.prototype.toBool = function toBool(value) {\n            return !!value;\n        };\n\n        return ConditionalReference;\n    }();\n\n    function _defaults$2(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$2(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$2(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$2(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$2(subClass, superClass);\n    }\n\n    var ConcatReference = function (_CachedReference) {\n        _inherits$2(ConcatReference, _CachedReference);\n\n        function ConcatReference(parts) {\n            _classCallCheck$2(this, ConcatReference);\n\n            var _this = _possibleConstructorReturn$2(this, _CachedReference.call(this));\n\n            _this.parts = parts;\n            _this.tag = (0, _reference2.combineTagged)(parts);\n            return _this;\n        }\n\n        ConcatReference.prototype.compute = function compute() {\n            var parts = new Array();\n            for (var i = 0; i < this.parts.length; i++) {\n                var value = this.parts[i].value();\n                if (value !== null && value !== undefined) {\n                    parts[i] = castToString(value);\n                }\n            }\n            if (parts.length > 0) {\n                return parts.join('');\n            }\n            return null;\n        };\n\n        return ConcatReference;\n    }(_reference2.CachedReference);\n    function castToString(value) {\n        if (typeof value.toString !== 'function') {\n            return '';\n        }\n        return String(value);\n    }\n\n    APPEND_OPCODES.add(1 /* Helper */, function (vm, _ref) {\n        var _helper = _ref.op1;\n\n        var stack = vm.stack;\n        var helper = vm.constants.getFunction(_helper);\n        var args = stack.pop();\n        var value = helper(vm, args);\n        args.clear();\n        vm.stack.push(value);\n    });\n    APPEND_OPCODES.add(2 /* Function */, function (vm, _ref2) {\n        var _function = _ref2.op1;\n\n        var func = vm.constants.getFunction(_function);\n        vm.stack.push(func(vm));\n    });\n    APPEND_OPCODES.add(5 /* GetVariable */, function (vm, _ref3) {\n        var symbol = _ref3.op1;\n\n        var expr = vm.referenceForSymbol(symbol);\n        vm.stack.push(expr);\n    });\n    APPEND_OPCODES.add(4 /* SetVariable */, function (vm, _ref4) {\n        var symbol = _ref4.op1;\n\n        var expr = vm.stack.pop();\n        vm.scope().bindSymbol(symbol, expr);\n    });\n    APPEND_OPCODES.add(70 /* ResolveMaybeLocal */, function (vm, _ref5) {\n        var _name = _ref5.op1;\n\n        var name = vm.constants.getString(_name);\n        var locals = vm.scope().getPartialMap();\n        var ref = locals[name];\n        if (ref === undefined) {\n            ref = vm.getSelf().get(name);\n        }\n        vm.stack.push(ref);\n    });\n    APPEND_OPCODES.add(19 /* RootScope */, function (vm, _ref6) {\n        var symbols = _ref6.op1,\n            bindCallerScope = _ref6.op2;\n\n        vm.pushRootScope(symbols, !!bindCallerScope);\n    });\n    APPEND_OPCODES.add(6 /* GetProperty */, function (vm, _ref7) {\n        var _key = _ref7.op1;\n\n        var key = vm.constants.getString(_key);\n        var expr = vm.stack.pop();\n        vm.stack.push(expr.get(key));\n    });\n    APPEND_OPCODES.add(7 /* PushBlock */, function (vm, _ref8) {\n        var _block = _ref8.op1;\n\n        var block = _block ? vm.constants.getBlock(_block) : null;\n        vm.stack.push(block);\n    });\n    APPEND_OPCODES.add(8 /* GetBlock */, function (vm, _ref9) {\n        var _block = _ref9.op1;\n\n        vm.stack.push(vm.scope().getBlock(_block));\n    });\n    APPEND_OPCODES.add(9 /* HasBlock */, function (vm, _ref10) {\n        var _block = _ref10.op1;\n\n        var hasBlock = !!vm.scope().getBlock(_block);\n        vm.stack.push(hasBlock ? TRUE_REFERENCE : FALSE_REFERENCE);\n    });\n    APPEND_OPCODES.add(10 /* HasBlockParams */, function (vm, _ref11) {\n        var _block = _ref11.op1;\n\n        var block = vm.scope().getBlock(_block);\n        var hasBlockParams = block && block.symbolTable.parameters.length;\n        vm.stack.push(hasBlockParams ? TRUE_REFERENCE : FALSE_REFERENCE);\n    });\n    APPEND_OPCODES.add(11 /* Concat */, function (vm, _ref12) {\n        var count = _ref12.op1;\n\n        var out = [];\n        for (var i = count; i > 0; i--) {\n            out.push(vm.stack.pop());\n        }\n        vm.stack.push(new ConcatReference(out.reverse()));\n    });\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    function _classCallCheck$4(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var Arguments = function () {\n        function Arguments() {\n            _classCallCheck$4(this, Arguments);\n\n            this.stack = null;\n            this.positional = new PositionalArguments();\n            this.named = new NamedArguments();\n        }\n\n        Arguments.prototype.empty = function empty() {\n            this.setup(null, true);\n            return this;\n        };\n\n        Arguments.prototype.setup = function setup(stack, synthetic) {\n            this.stack = stack;\n            var names = stack.fromTop(0);\n            var namedCount = names.length;\n            var positionalCount = stack.fromTop(namedCount + 1);\n            var start = positionalCount + namedCount + 2;\n            var positional = this.positional;\n            positional.setup(stack, start, positionalCount);\n            var named = this.named;\n            named.setup(stack, namedCount, names, synthetic);\n        };\n\n        Arguments.prototype.at = function at(pos) {\n            return this.positional.at(pos);\n        };\n\n        Arguments.prototype.get = function get(name) {\n            return this.named.get(name);\n        };\n\n        Arguments.prototype.capture = function capture() {\n            return {\n                tag: this.tag,\n                length: this.length,\n                positional: this.positional.capture(),\n                named: this.named.capture()\n            };\n        };\n\n        Arguments.prototype.clear = function clear() {\n            var stack = this.stack,\n                length = this.length;\n\n            stack.pop(length + 2);\n        };\n\n        _createClass(Arguments, [{\n            key: 'tag',\n            get: function () {\n                return (0, _reference2.combineTagged)([this.positional, this.named]);\n            }\n        }, {\n            key: 'length',\n            get: function () {\n                return this.positional.length + this.named.length;\n            }\n        }]);\n\n        return Arguments;\n    }();\n\n    var PositionalArguments = function () {\n        function PositionalArguments() {\n            _classCallCheck$4(this, PositionalArguments);\n\n            this.length = 0;\n            this.stack = null;\n            this.start = 0;\n            this._tag = null;\n            this._references = null;\n        }\n\n        PositionalArguments.prototype.setup = function setup(stack, start, length) {\n            this.stack = stack;\n            this.start = start;\n            this.length = length;\n            this._tag = null;\n            this._references = null;\n        };\n\n        PositionalArguments.prototype.at = function at(position) {\n            var start = this.start,\n                length = this.length;\n\n            if (position < 0 || position >= length) {\n                return UNDEFINED_REFERENCE;\n            }\n            // stack: pos1, pos2, pos3, named1, named2\n            // start: 4 (top - 4)\n            //\n            // at(0) === pos1 === top - start\n            // at(1) === pos2 === top - (start - 1)\n            // at(2) === pos3 === top - (start - 2)\n            var fromTop = start - position - 1;\n            return this.stack.fromTop(fromTop);\n        };\n\n        PositionalArguments.prototype.capture = function capture() {\n            return new CapturedPositionalArguments(this.tag, this.references);\n        };\n\n        _createClass(PositionalArguments, [{\n            key: 'tag',\n            get: function () {\n                var tag = this._tag;\n                if (!tag) {\n                    tag = this._tag = (0, _reference2.combineTagged)(this.references);\n                }\n                return tag;\n            }\n        }, {\n            key: 'references',\n            get: function () {\n                var references = this._references;\n                if (!references) {\n                    var length = this.length;\n\n                    references = this._references = new Array(length);\n                    for (var i = 0; i < length; i++) {\n                        references[i] = this.at(i);\n                    }\n                }\n                return references;\n            }\n        }]);\n\n        return PositionalArguments;\n    }();\n\n    var CapturedPositionalArguments = function () {\n        function CapturedPositionalArguments(tag, references) {\n            var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : references.length;\n\n            _classCallCheck$4(this, CapturedPositionalArguments);\n\n            this.tag = tag;\n            this.references = references;\n            this.length = length;\n        }\n\n        CapturedPositionalArguments.prototype.at = function at(position) {\n            return this.references[position];\n        };\n\n        CapturedPositionalArguments.prototype.value = function value() {\n            return this.references.map(this.valueOf);\n        };\n\n        CapturedPositionalArguments.prototype.get = function get(name) {\n            var references = this.references,\n                length = this.length;\n\n            if (name === 'length') {\n                return PrimitiveReference.create(length);\n            } else {\n                var idx = parseInt(name, 10);\n                if (idx < 0 || idx >= length) {\n                    return UNDEFINED_REFERENCE;\n                } else {\n                    return references[idx];\n                }\n            }\n        };\n\n        CapturedPositionalArguments.prototype.valueOf = function valueOf(reference$$1) {\n            return reference$$1.value();\n        };\n\n        return CapturedPositionalArguments;\n    }();\n\n    var NamedArguments = function () {\n        function NamedArguments() {\n            _classCallCheck$4(this, NamedArguments);\n\n            this.length = 0;\n            this._tag = null;\n            this._references = null;\n            this._names = null;\n            this._realNames = _util.EMPTY_ARRAY;\n        }\n\n        NamedArguments.prototype.setup = function setup(stack, length, names, synthetic) {\n            this.stack = stack;\n            this.length = length;\n            this._tag = null;\n            this._references = null;\n            if (synthetic) {\n                this._names = names;\n                this._realNames = _util.EMPTY_ARRAY;\n            } else {\n                this._names = null;\n                this._realNames = names;\n            }\n        };\n\n        NamedArguments.prototype.has = function has(name) {\n            return this.names.indexOf(name) !== -1;\n        };\n\n        NamedArguments.prototype.get = function get(name) {\n            var names = this.names,\n                length = this.length;\n\n            var idx = names.indexOf(name);\n            if (idx === -1) {\n                return UNDEFINED_REFERENCE;\n            }\n            // stack: pos1, pos2, pos3, named1, named2\n            // start: 4 (top - 4)\n            // namedDict: { named1: 1, named2: 0 };\n            //\n            // get('named1') === named1 === top - (start - 1)\n            // get('named2') === named2 === top - start\n            var fromTop = length - idx;\n            return this.stack.fromTop(fromTop);\n        };\n\n        NamedArguments.prototype.capture = function capture() {\n            return new CapturedNamedArguments(this.tag, this.names, this.references);\n        };\n\n        NamedArguments.prototype.sliceName = function sliceName(name) {\n            return name.slice(1);\n        };\n\n        _createClass(NamedArguments, [{\n            key: 'tag',\n            get: function () {\n                return (0, _reference2.combineTagged)(this.references);\n            }\n        }, {\n            key: 'names',\n            get: function () {\n                var names = this._names;\n                if (!names) {\n                    names = this._names = this._realNames.map(this.sliceName);\n                }\n                return names;\n            }\n        }, {\n            key: 'references',\n            get: function () {\n                var references = this._references;\n                if (!references) {\n                    var names = this.names,\n                        length = this.length;\n\n                    references = this._references = [];\n                    for (var i = 0; i < length; i++) {\n                        references[i] = this.get(names[i]);\n                    }\n                }\n                return references;\n            }\n        }]);\n\n        return NamedArguments;\n    }();\n\n    var CapturedNamedArguments = function () {\n        function CapturedNamedArguments(tag, names, references) {\n            _classCallCheck$4(this, CapturedNamedArguments);\n\n            this.tag = tag;\n            this.names = names;\n            this.references = references;\n            this.length = names.length;\n            this._map = null;\n        }\n\n        CapturedNamedArguments.prototype.has = function has(name) {\n            return this.names.indexOf(name) !== -1;\n        };\n\n        CapturedNamedArguments.prototype.get = function get(name) {\n            var names = this.names,\n                references = this.references;\n\n            var idx = names.indexOf(name);\n            if (idx === -1) {\n                return UNDEFINED_REFERENCE;\n            } else {\n                return references[idx];\n            }\n        };\n\n        CapturedNamedArguments.prototype.value = function value() {\n            var names = this.names,\n                references = this.references;\n\n            var out = (0, _util.dict)();\n            for (var i = 0; i < names.length; i++) {\n                var name = names[i];\n                out[name] = references[i].value();\n            }\n            return out;\n        };\n\n        _createClass(CapturedNamedArguments, [{\n            key: 'map',\n            get: function () {\n                var map$$1 = this._map;\n                if (!map$$1) {\n                    var names = this.names,\n                        references = this.references;\n\n                    map$$1 = this._map = (0, _util.dict)();\n                    for (var i = 0; i < names.length; i++) {\n                        var name = names[i];\n                        map$$1[name] = references[i];\n                    }\n                }\n                return map$$1;\n            }\n        }]);\n\n        return CapturedNamedArguments;\n    }();\n\n    var ARGS = new Arguments();\n\n    function _defaults$5(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$6(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$5(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$5(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$5(subClass, superClass);\n    }\n\n    APPEND_OPCODES.add(20 /* ChildScope */, function (vm) {\n        return vm.pushChildScope();\n    });\n    APPEND_OPCODES.add(21 /* PopScope */, function (vm) {\n        return vm.popScope();\n    });\n    APPEND_OPCODES.add(39 /* PushDynamicScope */, function (vm) {\n        return vm.pushDynamicScope();\n    });\n    APPEND_OPCODES.add(40 /* PopDynamicScope */, function (vm) {\n        return vm.popDynamicScope();\n    });\n    APPEND_OPCODES.add(12 /* Immediate */, function (vm, _ref) {\n        var number = _ref.op1;\n\n        vm.stack.push(number);\n    });\n    APPEND_OPCODES.add(13 /* Constant */, function (vm, _ref2) {\n        var other = _ref2.op1;\n\n        vm.stack.push(vm.constants.getOther(other));\n    });\n    APPEND_OPCODES.add(14 /* PrimitiveReference */, function (vm, _ref3) {\n        var primitive = _ref3.op1;\n\n        var stack = vm.stack;\n        var flag = (primitive & 3 << 30) >>> 30;\n        var value = primitive & ~(3 << 30);\n        switch (flag) {\n            case 0:\n                stack.push(PrimitiveReference.create(value));\n                break;\n            case 1:\n                stack.push(PrimitiveReference.create(vm.constants.getFloat(value)));\n                break;\n            case 2:\n                stack.push(PrimitiveReference.create(vm.constants.getString(value)));\n                break;\n            case 3:\n                switch (value) {\n                    case 0:\n                        stack.push(FALSE_REFERENCE);\n                        break;\n                    case 1:\n                        stack.push(TRUE_REFERENCE);\n                        break;\n                    case 2:\n                        stack.push(NULL_REFERENCE);\n                        break;\n                    case 3:\n                        stack.push(UNDEFINED_REFERENCE);\n                        break;\n                }\n                break;\n        }\n    });\n    APPEND_OPCODES.add(15 /* Dup */, function (vm, _ref4) {\n        var register = _ref4.op1,\n            offset = _ref4.op2;\n\n        var position = vm.fetchValue(register) - offset;\n        vm.stack.dup(position);\n    });\n    APPEND_OPCODES.add(16 /* Pop */, function (vm, _ref5) {\n        var count = _ref5.op1;\n        return vm.stack.pop(count);\n    });\n    APPEND_OPCODES.add(17 /* Load */, function (vm, _ref6) {\n        var register = _ref6.op1;\n        return vm.load(register);\n    });\n    APPEND_OPCODES.add(18 /* Fetch */, function (vm, _ref7) {\n        var register = _ref7.op1;\n        return vm.fetch(register);\n    });\n    APPEND_OPCODES.add(38 /* BindDynamicScope */, function (vm, _ref8) {\n        var _names = _ref8.op1;\n\n        var names = vm.constants.getArray(_names);\n        vm.bindDynamicScope(names);\n    });\n    APPEND_OPCODES.add(47 /* PushFrame */, function (vm) {\n        return vm.pushFrame();\n    });\n    APPEND_OPCODES.add(48 /* PopFrame */, function (vm) {\n        return vm.popFrame();\n    });\n    APPEND_OPCODES.add(49 /* Enter */, function (vm, _ref9) {\n        var args = _ref9.op1;\n        return vm.enter(args);\n    });\n    APPEND_OPCODES.add(50 /* Exit */, function (vm) {\n        return vm.exit();\n    });\n    APPEND_OPCODES.add(41 /* CompileDynamicBlock */, function (vm) {\n        var stack = vm.stack;\n        var block = stack.pop();\n        stack.push(block ? block.compileDynamic(vm.env) : null);\n    });\n    APPEND_OPCODES.add(42 /* InvokeStatic */, function (vm, _ref10) {\n        var _block = _ref10.op1;\n\n        var block = vm.constants.getBlock(_block);\n        var compiled = block.compileStatic(vm.env);\n        vm.call(compiled.handle);\n    });\n    APPEND_OPCODES.add(43 /* InvokeDynamic */, function (vm, _ref11) {\n        var _invoker = _ref11.op1;\n\n        var invoker = vm.constants.getOther(_invoker);\n        var block = vm.stack.pop();\n        invoker.invoke(vm, block);\n    });\n    APPEND_OPCODES.add(44 /* Jump */, function (vm, _ref12) {\n        var target = _ref12.op1;\n        return vm.goto(target);\n    });\n    APPEND_OPCODES.add(45 /* JumpIf */, function (vm, _ref13) {\n        var target = _ref13.op1;\n\n        var reference$$1 = vm.stack.pop();\n        if ((0, _reference2.isConst)(reference$$1)) {\n            if (reference$$1.value()) {\n                vm.goto(target);\n            }\n        } else {\n            var cache = new _reference2.ReferenceCache(reference$$1);\n            if (cache.peek()) {\n                vm.goto(target);\n            }\n            vm.updateWith(new Assert(cache));\n        }\n    });\n    APPEND_OPCODES.add(46 /* JumpUnless */, function (vm, _ref14) {\n        var target = _ref14.op1;\n\n        var reference$$1 = vm.stack.pop();\n        if ((0, _reference2.isConst)(reference$$1)) {\n            if (!reference$$1.value()) {\n                vm.goto(target);\n            }\n        } else {\n            var cache = new _reference2.ReferenceCache(reference$$1);\n            if (!cache.peek()) {\n                vm.goto(target);\n            }\n            vm.updateWith(new Assert(cache));\n        }\n    });\n    APPEND_OPCODES.add(22 /* Return */, function (vm) {\n        return vm.return();\n    });\n    APPEND_OPCODES.add(23 /* ReturnTo */, function (vm, _ref15) {\n        var relative = _ref15.op1;\n\n        vm.returnTo(relative);\n    });\n    var ConstTest = function (ref, _env) {\n        return new _reference2.ConstReference(!!ref.value());\n    };\n    var SimpleTest = function (ref, _env) {\n        return ref;\n    };\n    var EnvironmentTest = function (ref, env) {\n        return env.toConditionalReference(ref);\n    };\n    APPEND_OPCODES.add(51 /* Test */, function (vm, _ref16) {\n        var _func = _ref16.op1;\n\n        var stack = vm.stack;\n        var operand = stack.pop();\n        var func = vm.constants.getFunction(_func);\n        stack.push(func(operand, vm.env));\n    });\n    var Assert = function (_UpdatingOpcode) {\n        _inherits$5(Assert, _UpdatingOpcode);\n\n        function Assert(cache) {\n            _classCallCheck$6(this, Assert);\n\n            var _this = _possibleConstructorReturn$5(this, _UpdatingOpcode.call(this));\n\n            _this.type = 'assert';\n            _this.tag = cache.tag;\n            _this.cache = cache;\n            return _this;\n        }\n\n        Assert.prototype.evaluate = function evaluate(vm) {\n            var cache = this.cache;\n\n            if ((0, _reference2.isModified)(cache.revalidate())) {\n                vm.throw();\n            }\n        };\n\n        Assert.prototype.toJSON = function toJSON() {\n            var type = this.type,\n                _guid = this._guid,\n                cache = this.cache;\n\n            var expected = void 0;\n            try {\n                expected = JSON.stringify(cache.peek());\n            } catch (e) {\n                expected = String(cache.peek());\n            }\n            return {\n                args: [],\n                details: { expected: expected },\n                guid: _guid,\n                type: type\n            };\n        };\n\n        return Assert;\n    }(UpdatingOpcode);\n    var JumpIfNotModifiedOpcode = function (_UpdatingOpcode2) {\n        _inherits$5(JumpIfNotModifiedOpcode, _UpdatingOpcode2);\n\n        function JumpIfNotModifiedOpcode(tag, target) {\n            _classCallCheck$6(this, JumpIfNotModifiedOpcode);\n\n            var _this2 = _possibleConstructorReturn$5(this, _UpdatingOpcode2.call(this));\n\n            _this2.target = target;\n            _this2.type = 'jump-if-not-modified';\n            _this2.tag = tag;\n            _this2.lastRevision = tag.value();\n            return _this2;\n        }\n\n        JumpIfNotModifiedOpcode.prototype.evaluate = function evaluate(vm) {\n            var tag = this.tag,\n                target = this.target,\n                lastRevision = this.lastRevision;\n\n            if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {\n                vm.goto(target);\n            }\n        };\n\n        JumpIfNotModifiedOpcode.prototype.didModify = function didModify() {\n            this.lastRevision = this.tag.value();\n        };\n\n        JumpIfNotModifiedOpcode.prototype.toJSON = function toJSON() {\n            return {\n                args: [JSON.stringify(this.target.inspect())],\n                guid: this._guid,\n                type: this.type\n            };\n        };\n\n        return JumpIfNotModifiedOpcode;\n    }(UpdatingOpcode);\n    var DidModifyOpcode = function (_UpdatingOpcode3) {\n        _inherits$5(DidModifyOpcode, _UpdatingOpcode3);\n\n        function DidModifyOpcode(target) {\n            _classCallCheck$6(this, DidModifyOpcode);\n\n            var _this3 = _possibleConstructorReturn$5(this, _UpdatingOpcode3.call(this));\n\n            _this3.target = target;\n            _this3.type = 'did-modify';\n            _this3.tag = _reference2.CONSTANT_TAG;\n            return _this3;\n        }\n\n        DidModifyOpcode.prototype.evaluate = function evaluate() {\n            this.target.didModify();\n        };\n\n        return DidModifyOpcode;\n    }(UpdatingOpcode);\n    var LabelOpcode = function () {\n        function LabelOpcode(label) {\n            _classCallCheck$6(this, LabelOpcode);\n\n            this.tag = _reference2.CONSTANT_TAG;\n            this.type = 'label';\n            this.label = null;\n            this.prev = null;\n            this.next = null;\n            (0, _util.initializeGuid)(this);\n            this.label = label;\n        }\n\n        LabelOpcode.prototype.evaluate = function evaluate() {};\n\n        LabelOpcode.prototype.inspect = function inspect$$1() {\n            return this.label + ' [' + this._guid + ']';\n        };\n\n        LabelOpcode.prototype.toJSON = function toJSON() {\n            return {\n                args: [JSON.stringify(this.inspect())],\n                guid: this._guid,\n                type: this.type\n            };\n        };\n\n        return LabelOpcode;\n    }();\n\n    function _defaults$4(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn$4(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$4(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$4(subClass, superClass);\n    }\n\n    function _classCallCheck$5(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    APPEND_OPCODES.add(24 /* Text */, function (vm, _ref) {\n        var text = _ref.op1;\n\n        vm.elements().appendText(vm.constants.getString(text));\n    });\n    APPEND_OPCODES.add(25 /* Comment */, function (vm, _ref2) {\n        var text = _ref2.op1;\n\n        vm.elements().appendComment(vm.constants.getString(text));\n    });\n    APPEND_OPCODES.add(27 /* OpenElement */, function (vm, _ref3) {\n        var tag = _ref3.op1;\n\n        vm.elements().openElement(vm.constants.getString(tag));\n    });\n    APPEND_OPCODES.add(28 /* OpenElementWithOperations */, function (vm, _ref4) {\n        var tag = _ref4.op1;\n\n        var tagName = vm.constants.getString(tag);\n        var operations = vm.stack.pop();\n        vm.elements().openElement(tagName, operations);\n    });\n    APPEND_OPCODES.add(29 /* OpenDynamicElement */, function (vm) {\n        var operations = vm.stack.pop();\n        var tagName = vm.stack.pop().value();\n        vm.elements().openElement(tagName, operations);\n    });\n    APPEND_OPCODES.add(36 /* PushRemoteElement */, function (vm) {\n        var elementRef = vm.stack.pop();\n        var nextSiblingRef = vm.stack.pop();\n        var element = void 0;\n        var nextSibling = void 0;\n        if ((0, _reference2.isConst)(elementRef)) {\n            element = elementRef.value();\n        } else {\n            var cache = new _reference2.ReferenceCache(elementRef);\n            element = cache.peek();\n            vm.updateWith(new Assert(cache));\n        }\n        if ((0, _reference2.isConst)(nextSiblingRef)) {\n            nextSibling = nextSiblingRef.value();\n        } else {\n            var _cache = new _reference2.ReferenceCache(nextSiblingRef);\n            nextSibling = _cache.peek();\n            vm.updateWith(new Assert(_cache));\n        }\n        vm.elements().pushRemoteElement(element, nextSibling);\n    });\n    APPEND_OPCODES.add(37 /* PopRemoteElement */, function (vm) {\n        return vm.elements().popRemoteElement();\n    });\n\n    var ClassList = function () {\n        function ClassList() {\n            _classCallCheck$5(this, ClassList);\n\n            this.list = null;\n            this.isConst = true;\n        }\n\n        ClassList.prototype.append = function append(reference$$1) {\n            var list = this.list,\n                isConst$$1 = this.isConst;\n\n            if (list === null) list = this.list = [];\n            list.push(reference$$1);\n            this.isConst = isConst$$1 && (0, _reference2.isConst)(reference$$1);\n        };\n\n        ClassList.prototype.toReference = function toReference() {\n            var list = this.list,\n                isConst$$1 = this.isConst;\n\n            if (!list) return NULL_REFERENCE;\n            if (isConst$$1) return PrimitiveReference.create(toClassName(list));\n            return new ClassListReference(list);\n        };\n\n        return ClassList;\n    }();\n\n    var ClassListReference = function (_CachedReference) {\n        _inherits$4(ClassListReference, _CachedReference);\n\n        function ClassListReference(list) {\n            _classCallCheck$5(this, ClassListReference);\n\n            var _this = _possibleConstructorReturn$4(this, _CachedReference.call(this));\n\n            _this.list = [];\n            _this.tag = (0, _reference2.combineTagged)(list);\n            _this.list = list;\n            return _this;\n        }\n\n        ClassListReference.prototype.compute = function compute() {\n            return toClassName(this.list);\n        };\n\n        return ClassListReference;\n    }(_reference2.CachedReference);\n\n    function toClassName(list) {\n        var ret = [];\n        for (var i = 0; i < list.length; i++) {\n            var value = list[i].value();\n            if (value !== false && value !== null && value !== undefined) ret.push(value);\n        }\n        return ret.length === 0 ? null : ret.join(' ');\n    }\n    var SimpleElementOperations = function () {\n        function SimpleElementOperations(env) {\n            _classCallCheck$5(this, SimpleElementOperations);\n\n            this.env = env;\n            this.opcodes = null;\n            this.classList = null;\n        }\n\n        SimpleElementOperations.prototype.addStaticAttribute = function addStaticAttribute(element, name, value) {\n            if (name === 'class') {\n                this.addClass(PrimitiveReference.create(value));\n            } else {\n                this.env.getAppendOperations().setAttribute(element, name, value);\n            }\n        };\n\n        SimpleElementOperations.prototype.addStaticAttributeNS = function addStaticAttributeNS(element, namespace, name, value) {\n            this.env.getAppendOperations().setAttribute(element, name, value, namespace);\n        };\n\n        SimpleElementOperations.prototype.addDynamicAttribute = function addDynamicAttribute(element, name, reference$$1, isTrusting) {\n            if (name === 'class') {\n                this.addClass(reference$$1);\n            } else {\n                var attributeManager = this.env.attributeFor(element, name, isTrusting);\n                var attribute = new DynamicAttribute(element, attributeManager, name, reference$$1);\n                this.addAttribute(attribute);\n            }\n        };\n\n        SimpleElementOperations.prototype.addDynamicAttributeNS = function addDynamicAttributeNS(element, namespace, name, reference$$1, isTrusting) {\n            var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);\n            var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference$$1, namespace);\n            this.addAttribute(nsAttribute);\n        };\n\n        SimpleElementOperations.prototype.flush = function flush(element, vm) {\n            var env = vm.env;\n            var opcodes = this.opcodes,\n                classList = this.classList;\n\n            for (var i = 0; opcodes && i < opcodes.length; i++) {\n                vm.updateWith(opcodes[i]);\n            }\n            if (classList) {\n                var attributeManager = env.attributeFor(element, 'class', false);\n                var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());\n                var opcode = attribute.flush(env);\n                if (opcode) {\n                    vm.updateWith(opcode);\n                }\n            }\n            this.opcodes = null;\n            this.classList = null;\n        };\n\n        SimpleElementOperations.prototype.addClass = function addClass(reference$$1) {\n            var classList = this.classList;\n\n            if (!classList) {\n                classList = this.classList = new ClassList();\n            }\n            classList.append(reference$$1);\n        };\n\n        SimpleElementOperations.prototype.addAttribute = function addAttribute(attribute) {\n            var opcode = attribute.flush(this.env);\n            if (opcode) {\n                var opcodes = this.opcodes;\n\n                if (!opcodes) {\n                    opcodes = this.opcodes = [];\n                }\n                opcodes.push(opcode);\n            }\n        };\n\n        return SimpleElementOperations;\n    }();\n    var ComponentElementOperations = function () {\n        function ComponentElementOperations(env) {\n            _classCallCheck$5(this, ComponentElementOperations);\n\n            this.env = env;\n            this.attributeNames = null;\n            this.attributes = null;\n            this.classList = null;\n        }\n\n        ComponentElementOperations.prototype.addStaticAttribute = function addStaticAttribute(element, name, value) {\n            if (name === 'class') {\n                this.addClass(PrimitiveReference.create(value));\n            } else if (this.shouldAddAttribute(name)) {\n                this.addAttribute(name, new StaticAttribute(element, name, value));\n            }\n        };\n\n        ComponentElementOperations.prototype.addStaticAttributeNS = function addStaticAttributeNS(element, namespace, name, value) {\n            if (this.shouldAddAttribute(name)) {\n                this.addAttribute(name, new StaticAttribute(element, name, value, namespace));\n            }\n        };\n\n        ComponentElementOperations.prototype.addDynamicAttribute = function addDynamicAttribute(element, name, reference$$1, isTrusting) {\n            if (name === 'class') {\n                this.addClass(reference$$1);\n            } else if (this.shouldAddAttribute(name)) {\n                var attributeManager = this.env.attributeFor(element, name, isTrusting);\n                var attribute = new DynamicAttribute(element, attributeManager, name, reference$$1);\n                this.addAttribute(name, attribute);\n            }\n        };\n\n        ComponentElementOperations.prototype.addDynamicAttributeNS = function addDynamicAttributeNS(element, namespace, name, reference$$1, isTrusting) {\n            if (this.shouldAddAttribute(name)) {\n                var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);\n                var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference$$1, namespace);\n                this.addAttribute(name, nsAttribute);\n            }\n        };\n\n        ComponentElementOperations.prototype.flush = function flush(element, vm) {\n            var env = this.env;\n            var attributes = this.attributes,\n                classList = this.classList;\n\n            for (var i = 0; attributes && i < attributes.length; i++) {\n                var opcode = attributes[i].flush(env);\n                if (opcode) {\n                    vm.updateWith(opcode);\n                }\n            }\n            if (classList) {\n                var attributeManager = env.attributeFor(element, 'class', false);\n                var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());\n                var _opcode = attribute.flush(env);\n                if (_opcode) {\n                    vm.updateWith(_opcode);\n                }\n            }\n        };\n\n        ComponentElementOperations.prototype.shouldAddAttribute = function shouldAddAttribute(name) {\n            return !this.attributeNames || this.attributeNames.indexOf(name) === -1;\n        };\n\n        ComponentElementOperations.prototype.addClass = function addClass(reference$$1) {\n            var classList = this.classList;\n\n            if (!classList) {\n                classList = this.classList = new ClassList();\n            }\n            classList.append(reference$$1);\n        };\n\n        ComponentElementOperations.prototype.addAttribute = function addAttribute(name, attribute) {\n            var attributeNames = this.attributeNames,\n                attributes = this.attributes;\n\n            if (!attributeNames) {\n                attributeNames = this.attributeNames = [];\n                attributes = this.attributes = [];\n            }\n            attributeNames.push(name);\n            attributes.push(attribute);\n        };\n\n        return ComponentElementOperations;\n    }();\n    APPEND_OPCODES.add(33 /* FlushElement */, function (vm) {\n        var stack = vm.elements();\n        var action = 'FlushElementOpcode#evaluate';\n        stack.expectOperations(action).flush(stack.expectConstructing(action), vm);\n        stack.flushElement();\n    });\n    APPEND_OPCODES.add(34 /* CloseElement */, function (vm) {\n        return vm.elements().closeElement();\n    });\n    APPEND_OPCODES.add(30 /* StaticAttr */, function (vm, _ref5) {\n        var _name = _ref5.op1,\n            _value = _ref5.op2,\n            _namespace = _ref5.op3;\n\n        var name = vm.constants.getString(_name);\n        var value = vm.constants.getString(_value);\n        if (_namespace) {\n            var namespace = vm.constants.getString(_namespace);\n            vm.elements().setStaticAttributeNS(namespace, name, value);\n        } else {\n            vm.elements().setStaticAttribute(name, value);\n        }\n    });\n    APPEND_OPCODES.add(35 /* Modifier */, function (vm, _ref6) {\n        var _manager = _ref6.op1;\n\n        var manager = vm.constants.getOther(_manager);\n        var stack = vm.stack;\n        var args = stack.pop();\n        var tag = args.tag;\n\n        var _vm$elements = vm.elements(),\n            element = _vm$elements.constructing,\n            updateOperations = _vm$elements.updateOperations;\n\n        var dynamicScope = vm.dynamicScope();\n        var modifier = manager.create(element, args, dynamicScope, updateOperations);\n        args.clear();\n        vm.env.scheduleInstallModifier(modifier, manager);\n        var destructor = manager.getDestructor(modifier);\n        if (destructor) {\n            vm.newDestroyable(destructor);\n        }\n        vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));\n    });\n    var UpdateModifierOpcode = function (_UpdatingOpcode) {\n        _inherits$4(UpdateModifierOpcode, _UpdatingOpcode);\n\n        function UpdateModifierOpcode(tag, manager, modifier) {\n            _classCallCheck$5(this, UpdateModifierOpcode);\n\n            var _this2 = _possibleConstructorReturn$4(this, _UpdatingOpcode.call(this));\n\n            _this2.tag = tag;\n            _this2.manager = manager;\n            _this2.modifier = modifier;\n            _this2.type = 'update-modifier';\n            _this2.lastUpdated = tag.value();\n            return _this2;\n        }\n\n        UpdateModifierOpcode.prototype.evaluate = function evaluate(vm) {\n            var manager = this.manager,\n                modifier = this.modifier,\n                tag = this.tag,\n                lastUpdated = this.lastUpdated;\n\n            if (!tag.validate(lastUpdated)) {\n                vm.env.scheduleUpdateModifier(modifier, manager);\n                this.lastUpdated = tag.value();\n            }\n        };\n\n        UpdateModifierOpcode.prototype.toJSON = function toJSON() {\n            return {\n                guid: this._guid,\n                type: this.type\n            };\n        };\n\n        return UpdateModifierOpcode;\n    }(UpdatingOpcode);\n    var StaticAttribute = function () {\n        function StaticAttribute(element, name, value, namespace) {\n            _classCallCheck$5(this, StaticAttribute);\n\n            this.element = element;\n            this.name = name;\n            this.value = value;\n            this.namespace = namespace;\n        }\n\n        StaticAttribute.prototype.flush = function flush(env) {\n            env.getAppendOperations().setAttribute(this.element, this.name, this.value, this.namespace);\n            return null;\n        };\n\n        return StaticAttribute;\n    }();\n    var DynamicAttribute = function () {\n        function DynamicAttribute(element, attributeManager, name, reference$$1, namespace) {\n            _classCallCheck$5(this, DynamicAttribute);\n\n            this.element = element;\n            this.attributeManager = attributeManager;\n            this.name = name;\n            this.reference = reference$$1;\n            this.namespace = namespace;\n            this.cache = null;\n            this.tag = reference$$1.tag;\n        }\n\n        DynamicAttribute.prototype.patch = function patch(env) {\n            var element = this.element,\n                cache = this.cache;\n\n            var value = cache.revalidate();\n            if ((0, _reference2.isModified)(value)) {\n                this.attributeManager.updateAttribute(env, element, value, this.namespace);\n            }\n        };\n\n        DynamicAttribute.prototype.flush = function flush(env) {\n            var reference$$1 = this.reference,\n                element = this.element;\n\n            if ((0, _reference2.isConst)(reference$$1)) {\n                var value = reference$$1.value();\n                this.attributeManager.setAttribute(env, element, value, this.namespace);\n                return null;\n            } else {\n                var cache = this.cache = new _reference2.ReferenceCache(reference$$1);\n                var _value2 = cache.peek();\n                this.attributeManager.setAttribute(env, element, _value2, this.namespace);\n                return new PatchElementOpcode(this);\n            }\n        };\n\n        DynamicAttribute.prototype.toJSON = function toJSON() {\n            var element = this.element,\n                namespace = this.namespace,\n                name = this.name,\n                cache = this.cache;\n\n            var formattedElement = formatElement(element);\n            var lastValue = cache.peek();\n            if (namespace) {\n                return {\n                    element: formattedElement,\n                    lastValue: lastValue,\n                    name: name,\n                    namespace: namespace,\n                    type: 'attribute'\n                };\n            }\n            return {\n                element: formattedElement,\n                lastValue: lastValue,\n                name: name,\n                namespace: namespace === undefined ? null : namespace,\n                type: 'attribute'\n            };\n        };\n\n        return DynamicAttribute;\n    }();\n    function formatElement(element) {\n        return JSON.stringify('<' + element.tagName.toLowerCase() + ' />');\n    }\n    APPEND_OPCODES.add(32 /* DynamicAttrNS */, function (vm, _ref7) {\n        var _name = _ref7.op1,\n            _namespace = _ref7.op2,\n            trusting = _ref7.op3;\n\n        var name = vm.constants.getString(_name);\n        var namespace = vm.constants.getString(_namespace);\n        var reference$$1 = vm.stack.pop();\n        vm.elements().setDynamicAttributeNS(namespace, name, reference$$1, !!trusting);\n    });\n    APPEND_OPCODES.add(31 /* DynamicAttr */, function (vm, _ref8) {\n        var _name = _ref8.op1,\n            trusting = _ref8.op2;\n\n        var name = vm.constants.getString(_name);\n        var reference$$1 = vm.stack.pop();\n        vm.elements().setDynamicAttribute(name, reference$$1, !!trusting);\n    });\n    var PatchElementOpcode = function (_UpdatingOpcode2) {\n        _inherits$4(PatchElementOpcode, _UpdatingOpcode2);\n\n        function PatchElementOpcode(operation) {\n            _classCallCheck$5(this, PatchElementOpcode);\n\n            var _this3 = _possibleConstructorReturn$4(this, _UpdatingOpcode2.call(this));\n\n            _this3.type = 'patch-element';\n            _this3.tag = operation.tag;\n            _this3.operation = operation;\n            return _this3;\n        }\n\n        PatchElementOpcode.prototype.evaluate = function evaluate(vm) {\n            this.operation.patch(vm.env);\n        };\n\n        PatchElementOpcode.prototype.toJSON = function toJSON() {\n            var _guid = this._guid,\n                type = this.type,\n                operation = this.operation;\n\n            return {\n                details: operation.toJSON(),\n                guid: _guid,\n                type: type\n            };\n        };\n\n        return PatchElementOpcode;\n    }(UpdatingOpcode);\n\n    function _defaults$3(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$3(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$3(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$3(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$3(subClass, superClass);\n    }\n\n    APPEND_OPCODES.add(56 /* PushComponentManager */, function (vm, _ref) {\n        var _definition = _ref.op1;\n\n        var definition = vm.constants.getOther(_definition);\n        var stack = vm.stack;\n        stack.push({ definition: definition, manager: definition.manager, component: null });\n    });\n    APPEND_OPCODES.add(57 /* PushDynamicComponentManager */, function (vm) {\n        var stack = vm.stack;\n        var reference$$1 = stack.pop();\n        var cache = (0, _reference2.isConst)(reference$$1) ? undefined : new _reference2.ReferenceCache(reference$$1);\n        var definition = cache ? cache.peek() : reference$$1.value();\n        stack.push({ definition: definition, manager: definition.manager, component: null });\n        if (cache) {\n            vm.updateWith(new Assert(cache));\n        }\n    });\n    APPEND_OPCODES.add(58 /* PushArgs */, function (vm, _ref2) {\n        var synthetic = _ref2.op1;\n\n        var stack = vm.stack;\n        ARGS.setup(stack, !!synthetic);\n        stack.push(ARGS);\n    });\n    APPEND_OPCODES.add(59 /* PrepareArgs */, function (vm, _ref3) {\n        var _state = _ref3.op1;\n\n        var stack = vm.stack;\n\n        var _vm$fetchValue = vm.fetchValue(_state),\n            definition = _vm$fetchValue.definition,\n            manager = _vm$fetchValue.manager;\n\n        var args = stack.pop();\n        var preparedArgs = manager.prepareArgs(definition, args);\n        if (preparedArgs) {\n            args.clear();\n            var positional = preparedArgs.positional,\n                named = preparedArgs.named;\n\n            var positionalCount = positional.length;\n            for (var i = 0; i < positionalCount; i++) {\n                stack.push(positional[i]);\n            }\n            stack.push(positionalCount);\n            var names = Object.keys(named);\n            var namedCount = names.length;\n            var atNames = [];\n            for (var _i = 0; _i < namedCount; _i++) {\n                var value = named[names[_i]];\n                var atName = '@' + names[_i];\n                stack.push(value);\n                atNames.push(atName);\n            }\n            stack.push(atNames);\n            args.setup(stack, false);\n        }\n        stack.push(args);\n    });\n    APPEND_OPCODES.add(60 /* CreateComponent */, function (vm, _ref4) {\n        var _vm$fetchValue2;\n\n        var flags = _ref4.op1,\n            _state = _ref4.op2;\n\n        var definition = void 0;\n        var manager = void 0;\n        var args = vm.stack.pop();\n        var dynamicScope = vm.dynamicScope();\n        var state = (_vm$fetchValue2 = vm.fetchValue(_state), definition = _vm$fetchValue2.definition, manager = _vm$fetchValue2.manager, _vm$fetchValue2);\n        var hasDefaultBlock = flags & 1;\n        var component = manager.create(vm.env, definition, args, dynamicScope, vm.getSelf(), !!hasDefaultBlock);\n        state.component = component;\n        vm.updateWith(new UpdateComponentOpcode(args.tag, definition.name, component, manager, dynamicScope));\n    });\n    APPEND_OPCODES.add(61 /* RegisterComponentDestructor */, function (vm, _ref5) {\n        var _state = _ref5.op1;\n\n        var _vm$fetchValue3 = vm.fetchValue(_state),\n            manager = _vm$fetchValue3.manager,\n            component = _vm$fetchValue3.component;\n\n        var destructor = manager.getDestructor(component);\n        if (destructor) vm.newDestroyable(destructor);\n    });\n    APPEND_OPCODES.add(65 /* BeginComponentTransaction */, function (vm) {\n        vm.beginCacheGroup();\n        vm.elements().pushSimpleBlock();\n    });\n    APPEND_OPCODES.add(62 /* PushComponentOperations */, function (vm) {\n        vm.stack.push(new ComponentElementOperations(vm.env));\n    });\n    APPEND_OPCODES.add(67 /* DidCreateElement */, function (vm, _ref6) {\n        var _state = _ref6.op1;\n\n        var _vm$fetchValue4 = vm.fetchValue(_state),\n            manager = _vm$fetchValue4.manager,\n            component = _vm$fetchValue4.component;\n\n        var action = 'DidCreateElementOpcode#evaluate';\n        manager.didCreateElement(component, vm.elements().expectConstructing(action), vm.elements().expectOperations(action));\n    });\n    APPEND_OPCODES.add(63 /* GetComponentSelf */, function (vm, _ref7) {\n        var _state = _ref7.op1;\n\n        var state = vm.fetchValue(_state);\n        vm.stack.push(state.manager.getSelf(state.component));\n    });\n    APPEND_OPCODES.add(64 /* GetComponentLayout */, function (vm, _ref8) {\n        var _state = _ref8.op1;\n\n        var _vm$fetchValue5 = vm.fetchValue(_state),\n            manager = _vm$fetchValue5.manager,\n            definition = _vm$fetchValue5.definition,\n            component = _vm$fetchValue5.component;\n\n        vm.stack.push(manager.layoutFor(definition, component, vm.env));\n    });\n    APPEND_OPCODES.add(68 /* DidRenderLayout */, function (vm, _ref9) {\n        var _state = _ref9.op1;\n\n        var _vm$fetchValue6 = vm.fetchValue(_state),\n            manager = _vm$fetchValue6.manager,\n            component = _vm$fetchValue6.component;\n\n        var bounds = vm.elements().popBlock();\n        manager.didRenderLayout(component, bounds);\n        vm.env.didCreate(component, manager);\n        vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));\n    });\n    APPEND_OPCODES.add(66 /* CommitComponentTransaction */, function (vm) {\n        return vm.commitCacheGroup();\n    });\n    var UpdateComponentOpcode = function (_UpdatingOpcode) {\n        _inherits$3(UpdateComponentOpcode, _UpdatingOpcode);\n\n        function UpdateComponentOpcode(tag, name, component, manager, dynamicScope) {\n            _classCallCheck$3(this, UpdateComponentOpcode);\n\n            var _this = _possibleConstructorReturn$3(this, _UpdatingOpcode.call(this));\n\n            _this.name = name;\n            _this.component = component;\n            _this.manager = manager;\n            _this.dynamicScope = dynamicScope;\n            _this.type = 'update-component';\n            var componentTag = manager.getTag(component);\n            if (componentTag) {\n                _this.tag = (0, _reference2.combine)([tag, componentTag]);\n            } else {\n                _this.tag = tag;\n            }\n            return _this;\n        }\n\n        UpdateComponentOpcode.prototype.evaluate = function evaluate(_vm) {\n            var component = this.component,\n                manager = this.manager,\n                dynamicScope = this.dynamicScope;\n\n            manager.update(component, dynamicScope);\n        };\n\n        UpdateComponentOpcode.prototype.toJSON = function toJSON() {\n            return {\n                args: [JSON.stringify(this.name)],\n                guid: this._guid,\n                type: this.type\n            };\n        };\n\n        return UpdateComponentOpcode;\n    }(UpdatingOpcode);\n    var DidUpdateLayoutOpcode = function (_UpdatingOpcode2) {\n        _inherits$3(DidUpdateLayoutOpcode, _UpdatingOpcode2);\n\n        function DidUpdateLayoutOpcode(manager, component, bounds) {\n            _classCallCheck$3(this, DidUpdateLayoutOpcode);\n\n            var _this2 = _possibleConstructorReturn$3(this, _UpdatingOpcode2.call(this));\n\n            _this2.manager = manager;\n            _this2.component = component;\n            _this2.bounds = bounds;\n            _this2.type = 'did-update-layout';\n            _this2.tag = _reference2.CONSTANT_TAG;\n            return _this2;\n        }\n\n        DidUpdateLayoutOpcode.prototype.evaluate = function evaluate(vm) {\n            var manager = this.manager,\n                component = this.component,\n                bounds = this.bounds;\n\n            manager.didUpdateLayout(component, bounds);\n            vm.env.didUpdate(component, manager);\n        };\n\n        return DidUpdateLayoutOpcode;\n    }(UpdatingOpcode);\n\n    function _classCallCheck$8(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var Cursor = function Cursor(element, nextSibling) {\n        _classCallCheck$8(this, Cursor);\n\n        this.element = element;\n        this.nextSibling = nextSibling;\n    };\n\n    var ConcreteBounds = function () {\n        function ConcreteBounds(parentNode, first, last) {\n            _classCallCheck$8(this, ConcreteBounds);\n\n            this.parentNode = parentNode;\n            this.first = first;\n            this.last = last;\n        }\n\n        ConcreteBounds.prototype.parentElement = function parentElement() {\n            return this.parentNode;\n        };\n\n        ConcreteBounds.prototype.firstNode = function firstNode() {\n            return this.first;\n        };\n\n        ConcreteBounds.prototype.lastNode = function lastNode() {\n            return this.last;\n        };\n\n        return ConcreteBounds;\n    }();\n    var SingleNodeBounds = function () {\n        function SingleNodeBounds(parentNode, node) {\n            _classCallCheck$8(this, SingleNodeBounds);\n\n            this.parentNode = parentNode;\n            this.node = node;\n        }\n\n        SingleNodeBounds.prototype.parentElement = function parentElement() {\n            return this.parentNode;\n        };\n\n        SingleNodeBounds.prototype.firstNode = function firstNode() {\n            return this.node;\n        };\n\n        SingleNodeBounds.prototype.lastNode = function lastNode() {\n            return this.node;\n        };\n\n        return SingleNodeBounds;\n    }();\n\n    function single(parent, node) {\n        return new SingleNodeBounds(parent, node);\n    }\n    function move(bounds, reference$$1) {\n        var parent = bounds.parentElement();\n        var first = bounds.firstNode();\n        var last = bounds.lastNode();\n        var node = first;\n        while (node) {\n            var next = node.nextSibling;\n            parent.insertBefore(node, reference$$1);\n            if (node === last) return next;\n            node = next;\n        }\n        return null;\n    }\n    function clear(bounds) {\n        var parent = bounds.parentElement();\n        var first = bounds.firstNode();\n        var last = bounds.lastNode();\n        var node = first;\n        while (node) {\n            var next = node.nextSibling;\n            parent.removeChild(node);\n            if (node === last) return next;\n            node = next;\n        }\n        return null;\n    }\n\n    function _defaults$7(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn$7(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$7(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$7(subClass, superClass);\n    }\n\n    function _classCallCheck$9(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var First = function () {\n        function First(node) {\n            _classCallCheck$9(this, First);\n\n            this.node = node;\n        }\n\n        First.prototype.firstNode = function firstNode() {\n            return this.node;\n        };\n\n        return First;\n    }();\n\n    var Last = function () {\n        function Last(node) {\n            _classCallCheck$9(this, Last);\n\n            this.node = node;\n        }\n\n        Last.prototype.lastNode = function lastNode() {\n            return this.node;\n        };\n\n        return Last;\n    }();\n\n    var Fragment = function () {\n        function Fragment(bounds$$1) {\n            _classCallCheck$9(this, Fragment);\n\n            this.bounds = bounds$$1;\n        }\n\n        Fragment.prototype.parentElement = function parentElement() {\n            return this.bounds.parentElement();\n        };\n\n        Fragment.prototype.firstNode = function firstNode() {\n            return this.bounds.firstNode();\n        };\n\n        Fragment.prototype.lastNode = function lastNode() {\n            return this.bounds.lastNode();\n        };\n\n        Fragment.prototype.update = function update(bounds$$1) {\n            this.bounds = bounds$$1;\n        };\n\n        return Fragment;\n    }();\n    var ElementStack = function () {\n        function ElementStack(env, parentNode, nextSibling) {\n            _classCallCheck$9(this, ElementStack);\n\n            this.constructing = null;\n            this.operations = null;\n            this.elementStack = new _util.Stack();\n            this.nextSiblingStack = new _util.Stack();\n            this.blockStack = new _util.Stack();\n            this.env = env;\n            this.dom = env.getAppendOperations();\n            this.updateOperations = env.getDOM();\n            this.element = parentNode;\n            this.nextSibling = nextSibling;\n            this.defaultOperations = new SimpleElementOperations(env);\n            this.pushSimpleBlock();\n            this.elementStack.push(this.element);\n            this.nextSiblingStack.push(this.nextSibling);\n        }\n\n        ElementStack.forInitialRender = function forInitialRender(env, parentNode, nextSibling) {\n            return new ElementStack(env, parentNode, nextSibling);\n        };\n\n        ElementStack.resume = function resume(env, tracker, nextSibling) {\n            var parentNode = tracker.parentElement();\n            var stack = new ElementStack(env, parentNode, nextSibling);\n            stack.pushBlockTracker(tracker);\n            return stack;\n        };\n\n        ElementStack.prototype.expectConstructing = function expectConstructing(method) {\n            return this.constructing;\n        };\n\n        ElementStack.prototype.expectOperations = function expectOperations(method) {\n            return this.operations;\n        };\n\n        ElementStack.prototype.block = function block() {\n            return this.blockStack.current;\n        };\n\n        ElementStack.prototype.popElement = function popElement() {\n            var elementStack = this.elementStack,\n                nextSiblingStack = this.nextSiblingStack;\n\n            var topElement = elementStack.pop();\n            nextSiblingStack.pop();\n            // LOGGER.debug(`-> element stack ${this.elementStack.toArray().map(e => e.tagName).join(', ')}`);\n            this.element = elementStack.current;\n            this.nextSibling = nextSiblingStack.current;\n            return topElement;\n        };\n\n        ElementStack.prototype.pushSimpleBlock = function pushSimpleBlock() {\n            var tracker = new SimpleBlockTracker(this.element);\n            this.pushBlockTracker(tracker);\n            return tracker;\n        };\n\n        ElementStack.prototype.pushUpdatableBlock = function pushUpdatableBlock() {\n            var tracker = new UpdatableBlockTracker(this.element);\n            this.pushBlockTracker(tracker);\n            return tracker;\n        };\n\n        ElementStack.prototype.pushBlockTracker = function pushBlockTracker(tracker) {\n            var isRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            var current = this.blockStack.current;\n            if (current !== null) {\n                current.newDestroyable(tracker);\n                if (!isRemote) {\n                    current.newBounds(tracker);\n                }\n            }\n            this.blockStack.push(tracker);\n            return tracker;\n        };\n\n        ElementStack.prototype.pushBlockList = function pushBlockList(list) {\n            var tracker = new BlockListTracker(this.element, list);\n            var current = this.blockStack.current;\n            if (current !== null) {\n                current.newDestroyable(tracker);\n                current.newBounds(tracker);\n            }\n            this.blockStack.push(tracker);\n            return tracker;\n        };\n\n        ElementStack.prototype.popBlock = function popBlock() {\n            this.block().finalize(this);\n            return this.blockStack.pop();\n        };\n\n        ElementStack.prototype.openElement = function openElement(tag, _operations) {\n            // workaround argument.length transpile of arg initializer\n            var operations = _operations === undefined ? this.defaultOperations : _operations;\n            var element = this.dom.createElement(tag, this.element);\n            this.constructing = element;\n            this.operations = operations;\n            return element;\n        };\n\n        ElementStack.prototype.flushElement = function flushElement() {\n            var parent = this.element;\n            var element = this.constructing;\n            this.dom.insertBefore(parent, element, this.nextSibling);\n            this.constructing = null;\n            this.operations = null;\n            this.pushElement(element, null);\n            this.block().openElement(element);\n        };\n\n        ElementStack.prototype.pushRemoteElement = function pushRemoteElement(element) {\n            var nextSibling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            this.pushElement(element, nextSibling);\n            var tracker = new RemoteBlockTracker(element);\n            this.pushBlockTracker(tracker, true);\n        };\n\n        ElementStack.prototype.popRemoteElement = function popRemoteElement() {\n            this.popBlock();\n            this.popElement();\n        };\n\n        ElementStack.prototype.pushElement = function pushElement(element, nextSibling) {\n            this.element = element;\n            this.elementStack.push(element);\n            // LOGGER.debug(`-> element stack ${this.elementStack.toArray().map(e => e.tagName).join(', ')}`);\n            this.nextSibling = nextSibling;\n            this.nextSiblingStack.push(nextSibling);\n        };\n\n        ElementStack.prototype.newDestroyable = function newDestroyable(d) {\n            this.block().newDestroyable(d);\n        };\n\n        ElementStack.prototype.newBounds = function newBounds(bounds$$1) {\n            this.block().newBounds(bounds$$1);\n        };\n\n        ElementStack.prototype.appendText = function appendText(string) {\n            var dom = this.dom;\n\n            var text = dom.createTextNode(string);\n            dom.insertBefore(this.element, text, this.nextSibling);\n            this.block().newNode(text);\n            return text;\n        };\n\n        ElementStack.prototype.appendComment = function appendComment(string) {\n            var dom = this.dom;\n\n            var comment = dom.createComment(string);\n            dom.insertBefore(this.element, comment, this.nextSibling);\n            this.block().newNode(comment);\n            return comment;\n        };\n\n        ElementStack.prototype.setStaticAttribute = function setStaticAttribute(name, value) {\n            this.expectOperations('setStaticAttribute').addStaticAttribute(this.expectConstructing('setStaticAttribute'), name, value);\n        };\n\n        ElementStack.prototype.setStaticAttributeNS = function setStaticAttributeNS(namespace, name, value) {\n            this.expectOperations('setStaticAttributeNS').addStaticAttributeNS(this.expectConstructing('setStaticAttributeNS'), namespace, name, value);\n        };\n\n        ElementStack.prototype.setDynamicAttribute = function setDynamicAttribute(name, reference$$1, isTrusting) {\n            this.expectOperations('setDynamicAttribute').addDynamicAttribute(this.expectConstructing('setDynamicAttribute'), name, reference$$1, isTrusting);\n        };\n\n        ElementStack.prototype.setDynamicAttributeNS = function setDynamicAttributeNS(namespace, name, reference$$1, isTrusting) {\n            this.expectOperations('setDynamicAttributeNS').addDynamicAttributeNS(this.expectConstructing('setDynamicAttributeNS'), namespace, name, reference$$1, isTrusting);\n        };\n\n        ElementStack.prototype.closeElement = function closeElement() {\n            this.block().closeElement();\n            this.popElement();\n        };\n\n        return ElementStack;\n    }();\n    var SimpleBlockTracker = function () {\n        function SimpleBlockTracker(parent) {\n            _classCallCheck$9(this, SimpleBlockTracker);\n\n            this.parent = parent;\n            this.first = null;\n            this.last = null;\n            this.destroyables = null;\n            this.nesting = 0;\n        }\n\n        SimpleBlockTracker.prototype.destroy = function destroy() {\n            var destroyables = this.destroyables;\n\n            if (destroyables && destroyables.length) {\n                for (var i = 0; i < destroyables.length; i++) {\n                    destroyables[i].destroy();\n                }\n            }\n        };\n\n        SimpleBlockTracker.prototype.parentElement = function parentElement() {\n            return this.parent;\n        };\n\n        SimpleBlockTracker.prototype.firstNode = function firstNode() {\n            return this.first && this.first.firstNode();\n        };\n\n        SimpleBlockTracker.prototype.lastNode = function lastNode() {\n            return this.last && this.last.lastNode();\n        };\n\n        SimpleBlockTracker.prototype.openElement = function openElement(element) {\n            this.newNode(element);\n            this.nesting++;\n        };\n\n        SimpleBlockTracker.prototype.closeElement = function closeElement() {\n            this.nesting--;\n        };\n\n        SimpleBlockTracker.prototype.newNode = function newNode(node) {\n            if (this.nesting !== 0) return;\n            if (!this.first) {\n                this.first = new First(node);\n            }\n            this.last = new Last(node);\n        };\n\n        SimpleBlockTracker.prototype.newBounds = function newBounds(bounds$$1) {\n            if (this.nesting !== 0) return;\n            if (!this.first) {\n                this.first = bounds$$1;\n            }\n            this.last = bounds$$1;\n        };\n\n        SimpleBlockTracker.prototype.newDestroyable = function newDestroyable(d) {\n            this.destroyables = this.destroyables || [];\n            this.destroyables.push(d);\n        };\n\n        SimpleBlockTracker.prototype.finalize = function finalize(stack) {\n            if (!this.first) {\n                stack.appendComment('');\n            }\n        };\n\n        return SimpleBlockTracker;\n    }();\n\n    var RemoteBlockTracker = function (_SimpleBlockTracker) {\n        _inherits$7(RemoteBlockTracker, _SimpleBlockTracker);\n\n        function RemoteBlockTracker() {\n            _classCallCheck$9(this, RemoteBlockTracker);\n\n            return _possibleConstructorReturn$7(this, _SimpleBlockTracker.apply(this, arguments));\n        }\n\n        RemoteBlockTracker.prototype.destroy = function destroy() {\n            _SimpleBlockTracker.prototype.destroy.call(this);\n            clear(this);\n        };\n\n        return RemoteBlockTracker;\n    }(SimpleBlockTracker);\n\n    var UpdatableBlockTracker = function (_SimpleBlockTracker2) {\n        _inherits$7(UpdatableBlockTracker, _SimpleBlockTracker2);\n\n        function UpdatableBlockTracker() {\n            _classCallCheck$9(this, UpdatableBlockTracker);\n\n            return _possibleConstructorReturn$7(this, _SimpleBlockTracker2.apply(this, arguments));\n        }\n\n        UpdatableBlockTracker.prototype.reset = function reset(env) {\n            var destroyables = this.destroyables;\n\n            if (destroyables && destroyables.length) {\n                for (var i = 0; i < destroyables.length; i++) {\n                    env.didDestroy(destroyables[i]);\n                }\n            }\n            var nextSibling = clear(this);\n            this.first = null;\n            this.last = null;\n            this.destroyables = null;\n            this.nesting = 0;\n            return nextSibling;\n        };\n\n        return UpdatableBlockTracker;\n    }(SimpleBlockTracker);\n\n    var BlockListTracker = function () {\n        function BlockListTracker(parent, boundList) {\n            _classCallCheck$9(this, BlockListTracker);\n\n            this.parent = parent;\n            this.boundList = boundList;\n            this.parent = parent;\n            this.boundList = boundList;\n        }\n\n        BlockListTracker.prototype.destroy = function destroy() {\n            this.boundList.forEachNode(function (node) {\n                return node.destroy();\n            });\n        };\n\n        BlockListTracker.prototype.parentElement = function parentElement() {\n            return this.parent;\n        };\n\n        BlockListTracker.prototype.firstNode = function firstNode() {\n            var head = this.boundList.head();\n            return head && head.firstNode();\n        };\n\n        BlockListTracker.prototype.lastNode = function lastNode() {\n            var tail = this.boundList.tail();\n            return tail && tail.lastNode();\n        };\n\n        BlockListTracker.prototype.openElement = function openElement(_element) {\n            (0, _util.assert)(false, 'Cannot openElement directly inside a block list');\n        };\n\n        BlockListTracker.prototype.closeElement = function closeElement() {\n            (0, _util.assert)(false, 'Cannot closeElement directly inside a block list');\n        };\n\n        BlockListTracker.prototype.newNode = function newNode(_node) {\n            (0, _util.assert)(false, 'Cannot create a new node directly inside a block list');\n        };\n\n        BlockListTracker.prototype.newBounds = function newBounds(_bounds) {};\n\n        BlockListTracker.prototype.newDestroyable = function newDestroyable(_d) {};\n\n        BlockListTracker.prototype.finalize = function finalize(_stack) {};\n\n        return BlockListTracker;\n    }();\n\n    function _classCallCheck$10(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var COMPONENT_DEFINITION_BRAND = 'COMPONENT DEFINITION [id=e59c754e-61eb-4392-8c4a-2c0ac72bfcd4]';\n    function isComponentDefinition(obj) {\n        return typeof obj === 'object' && obj !== null && obj[COMPONENT_DEFINITION_BRAND];\n    }\n    var ComponentDefinition = function ComponentDefinition(name, manager, ComponentClass) {\n        _classCallCheck$10(this, ComponentDefinition);\n\n        this[COMPONENT_DEFINITION_BRAND] = true;\n        this.name = name;\n        this.manager = manager;\n        this.ComponentClass = ComponentClass;\n    };\n\n    function _defaults$8(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn$8(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$8(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$8(subClass, superClass);\n    }\n\n    function _classCallCheck$11(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function isSafeString(value) {\n        return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';\n    }\n    function isNode(value) {\n        return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';\n    }\n    function isString(value) {\n        return typeof value === 'string';\n    }\n\n    var Upsert = function Upsert(bounds$$1) {\n        _classCallCheck$11(this, Upsert);\n\n        this.bounds = bounds$$1;\n    };\n\n    function cautiousInsert(dom, cursor, value) {\n        if (isString(value)) {\n            return TextUpsert.insert(dom, cursor, value);\n        }\n        if (isSafeString(value)) {\n            return SafeStringUpsert.insert(dom, cursor, value);\n        }\n        if (isNode(value)) {\n            return NodeUpsert.insert(dom, cursor, value);\n        }\n        throw (0, _util.unreachable)();\n    }\n    function trustingInsert(dom, cursor, value) {\n        if (isString(value)) {\n            return HTMLUpsert.insert(dom, cursor, value);\n        }\n        if (isNode(value)) {\n            return NodeUpsert.insert(dom, cursor, value);\n        }\n        throw (0, _util.unreachable)();\n    }\n\n    var TextUpsert = function (_Upsert) {\n        _inherits$8(TextUpsert, _Upsert);\n\n        TextUpsert.insert = function insert(dom, cursor, value) {\n            var textNode = dom.createTextNode(value);\n            dom.insertBefore(cursor.element, textNode, cursor.nextSibling);\n            var bounds$$1 = new SingleNodeBounds(cursor.element, textNode);\n            return new TextUpsert(bounds$$1, textNode);\n        };\n\n        function TextUpsert(bounds$$1, textNode) {\n            _classCallCheck$11(this, TextUpsert);\n\n            var _this = _possibleConstructorReturn$8(this, _Upsert.call(this, bounds$$1));\n\n            _this.textNode = textNode;\n            return _this;\n        }\n\n        TextUpsert.prototype.update = function update(_dom, value) {\n            if (isString(value)) {\n                var textNode = this.textNode;\n\n                textNode.nodeValue = value;\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        return TextUpsert;\n    }(Upsert);\n\n    var HTMLUpsert = function (_Upsert2) {\n        _inherits$8(HTMLUpsert, _Upsert2);\n\n        function HTMLUpsert() {\n            _classCallCheck$11(this, HTMLUpsert);\n\n            return _possibleConstructorReturn$8(this, _Upsert2.apply(this, arguments));\n        }\n\n        HTMLUpsert.insert = function insert(dom, cursor, value) {\n            var bounds$$1 = dom.insertHTMLBefore(cursor.element, cursor.nextSibling, value);\n            return new HTMLUpsert(bounds$$1);\n        };\n\n        HTMLUpsert.prototype.update = function update(dom, value) {\n            if (isString(value)) {\n                var bounds$$1 = this.bounds;\n\n                var parentElement = bounds$$1.parentElement();\n                var nextSibling = clear(bounds$$1);\n                this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, value);\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        return HTMLUpsert;\n    }(Upsert);\n\n    var SafeStringUpsert = function (_Upsert3) {\n        _inherits$8(SafeStringUpsert, _Upsert3);\n\n        function SafeStringUpsert(bounds$$1, lastStringValue) {\n            _classCallCheck$11(this, SafeStringUpsert);\n\n            var _this3 = _possibleConstructorReturn$8(this, _Upsert3.call(this, bounds$$1));\n\n            _this3.lastStringValue = lastStringValue;\n            return _this3;\n        }\n\n        SafeStringUpsert.insert = function insert(dom, cursor, value) {\n            var stringValue = value.toHTML();\n            var bounds$$1 = dom.insertHTMLBefore(cursor.element, cursor.nextSibling, stringValue);\n            return new SafeStringUpsert(bounds$$1, stringValue);\n        };\n\n        SafeStringUpsert.prototype.update = function update(dom, value) {\n            if (isSafeString(value)) {\n                var stringValue = value.toHTML();\n                if (stringValue !== this.lastStringValue) {\n                    var bounds$$1 = this.bounds;\n\n                    var parentElement = bounds$$1.parentElement();\n                    var nextSibling = clear(bounds$$1);\n                    this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, stringValue);\n                    this.lastStringValue = stringValue;\n                }\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        return SafeStringUpsert;\n    }(Upsert);\n\n    var NodeUpsert = function (_Upsert4) {\n        _inherits$8(NodeUpsert, _Upsert4);\n\n        function NodeUpsert() {\n            _classCallCheck$11(this, NodeUpsert);\n\n            return _possibleConstructorReturn$8(this, _Upsert4.apply(this, arguments));\n        }\n\n        NodeUpsert.insert = function insert(dom, cursor, node) {\n            dom.insertBefore(cursor.element, node, cursor.nextSibling);\n            return new NodeUpsert(single(cursor.element, node));\n        };\n\n        NodeUpsert.prototype.update = function update(dom, value) {\n            if (isNode(value)) {\n                var bounds$$1 = this.bounds;\n\n                var parentElement = bounds$$1.parentElement();\n                var nextSibling = clear(bounds$$1);\n                this.bounds = dom.insertNodeBefore(parentElement, value, nextSibling);\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        return NodeUpsert;\n    }(Upsert);\n\n    function _defaults$6(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn$6(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$6(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$6(subClass, superClass);\n    }\n\n    function _classCallCheck$7(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    APPEND_OPCODES.add(26 /* DynamicContent */, function (vm, _ref) {\n        var append = _ref.op1;\n\n        var opcode = vm.constants.getOther(append);\n        opcode.evaluate(vm);\n    });\n    function isEmpty(value) {\n        return value === null || value === undefined || typeof value.toString !== 'function';\n    }\n    function normalizeTextValue(value) {\n        if (isEmpty(value)) {\n            return '';\n        }\n        return String(value);\n    }\n    function normalizeTrustedValue(value) {\n        if (isEmpty(value)) {\n            return '';\n        }\n        if (isString(value)) {\n            return value;\n        }\n        if (isSafeString(value)) {\n            return value.toHTML();\n        }\n        if (isNode(value)) {\n            return value;\n        }\n        return String(value);\n    }\n    function normalizeValue(value) {\n        if (isEmpty(value)) {\n            return '';\n        }\n        if (isString(value)) {\n            return value;\n        }\n        if (isSafeString(value) || isNode(value)) {\n            return value;\n        }\n        return String(value);\n    }\n    var AppendDynamicOpcode = function () {\n        function AppendDynamicOpcode() {\n            _classCallCheck$7(this, AppendDynamicOpcode);\n        }\n\n        AppendDynamicOpcode.prototype.evaluate = function evaluate(vm) {\n            var reference$$1 = vm.stack.pop();\n            var normalized = this.normalize(reference$$1);\n            var value = void 0;\n            var cache = void 0;\n            if ((0, _reference2.isConst)(reference$$1)) {\n                value = normalized.value();\n            } else {\n                cache = new _reference2.ReferenceCache(normalized);\n                value = cache.peek();\n            }\n            var stack = vm.elements();\n            var upsert = this.insert(vm.env.getAppendOperations(), stack, value);\n            var bounds$$1 = new Fragment(upsert.bounds);\n            stack.newBounds(bounds$$1);\n            if (cache /* i.e. !isConst(reference) */) {\n                    vm.updateWith(this.updateWith(vm, reference$$1, cache, bounds$$1, upsert));\n                }\n        };\n\n        return AppendDynamicOpcode;\n    }();\n    var IsComponentDefinitionReference = function (_ConditionalReference) {\n        _inherits$6(IsComponentDefinitionReference, _ConditionalReference);\n\n        function IsComponentDefinitionReference() {\n            _classCallCheck$7(this, IsComponentDefinitionReference);\n\n            return _possibleConstructorReturn$6(this, _ConditionalReference.apply(this, arguments));\n        }\n\n        IsComponentDefinitionReference.create = function create(inner) {\n            return new IsComponentDefinitionReference(inner);\n        };\n\n        IsComponentDefinitionReference.prototype.toBool = function toBool(value) {\n            return isComponentDefinition(value);\n        };\n\n        return IsComponentDefinitionReference;\n    }(ConditionalReference);\n\n    var UpdateOpcode = function (_UpdatingOpcode) {\n        _inherits$6(UpdateOpcode, _UpdatingOpcode);\n\n        function UpdateOpcode(cache, bounds$$1, upsert) {\n            _classCallCheck$7(this, UpdateOpcode);\n\n            var _this2 = _possibleConstructorReturn$6(this, _UpdatingOpcode.call(this));\n\n            _this2.cache = cache;\n            _this2.bounds = bounds$$1;\n            _this2.upsert = upsert;\n            _this2.tag = cache.tag;\n            return _this2;\n        }\n\n        UpdateOpcode.prototype.evaluate = function evaluate(vm) {\n            var value = this.cache.revalidate();\n            if ((0, _reference2.isModified)(value)) {\n                var bounds$$1 = this.bounds,\n                    upsert = this.upsert;\n                var dom = vm.dom;\n\n                if (!this.upsert.update(dom, value)) {\n                    var cursor = new Cursor(bounds$$1.parentElement(), clear(bounds$$1));\n                    upsert = this.upsert = this.insert(vm.env.getAppendOperations(), cursor, value);\n                }\n                bounds$$1.update(upsert.bounds);\n            }\n        };\n\n        UpdateOpcode.prototype.toJSON = function toJSON() {\n            var guid = this._guid,\n                type = this.type,\n                cache = this.cache;\n\n            return {\n                details: { lastValue: JSON.stringify(cache.peek()) },\n                guid: guid,\n                type: type\n            };\n        };\n\n        return UpdateOpcode;\n    }(UpdatingOpcode);\n\n    var OptimizedCautiousAppendOpcode = function (_AppendDynamicOpcode) {\n        _inherits$6(OptimizedCautiousAppendOpcode, _AppendDynamicOpcode);\n\n        function OptimizedCautiousAppendOpcode() {\n            _classCallCheck$7(this, OptimizedCautiousAppendOpcode);\n\n            var _this3 = _possibleConstructorReturn$6(this, _AppendDynamicOpcode.apply(this, arguments));\n\n            _this3.type = 'optimized-cautious-append';\n            return _this3;\n        }\n\n        OptimizedCautiousAppendOpcode.prototype.normalize = function normalize(reference$$1) {\n            return (0, _reference2.map)(reference$$1, normalizeValue);\n        };\n\n        OptimizedCautiousAppendOpcode.prototype.insert = function insert(dom, cursor, value) {\n            return cautiousInsert(dom, cursor, value);\n        };\n\n        OptimizedCautiousAppendOpcode.prototype.updateWith = function updateWith(_vm, _reference, cache, bounds$$1, upsert) {\n            return new OptimizedCautiousUpdateOpcode(cache, bounds$$1, upsert);\n        };\n\n        return OptimizedCautiousAppendOpcode;\n    }(AppendDynamicOpcode);\n\n    var OptimizedCautiousUpdateOpcode = function (_UpdateOpcode) {\n        _inherits$6(OptimizedCautiousUpdateOpcode, _UpdateOpcode);\n\n        function OptimizedCautiousUpdateOpcode() {\n            _classCallCheck$7(this, OptimizedCautiousUpdateOpcode);\n\n            var _this4 = _possibleConstructorReturn$6(this, _UpdateOpcode.apply(this, arguments));\n\n            _this4.type = 'optimized-cautious-update';\n            return _this4;\n        }\n\n        OptimizedCautiousUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {\n            return cautiousInsert(dom, cursor, value);\n        };\n\n        return OptimizedCautiousUpdateOpcode;\n    }(UpdateOpcode);\n\n    var OptimizedTrustingAppendOpcode = function (_AppendDynamicOpcode2) {\n        _inherits$6(OptimizedTrustingAppendOpcode, _AppendDynamicOpcode2);\n\n        function OptimizedTrustingAppendOpcode() {\n            _classCallCheck$7(this, OptimizedTrustingAppendOpcode);\n\n            var _this5 = _possibleConstructorReturn$6(this, _AppendDynamicOpcode2.apply(this, arguments));\n\n            _this5.type = 'optimized-trusting-append';\n            return _this5;\n        }\n\n        OptimizedTrustingAppendOpcode.prototype.normalize = function normalize(reference$$1) {\n            return (0, _reference2.map)(reference$$1, normalizeTrustedValue);\n        };\n\n        OptimizedTrustingAppendOpcode.prototype.insert = function insert(dom, cursor, value) {\n            return trustingInsert(dom, cursor, value);\n        };\n\n        OptimizedTrustingAppendOpcode.prototype.updateWith = function updateWith(_vm, _reference, cache, bounds$$1, upsert) {\n            return new OptimizedTrustingUpdateOpcode(cache, bounds$$1, upsert);\n        };\n\n        return OptimizedTrustingAppendOpcode;\n    }(AppendDynamicOpcode);\n\n    var OptimizedTrustingUpdateOpcode = function (_UpdateOpcode2) {\n        _inherits$6(OptimizedTrustingUpdateOpcode, _UpdateOpcode2);\n\n        function OptimizedTrustingUpdateOpcode() {\n            _classCallCheck$7(this, OptimizedTrustingUpdateOpcode);\n\n            var _this6 = _possibleConstructorReturn$6(this, _UpdateOpcode2.apply(this, arguments));\n\n            _this6.type = 'optimized-trusting-update';\n            return _this6;\n        }\n\n        OptimizedTrustingUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {\n            return trustingInsert(dom, cursor, value);\n        };\n\n        return OptimizedTrustingUpdateOpcode;\n    }(UpdateOpcode);\n\n    function _classCallCheck$12(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    /* tslint:disable */\n    function debugCallback(context, get) {\n        console.info('Use `context`, and `get(<path>)` to debug this template.');\n        // for example...\n        context === get('this');\n        debugger;\n    }\n    /* tslint:enable */\n    var callback = debugCallback;\n    // For testing purposes\n    function setDebuggerCallback(cb) {\n        callback = cb;\n    }\n    function resetDebuggerCallback() {\n        callback = debugCallback;\n    }\n\n    var ScopeInspector = function () {\n        function ScopeInspector(scope, symbols, evalInfo) {\n            _classCallCheck$12(this, ScopeInspector);\n\n            this.scope = scope;\n            this.locals = (0, _util.dict)();\n            for (var i = 0; i < evalInfo.length; i++) {\n                var slot = evalInfo[i];\n                var name = symbols[slot - 1];\n                var ref = scope.getSymbol(slot);\n                this.locals[name] = ref;\n            }\n        }\n\n        ScopeInspector.prototype.get = function get(path) {\n            var scope = this.scope,\n                locals = this.locals;\n\n            var parts = path.split('.');\n\n            var _path$split = path.split('.'),\n                head = _path$split[0],\n                tail = _path$split.slice(1);\n\n            var evalScope = scope.getEvalScope();\n            var ref = void 0;\n            if (head === 'this') {\n                ref = scope.getSelf();\n            } else if (locals[head]) {\n                ref = locals[head];\n            } else if (head.indexOf('@') === 0 && evalScope[head]) {\n                ref = evalScope[head];\n            } else {\n                ref = this.scope.getSelf();\n                tail = parts;\n            }\n            return tail.reduce(function (r, part) {\n                return r.get(part);\n            }, ref);\n        };\n\n        return ScopeInspector;\n    }();\n\n    APPEND_OPCODES.add(71 /* Debugger */, function (vm, _ref) {\n        var _symbols = _ref.op1,\n            _evalInfo = _ref.op2;\n\n        var symbols = vm.constants.getOther(_symbols);\n        var evalInfo = vm.constants.getArray(_evalInfo);\n        var inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);\n        callback(vm.getSelf().value(), function (path) {\n            return inspector.get(path).value();\n        });\n    });\n\n    APPEND_OPCODES.add(69 /* GetPartialTemplate */, function (vm) {\n        var stack = vm.stack;\n        var definition = stack.pop();\n        stack.push(definition.value().template.asPartial());\n    });\n\n    function _classCallCheck$13(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var IterablePresenceReference = function () {\n        function IterablePresenceReference(artifacts) {\n            _classCallCheck$13(this, IterablePresenceReference);\n\n            this.tag = artifacts.tag;\n            this.artifacts = artifacts;\n        }\n\n        IterablePresenceReference.prototype.value = function value() {\n            return !this.artifacts.isEmpty();\n        };\n\n        return IterablePresenceReference;\n    }();\n\n    APPEND_OPCODES.add(54 /* PutIterator */, function (vm) {\n        var stack = vm.stack;\n        var listRef = stack.pop();\n        var key = stack.pop();\n        var iterable = vm.env.iterableFor(listRef, key.value());\n        var iterator = new _reference2.ReferenceIterator(iterable);\n        stack.push(iterator);\n        stack.push(new IterablePresenceReference(iterator.artifacts));\n    });\n    APPEND_OPCODES.add(52 /* EnterList */, function (vm, _ref) {\n        var relativeStart = _ref.op1;\n\n        vm.enterList(relativeStart);\n    });\n    APPEND_OPCODES.add(53 /* ExitList */, function (vm) {\n        return vm.exitList();\n    });\n    APPEND_OPCODES.add(55 /* Iterate */, function (vm, _ref2) {\n        var breaks = _ref2.op1;\n\n        var stack = vm.stack;\n        var item = stack.peek().next();\n        if (item) {\n            var tryOpcode = vm.iterate(item.memo, item.value);\n            vm.enterItem(item.key, tryOpcode);\n        } else {\n            vm.goto(breaks);\n        }\n    });\n\n    var Ops$2;\n    (function (Ops$$1) {\n        Ops$$1[Ops$$1[\"OpenComponentElement\"] = 0] = \"OpenComponentElement\";\n        Ops$$1[Ops$$1[\"DidCreateElement\"] = 1] = \"DidCreateElement\";\n        Ops$$1[Ops$$1[\"DidRenderLayout\"] = 2] = \"DidRenderLayout\";\n        Ops$$1[Ops$$1[\"FunctionExpression\"] = 3] = \"FunctionExpression\";\n    })(Ops$2 || (Ops$2 = {}));\n\n    function _classCallCheck$17(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var CompiledStaticTemplate = function CompiledStaticTemplate(handle) {\n        _classCallCheck$17(this, CompiledStaticTemplate);\n\n        this.handle = handle;\n    };\n    var CompiledDynamicTemplate = function CompiledDynamicTemplate(handle, symbolTable) {\n        _classCallCheck$17(this, CompiledDynamicTemplate);\n\n        this.handle = handle;\n        this.symbolTable = symbolTable;\n    };\n\n    var _createClass$2 = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    function _classCallCheck$20(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function compileLayout(compilable, env) {\n        var builder = new ComponentLayoutBuilder(env);\n        compilable.compile(builder);\n        return builder.compile();\n    }\n\n    var ComponentLayoutBuilder = function () {\n        function ComponentLayoutBuilder(env) {\n            _classCallCheck$20(this, ComponentLayoutBuilder);\n\n            this.env = env;\n        }\n\n        ComponentLayoutBuilder.prototype.wrapLayout = function wrapLayout(layout) {\n            this.inner = new WrappedBuilder(this.env, layout);\n        };\n\n        ComponentLayoutBuilder.prototype.fromLayout = function fromLayout(componentName, layout) {\n            this.inner = new UnwrappedBuilder(this.env, componentName, layout);\n        };\n\n        ComponentLayoutBuilder.prototype.compile = function compile() {\n            return this.inner.compile();\n        };\n\n        _createClass$2(ComponentLayoutBuilder, [{\n            key: 'tag',\n            get: function () {\n                return this.inner.tag;\n            }\n        }, {\n            key: 'attrs',\n            get: function () {\n                return this.inner.attrs;\n            }\n        }]);\n\n        return ComponentLayoutBuilder;\n    }();\n\n    var WrappedBuilder = function () {\n        function WrappedBuilder(env, layout) {\n            _classCallCheck$20(this, WrappedBuilder);\n\n            this.env = env;\n            this.layout = layout;\n            this.tag = new ComponentTagBuilder();\n            this.attrs = new ComponentAttrsBuilder();\n        }\n\n        WrappedBuilder.prototype.compile = function compile() {\n            //========DYNAMIC\n            //        PutValue(TagExpr)\n            //        Test\n            //        JumpUnless(BODY)\n            //        OpenDynamicPrimitiveElement\n            //        DidCreateElement\n            //        ...attr statements...\n            //        FlushElement\n            // BODY:  Noop\n            //        ...body statements...\n            //        PutValue(TagExpr)\n            //        Test\n            //        JumpUnless(END)\n            //        CloseElement\n            // END:   Noop\n            //        DidRenderLayout\n            //        Exit\n            //\n            //========STATIC\n            //        OpenPrimitiveElementOpcode\n            //        DidCreateElement\n            //        ...attr statements...\n            //        FlushElement\n            //        ...body statements...\n            //        CloseElement\n            //        DidRenderLayout\n            //        Exit\n            var env = this.env,\n                layout = this.layout;\n\n            var meta = { templateMeta: layout.meta, symbols: layout.symbols, asPartial: false };\n            var dynamicTag = this.tag.getDynamic();\n            var staticTag = this.tag.getStatic();\n            var b = builder(env, meta);\n            b.startLabels();\n            if (dynamicTag) {\n                b.fetch(Register.s1);\n                expr(dynamicTag, b);\n                b.dup();\n                b.load(Register.s1);\n                b.test('simple');\n                b.jumpUnless('BODY');\n                b.fetch(Register.s1);\n                b.pushComponentOperations();\n                b.openDynamicElement();\n            } else if (staticTag) {\n                b.pushComponentOperations();\n                b.openElementWithOperations(staticTag);\n            }\n            if (dynamicTag || staticTag) {\n                b.didCreateElement(Register.s0);\n                var attrs = this.attrs.buffer;\n                for (var i = 0; i < attrs.length; i++) {\n                    compileStatement(attrs[i], b);\n                }\n                b.flushElement();\n            }\n            b.label('BODY');\n            b.invokeStatic(layout.asBlock());\n            if (dynamicTag) {\n                b.fetch(Register.s1);\n                b.test('simple');\n                b.jumpUnless('END');\n                b.closeElement();\n            } else if (staticTag) {\n                b.closeElement();\n            }\n            b.label('END');\n            b.didRenderLayout(Register.s0);\n            if (dynamicTag) {\n                b.load(Register.s1);\n            }\n            b.stopLabels();\n            var start = b.start;\n            var end = b.finalize();\n            return new CompiledDynamicTemplate(start, {\n                meta: meta,\n                hasEval: layout.hasEval,\n                symbols: layout.symbols.concat([ATTRS_BLOCK])\n            });\n        };\n\n        return WrappedBuilder;\n    }();\n\n    var UnwrappedBuilder = function () {\n        function UnwrappedBuilder(env, componentName, layout) {\n            _classCallCheck$20(this, UnwrappedBuilder);\n\n            this.env = env;\n            this.componentName = componentName;\n            this.layout = layout;\n            this.attrs = new ComponentAttrsBuilder();\n        }\n\n        UnwrappedBuilder.prototype.compile = function compile() {\n            var env = this.env,\n                layout = this.layout;\n\n            return layout.asLayout(this.componentName, this.attrs.buffer).compileDynamic(env);\n        };\n\n        _createClass$2(UnwrappedBuilder, [{\n            key: 'tag',\n            get: function () {\n                throw new Error('BUG: Cannot call `tag` on an UnwrappedBuilder');\n            }\n        }]);\n\n        return UnwrappedBuilder;\n    }();\n\n    var ComponentTagBuilder = function () {\n        function ComponentTagBuilder() {\n            _classCallCheck$20(this, ComponentTagBuilder);\n\n            this.isDynamic = null;\n            this.isStatic = null;\n            this.staticTagName = null;\n            this.dynamicTagName = null;\n        }\n\n        ComponentTagBuilder.prototype.getDynamic = function getDynamic() {\n            if (this.isDynamic) {\n                return this.dynamicTagName;\n            }\n        };\n\n        ComponentTagBuilder.prototype.getStatic = function getStatic() {\n            if (this.isStatic) {\n                return this.staticTagName;\n            }\n        };\n\n        ComponentTagBuilder.prototype.static = function _static(tagName) {\n            this.isStatic = true;\n            this.staticTagName = tagName;\n        };\n\n        ComponentTagBuilder.prototype.dynamic = function dynamic(tagName) {\n            this.isDynamic = true;\n            this.dynamicTagName = [_wireFormat.Ops.ClientSideExpression, Ops$2.FunctionExpression, tagName];\n        };\n\n        return ComponentTagBuilder;\n    }();\n\n    var ComponentAttrsBuilder = function () {\n        function ComponentAttrsBuilder() {\n            _classCallCheck$20(this, ComponentAttrsBuilder);\n\n            this.buffer = [];\n        }\n\n        ComponentAttrsBuilder.prototype.static = function _static(name, value) {\n            this.buffer.push([_wireFormat.Ops.StaticAttr, name, value, null]);\n        };\n\n        ComponentAttrsBuilder.prototype.dynamic = function dynamic(name, value) {\n            this.buffer.push([_wireFormat.Ops.DynamicAttr, name, [_wireFormat.Ops.ClientSideExpression, Ops$2.FunctionExpression, value], null]);\n        };\n\n        return ComponentAttrsBuilder;\n    }();\n\n    var ComponentBuilder = function () {\n        function ComponentBuilder(builder) {\n            _classCallCheck$20(this, ComponentBuilder);\n\n            this.builder = builder;\n            this.env = builder.env;\n        }\n\n        ComponentBuilder.prototype.static = function _static(definition, args) {\n            var params = args[0],\n                hash = args[1],\n                _default = args[2],\n                inverse = args[3];\n            var builder = this.builder;\n\n            builder.pushComponentManager(definition);\n            builder.invokeComponent(null, params, hash, _default, inverse);\n        };\n\n        ComponentBuilder.prototype.dynamic = function dynamic(definitionArgs, getDefinition, args) {\n            var params = args[0],\n                hash = args[1],\n                block = args[2],\n                inverse = args[3];\n            var builder = this.builder;\n\n            if (!definitionArgs || definitionArgs.length === 0) {\n                throw new Error(\"Dynamic syntax without an argument\");\n            }\n            var meta = this.builder.meta.templateMeta;\n            function helper(vm, a) {\n                return getDefinition(vm, a, meta);\n            }\n            builder.startLabels();\n            builder.pushFrame();\n            builder.returnTo('END');\n            builder.compileArgs(definitionArgs[0], definitionArgs[1], true);\n            builder.helper(helper);\n            builder.dup();\n            builder.test('simple');\n            builder.enter(2);\n            builder.jumpUnless('ELSE');\n            builder.pushDynamicComponentManager();\n            builder.invokeComponent(null, params, hash, block, inverse);\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n            builder.label('END');\n            builder.popFrame();\n            builder.stopLabels();\n        };\n\n        return ComponentBuilder;\n    }();\n    function builder(env, meta) {\n        return new OpcodeBuilder(env, meta);\n    }\n\n    function _classCallCheck$21(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var RawInlineBlock = function () {\n        function RawInlineBlock(meta, statements, parameters) {\n            _classCallCheck$21(this, RawInlineBlock);\n\n            this.meta = meta;\n            this.statements = statements;\n            this.parameters = parameters;\n        }\n\n        RawInlineBlock.prototype.scan = function scan() {\n            return new CompilableTemplate(this.statements, { parameters: this.parameters, meta: this.meta });\n        };\n\n        return RawInlineBlock;\n    }();\n\n    var _createClass$1 = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    function _defaults$9(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn$9(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$9(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$9(subClass, superClass);\n    }\n\n    function _classCallCheck$19(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var Labels = function () {\n        function Labels() {\n            _classCallCheck$19(this, Labels);\n\n            this.labels = (0, _util.dict)();\n            this.targets = [];\n        }\n\n        Labels.prototype.label = function label(name, index) {\n            this.labels[name] = index;\n        };\n\n        Labels.prototype.target = function target(at, Target, _target) {\n            this.targets.push({ at: at, Target: Target, target: _target });\n        };\n\n        Labels.prototype.patch = function patch(program) {\n            var targets = this.targets,\n                labels = this.labels;\n\n            for (var i = 0; i < targets.length; i++) {\n                var _targets$i = targets[i],\n                    at = _targets$i.at,\n                    target = _targets$i.target;\n\n                var goto = labels[target] - at;\n                program.heap.setbyaddr(at + 1, goto);\n            }\n        };\n\n        return Labels;\n    }();\n\n    var BasicOpcodeBuilder = function () {\n        function BasicOpcodeBuilder(env, meta, program) {\n            _classCallCheck$19(this, BasicOpcodeBuilder);\n\n            this.env = env;\n            this.meta = meta;\n            this.program = program;\n            this.labelsStack = new _util.Stack();\n            this.constants = program.constants;\n            this.heap = program.heap;\n            this.start = this.heap.malloc();\n        }\n\n        BasicOpcodeBuilder.prototype.upvars = function upvars(count) {\n            return (0, _util.fillNulls)(count);\n        };\n\n        BasicOpcodeBuilder.prototype.reserve = function reserve(name) {\n            this.push(name, 0, 0, 0);\n        };\n\n        BasicOpcodeBuilder.prototype.push = function push(name) {\n            var op1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var op2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            var op3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n            this.heap.push(name);\n            this.heap.push(op1);\n            this.heap.push(op2);\n            this.heap.push(op3);\n        };\n\n        BasicOpcodeBuilder.prototype.finalize = function finalize() {\n            this.push(22 /* Return */);\n            this.heap.finishMalloc(this.start);\n            return this.start;\n        };\n        // args\n\n\n        BasicOpcodeBuilder.prototype.pushArgs = function pushArgs(synthetic) {\n            this.push(58 /* PushArgs */, synthetic === true ? 1 : 0);\n        };\n        // helpers\n\n\n        BasicOpcodeBuilder.prototype.startLabels = function startLabels() {\n            this.labelsStack.push(new Labels());\n        };\n\n        BasicOpcodeBuilder.prototype.stopLabels = function stopLabels() {\n            var label = this.labelsStack.pop();\n            label.patch(this.program);\n        };\n        // components\n\n\n        BasicOpcodeBuilder.prototype.pushComponentManager = function pushComponentManager(definition) {\n            this.push(56 /* PushComponentManager */, this.other(definition));\n        };\n\n        BasicOpcodeBuilder.prototype.pushDynamicComponentManager = function pushDynamicComponentManager() {\n            this.push(57 /* PushDynamicComponentManager */);\n        };\n\n        BasicOpcodeBuilder.prototype.prepareArgs = function prepareArgs(state) {\n            this.push(59 /* PrepareArgs */, state);\n        };\n\n        BasicOpcodeBuilder.prototype.createComponent = function createComponent(state, hasDefault, hasInverse) {\n            var flag = (hasDefault === true ? 1 : 0) | (hasInverse === true ? 1 : 0) << 1;\n            this.push(60 /* CreateComponent */, flag, state);\n        };\n\n        BasicOpcodeBuilder.prototype.registerComponentDestructor = function registerComponentDestructor(state) {\n            this.push(61 /* RegisterComponentDestructor */, state);\n        };\n\n        BasicOpcodeBuilder.prototype.beginComponentTransaction = function beginComponentTransaction() {\n            this.push(65 /* BeginComponentTransaction */);\n        };\n\n        BasicOpcodeBuilder.prototype.commitComponentTransaction = function commitComponentTransaction() {\n            this.push(66 /* CommitComponentTransaction */);\n        };\n\n        BasicOpcodeBuilder.prototype.pushComponentOperations = function pushComponentOperations() {\n            this.push(62 /* PushComponentOperations */);\n        };\n\n        BasicOpcodeBuilder.prototype.getComponentSelf = function getComponentSelf(state) {\n            this.push(63 /* GetComponentSelf */, state);\n        };\n\n        BasicOpcodeBuilder.prototype.getComponentLayout = function getComponentLayout(state) {\n            this.push(64 /* GetComponentLayout */, state);\n        };\n\n        BasicOpcodeBuilder.prototype.didCreateElement = function didCreateElement(state) {\n            this.push(67 /* DidCreateElement */, state);\n        };\n\n        BasicOpcodeBuilder.prototype.didRenderLayout = function didRenderLayout(state) {\n            this.push(68 /* DidRenderLayout */, state);\n        };\n        // partial\n\n\n        BasicOpcodeBuilder.prototype.getPartialTemplate = function getPartialTemplate() {\n            this.push(69 /* GetPartialTemplate */);\n        };\n\n        BasicOpcodeBuilder.prototype.resolveMaybeLocal = function resolveMaybeLocal(name) {\n            this.push(70 /* ResolveMaybeLocal */, this.string(name));\n        };\n        // debugger\n\n\n        BasicOpcodeBuilder.prototype.debugger = function _debugger(symbols, evalInfo) {\n            this.push(71 /* Debugger */, this.constants.other(symbols), this.constants.array(evalInfo));\n        };\n        // content\n\n\n        BasicOpcodeBuilder.prototype.dynamicContent = function dynamicContent(Opcode) {\n            this.push(26 /* DynamicContent */, this.other(Opcode));\n        };\n\n        BasicOpcodeBuilder.prototype.cautiousAppend = function cautiousAppend() {\n            this.dynamicContent(new OptimizedCautiousAppendOpcode());\n        };\n\n        BasicOpcodeBuilder.prototype.trustingAppend = function trustingAppend() {\n            this.dynamicContent(new OptimizedTrustingAppendOpcode());\n        };\n        // dom\n\n\n        BasicOpcodeBuilder.prototype.text = function text(_text) {\n            this.push(24 /* Text */, this.constants.string(_text));\n        };\n\n        BasicOpcodeBuilder.prototype.openPrimitiveElement = function openPrimitiveElement(tag) {\n            this.push(27 /* OpenElement */, this.constants.string(tag));\n        };\n\n        BasicOpcodeBuilder.prototype.openElementWithOperations = function openElementWithOperations(tag) {\n            this.push(28 /* OpenElementWithOperations */, this.constants.string(tag));\n        };\n\n        BasicOpcodeBuilder.prototype.openDynamicElement = function openDynamicElement() {\n            this.push(29 /* OpenDynamicElement */);\n        };\n\n        BasicOpcodeBuilder.prototype.flushElement = function flushElement() {\n            this.push(33 /* FlushElement */);\n        };\n\n        BasicOpcodeBuilder.prototype.closeElement = function closeElement() {\n            this.push(34 /* CloseElement */);\n        };\n\n        BasicOpcodeBuilder.prototype.staticAttr = function staticAttr(_name, _namespace, _value) {\n            var name = this.constants.string(_name);\n            var namespace = _namespace ? this.constants.string(_namespace) : 0;\n            var value = this.constants.string(_value);\n            this.push(30 /* StaticAttr */, name, value, namespace);\n        };\n\n        BasicOpcodeBuilder.prototype.dynamicAttrNS = function dynamicAttrNS(_name, _namespace, trusting) {\n            var name = this.constants.string(_name);\n            var namespace = this.constants.string(_namespace);\n            this.push(32 /* DynamicAttrNS */, name, namespace, trusting === true ? 1 : 0);\n        };\n\n        BasicOpcodeBuilder.prototype.dynamicAttr = function dynamicAttr(_name, trusting) {\n            var name = this.constants.string(_name);\n            this.push(31 /* DynamicAttr */, name, trusting === true ? 1 : 0);\n        };\n\n        BasicOpcodeBuilder.prototype.comment = function comment(_comment) {\n            var comment = this.constants.string(_comment);\n            this.push(25 /* Comment */, comment);\n        };\n\n        BasicOpcodeBuilder.prototype.modifier = function modifier(_definition) {\n            this.push(35 /* Modifier */, this.other(_definition));\n        };\n        // lists\n\n\n        BasicOpcodeBuilder.prototype.putIterator = function putIterator() {\n            this.push(54 /* PutIterator */);\n        };\n\n        BasicOpcodeBuilder.prototype.enterList = function enterList(start) {\n            this.reserve(52 /* EnterList */);\n            this.labels.target(this.pos, 52 /* EnterList */, start);\n        };\n\n        BasicOpcodeBuilder.prototype.exitList = function exitList() {\n            this.push(53 /* ExitList */);\n        };\n\n        BasicOpcodeBuilder.prototype.iterate = function iterate(breaks) {\n            this.reserve(55 /* Iterate */);\n            this.labels.target(this.pos, 55 /* Iterate */, breaks);\n        };\n        // expressions\n\n\n        BasicOpcodeBuilder.prototype.setVariable = function setVariable(symbol) {\n            this.push(4 /* SetVariable */, symbol);\n        };\n\n        BasicOpcodeBuilder.prototype.getVariable = function getVariable(symbol) {\n            this.push(5 /* GetVariable */, symbol);\n        };\n\n        BasicOpcodeBuilder.prototype.getProperty = function getProperty(key) {\n            this.push(6 /* GetProperty */, this.string(key));\n        };\n\n        BasicOpcodeBuilder.prototype.getBlock = function getBlock(symbol) {\n            this.push(8 /* GetBlock */, symbol);\n        };\n\n        BasicOpcodeBuilder.prototype.hasBlock = function hasBlock(symbol) {\n            this.push(9 /* HasBlock */, symbol);\n        };\n\n        BasicOpcodeBuilder.prototype.hasBlockParams = function hasBlockParams(symbol) {\n            this.push(10 /* HasBlockParams */, symbol);\n        };\n\n        BasicOpcodeBuilder.prototype.concat = function concat(size) {\n            this.push(11 /* Concat */, size);\n        };\n\n        BasicOpcodeBuilder.prototype.function = function _function(f) {\n            this.push(2 /* Function */, this.func(f));\n        };\n\n        BasicOpcodeBuilder.prototype.load = function load(register) {\n            this.push(17 /* Load */, register);\n        };\n\n        BasicOpcodeBuilder.prototype.fetch = function fetch(register) {\n            this.push(18 /* Fetch */, register);\n        };\n\n        BasicOpcodeBuilder.prototype.dup = function dup() {\n            var register = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Register.sp;\n            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n            return this.push(15 /* Dup */, register, offset);\n        };\n\n        BasicOpcodeBuilder.prototype.pop = function pop() {\n            var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n            return this.push(16 /* Pop */, count);\n        };\n        // vm\n\n\n        BasicOpcodeBuilder.prototype.pushRemoteElement = function pushRemoteElement() {\n            this.push(36 /* PushRemoteElement */);\n        };\n\n        BasicOpcodeBuilder.prototype.popRemoteElement = function popRemoteElement() {\n            this.push(37 /* PopRemoteElement */);\n        };\n\n        BasicOpcodeBuilder.prototype.label = function label(name) {\n            this.labels.label(name, this.nextPos);\n        };\n\n        BasicOpcodeBuilder.prototype.pushRootScope = function pushRootScope(symbols, bindCallerScope) {\n            this.push(19 /* RootScope */, symbols, bindCallerScope ? 1 : 0);\n        };\n\n        BasicOpcodeBuilder.prototype.pushChildScope = function pushChildScope() {\n            this.push(20 /* ChildScope */);\n        };\n\n        BasicOpcodeBuilder.prototype.popScope = function popScope() {\n            this.push(21 /* PopScope */);\n        };\n\n        BasicOpcodeBuilder.prototype.returnTo = function returnTo(label) {\n            this.reserve(23 /* ReturnTo */);\n            this.labels.target(this.pos, 23 /* ReturnTo */, label);\n        };\n\n        BasicOpcodeBuilder.prototype.pushDynamicScope = function pushDynamicScope() {\n            this.push(39 /* PushDynamicScope */);\n        };\n\n        BasicOpcodeBuilder.prototype.popDynamicScope = function popDynamicScope() {\n            this.push(40 /* PopDynamicScope */);\n        };\n\n        BasicOpcodeBuilder.prototype.pushImmediate = function pushImmediate(value) {\n            this.push(13 /* Constant */, this.other(value));\n        };\n\n        BasicOpcodeBuilder.prototype.primitive = function primitive(_primitive) {\n            var flag = 0;\n            var primitive = void 0;\n            switch (typeof _primitive) {\n                case 'number':\n                    if (_primitive % 1 === 0 && _primitive > 0) {\n                        primitive = _primitive;\n                    } else {\n                        primitive = this.float(_primitive);\n                        flag = 1;\n                    }\n                    break;\n                case 'string':\n                    primitive = this.string(_primitive);\n                    flag = 2;\n                    break;\n                case 'boolean':\n                    primitive = _primitive | 0;\n                    flag = 3;\n                    break;\n                case 'object':\n                    // assume null\n                    primitive = 2;\n                    flag = 3;\n                    break;\n                case 'undefined':\n                    primitive = 3;\n                    flag = 3;\n                    break;\n                default:\n                    throw new Error('Invalid primitive passed to pushPrimitive');\n            }\n            this.push(14 /* PrimitiveReference */, flag << 30 | primitive);\n        };\n\n        BasicOpcodeBuilder.prototype.helper = function helper(func) {\n            this.push(1 /* Helper */, this.func(func));\n        };\n\n        BasicOpcodeBuilder.prototype.pushBlock = function pushBlock(block) {\n            this.push(7 /* PushBlock */, this.block(block));\n        };\n\n        BasicOpcodeBuilder.prototype.bindDynamicScope = function bindDynamicScope(_names) {\n            this.push(38 /* BindDynamicScope */, this.names(_names));\n        };\n\n        BasicOpcodeBuilder.prototype.enter = function enter(args) {\n            this.push(49 /* Enter */, args);\n        };\n\n        BasicOpcodeBuilder.prototype.exit = function exit() {\n            this.push(50 /* Exit */);\n        };\n\n        BasicOpcodeBuilder.prototype.return = function _return() {\n            this.push(22 /* Return */);\n        };\n\n        BasicOpcodeBuilder.prototype.pushFrame = function pushFrame() {\n            this.push(47 /* PushFrame */);\n        };\n\n        BasicOpcodeBuilder.prototype.popFrame = function popFrame() {\n            this.push(48 /* PopFrame */);\n        };\n\n        BasicOpcodeBuilder.prototype.compileDynamicBlock = function compileDynamicBlock() {\n            this.push(41 /* CompileDynamicBlock */);\n        };\n\n        BasicOpcodeBuilder.prototype.invokeDynamic = function invokeDynamic(invoker) {\n            this.push(43 /* InvokeDynamic */, this.other(invoker));\n        };\n\n        BasicOpcodeBuilder.prototype.invokeStatic = function invokeStatic(block) {\n            var callerCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var parameters = block.symbolTable.parameters;\n\n            var calleeCount = parameters.length;\n            var count = Math.min(callerCount, calleeCount);\n            this.pushFrame();\n            if (count) {\n                this.pushChildScope();\n                for (var i = 0; i < count; i++) {\n                    this.dup(Register.fp, callerCount - i);\n                    this.setVariable(parameters[i]);\n                }\n            }\n            var _block = this.constants.block(block);\n            this.push(42 /* InvokeStatic */, _block);\n            if (count) {\n                this.popScope();\n            }\n            this.popFrame();\n        };\n\n        BasicOpcodeBuilder.prototype.test = function test(testFunc) {\n            var _func = void 0;\n            if (testFunc === 'const') {\n                _func = ConstTest;\n            } else if (testFunc === 'simple') {\n                _func = SimpleTest;\n            } else if (testFunc === 'environment') {\n                _func = EnvironmentTest;\n            } else if (typeof testFunc === 'function') {\n                _func = testFunc;\n            } else {\n                throw new Error('unreachable');\n            }\n            var func = this.constants.function(_func);\n            this.push(51 /* Test */, func);\n        };\n\n        BasicOpcodeBuilder.prototype.jump = function jump(target) {\n            this.reserve(44 /* Jump */);\n            this.labels.target(this.pos, 44 /* Jump */, target);\n        };\n\n        BasicOpcodeBuilder.prototype.jumpIf = function jumpIf(target) {\n            this.reserve(45 /* JumpIf */);\n            this.labels.target(this.pos, 45 /* JumpIf */, target);\n        };\n\n        BasicOpcodeBuilder.prototype.jumpUnless = function jumpUnless(target) {\n            this.reserve(46 /* JumpUnless */);\n            this.labels.target(this.pos, 46 /* JumpUnless */, target);\n        };\n\n        BasicOpcodeBuilder.prototype.string = function string(_string) {\n            return this.constants.string(_string);\n        };\n\n        BasicOpcodeBuilder.prototype.float = function float(num) {\n            return this.constants.float(num);\n        };\n\n        BasicOpcodeBuilder.prototype.names = function names(_names) {\n            var names = [];\n            for (var i = 0; i < _names.length; i++) {\n                var n = _names[i];\n                names[i] = this.constants.string(n);\n            }\n            return this.constants.array(names);\n        };\n\n        BasicOpcodeBuilder.prototype.symbols = function symbols(_symbols) {\n            return this.constants.array(_symbols);\n        };\n\n        BasicOpcodeBuilder.prototype.other = function other(value) {\n            return this.constants.other(value);\n        };\n\n        BasicOpcodeBuilder.prototype.block = function block(_block2) {\n            return _block2 ? this.constants.block(_block2) : 0;\n        };\n\n        BasicOpcodeBuilder.prototype.func = function func(_func2) {\n            return this.constants.function(_func2);\n        };\n\n        _createClass$1(BasicOpcodeBuilder, [{\n            key: 'pos',\n            get: function () {\n                return (0, _util.typePos)(this.heap.size());\n            }\n        }, {\n            key: 'nextPos',\n            get: function () {\n                return this.heap.size();\n            }\n        }, {\n            key: 'labels',\n            get: function () {\n                return this.labelsStack.current;\n            }\n        }]);\n\n        return BasicOpcodeBuilder;\n    }();\n\n    function isCompilableExpression(expr$$1) {\n        return typeof expr$$1 === 'object' && expr$$1 !== null && typeof expr$$1.compile === 'function';\n    }\n\n    var OpcodeBuilder = function (_BasicOpcodeBuilder) {\n        _inherits$9(OpcodeBuilder, _BasicOpcodeBuilder);\n\n        function OpcodeBuilder(env, meta) {\n            var program = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : env.program;\n\n            _classCallCheck$19(this, OpcodeBuilder);\n\n            var _this = _possibleConstructorReturn$9(this, _BasicOpcodeBuilder.call(this, env, meta, program));\n\n            _this.component = new ComponentBuilder(_this);\n            return _this;\n        }\n\n        OpcodeBuilder.prototype.compileArgs = function compileArgs(params, hash, synthetic) {\n            var positional = 0;\n            if (params) {\n                for (var i = 0; i < params.length; i++) {\n                    expr(params[i], this);\n                }\n                positional = params.length;\n            }\n            this.pushImmediate(positional);\n            var names = _util.EMPTY_ARRAY;\n            if (hash) {\n                names = hash[0];\n                var val = hash[1];\n                for (var _i = 0; _i < val.length; _i++) {\n                    expr(val[_i], this);\n                }\n            }\n            this.pushImmediate(names);\n            this.pushArgs(synthetic);\n        };\n\n        OpcodeBuilder.prototype.compile = function compile(expr$$1) {\n            if (isCompilableExpression(expr$$1)) {\n                return expr$$1.compile(this);\n            } else {\n                return expr$$1;\n            }\n        };\n\n        OpcodeBuilder.prototype.guardedAppend = function guardedAppend(expression, trusting) {\n            this.startLabels();\n            this.pushFrame();\n            this.returnTo('END');\n            expr(expression, this);\n            this.dup();\n            this.test(function (reference$$1) {\n                return IsComponentDefinitionReference.create(reference$$1);\n            });\n            this.enter(2);\n            this.jumpUnless('ELSE');\n            this.pushDynamicComponentManager();\n            this.invokeComponent(null, null, null, null, null);\n            this.exit();\n            this.return();\n            this.label('ELSE');\n            if (trusting) {\n                this.trustingAppend();\n            } else {\n                this.cautiousAppend();\n            }\n            this.exit();\n            this.return();\n            this.label('END');\n            this.popFrame();\n            this.stopLabels();\n        };\n\n        OpcodeBuilder.prototype.invokeComponent = function invokeComponent(attrs, params, hash, block) {\n            var inverse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n            this.fetch(Register.s0);\n            this.dup(Register.sp, 1);\n            this.load(Register.s0);\n            this.pushBlock(block);\n            this.pushBlock(inverse);\n            this.compileArgs(params, hash, false);\n            this.prepareArgs(Register.s0);\n            this.beginComponentTransaction();\n            this.pushDynamicScope();\n            this.createComponent(Register.s0, block !== null, inverse !== null);\n            this.registerComponentDestructor(Register.s0);\n            this.getComponentSelf(Register.s0);\n            this.getComponentLayout(Register.s0);\n            this.invokeDynamic(new InvokeDynamicLayout(attrs && attrs.scan()));\n            this.popFrame();\n            this.popScope();\n            this.popDynamicScope();\n            this.commitComponentTransaction();\n            this.load(Register.s0);\n        };\n\n        OpcodeBuilder.prototype.template = function template(block) {\n            if (!block) return null;\n            return new RawInlineBlock(this.meta, block.statements, block.parameters);\n        };\n\n        return OpcodeBuilder;\n    }(BasicOpcodeBuilder);\n\n    function _classCallCheck$18(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var Ops$3 = _wireFormat.Ops;\n    var ATTRS_BLOCK = '&attrs';\n\n    var Compilers = function () {\n        function Compilers() {\n            var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n            _classCallCheck$18(this, Compilers);\n\n            this.offset = offset;\n            this.names = (0, _util.dict)();\n            this.funcs = [];\n        }\n\n        Compilers.prototype.add = function add(name, func) {\n            this.funcs.push(func);\n            this.names[name] = this.funcs.length - 1;\n        };\n\n        Compilers.prototype.compile = function compile(sexp, builder) {\n            var name = sexp[this.offset];\n            var index = this.names[name];\n            var func = this.funcs[index];\n            (0, _util.assert)(!!func, 'expected an implementation for ' + (this.offset === 0 ? Ops$3[sexp[0]] : Ops$2[sexp[1]]));\n            func(sexp, builder);\n        };\n\n        return Compilers;\n    }();\n\n    var STATEMENTS = new Compilers();\n    var CLIENT_SIDE = new Compilers(1);\n    STATEMENTS.add(Ops$3.Text, function (sexp, builder) {\n        builder.text(sexp[1]);\n    });\n    STATEMENTS.add(Ops$3.Comment, function (sexp, builder) {\n        builder.comment(sexp[1]);\n    });\n    STATEMENTS.add(Ops$3.CloseElement, function (_sexp, builder) {\n        builder.closeElement();\n    });\n    STATEMENTS.add(Ops$3.FlushElement, function (_sexp, builder) {\n        builder.flushElement();\n    });\n    STATEMENTS.add(Ops$3.Modifier, function (sexp, builder) {\n        var env = builder.env,\n            meta = builder.meta;\n        var name = sexp[1],\n            params = sexp[2],\n            hash = sexp[3];\n\n        if (env.hasModifier(name, meta.templateMeta)) {\n            builder.compileArgs(params, hash, true);\n            builder.modifier(env.lookupModifier(name, meta.templateMeta));\n        } else {\n            throw new Error('Compile Error ' + name + ' is not a modifier: Helpers may not be used in the element form.');\n        }\n    });\n    STATEMENTS.add(Ops$3.StaticAttr, function (sexp, builder) {\n        var name = sexp[1],\n            value = sexp[2],\n            namespace = sexp[3];\n\n        builder.staticAttr(name, namespace, value);\n    });\n    STATEMENTS.add(Ops$3.DynamicAttr, function (sexp, builder) {\n        dynamicAttr(sexp, false, builder);\n    });\n    STATEMENTS.add(Ops$3.TrustingAttr, function (sexp, builder) {\n        dynamicAttr(sexp, true, builder);\n    });\n    function dynamicAttr(sexp, trusting, builder) {\n        var name = sexp[1],\n            value = sexp[2],\n            namespace = sexp[3];\n\n        expr(value, builder);\n        if (namespace) {\n            builder.dynamicAttrNS(name, namespace, trusting);\n        } else {\n            builder.dynamicAttr(name, trusting);\n        }\n    }\n    STATEMENTS.add(Ops$3.OpenElement, function (sexp, builder) {\n        builder.openPrimitiveElement(sexp[1]);\n    });\n    CLIENT_SIDE.add(Ops$2.OpenComponentElement, function (sexp, builder) {\n        builder.pushComponentOperations();\n        builder.openElementWithOperations(sexp[2]);\n    });\n    CLIENT_SIDE.add(Ops$2.DidCreateElement, function (_sexp, builder) {\n        builder.didCreateElement(Register.s0);\n    });\n    CLIENT_SIDE.add(Ops$2.DidRenderLayout, function (_sexp, builder) {\n        builder.didRenderLayout(Register.s0);\n    });\n    STATEMENTS.add(Ops$3.Append, function (sexp, builder) {\n        var value = sexp[1],\n            trusting = sexp[2];\n\n        var _builder$env$macros = builder.env.macros(),\n            inlines = _builder$env$macros.inlines;\n\n        var returned = inlines.compile(sexp, builder) || value;\n        if (returned === true) return;\n        var isGet = E.isGet(value);\n        var isMaybeLocal = E.isMaybeLocal(value);\n        if (trusting) {\n            builder.guardedAppend(value, true);\n        } else {\n            if (isGet || isMaybeLocal) {\n                builder.guardedAppend(value, false);\n            } else {\n                expr(value, builder);\n                builder.cautiousAppend();\n            }\n        }\n    });\n    STATEMENTS.add(Ops$3.Block, function (sexp, builder) {\n        var name = sexp[1],\n            params = sexp[2],\n            hash = sexp[3],\n            _template = sexp[4],\n            _inverse = sexp[5];\n\n        var template = builder.template(_template);\n        var inverse = builder.template(_inverse);\n        var templateBlock = template && template.scan();\n        var inverseBlock = inverse && inverse.scan();\n\n        var _builder$env$macros2 = builder.env.macros(),\n            blocks = _builder$env$macros2.blocks;\n\n        blocks.compile(name, params, hash, templateBlock, inverseBlock, builder);\n    });\n    var InvokeDynamicLayout = function () {\n        function InvokeDynamicLayout(attrs) {\n            _classCallCheck$18(this, InvokeDynamicLayout);\n\n            this.attrs = attrs;\n        }\n\n        InvokeDynamicLayout.prototype.invoke = function invoke(vm, layout) {\n            var _layout$symbolTable = layout.symbolTable,\n                symbols = _layout$symbolTable.symbols,\n                hasEval = _layout$symbolTable.hasEval;\n\n            var stack = vm.stack;\n            var scope = vm.pushRootScope(symbols.length + 1, true);\n            scope.bindSelf(stack.pop());\n            scope.bindBlock(symbols.indexOf(ATTRS_BLOCK) + 1, this.attrs);\n            var lookup = null;\n            var $eval = -1;\n            if (hasEval) {\n                $eval = symbols.indexOf('$eval') + 1;\n                lookup = (0, _util.dict)();\n            }\n            var callerNames = stack.pop();\n            for (var i = callerNames.length - 1; i >= 0; i--) {\n                var symbol = symbols.indexOf(callerNames[i]);\n                var value = stack.pop();\n                if (symbol !== -1) scope.bindSymbol(symbol + 1, value);\n                if (hasEval) lookup[callerNames[i]] = value;\n            }\n            var numPositionalArgs = stack.pop();\n            (0, _util.assert)(typeof numPositionalArgs === 'number', '[BUG] Incorrect value of positional argument count found during invoke-dynamic-layout.');\n            // Currently we don't support accessing positional args in templates, so just throw them away\n            stack.pop(numPositionalArgs);\n            var inverseSymbol = symbols.indexOf('&inverse');\n            var inverse = stack.pop();\n            if (inverseSymbol !== -1) {\n                scope.bindBlock(inverseSymbol + 1, inverse);\n            }\n            if (lookup) lookup['&inverse'] = inverse;\n            var defaultSymbol = symbols.indexOf('&default');\n            var defaultBlock = stack.pop();\n            if (defaultSymbol !== -1) {\n                scope.bindBlock(defaultSymbol + 1, defaultBlock);\n            }\n            if (lookup) lookup['&default'] = defaultBlock;\n            if (lookup) scope.bindEvalScope(lookup);\n            vm.pushFrame();\n            vm.call(layout.handle);\n        };\n\n        InvokeDynamicLayout.prototype.toJSON = function toJSON() {\n            return { GlimmerDebug: '<invoke-dynamic-layout>' };\n        };\n\n        return InvokeDynamicLayout;\n    }();\n    STATEMENTS.add(Ops$3.Component, function (sexp, builder) {\n        var tag = sexp[1],\n            attrs = sexp[2],\n            args = sexp[3],\n            block = sexp[4];\n\n        if (builder.env.hasComponentDefinition(tag, builder.meta.templateMeta)) {\n            var child = builder.template(block);\n            var attrsBlock = new RawInlineBlock(builder.meta, attrs, _util.EMPTY_ARRAY);\n            var definition = builder.env.getComponentDefinition(tag, builder.meta.templateMeta);\n            builder.pushComponentManager(definition);\n            builder.invokeComponent(attrsBlock, null, args, child && child.scan());\n        } else if (block && block.parameters.length) {\n            throw new Error('Compile Error: Cannot find component ' + tag);\n        } else {\n            builder.openPrimitiveElement(tag);\n            for (var i = 0; i < attrs.length; i++) {\n                STATEMENTS.compile(attrs[i], builder);\n            }\n            builder.flushElement();\n            if (block) {\n                var stmts = block.statements;\n                for (var _i = 0; _i < stmts.length; _i++) {\n                    STATEMENTS.compile(stmts[_i], builder);\n                }\n            }\n            builder.closeElement();\n        }\n    });\n    var PartialInvoker = function () {\n        function PartialInvoker(outerSymbols, evalInfo) {\n            _classCallCheck$18(this, PartialInvoker);\n\n            this.outerSymbols = outerSymbols;\n            this.evalInfo = evalInfo;\n        }\n\n        PartialInvoker.prototype.invoke = function invoke(vm, _partial) {\n            var partial = _partial;\n            var partialSymbols = partial.symbolTable.symbols;\n            var outerScope = vm.scope();\n            var evalScope = outerScope.getEvalScope();\n            var partialScope = vm.pushRootScope(partialSymbols.length, false);\n            partialScope.bindCallerScope(outerScope.getCallerScope());\n            partialScope.bindEvalScope(evalScope);\n            partialScope.bindSelf(outerScope.getSelf());\n            var evalInfo = this.evalInfo,\n                outerSymbols = this.outerSymbols;\n\n            var locals = Object.create(outerScope.getPartialMap());\n            for (var i = 0; i < evalInfo.length; i++) {\n                var slot = evalInfo[i];\n                var name = outerSymbols[slot - 1];\n                var ref = outerScope.getSymbol(slot);\n                locals[name] = ref;\n            }\n            if (evalScope) {\n                for (var _i2 = 0; _i2 < partialSymbols.length; _i2++) {\n                    var _name = partialSymbols[_i2];\n                    var symbol = _i2 + 1;\n                    var value = evalScope[_name];\n                    if (value !== undefined) partialScope.bind(symbol, value);\n                }\n            }\n            partialScope.bindPartialMap(locals);\n            vm.pushFrame();\n            vm.call(partial.handle);\n        };\n\n        return PartialInvoker;\n    }();\n    STATEMENTS.add(Ops$3.Partial, function (sexp, builder) {\n        var name = sexp[1],\n            evalInfo = sexp[2];\n        var _builder$meta = builder.meta,\n            templateMeta = _builder$meta.templateMeta,\n            symbols = _builder$meta.symbols;\n\n        function helper(vm, args) {\n            var env = vm.env;\n\n            var nameRef = args.positional.at(0);\n            return (0, _reference2.map)(nameRef, function (n) {\n                if (typeof n === 'string' && n) {\n                    if (!env.hasPartial(n, templateMeta)) {\n                        throw new Error('Could not find a partial named \"' + n + '\"');\n                    }\n                    return env.lookupPartial(n, templateMeta);\n                } else if (n) {\n                    throw new Error('Could not find a partial named \"' + String(n) + '\"');\n                } else {\n                    return null;\n                }\n            });\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        expr(name, builder);\n        builder.pushImmediate(1);\n        builder.pushImmediate(_util.EMPTY_ARRAY);\n        builder.pushArgs(true);\n        builder.helper(helper);\n        builder.dup();\n        builder.test('simple');\n        builder.enter(2);\n        builder.jumpUnless('ELSE');\n        builder.getPartialTemplate();\n        builder.compileDynamicBlock();\n        builder.invokeDynamic(new PartialInvoker(symbols, evalInfo));\n        builder.popScope();\n        builder.popFrame();\n        builder.label('ELSE');\n        builder.exit();\n        builder.return();\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n\n    var InvokeDynamicYield = function () {\n        function InvokeDynamicYield(callerCount) {\n            _classCallCheck$18(this, InvokeDynamicYield);\n\n            this.callerCount = callerCount;\n        }\n\n        InvokeDynamicYield.prototype.invoke = function invoke(vm, block) {\n            var callerCount = this.callerCount;\n\n            var stack = vm.stack;\n            if (!block) {\n                // To balance the pop{Frame,Scope}\n                vm.pushFrame();\n                vm.pushCallerScope();\n                return;\n            }\n            var table = block.symbolTable;\n            var locals = table.parameters; // always present in inline blocks\n            var calleeCount = locals ? locals.length : 0;\n            var count = Math.min(callerCount, calleeCount);\n            vm.pushFrame();\n            vm.pushCallerScope(calleeCount > 0);\n            var scope = vm.scope();\n            for (var i = 0; i < count; i++) {\n                scope.bindSymbol(locals[i], stack.fromBase(callerCount - i));\n            }\n            vm.call(block.handle);\n        };\n\n        InvokeDynamicYield.prototype.toJSON = function toJSON() {\n            return { GlimmerDebug: '<invoke-dynamic-yield caller-count=' + this.callerCount + '>' };\n        };\n\n        return InvokeDynamicYield;\n    }();\n\n    STATEMENTS.add(Ops$3.Yield, function (sexp, builder) {\n        var to = sexp[1],\n            params = sexp[2];\n\n        var count = compileList(params, builder);\n        builder.getBlock(to);\n        builder.compileDynamicBlock();\n        builder.invokeDynamic(new InvokeDynamicYield(count));\n        builder.popScope();\n        builder.popFrame();\n        if (count) {\n            builder.pop(count);\n        }\n    });\n    STATEMENTS.add(Ops$3.Debugger, function (sexp, builder) {\n        var evalInfo = sexp[1];\n\n        builder.debugger(builder.meta.symbols, evalInfo);\n    });\n    STATEMENTS.add(Ops$3.ClientSideStatement, function (sexp, builder) {\n        CLIENT_SIDE.compile(sexp, builder);\n    });\n    var EXPRESSIONS = new Compilers();\n    var CLIENT_SIDE_EXPRS = new Compilers(1);\n    var E = _wireFormat.Expressions;\n    function expr(expression, builder) {\n        if (Array.isArray(expression)) {\n            EXPRESSIONS.compile(expression, builder);\n        } else {\n            builder.primitive(expression);\n        }\n    }\n    EXPRESSIONS.add(Ops$3.Unknown, function (sexp, builder) {\n        var name = sexp[1];\n        if (builder.env.hasHelper(name, builder.meta.templateMeta)) {\n            EXPRESSIONS.compile([Ops$3.Helper, name, _util.EMPTY_ARRAY, null], builder);\n        } else if (builder.meta.asPartial) {\n            builder.resolveMaybeLocal(name);\n        } else {\n            builder.getVariable(0);\n            builder.getProperty(name);\n        }\n    });\n    EXPRESSIONS.add(Ops$3.Concat, function (sexp, builder) {\n        var parts = sexp[1];\n        for (var i = 0; i < parts.length; i++) {\n            expr(parts[i], builder);\n        }\n        builder.concat(parts.length);\n    });\n    CLIENT_SIDE_EXPRS.add(Ops$2.FunctionExpression, function (sexp, builder) {\n        builder.function(sexp[2]);\n    });\n    EXPRESSIONS.add(Ops$3.Helper, function (sexp, builder) {\n        var env = builder.env,\n            meta = builder.meta;\n        var name = sexp[1],\n            params = sexp[2],\n            hash = sexp[3];\n\n        if (env.hasHelper(name, meta.templateMeta)) {\n            builder.compileArgs(params, hash, true);\n            builder.helper(env.lookupHelper(name, meta.templateMeta));\n        } else {\n            throw new Error('Compile Error: ' + name + ' is not a helper');\n        }\n    });\n    EXPRESSIONS.add(Ops$3.Get, function (sexp, builder) {\n        var head = sexp[1],\n            path = sexp[2];\n\n        builder.getVariable(head);\n        for (var i = 0; i < path.length; i++) {\n            builder.getProperty(path[i]);\n        }\n    });\n    EXPRESSIONS.add(Ops$3.MaybeLocal, function (sexp, builder) {\n        var path = sexp[1];\n\n        if (builder.meta.asPartial) {\n            var head = path[0];\n            path = path.slice(1);\n            builder.resolveMaybeLocal(head);\n        } else {\n            builder.getVariable(0);\n        }\n        for (var i = 0; i < path.length; i++) {\n            builder.getProperty(path[i]);\n        }\n    });\n    EXPRESSIONS.add(Ops$3.Undefined, function (_sexp, builder) {\n        return builder.primitive(undefined);\n    });\n    EXPRESSIONS.add(Ops$3.HasBlock, function (sexp, builder) {\n        builder.hasBlock(sexp[1]);\n    });\n    EXPRESSIONS.add(Ops$3.HasBlockParams, function (sexp, builder) {\n        builder.hasBlockParams(sexp[1]);\n    });\n    EXPRESSIONS.add(Ops$3.ClientSideExpression, function (sexp, builder) {\n        CLIENT_SIDE_EXPRS.compile(sexp, builder);\n    });\n    function compileList(params, builder) {\n        if (!params) return 0;\n        for (var i = 0; i < params.length; i++) {\n            expr(params[i], builder);\n        }\n        return params.length;\n    }\n    var Blocks = function () {\n        function Blocks() {\n            _classCallCheck$18(this, Blocks);\n\n            this.names = (0, _util.dict)();\n            this.funcs = [];\n        }\n\n        Blocks.prototype.add = function add(name, func) {\n            this.funcs.push(func);\n            this.names[name] = this.funcs.length - 1;\n        };\n\n        Blocks.prototype.addMissing = function addMissing(func) {\n            this.missing = func;\n        };\n\n        Blocks.prototype.compile = function compile(name, params, hash, template, inverse, builder) {\n            var index = this.names[name];\n            if (index === undefined) {\n                (0, _util.assert)(!!this.missing, name + ' not found, and no catch-all block handler was registered');\n                var func = this.missing;\n                var handled = func(name, params, hash, template, inverse, builder);\n                (0, _util.assert)(!!handled, name + ' not found, and the catch-all block handler didn\\'t handle it');\n            } else {\n                var _func = this.funcs[index];\n                _func(params, hash, template, inverse, builder);\n            }\n        };\n\n        return Blocks;\n    }();\n    var BLOCKS = new Blocks();\n    var Inlines = function () {\n        function Inlines() {\n            _classCallCheck$18(this, Inlines);\n\n            this.names = (0, _util.dict)();\n            this.funcs = [];\n        }\n\n        Inlines.prototype.add = function add(name, func) {\n            this.funcs.push(func);\n            this.names[name] = this.funcs.length - 1;\n        };\n\n        Inlines.prototype.addMissing = function addMissing(func) {\n            this.missing = func;\n        };\n\n        Inlines.prototype.compile = function compile(sexp, builder) {\n            var value = sexp[1];\n            // TODO: Fix this so that expression macros can return\n            // things like components, so that {{component foo}}\n            // is the same as {{(component foo)}}\n            if (!Array.isArray(value)) return ['expr', value];\n            var name = void 0;\n            var params = void 0;\n            var hash = void 0;\n            if (value[0] === Ops$3.Helper) {\n                name = value[1];\n                params = value[2];\n                hash = value[3];\n            } else if (value[0] === Ops$3.Unknown) {\n                name = value[1];\n                params = hash = null;\n            } else {\n                return ['expr', value];\n            }\n            var index = this.names[name];\n            if (index === undefined && this.missing) {\n                var func = this.missing;\n                var returned = func(name, params, hash, builder);\n                return returned === false ? ['expr', value] : returned;\n            } else if (index !== undefined) {\n                var _func2 = this.funcs[index];\n                var _returned = _func2(name, params, hash, builder);\n                return _returned === false ? ['expr', value] : _returned;\n            } else {\n                return ['expr', value];\n            }\n        };\n\n        return Inlines;\n    }();\n    var INLINES = new Inlines();\n    populateBuiltins(BLOCKS, INLINES);\n    function populateBuiltins() {\n        var blocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Blocks();\n        var inlines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Inlines();\n\n        blocks.add('if', function (params, _hash, template, inverse, builder) {\n            //        PutArgs\n            //        Test(Environment)\n            //        Enter(BEGIN, END)\n            // BEGIN: Noop\n            //        JumpUnless(ELSE)\n            //        Evaluate(default)\n            //        Jump(END)\n            // ELSE:  Noop\n            //        Evalulate(inverse)\n            // END:   Noop\n            //        Exit\n            if (!params || params.length !== 1) {\n                throw new Error('SYNTAX ERROR: #if requires a single argument');\n            }\n            builder.startLabels();\n            builder.pushFrame();\n            builder.returnTo('END');\n            expr(params[0], builder);\n            builder.test('environment');\n            builder.enter(1);\n            builder.jumpUnless('ELSE');\n            builder.invokeStatic(template);\n            if (inverse) {\n                builder.jump('EXIT');\n                builder.label('ELSE');\n                builder.invokeStatic(inverse);\n                builder.label('EXIT');\n                builder.exit();\n                builder.return();\n            } else {\n                builder.label('ELSE');\n                builder.exit();\n                builder.return();\n            }\n            builder.label('END');\n            builder.popFrame();\n            builder.stopLabels();\n        });\n        blocks.add('unless', function (params, _hash, template, inverse, builder) {\n            //        PutArgs\n            //        Test(Environment)\n            //        Enter(BEGIN, END)\n            // BEGIN: Noop\n            //        JumpUnless(ELSE)\n            //        Evaluate(default)\n            //        Jump(END)\n            // ELSE:  Noop\n            //        Evalulate(inverse)\n            // END:   Noop\n            //        Exit\n            if (!params || params.length !== 1) {\n                throw new Error('SYNTAX ERROR: #unless requires a single argument');\n            }\n            builder.startLabels();\n            builder.pushFrame();\n            builder.returnTo('END');\n            expr(params[0], builder);\n            builder.test('environment');\n            builder.enter(1);\n            builder.jumpIf('ELSE');\n            builder.invokeStatic(template);\n            if (inverse) {\n                builder.jump('EXIT');\n                builder.label('ELSE');\n                builder.invokeStatic(inverse);\n                builder.label('EXIT');\n                builder.exit();\n                builder.return();\n            } else {\n                builder.label('ELSE');\n                builder.exit();\n                builder.return();\n            }\n            builder.label('END');\n            builder.popFrame();\n            builder.stopLabels();\n        });\n        blocks.add('with', function (params, _hash, template, inverse, builder) {\n            //        PutArgs\n            //        Test(Environment)\n            //        Enter(BEGIN, END)\n            // BEGIN: Noop\n            //        JumpUnless(ELSE)\n            //        Evaluate(default)\n            //        Jump(END)\n            // ELSE:  Noop\n            //        Evalulate(inverse)\n            // END:   Noop\n            //        Exit\n            if (!params || params.length !== 1) {\n                throw new Error('SYNTAX ERROR: #with requires a single argument');\n            }\n            builder.startLabels();\n            builder.pushFrame();\n            builder.returnTo('END');\n            expr(params[0], builder);\n            builder.dup();\n            builder.test('environment');\n            builder.enter(2);\n            builder.jumpUnless('ELSE');\n            builder.invokeStatic(template, 1);\n            if (inverse) {\n                builder.jump('EXIT');\n                builder.label('ELSE');\n                builder.invokeStatic(inverse);\n                builder.label('EXIT');\n                builder.exit();\n                builder.return();\n            } else {\n                builder.label('ELSE');\n                builder.exit();\n                builder.return();\n            }\n            builder.label('END');\n            builder.popFrame();\n            builder.stopLabels();\n        });\n        blocks.add('each', function (params, hash, template, inverse, builder) {\n            //         Enter(BEGIN, END)\n            // BEGIN:  Noop\n            //         PutArgs\n            //         PutIterable\n            //         JumpUnless(ELSE)\n            //         EnterList(BEGIN2, END2)\n            // ITER:   Noop\n            //         NextIter(BREAK)\n            // BEGIN2: Noop\n            //         PushChildScope\n            //         Evaluate(default)\n            //         PopScope\n            // END2:   Noop\n            //         Exit\n            //         Jump(ITER)\n            // BREAK:  Noop\n            //         ExitList\n            //         Jump(END)\n            // ELSE:   Noop\n            //         Evalulate(inverse)\n            // END:    Noop\n            //         Exit\n            builder.startLabels();\n            builder.pushFrame();\n            builder.returnTo('END');\n            if (hash && hash[0][0] === 'key') {\n                expr(hash[1][0], builder);\n            } else {\n                builder.primitive(null);\n            }\n            expr(params[0], builder);\n            builder.enter(2);\n            builder.putIterator();\n            builder.jumpUnless('ELSE');\n            builder.pushFrame();\n            builder.returnTo('ITER');\n            builder.dup(Register.fp, 1);\n            builder.enterList('BODY');\n            builder.label('ITER');\n            builder.iterate('BREAK');\n            builder.label('BODY');\n            builder.invokeStatic(template, 2);\n            builder.pop(2);\n            builder.exit();\n            builder.return();\n            builder.label('BREAK');\n            builder.exitList();\n            builder.popFrame();\n            if (inverse) {\n                builder.jump('EXIT');\n                builder.label('ELSE');\n                builder.invokeStatic(inverse);\n                builder.label('EXIT');\n                builder.exit();\n                builder.return();\n            } else {\n                builder.label('ELSE');\n                builder.exit();\n                builder.return();\n            }\n            builder.label('END');\n            builder.popFrame();\n            builder.stopLabels();\n        });\n        blocks.add('-in-element', function (params, hash, template, _inverse, builder) {\n            if (!params || params.length !== 1) {\n                throw new Error('SYNTAX ERROR: #-in-element requires a single argument');\n            }\n            builder.startLabels();\n            builder.pushFrame();\n            builder.returnTo('END');\n            if (hash && hash[0].length) {\n                var keys = hash[0],\n                    values = hash[1];\n\n                if (keys.length === 1 && keys[0] === 'nextSibling') {\n                    expr(values[0], builder);\n                } else {\n                    throw new Error('SYNTAX ERROR: #-in-element does not take a `' + keys[0] + '` option');\n                }\n            } else {\n                expr(null, builder);\n            }\n            expr(params[0], builder);\n            builder.dup();\n            builder.test('simple');\n            builder.enter(3);\n            builder.jumpUnless('ELSE');\n            builder.pushRemoteElement();\n            builder.invokeStatic(template);\n            builder.popRemoteElement();\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n            builder.label('END');\n            builder.popFrame();\n            builder.stopLabels();\n        });\n        blocks.add('-with-dynamic-vars', function (_params, hash, template, _inverse, builder) {\n            if (hash) {\n                var names = hash[0],\n                    expressions = hash[1];\n\n                compileList(expressions, builder);\n                builder.pushDynamicScope();\n                builder.bindDynamicScope(names);\n                builder.invokeStatic(template);\n                builder.popDynamicScope();\n            } else {\n                builder.invokeStatic(template);\n            }\n        });\n        return { blocks: blocks, inlines: inlines };\n    }\n    function compileStatement(statement, builder) {\n        STATEMENTS.compile(statement, builder);\n    }\n    function compileStatements(statements, meta, env) {\n        var b = new OpcodeBuilder(env, meta);\n        for (var i = 0; i < statements.length; i++) {\n            compileStatement(statements[i], b);\n        }\n        return b;\n    }\n\n    function _classCallCheck$16(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var CompilableTemplate = function () {\n        function CompilableTemplate(statements, symbolTable) {\n            _classCallCheck$16(this, CompilableTemplate);\n\n            this.statements = statements;\n            this.symbolTable = symbolTable;\n            this.compiledStatic = null;\n            this.compiledDynamic = null;\n        }\n\n        CompilableTemplate.prototype.compileStatic = function compileStatic(env) {\n            var compiledStatic = this.compiledStatic;\n\n            if (!compiledStatic) {\n                var builder = compileStatements(this.statements, this.symbolTable.meta, env);\n                builder.finalize();\n                var handle = builder.start;\n                compiledStatic = this.compiledStatic = new CompiledStaticTemplate(handle);\n            }\n            return compiledStatic;\n        };\n\n        CompilableTemplate.prototype.compileDynamic = function compileDynamic(env) {\n            var compiledDynamic = this.compiledDynamic;\n\n            if (!compiledDynamic) {\n                var staticBlock = this.compileStatic(env);\n                compiledDynamic = new CompiledDynamicTemplate(staticBlock.handle, this.symbolTable);\n            }\n            return compiledDynamic;\n        };\n\n        return CompilableTemplate;\n    }();\n\n    function _classCallCheck$15(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var Ops$1 = _wireFormat.Ops;\n\n    var Scanner = function () {\n        function Scanner(block, env) {\n            _classCallCheck$15(this, Scanner);\n\n            this.block = block;\n            this.env = env;\n        }\n\n        Scanner.prototype.scanEntryPoint = function scanEntryPoint(meta) {\n            var block = this.block;\n            var statements = block.statements,\n                symbols = block.symbols,\n                hasEval = block.hasEval;\n\n            return new CompilableTemplate(statements, { meta: meta, symbols: symbols, hasEval: hasEval });\n        };\n\n        Scanner.prototype.scanBlock = function scanBlock(meta) {\n            var block = this.block;\n            var statements = block.statements;\n\n            return new CompilableTemplate(statements, { meta: meta, parameters: _util.EMPTY_ARRAY });\n        };\n\n        Scanner.prototype.scanLayout = function scanLayout(meta, attrs, componentName) {\n            var block = this.block;\n            var statements = block.statements,\n                symbols = block.symbols,\n                hasEval = block.hasEval;\n\n            var symbolTable = { meta: meta, hasEval: hasEval, symbols: symbols };\n            var newStatements = [];\n            var toplevel = void 0;\n            var inTopLevel = false;\n            for (var i = 0; i < statements.length; i++) {\n                var statement = statements[i];\n                if (_wireFormat.Statements.isComponent(statement)) {\n                    var tagName = statement[1];\n                    if (!this.env.hasComponentDefinition(tagName, meta.templateMeta)) {\n                        if (toplevel !== undefined) {\n                            newStatements.push([Ops$1.OpenElement, tagName]);\n                        } else {\n                            toplevel = tagName;\n                            decorateTopLevelElement(tagName, symbols, attrs, newStatements);\n                        }\n                        addFallback(statement, newStatements);\n                    } else {\n                        if (toplevel === undefined && tagName === componentName) {\n                            toplevel = tagName;\n                            decorateTopLevelElement(tagName, symbols, attrs, newStatements);\n                            addFallback(statement, newStatements);\n                        } else {\n                            newStatements.push(statement);\n                        }\n                    }\n                } else {\n                    if (toplevel === undefined && _wireFormat.Statements.isOpenElement(statement)) {\n                        toplevel = statement[1];\n                        inTopLevel = true;\n                        decorateTopLevelElement(toplevel, symbols, attrs, newStatements);\n                    } else {\n                        if (inTopLevel) {\n                            if (_wireFormat.Statements.isFlushElement(statement)) {\n                                inTopLevel = false;\n                            } else if (_wireFormat.Statements.isModifier(statement)) {\n                                throw Error('Found modifier \"' + statement[1] + '\" on the top-level element of \"' + componentName + '\". Modifiers cannot be on the top-level element');\n                            }\n                        }\n                        newStatements.push(statement);\n                    }\n                }\n            }\n            newStatements.push([Ops$1.ClientSideStatement, Ops$2.DidRenderLayout]);\n            return new CompilableTemplate(newStatements, symbolTable);\n        };\n\n        return Scanner;\n    }();\n\n    function addFallback(statement, buffer) {\n        var attrs = statement[2],\n            block = statement[4];\n\n        for (var i = 0; i < attrs.length; i++) {\n            buffer.push(attrs[i]);\n        }\n        buffer.push([Ops$1.FlushElement]);\n        if (block) {\n            var statements = block.statements;\n\n            for (var _i = 0; _i < statements.length; _i++) {\n                buffer.push(statements[_i]);\n            }\n        }\n        buffer.push([Ops$1.CloseElement]);\n    }\n    function decorateTopLevelElement(tagName, symbols, attrs, buffer) {\n        var attrsSymbol = symbols.push(ATTRS_BLOCK);\n        buffer.push([Ops$1.ClientSideStatement, Ops$2.OpenComponentElement, tagName]);\n        buffer.push([Ops$1.ClientSideStatement, Ops$2.DidCreateElement]);\n        buffer.push([Ops$1.Yield, attrsSymbol, _util.EMPTY_ARRAY]);\n        buffer.push.apply(buffer, attrs);\n    }\n\n    function _classCallCheck$24(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var Constants = function () {\n        function Constants() {\n            _classCallCheck$24(this, Constants);\n\n            // `0` means NULL\n            this.references = [];\n            this.strings = [];\n            this.expressions = [];\n            this.floats = [];\n            this.arrays = [];\n            this.blocks = [];\n            this.functions = [];\n            this.others = [];\n        }\n\n        Constants.prototype.getReference = function getReference(value) {\n            return this.references[value - 1];\n        };\n\n        Constants.prototype.reference = function reference$$1(value) {\n            var index = this.references.length;\n            this.references.push(value);\n            return index + 1;\n        };\n\n        Constants.prototype.getString = function getString(value) {\n            return this.strings[value - 1];\n        };\n\n        Constants.prototype.getFloat = function getFloat(value) {\n            return this.floats[value - 1];\n        };\n\n        Constants.prototype.float = function float(value) {\n            return this.floats.push(value);\n        };\n\n        Constants.prototype.string = function string(value) {\n            var index = this.strings.length;\n            this.strings.push(value);\n            return index + 1;\n        };\n\n        Constants.prototype.getExpression = function getExpression(value) {\n            return this.expressions[value - 1];\n        };\n\n        Constants.prototype.getArray = function getArray(value) {\n            return this.arrays[value - 1];\n        };\n\n        Constants.prototype.getNames = function getNames(value) {\n            var _names = [];\n            var names = this.getArray(value);\n            for (var i = 0; i < names.length; i++) {\n                var n = names[i];\n                _names[i] = this.getString(n);\n            }\n            return _names;\n        };\n\n        Constants.prototype.array = function array(values) {\n            var index = this.arrays.length;\n            this.arrays.push(values);\n            return index + 1;\n        };\n\n        Constants.prototype.getBlock = function getBlock(value) {\n            return this.blocks[value - 1];\n        };\n\n        Constants.prototype.block = function block(_block) {\n            var index = this.blocks.length;\n            this.blocks.push(_block);\n            return index + 1;\n        };\n\n        Constants.prototype.getFunction = function getFunction(value) {\n            return this.functions[value - 1];\n        };\n\n        Constants.prototype.function = function _function(f) {\n            var index = this.functions.length;\n            this.functions.push(f);\n            return index + 1;\n        };\n\n        Constants.prototype.getOther = function getOther(value) {\n            return this.others[value - 1];\n        };\n\n        Constants.prototype.other = function other(_other) {\n            var index = this.others.length;\n            this.others.push(_other);\n            return index + 1;\n        };\n\n        return Constants;\n    }();\n\n    var badProtocols = ['javascript:', 'vbscript:'];\n    var badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];\n    var badTagsForDataURI = ['EMBED'];\n    var badAttributes = ['href', 'src', 'background', 'action'];\n    var badAttributesForDataURI = ['src'];\n    function has(array, item) {\n        return array.indexOf(item) !== -1;\n    }\n    function checkURI(tagName, attribute) {\n        return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);\n    }\n    function checkDataURI(tagName, attribute) {\n        if (tagName === null) return false;\n        return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);\n    }\n    function requiresSanitization(tagName, attribute) {\n        return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);\n    }\n    function sanitizeAttributeValue(env, element, attribute, value) {\n        var tagName = null;\n        if (value === null || value === undefined) {\n            return value;\n        }\n        if (isSafeString(value)) {\n            return value.toHTML();\n        }\n        if (!element) {\n            tagName = null;\n        } else {\n            tagName = element.tagName.toUpperCase();\n        }\n        var str = normalizeTextValue(value);\n        if (checkURI(tagName, attribute)) {\n            var protocol = env.protocolForURL(str);\n            if (has(badProtocols, protocol)) {\n                return 'unsafe:' + str;\n            }\n        }\n        if (checkDataURI(tagName, attribute)) {\n            return 'unsafe:' + str;\n        }\n        return str;\n    }\n\n    /*\n     * @method normalizeProperty\n     * @param element {HTMLElement}\n     * @param slotName {String}\n     * @returns {Object} { name, type }\n     */\n    function normalizeProperty(element, slotName) {\n        var type = void 0,\n            normalized = void 0;\n        if (slotName in element) {\n            normalized = slotName;\n            type = 'prop';\n        } else {\n            var lower = slotName.toLowerCase();\n            if (lower in element) {\n                type = 'prop';\n                normalized = lower;\n            } else {\n                type = 'attr';\n                normalized = slotName;\n            }\n        }\n        if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {\n            type = 'attr';\n        }\n        return { normalized: normalized, type: type };\n    }\n\n    // properties that MUST be set as attributes, due to:\n    // * browser bug\n    // * strange spec outlier\n    var ATTR_OVERRIDES = {\n        // phantomjs < 2.0 lets you set it as a prop but won't reflect it\n        // back to the attribute. button.getAttribute('type') === null\n        BUTTON: { type: true, form: true },\n        INPUT: {\n            // Some version of IE (like IE9) actually throw an exception\n            // if you set input.type = 'something-unknown'\n            type: true,\n            form: true,\n            // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false\n            // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false\n            // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true\n            autocorrect: true,\n            // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true\n            // Safari 9.1.3: 'list' in document.createElement('input') === false\n            list: true\n        },\n        // element.form is actually a legitimate readOnly property, that is to be\n        // mutated, but must be mutated by setAttribute...\n        SELECT: { form: true },\n        OPTION: { form: true },\n        TEXTAREA: { form: true },\n        LABEL: { form: true },\n        FIELDSET: { form: true },\n        LEGEND: { form: true },\n        OBJECT: { form: true }\n    };\n    function preferAttr(tagName, propName) {\n        var tag = ATTR_OVERRIDES[tagName.toUpperCase()];\n        return tag && tag[propName.toLowerCase()] || false;\n    }\n\n    function _defaults$12(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$27(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$12(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$12(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$12(subClass, superClass);\n    }\n\n    var innerHTMLWrapper = {\n        colgroup: { depth: 2, before: '<table><colgroup>', after: '</colgroup></table>' },\n        table: { depth: 1, before: '<table>', after: '</table>' },\n        tbody: { depth: 2, before: '<table><tbody>', after: '</tbody></table>' },\n        tfoot: { depth: 2, before: '<table><tfoot>', after: '</tfoot></table>' },\n        thead: { depth: 2, before: '<table><thead>', after: '</thead></table>' },\n        tr: { depth: 3, before: '<table><tbody><tr>', after: '</tr></tbody></table>' }\n    };\n    // Patch:    innerHTML Fix\n    // Browsers: IE9\n    // Reason:   IE9 don't allow us to set innerHTML on col, colgroup, frameset,\n    //           html, style, table, tbody, tfoot, thead, title, tr.\n    // Fix:      Wrap the innerHTML we are about to set in its parents, apply the\n    //           wrapped innerHTML on a div, then move the unwrapped nodes into the\n    //           target position.\n    function domChanges(document, DOMChangesClass) {\n        if (!document) return DOMChangesClass;\n        if (!shouldApplyFix(document)) {\n            return DOMChangesClass;\n        }\n        var div = document.createElement('div');\n        return function (_DOMChangesClass) {\n            _inherits$12(DOMChangesWithInnerHTMLFix, _DOMChangesClass);\n\n            function DOMChangesWithInnerHTMLFix() {\n                _classCallCheck$27(this, DOMChangesWithInnerHTMLFix);\n\n                return _possibleConstructorReturn$12(this, _DOMChangesClass.apply(this, arguments));\n            }\n\n            DOMChangesWithInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {\n                if (html === null || html === '') {\n                    return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n                }\n                var parentTag = parent.tagName.toLowerCase();\n                var wrapper = innerHTMLWrapper[parentTag];\n                if (wrapper === undefined) {\n                    return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n                }\n                return fixInnerHTML(parent, wrapper, div, html, nextSibling);\n            };\n\n            return DOMChangesWithInnerHTMLFix;\n        }(DOMChangesClass);\n    }\n    function treeConstruction(document, DOMTreeConstructionClass) {\n        if (!document) return DOMTreeConstructionClass;\n        if (!shouldApplyFix(document)) {\n            return DOMTreeConstructionClass;\n        }\n        var div = document.createElement('div');\n        return function (_DOMTreeConstructionC) {\n            _inherits$12(DOMTreeConstructionWithInnerHTMLFix, _DOMTreeConstructionC);\n\n            function DOMTreeConstructionWithInnerHTMLFix() {\n                _classCallCheck$27(this, DOMTreeConstructionWithInnerHTMLFix);\n\n                return _possibleConstructorReturn$12(this, _DOMTreeConstructionC.apply(this, arguments));\n            }\n\n            DOMTreeConstructionWithInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, referenceNode, html) {\n                if (html === null || html === '') {\n                    return _DOMTreeConstructionC.prototype.insertHTMLBefore.call(this, parent, referenceNode, html);\n                }\n                var parentTag = parent.tagName.toLowerCase();\n                var wrapper = innerHTMLWrapper[parentTag];\n                if (wrapper === undefined) {\n                    return _DOMTreeConstructionC.prototype.insertHTMLBefore.call(this, parent, referenceNode, html);\n                }\n                return fixInnerHTML(parent, wrapper, div, html, referenceNode);\n            };\n\n            return DOMTreeConstructionWithInnerHTMLFix;\n        }(DOMTreeConstructionClass);\n    }\n    function fixInnerHTML(parent, wrapper, div, html, reference$$1) {\n        var wrappedHtml = wrapper.before + html + wrapper.after;\n        div.innerHTML = wrappedHtml;\n        var parentNode = div;\n        for (var i = 0; i < wrapper.depth; i++) {\n            parentNode = parentNode.childNodes[0];\n        }\n\n        var _moveNodesBefore = moveNodesBefore(parentNode, parent, reference$$1),\n            first = _moveNodesBefore[0],\n            last = _moveNodesBefore[1];\n\n        return new ConcreteBounds(parent, first, last);\n    }\n    function shouldApplyFix(document) {\n        var table = document.createElement('table');\n        try {\n            table.innerHTML = '<tbody></tbody>';\n        } catch (e) {} finally {\n            if (table.childNodes.length !== 0) {\n                // It worked as expected, no fix required\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _defaults$13(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$28(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$13(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$13(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$13(subClass, superClass);\n    }\n\n    var SVG_NAMESPACE$1 = 'http://www.w3.org/2000/svg';\n    // Patch:    insertAdjacentHTML on SVG Fix\n    // Browsers: Safari, IE, Edge, Firefox ~33-34\n    // Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is\n    //           present but throws an exception on IE and Edge. Old versions of\n    //           Firefox create nodes in the incorrect namespace.\n    // Fix:      Since IE and Edge silently fail to create SVG nodes using\n    //           innerHTML, and because Firefox may create nodes in the incorrect\n    //           namespace using innerHTML on SVG elements, an HTML-string wrapping\n    //           approach is used. A pre/post SVG tag is added to the string, then\n    //           that whole string is added to a div. The created nodes are plucked\n    //           out and applied to the target location on DOM.\n    function domChanges$1(document, DOMChangesClass, svgNamespace) {\n        if (!document) return DOMChangesClass;\n        if (!shouldApplyFix$1(document, svgNamespace)) {\n            return DOMChangesClass;\n        }\n        var div = document.createElement('div');\n        return function (_DOMChangesClass) {\n            _inherits$13(DOMChangesWithSVGInnerHTMLFix, _DOMChangesClass);\n\n            function DOMChangesWithSVGInnerHTMLFix() {\n                _classCallCheck$28(this, DOMChangesWithSVGInnerHTMLFix);\n\n                return _possibleConstructorReturn$13(this, _DOMChangesClass.apply(this, arguments));\n            }\n\n            DOMChangesWithSVGInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {\n                if (html === null || html === '') {\n                    return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n                }\n                if (parent.namespaceURI !== svgNamespace) {\n                    return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n                }\n                return fixSVG(parent, div, html, nextSibling);\n            };\n\n            return DOMChangesWithSVGInnerHTMLFix;\n        }(DOMChangesClass);\n    }\n    function treeConstruction$1(document, TreeConstructionClass, svgNamespace) {\n        if (!document) return TreeConstructionClass;\n        if (!shouldApplyFix$1(document, svgNamespace)) {\n            return TreeConstructionClass;\n        }\n        var div = document.createElement('div');\n        return function (_TreeConstructionClas) {\n            _inherits$13(TreeConstructionWithSVGInnerHTMLFix, _TreeConstructionClas);\n\n            function TreeConstructionWithSVGInnerHTMLFix() {\n                _classCallCheck$28(this, TreeConstructionWithSVGInnerHTMLFix);\n\n                return _possibleConstructorReturn$13(this, _TreeConstructionClas.apply(this, arguments));\n            }\n\n            TreeConstructionWithSVGInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, reference$$1, html) {\n                if (html === null || html === '') {\n                    return _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, reference$$1, html);\n                }\n                if (parent.namespaceURI !== svgNamespace) {\n                    return _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, reference$$1, html);\n                }\n                return fixSVG(parent, div, html, reference$$1);\n            };\n\n            return TreeConstructionWithSVGInnerHTMLFix;\n        }(TreeConstructionClass);\n    }\n    function fixSVG(parent, div, html, reference$$1) {\n        // IE, Edge: also do not correctly support using `innerHTML` on SVG\n        // namespaced elements. So here a wrapper is used.\n        var wrappedHtml = '<svg>' + html + '</svg>';\n        div.innerHTML = wrappedHtml;\n\n        var _moveNodesBefore = moveNodesBefore(div.firstChild, parent, reference$$1),\n            first = _moveNodesBefore[0],\n            last = _moveNodesBefore[1];\n\n        return new ConcreteBounds(parent, first, last);\n    }\n    function shouldApplyFix$1(document, svgNamespace) {\n        var svg = document.createElementNS(svgNamespace, 'svg');\n        try {\n            svg['insertAdjacentHTML']('beforeend', '<circle></circle>');\n        } catch (e) {\n            // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG\n            // Safari: Will throw, insertAdjacentHTML is not present on SVG\n        } finally {\n            // FF: Old versions will create a node in the wrong namespace\n            if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE$1) {\n                // The test worked as expected, no fix required\n                return false;\n            }\n            return true;\n        }\n    }\n\n    function _defaults$14(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _classCallCheck$29(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function _possibleConstructorReturn$14(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$14(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$14(subClass, superClass);\n    }\n\n    // Patch:    Adjacent text node merging fix\n    // Browsers: IE, Edge, Firefox w/o inspector open\n    // Reason:   These browsers will merge adjacent text nodes. For exmaple given\n    //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers\n    //           with proper behavior will populate div.childNodes with two items.\n    //           These browsers will populate it with one merged node instead.\n    // Fix:      Add these nodes to a wrapper element, then iterate the childNodes\n    //           of that wrapper and move the nodes to their target location. Note\n    //           that potential SVG bugs will have been handled before this fix.\n    //           Note that this fix must only apply to the previous text node, as\n    //           the base implementation of `insertHTMLBefore` already handles\n    //           following text nodes correctly.\n    function domChanges$2(document, DOMChangesClass) {\n        if (!document) return DOMChangesClass;\n        if (!shouldApplyFix$2(document)) {\n            return DOMChangesClass;\n        }\n        return function (_DOMChangesClass) {\n            _inherits$14(DOMChangesWithTextNodeMergingFix, _DOMChangesClass);\n\n            function DOMChangesWithTextNodeMergingFix(document) {\n                _classCallCheck$29(this, DOMChangesWithTextNodeMergingFix);\n\n                var _this = _possibleConstructorReturn$14(this, _DOMChangesClass.call(this, document));\n\n                _this.uselessComment = document.createComment('');\n                return _this;\n            }\n\n            DOMChangesWithTextNodeMergingFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {\n                if (html === null) {\n                    return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n                }\n                var didSetUselessComment = false;\n                var nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n                if (nextPrevious && nextPrevious instanceof Text) {\n                    didSetUselessComment = true;\n                    parent.insertBefore(this.uselessComment, nextSibling);\n                }\n                var bounds = _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n                if (didSetUselessComment) {\n                    parent.removeChild(this.uselessComment);\n                }\n                return bounds;\n            };\n\n            return DOMChangesWithTextNodeMergingFix;\n        }(DOMChangesClass);\n    }\n    function treeConstruction$2(document, TreeConstructionClass) {\n        if (!document) return TreeConstructionClass;\n        if (!shouldApplyFix$2(document)) {\n            return TreeConstructionClass;\n        }\n        return function (_TreeConstructionClas) {\n            _inherits$14(TreeConstructionWithTextNodeMergingFix, _TreeConstructionClas);\n\n            function TreeConstructionWithTextNodeMergingFix(document) {\n                _classCallCheck$29(this, TreeConstructionWithTextNodeMergingFix);\n\n                var _this2 = _possibleConstructorReturn$14(this, _TreeConstructionClas.call(this, document));\n\n                _this2.uselessComment = _this2.createComment('');\n                return _this2;\n            }\n\n            TreeConstructionWithTextNodeMergingFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, reference$$1, html) {\n                if (html === null) {\n                    return _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, reference$$1, html);\n                }\n                var didSetUselessComment = false;\n                var nextPrevious = reference$$1 ? reference$$1.previousSibling : parent.lastChild;\n                if (nextPrevious && nextPrevious instanceof Text) {\n                    didSetUselessComment = true;\n                    parent.insertBefore(this.uselessComment, reference$$1);\n                }\n                var bounds = _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, reference$$1, html);\n                if (didSetUselessComment) {\n                    parent.removeChild(this.uselessComment);\n                }\n                return bounds;\n            };\n\n            return TreeConstructionWithTextNodeMergingFix;\n        }(TreeConstructionClass);\n    }\n    function shouldApplyFix$2(document) {\n        var mergingTextDiv = document.createElement('div');\n        mergingTextDiv.innerHTML = 'first';\n        mergingTextDiv.insertAdjacentHTML('beforeend', 'second');\n        if (mergingTextDiv.childNodes.length === 2) {\n            // It worked as expected, no fix required\n            return false;\n        }\n        return true;\n    }\n\n    function _defaults$11(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn$11(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$11(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$11(subClass, superClass);\n    }\n\n    function _classCallCheck$26(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    // http://www.w3.org/TR/html/syntax.html#html-integration-point\n    var SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };\n    // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes\n    // TODO: Adjust SVG attributes\n    // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\n    // TODO: Adjust SVG elements\n    // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\n    var BLACKLIST_TABLE = Object.create(null);\n    [\"b\", \"big\", \"blockquote\", \"body\", \"br\", \"center\", \"code\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"hr\", \"i\", \"img\", \"li\", \"listing\", \"main\", \"meta\", \"nobr\", \"ol\", \"p\", \"pre\", \"ruby\", \"s\", \"small\", \"span\", \"strong\", \"strike\", \"sub\", \"sup\", \"table\", \"tt\", \"u\", \"ul\", \"var\"].forEach(function (tag) {\n        return BLACKLIST_TABLE[tag] = 1;\n    });\n    var WHITESPACE = /[\\t-\\r \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/;\n    var doc = typeof document === 'undefined' ? null : document;\n    function isWhitespace(string) {\n        return WHITESPACE.test(string);\n    }\n    function moveNodesBefore(source, target, nextSibling) {\n        var first = source.firstChild;\n        var last = null;\n        var current = first;\n        while (current) {\n            last = current;\n            current = current.nextSibling;\n            target.insertBefore(last, nextSibling);\n        }\n        return [first, last];\n    }\n    var DOMOperations = function () {\n        function DOMOperations(document) {\n            _classCallCheck$26(this, DOMOperations);\n\n            this.document = document;\n            this.setupUselessElement();\n        }\n        // split into seperate method so that NodeDOMTreeConstruction\n        // can override it.\n\n\n        DOMOperations.prototype.setupUselessElement = function setupUselessElement() {\n            this.uselessElement = this.document.createElement('div');\n        };\n\n        DOMOperations.prototype.createElement = function createElement(tag, context) {\n            var isElementInSVGNamespace = void 0,\n                isHTMLIntegrationPoint = void 0;\n            if (context) {\n                isElementInSVGNamespace = context.namespaceURI === SVG_NAMESPACE || tag === 'svg';\n                isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];\n            } else {\n                isElementInSVGNamespace = tag === 'svg';\n                isHTMLIntegrationPoint = false;\n            }\n            if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {\n                // FIXME: This does not properly handle <font> with color, face, or\n                // size attributes, which is also disallowed by the spec. We should fix\n                // this.\n                if (BLACKLIST_TABLE[tag]) {\n                    throw new Error('Cannot create a ' + tag + ' inside an SVG context');\n                }\n                return this.document.createElementNS(SVG_NAMESPACE, tag);\n            } else {\n                return this.document.createElement(tag);\n            }\n        };\n\n        DOMOperations.prototype.insertBefore = function insertBefore(parent, node, reference$$1) {\n            parent.insertBefore(node, reference$$1);\n        };\n\n        DOMOperations.prototype.insertHTMLBefore = function insertHTMLBefore(_parent, nextSibling, html) {\n            return _insertHTMLBefore(this.uselessElement, _parent, nextSibling, html);\n        };\n\n        DOMOperations.prototype.createTextNode = function createTextNode(text) {\n            return this.document.createTextNode(text);\n        };\n\n        DOMOperations.prototype.createComment = function createComment(data) {\n            return this.document.createComment(data);\n        };\n\n        return DOMOperations;\n    }();\n    var DOM;\n    (function (DOM) {\n        var TreeConstruction = function (_DOMOperations) {\n            _inherits$11(TreeConstruction, _DOMOperations);\n\n            function TreeConstruction() {\n                _classCallCheck$26(this, TreeConstruction);\n\n                return _possibleConstructorReturn$11(this, _DOMOperations.apply(this, arguments));\n            }\n\n            TreeConstruction.prototype.createElementNS = function createElementNS(namespace, tag) {\n                return this.document.createElementNS(namespace, tag);\n            };\n\n            TreeConstruction.prototype.setAttribute = function setAttribute(element, name, value, namespace) {\n                if (namespace) {\n                    element.setAttributeNS(namespace, name, value);\n                } else {\n                    element.setAttribute(name, value);\n                }\n            };\n\n            return TreeConstruction;\n        }(DOMOperations);\n\n        DOM.TreeConstruction = TreeConstruction;\n        var appliedTreeContruction = TreeConstruction;\n        appliedTreeContruction = treeConstruction$2(doc, appliedTreeContruction);\n        appliedTreeContruction = treeConstruction(doc, appliedTreeContruction);\n        appliedTreeContruction = treeConstruction$1(doc, appliedTreeContruction, SVG_NAMESPACE);\n        DOM.DOMTreeConstruction = appliedTreeContruction;\n    })(DOM || (DOM = {}));\n    var DOMChanges = function (_DOMOperations2) {\n        _inherits$11(DOMChanges, _DOMOperations2);\n\n        function DOMChanges(document) {\n            _classCallCheck$26(this, DOMChanges);\n\n            var _this2 = _possibleConstructorReturn$11(this, _DOMOperations2.call(this, document));\n\n            _this2.document = document;\n            _this2.namespace = null;\n            return _this2;\n        }\n\n        DOMChanges.prototype.setAttribute = function setAttribute(element, name, value) {\n            element.setAttribute(name, value);\n        };\n\n        DOMChanges.prototype.setAttributeNS = function setAttributeNS(element, namespace, name, value) {\n            element.setAttributeNS(namespace, name, value);\n        };\n\n        DOMChanges.prototype.removeAttribute = function removeAttribute(element, name) {\n            element.removeAttribute(name);\n        };\n\n        DOMChanges.prototype.removeAttributeNS = function removeAttributeNS(element, namespace, name) {\n            element.removeAttributeNS(namespace, name);\n        };\n\n        DOMChanges.prototype.insertNodeBefore = function insertNodeBefore(parent, node, reference$$1) {\n            if (isDocumentFragment(node)) {\n                var firstChild = node.firstChild,\n                    lastChild = node.lastChild;\n\n                this.insertBefore(parent, node, reference$$1);\n                return new ConcreteBounds(parent, firstChild, lastChild);\n            } else {\n                this.insertBefore(parent, node, reference$$1);\n                return new SingleNodeBounds(parent, node);\n            }\n        };\n\n        DOMChanges.prototype.insertTextBefore = function insertTextBefore(parent, nextSibling, text) {\n            var textNode = this.createTextNode(text);\n            this.insertBefore(parent, textNode, nextSibling);\n            return textNode;\n        };\n\n        DOMChanges.prototype.insertBefore = function insertBefore(element, node, reference$$1) {\n            element.insertBefore(node, reference$$1);\n        };\n\n        DOMChanges.prototype.insertAfter = function insertAfter(element, node, reference$$1) {\n            this.insertBefore(element, node, reference$$1.nextSibling);\n        };\n\n        return DOMChanges;\n    }(DOMOperations);\n    function _insertHTMLBefore(_useless, _parent, _nextSibling, html) {\n        // TypeScript vendored an old version of the DOM spec where `insertAdjacentHTML`\n        // only exists on `HTMLElement` but not on `Element`. We actually work with the\n        // newer version of the DOM API here (and monkey-patch this method in `./compat`\n        // when we detect older browsers). This is a hack to work around this limitation.\n        var parent = _parent;\n        var useless = _useless;\n        var nextSibling = _nextSibling;\n        var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n        var last = void 0;\n        if (html === null || html === '') {\n            return new ConcreteBounds(parent, null, null);\n        }\n        if (nextSibling === null) {\n            parent.insertAdjacentHTML('beforeend', html);\n            last = parent.lastChild;\n        } else if (nextSibling instanceof HTMLElement) {\n            nextSibling.insertAdjacentHTML('beforebegin', html);\n            last = nextSibling.previousSibling;\n        } else {\n            // Non-element nodes do not support insertAdjacentHTML, so add an\n            // element and call it on that element. Then remove the element.\n            //\n            // This also protects Edge, IE and Firefox w/o the inspector open\n            // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts\n            parent.insertBefore(useless, nextSibling);\n            useless.insertAdjacentHTML('beforebegin', html);\n            last = useless.previousSibling;\n            parent.removeChild(useless);\n        }\n        var first = prev ? prev.nextSibling : parent.firstChild;\n        return new ConcreteBounds(parent, first, last);\n    }\n    function isDocumentFragment(node) {\n        return node.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n    }\n    var helper = DOMChanges;\n    helper = domChanges$2(doc, helper);\n    helper = domChanges(doc, helper);\n    helper = domChanges$1(doc, helper, SVG_NAMESPACE);\n    var helper$1 = helper;\n    var DOMTreeConstruction = DOM.DOMTreeConstruction;\n\n    function _defaults$10(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    function _possibleConstructorReturn$10(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$10(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$10(subClass, superClass);\n    }\n\n    function _classCallCheck$25(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    function defaultManagers(element, attr, _isTrusting, _namespace) {\n        var tagName = element.tagName;\n        var isSVG = element.namespaceURI === SVG_NAMESPACE;\n        if (isSVG) {\n            return defaultAttributeManagers(tagName, attr);\n        }\n\n        var _normalizeProperty = normalizeProperty(element, attr),\n            type = _normalizeProperty.type,\n            normalized = _normalizeProperty.normalized;\n\n        if (type === 'attr') {\n            return defaultAttributeManagers(tagName, normalized);\n        } else {\n            return defaultPropertyManagers(tagName, normalized);\n        }\n    }\n    function defaultPropertyManagers(tagName, attr) {\n        if (requiresSanitization(tagName, attr)) {\n            return new SafePropertyManager(attr);\n        }\n        if (isUserInputValue(tagName, attr)) {\n            return INPUT_VALUE_PROPERTY_MANAGER;\n        }\n        if (isOptionSelected(tagName, attr)) {\n            return OPTION_SELECTED_MANAGER;\n        }\n        return new PropertyManager(attr);\n    }\n    function defaultAttributeManagers(tagName, attr) {\n        if (requiresSanitization(tagName, attr)) {\n            return new SafeAttributeManager(attr);\n        }\n        return new AttributeManager(attr);\n    }\n    function readDOMAttr(element, attr) {\n        var isSVG = element.namespaceURI === SVG_NAMESPACE;\n\n        var _normalizeProperty2 = normalizeProperty(element, attr),\n            type = _normalizeProperty2.type,\n            normalized = _normalizeProperty2.normalized;\n\n        if (isSVG) {\n            return element.getAttribute(normalized);\n        }\n        if (type === 'attr') {\n            return element.getAttribute(normalized);\n        }\n        {\n            return element[normalized];\n        }\n    }\n\n    var AttributeManager = function () {\n        function AttributeManager(attr) {\n            _classCallCheck$25(this, AttributeManager);\n\n            this.attr = attr;\n        }\n\n        AttributeManager.prototype.setAttribute = function setAttribute(env, element, value, namespace) {\n            var dom = env.getAppendOperations();\n            var normalizedValue = normalizeAttributeValue(value);\n            if (!isAttrRemovalValue(normalizedValue)) {\n                dom.setAttribute(element, this.attr, normalizedValue, namespace);\n            }\n        };\n\n        AttributeManager.prototype.updateAttribute = function updateAttribute(env, element, value, namespace) {\n            if (value === null || value === undefined || value === false) {\n                if (namespace) {\n                    env.getDOM().removeAttributeNS(element, namespace, this.attr);\n                } else {\n                    env.getDOM().removeAttribute(element, this.attr);\n                }\n            } else {\n                this.setAttribute(env, element, value);\n            }\n        };\n\n        return AttributeManager;\n    }();\n\n    var PropertyManager = function (_AttributeManager) {\n        _inherits$10(PropertyManager, _AttributeManager);\n\n        function PropertyManager() {\n            _classCallCheck$25(this, PropertyManager);\n\n            return _possibleConstructorReturn$10(this, _AttributeManager.apply(this, arguments));\n        }\n\n        PropertyManager.prototype.setAttribute = function setAttribute(_env, element, value, _namespace) {\n            if (!isAttrRemovalValue(value)) {\n                element[this.attr] = value;\n            }\n        };\n\n        PropertyManager.prototype.removeAttribute = function removeAttribute(env, element, namespace) {\n            // TODO this sucks but to preserve properties first and to meet current\n            // semantics we must do this.\n            var attr = this.attr;\n\n            if (namespace) {\n                env.getDOM().removeAttributeNS(element, namespace, attr);\n            } else {\n                env.getDOM().removeAttribute(element, attr);\n            }\n        };\n\n        PropertyManager.prototype.updateAttribute = function updateAttribute(env, element, value, namespace) {\n            // ensure the property is always updated\n            element[this.attr] = value;\n            if (isAttrRemovalValue(value)) {\n                this.removeAttribute(env, element, namespace);\n            }\n        };\n\n        return PropertyManager;\n    }(AttributeManager);\n\n    function normalizeAttributeValue(value) {\n        if (value === false || value === undefined || value === null) {\n            return null;\n        }\n        if (value === true) {\n            return '';\n        }\n        // onclick function etc in SSR\n        if (typeof value === 'function') {\n            return null;\n        }\n        return String(value);\n    }\n    function isAttrRemovalValue(value) {\n        return value === null || value === undefined;\n    }\n\n    var SafePropertyManager = function (_PropertyManager) {\n        _inherits$10(SafePropertyManager, _PropertyManager);\n\n        function SafePropertyManager() {\n            _classCallCheck$25(this, SafePropertyManager);\n\n            return _possibleConstructorReturn$10(this, _PropertyManager.apply(this, arguments));\n        }\n\n        SafePropertyManager.prototype.setAttribute = function setAttribute(env, element, value) {\n            _PropertyManager.prototype.setAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n        };\n\n        SafePropertyManager.prototype.updateAttribute = function updateAttribute(env, element, value) {\n            _PropertyManager.prototype.updateAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n        };\n\n        return SafePropertyManager;\n    }(PropertyManager);\n\n    function isUserInputValue(tagName, attribute) {\n        return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';\n    }\n\n    var InputValuePropertyManager = function (_AttributeManager2) {\n        _inherits$10(InputValuePropertyManager, _AttributeManager2);\n\n        function InputValuePropertyManager() {\n            _classCallCheck$25(this, InputValuePropertyManager);\n\n            return _possibleConstructorReturn$10(this, _AttributeManager2.apply(this, arguments));\n        }\n\n        InputValuePropertyManager.prototype.setAttribute = function setAttribute(_env, element, value) {\n            var input = element;\n            input.value = normalizeTextValue(value);\n        };\n\n        InputValuePropertyManager.prototype.updateAttribute = function updateAttribute(_env, element, value) {\n            var input = element;\n            var currentValue = input.value;\n            var normalizedValue = normalizeTextValue(value);\n            if (currentValue !== normalizedValue) {\n                input.value = normalizedValue;\n            }\n        };\n\n        return InputValuePropertyManager;\n    }(AttributeManager);\n\n    var INPUT_VALUE_PROPERTY_MANAGER = new InputValuePropertyManager('value');\n    function isOptionSelected(tagName, attribute) {\n        return tagName === 'OPTION' && attribute === 'selected';\n    }\n\n    var OptionSelectedManager = function (_PropertyManager2) {\n        _inherits$10(OptionSelectedManager, _PropertyManager2);\n\n        function OptionSelectedManager() {\n            _classCallCheck$25(this, OptionSelectedManager);\n\n            return _possibleConstructorReturn$10(this, _PropertyManager2.apply(this, arguments));\n        }\n\n        OptionSelectedManager.prototype.setAttribute = function setAttribute(_env, element, value) {\n            if (value !== null && value !== undefined && value !== false) {\n                var option = element;\n                option.selected = true;\n            }\n        };\n\n        OptionSelectedManager.prototype.updateAttribute = function updateAttribute(_env, element, value) {\n            var option = element;\n            if (value) {\n                option.selected = true;\n            } else {\n                option.selected = false;\n            }\n        };\n\n        return OptionSelectedManager;\n    }(PropertyManager);\n\n    var OPTION_SELECTED_MANAGER = new OptionSelectedManager('selected');\n\n    var SafeAttributeManager = function (_AttributeManager3) {\n        _inherits$10(SafeAttributeManager, _AttributeManager3);\n\n        function SafeAttributeManager() {\n            _classCallCheck$25(this, SafeAttributeManager);\n\n            return _possibleConstructorReturn$10(this, _AttributeManager3.apply(this, arguments));\n        }\n\n        SafeAttributeManager.prototype.setAttribute = function setAttribute(env, element, value) {\n            _AttributeManager3.prototype.setAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n        };\n\n        SafeAttributeManager.prototype.updateAttribute = function updateAttribute(env, element, value, _namespace) {\n            _AttributeManager3.prototype.updateAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n        };\n\n        return SafeAttributeManager;\n    }(AttributeManager);\n\n    var _createClass$4 = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    function _classCallCheck$23(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var Scope = function () {\n        function Scope(\n        // the 0th slot is `self`\n        slots, callerScope,\n        // named arguments and blocks passed to a layout that uses eval\n        evalScope,\n        // locals in scope when the partial was invoked\n        partialMap) {\n            _classCallCheck$23(this, Scope);\n\n            this.slots = slots;\n            this.callerScope = callerScope;\n            this.evalScope = evalScope;\n            this.partialMap = partialMap;\n        }\n\n        Scope.root = function root(self) {\n            var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n            var refs = new Array(size + 1);\n            for (var i = 0; i <= size; i++) {\n                refs[i] = UNDEFINED_REFERENCE;\n            }\n            return new Scope(refs, null, null, null).init({ self: self });\n        };\n\n        Scope.sized = function sized() {\n            var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n            var refs = new Array(size + 1);\n            for (var i = 0; i <= size; i++) {\n                refs[i] = UNDEFINED_REFERENCE;\n            }\n            return new Scope(refs, null, null, null);\n        };\n\n        Scope.prototype.init = function init(_ref) {\n            var self = _ref.self;\n\n            this.slots[0] = self;\n            return this;\n        };\n\n        Scope.prototype.getSelf = function getSelf() {\n            return this.get(0);\n        };\n\n        Scope.prototype.getSymbol = function getSymbol(symbol) {\n            return this.get(symbol);\n        };\n\n        Scope.prototype.getBlock = function getBlock(symbol) {\n            return this.get(symbol);\n        };\n\n        Scope.prototype.getEvalScope = function getEvalScope() {\n            return this.evalScope;\n        };\n\n        Scope.prototype.getPartialMap = function getPartialMap() {\n            return this.partialMap;\n        };\n\n        Scope.prototype.bind = function bind(symbol, value) {\n            this.set(symbol, value);\n        };\n\n        Scope.prototype.bindSelf = function bindSelf(self) {\n            this.set(0, self);\n        };\n\n        Scope.prototype.bindSymbol = function bindSymbol(symbol, value) {\n            this.set(symbol, value);\n        };\n\n        Scope.prototype.bindBlock = function bindBlock(symbol, value) {\n            this.set(symbol, value);\n        };\n\n        Scope.prototype.bindEvalScope = function bindEvalScope(map$$1) {\n            this.evalScope = map$$1;\n        };\n\n        Scope.prototype.bindPartialMap = function bindPartialMap(map$$1) {\n            this.partialMap = map$$1;\n        };\n\n        Scope.prototype.bindCallerScope = function bindCallerScope(scope) {\n            this.callerScope = scope;\n        };\n\n        Scope.prototype.getCallerScope = function getCallerScope() {\n            return this.callerScope;\n        };\n\n        Scope.prototype.child = function child() {\n            return new Scope(this.slots.slice(), this.callerScope, this.evalScope, this.partialMap);\n        };\n\n        Scope.prototype.get = function get(index) {\n            if (index >= this.slots.length) {\n                throw new RangeError('BUG: cannot get $' + index + ' from scope; length=' + this.slots.length);\n            }\n            return this.slots[index];\n        };\n\n        Scope.prototype.set = function set(index, value) {\n            if (index >= this.slots.length) {\n                throw new RangeError('BUG: cannot get $' + index + ' from scope; length=' + this.slots.length);\n            }\n            this.slots[index] = value;\n        };\n\n        return Scope;\n    }();\n\n    var Transaction = function () {\n        function Transaction() {\n            _classCallCheck$23(this, Transaction);\n\n            this.scheduledInstallManagers = [];\n            this.scheduledInstallModifiers = [];\n            this.scheduledUpdateModifierManagers = [];\n            this.scheduledUpdateModifiers = [];\n            this.createdComponents = [];\n            this.createdManagers = [];\n            this.updatedComponents = [];\n            this.updatedManagers = [];\n            this.destructors = [];\n        }\n\n        Transaction.prototype.didCreate = function didCreate(component, manager) {\n            this.createdComponents.push(component);\n            this.createdManagers.push(manager);\n        };\n\n        Transaction.prototype.didUpdate = function didUpdate(component, manager) {\n            this.updatedComponents.push(component);\n            this.updatedManagers.push(manager);\n        };\n\n        Transaction.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {\n            this.scheduledInstallManagers.push(manager);\n            this.scheduledInstallModifiers.push(modifier);\n        };\n\n        Transaction.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {\n            this.scheduledUpdateModifierManagers.push(manager);\n            this.scheduledUpdateModifiers.push(modifier);\n        };\n\n        Transaction.prototype.didDestroy = function didDestroy(d) {\n            this.destructors.push(d);\n        };\n\n        Transaction.prototype.commit = function commit() {\n            var createdComponents = this.createdComponents,\n                createdManagers = this.createdManagers;\n\n            for (var i = 0; i < createdComponents.length; i++) {\n                var component = createdComponents[i];\n                var manager = createdManagers[i];\n                manager.didCreate(component);\n            }\n            var updatedComponents = this.updatedComponents,\n                updatedManagers = this.updatedManagers;\n\n            for (var _i = 0; _i < updatedComponents.length; _i++) {\n                var _component = updatedComponents[_i];\n                var _manager = updatedManagers[_i];\n                _manager.didUpdate(_component);\n            }\n            var destructors = this.destructors;\n\n            for (var _i2 = 0; _i2 < destructors.length; _i2++) {\n                destructors[_i2].destroy();\n            }\n            var scheduledInstallManagers = this.scheduledInstallManagers,\n                scheduledInstallModifiers = this.scheduledInstallModifiers;\n\n            for (var _i3 = 0; _i3 < scheduledInstallManagers.length; _i3++) {\n                var _manager2 = scheduledInstallManagers[_i3];\n                var modifier = scheduledInstallModifiers[_i3];\n                _manager2.install(modifier);\n            }\n            var scheduledUpdateModifierManagers = this.scheduledUpdateModifierManagers,\n                scheduledUpdateModifiers = this.scheduledUpdateModifiers;\n\n            for (var _i4 = 0; _i4 < scheduledUpdateModifierManagers.length; _i4++) {\n                var _manager3 = scheduledUpdateModifierManagers[_i4];\n                var _modifier = scheduledUpdateModifiers[_i4];\n                _manager3.update(_modifier);\n            }\n        };\n\n        return Transaction;\n    }();\n\n    var Opcode = function () {\n        function Opcode(heap) {\n            _classCallCheck$23(this, Opcode);\n\n            this.heap = heap;\n            this.offset = 0;\n        }\n\n        _createClass$4(Opcode, [{\n            key: 'type',\n            get: function () {\n                return this.heap.getbyaddr(this.offset);\n            }\n        }, {\n            key: 'op1',\n            get: function () {\n                return this.heap.getbyaddr(this.offset + 1);\n            }\n        }, {\n            key: 'op2',\n            get: function () {\n                return this.heap.getbyaddr(this.offset + 2);\n            }\n        }, {\n            key: 'op3',\n            get: function () {\n                return this.heap.getbyaddr(this.offset + 3);\n            }\n        }]);\n\n        return Opcode;\n    }();\n    var TableSlotState;\n    (function (TableSlotState) {\n        TableSlotState[TableSlotState[\"Allocated\"] = 0] = \"Allocated\";\n        TableSlotState[TableSlotState[\"Freed\"] = 1] = \"Freed\";\n        TableSlotState[TableSlotState[\"Purged\"] = 2] = \"Purged\";\n        TableSlotState[TableSlotState[\"Pointer\"] = 3] = \"Pointer\";\n    })(TableSlotState || (TableSlotState = {}));\n    var Heap = function () {\n        function Heap() {\n            _classCallCheck$23(this, Heap);\n\n            this.heap = [];\n            this.offset = 0;\n            this.handle = 0;\n            /**\n             * layout:\n             *\n             * - pointer into heap\n             * - size\n             * - freed (0 or 1)\n             */\n            this.table = [];\n        }\n\n        Heap.prototype.push = function push(item) {\n            this.heap[this.offset++] = item;\n        };\n\n        Heap.prototype.getbyaddr = function getbyaddr(address) {\n            return this.heap[address];\n        };\n\n        Heap.prototype.setbyaddr = function setbyaddr(address, value) {\n            this.heap[address] = value;\n        };\n\n        Heap.prototype.malloc = function malloc() {\n            this.table.push(this.offset, 0, 0);\n            var handle = this.handle;\n            this.handle += 3;\n            return handle;\n        };\n\n        Heap.prototype.finishMalloc = function finishMalloc(handle) {\n            var start = this.table[handle];\n            var finish = this.offset;\n            this.table[handle + 1] = finish - start;\n        };\n\n        Heap.prototype.size = function size() {\n            return this.offset;\n        };\n        // It is illegal to close over this address, as compaction\n        // may move it. However, it is legal to use this address\n        // multiple times between compactions.\n\n\n        Heap.prototype.getaddr = function getaddr(handle) {\n            return this.table[handle];\n        };\n\n        Heap.prototype.gethandle = function gethandle(address) {\n            this.table.push(address, 0, TableSlotState.Pointer);\n            var handle = this.handle;\n            this.handle += 3;\n            return handle;\n        };\n\n        Heap.prototype.sizeof = function sizeof(handle) {\n            return -1;\n        };\n\n        Heap.prototype.free = function free(handle) {\n            this.table[handle + 2] = 1;\n        };\n\n        Heap.prototype.compact = function compact() {\n            var compactedSize = 0;\n            var table = this.table,\n                length = this.table.length,\n                heap = this.heap;\n\n            for (var i = 0; i < length; i += 3) {\n                var offset = table[i];\n                var size = table[i + 1];\n                var state = table[i + 2];\n                if (state === TableSlotState.Purged) {\n                    continue;\n                } else if (state === TableSlotState.Freed) {\n                    // transition to \"already freed\"\n                    // a good improvement would be to reuse\n                    // these slots\n                    table[i + 2] = 2;\n                    compactedSize += size;\n                } else if (state === TableSlotState.Allocated) {\n                    for (var j = offset; j <= i + size; j++) {\n                        heap[j - compactedSize] = heap[j];\n                    }\n                    table[i] = offset - compactedSize;\n                } else if (state === TableSlotState.Pointer) {\n                    table[i] = offset - compactedSize;\n                }\n            }\n            this.offset = this.offset - compactedSize;\n        };\n\n        return Heap;\n    }();\n    var Program = function () {\n        function Program() {\n            _classCallCheck$23(this, Program);\n\n            this.heap = new Heap();\n            this._opcode = new Opcode(this.heap);\n            this.constants = new Constants();\n        }\n\n        Program.prototype.opcode = function opcode(offset) {\n            this._opcode.offset = offset;\n            return this._opcode;\n        };\n\n        return Program;\n    }();\n    var Environment = function () {\n        function Environment(_ref2) {\n            var appendOperations = _ref2.appendOperations,\n                updateOperations = _ref2.updateOperations;\n\n            _classCallCheck$23(this, Environment);\n\n            this._macros = null;\n            this._transaction = null;\n            this.program = new Program();\n            this.appendOperations = appendOperations;\n            this.updateOperations = updateOperations;\n        }\n\n        Environment.prototype.toConditionalReference = function toConditionalReference(reference$$1) {\n            return new ConditionalReference(reference$$1);\n        };\n\n        Environment.prototype.getAppendOperations = function getAppendOperations() {\n            return this.appendOperations;\n        };\n\n        Environment.prototype.getDOM = function getDOM() {\n            return this.updateOperations;\n        };\n\n        Environment.prototype.getIdentity = function getIdentity(object) {\n            return (0, _util.ensureGuid)(object) + '';\n        };\n\n        Environment.prototype.begin = function begin() {\n            (0, _util.assert)(!this._transaction, 'a glimmer transaction was begun, but one already exists. You may have a nested transaction');\n            this._transaction = new Transaction();\n        };\n\n        Environment.prototype.didCreate = function didCreate(component, manager) {\n            this.transaction.didCreate(component, manager);\n        };\n\n        Environment.prototype.didUpdate = function didUpdate(component, manager) {\n            this.transaction.didUpdate(component, manager);\n        };\n\n        Environment.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {\n            this.transaction.scheduleInstallModifier(modifier, manager);\n        };\n\n        Environment.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {\n            this.transaction.scheduleUpdateModifier(modifier, manager);\n        };\n\n        Environment.prototype.didDestroy = function didDestroy(d) {\n            this.transaction.didDestroy(d);\n        };\n\n        Environment.prototype.commit = function commit() {\n            var transaction = this.transaction;\n            this._transaction = null;\n            transaction.commit();\n        };\n\n        Environment.prototype.attributeFor = function attributeFor(element, attr, isTrusting, namespace) {\n            return defaultManagers(element, attr, isTrusting, namespace === undefined ? null : namespace);\n        };\n\n        Environment.prototype.macros = function macros() {\n            var macros = this._macros;\n            if (!macros) {\n                this._macros = macros = this.populateBuiltins();\n            }\n            return macros;\n        };\n\n        Environment.prototype.populateBuiltins = function populateBuiltins$$1() {\n            return populateBuiltins();\n        };\n\n        _createClass$4(Environment, [{\n            key: 'transaction',\n            get: function () {\n                return this._transaction;\n            }\n        }]);\n\n        return Environment;\n    }();\n\n    function _defaults$15(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }return obj;\n    }\n\n    var _createClass$5 = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    function _possibleConstructorReturn$15(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits$15(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$15(subClass, superClass);\n    }\n\n    function _classCallCheck$30(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var UpdatingVM = function () {\n        function UpdatingVM(env, _ref) {\n            var _ref$alwaysRevalidate = _ref.alwaysRevalidate,\n                alwaysRevalidate = _ref$alwaysRevalidate === undefined ? false : _ref$alwaysRevalidate;\n\n            _classCallCheck$30(this, UpdatingVM);\n\n            this.frameStack = new _util.Stack();\n            this.env = env;\n            this.constants = env.program.constants;\n            this.dom = env.getDOM();\n            this.alwaysRevalidate = alwaysRevalidate;\n        }\n\n        UpdatingVM.prototype.execute = function execute(opcodes, handler) {\n            var frameStack = this.frameStack;\n\n            this.try(opcodes, handler);\n            while (true) {\n                if (frameStack.isEmpty()) break;\n                var opcode = this.frame.nextStatement();\n                if (opcode === null) {\n                    this.frameStack.pop();\n                    continue;\n                }\n                opcode.evaluate(this);\n            }\n        };\n\n        UpdatingVM.prototype.goto = function goto(op) {\n            this.frame.goto(op);\n        };\n\n        UpdatingVM.prototype.try = function _try(ops, handler) {\n            this.frameStack.push(new UpdatingVMFrame(this, ops, handler));\n        };\n\n        UpdatingVM.prototype.throw = function _throw() {\n            this.frame.handleException();\n            this.frameStack.pop();\n        };\n\n        UpdatingVM.prototype.evaluateOpcode = function evaluateOpcode(opcode) {\n            opcode.evaluate(this);\n        };\n\n        _createClass$5(UpdatingVM, [{\n            key: 'frame',\n            get: function () {\n                return this.frameStack.current;\n            }\n        }]);\n\n        return UpdatingVM;\n    }();\n\n    var BlockOpcode = function (_UpdatingOpcode) {\n        _inherits$15(BlockOpcode, _UpdatingOpcode);\n\n        function BlockOpcode(start, state, bounds$$1, children) {\n            _classCallCheck$30(this, BlockOpcode);\n\n            var _this = _possibleConstructorReturn$15(this, _UpdatingOpcode.call(this));\n\n            _this.start = start;\n            _this.type = \"block\";\n            _this.next = null;\n            _this.prev = null;\n            var env = state.env,\n                scope = state.scope,\n                dynamicScope = state.dynamicScope,\n                stack = state.stack;\n\n            _this.children = children;\n            _this.env = env;\n            _this.scope = scope;\n            _this.dynamicScope = dynamicScope;\n            _this.stack = stack;\n            _this.bounds = bounds$$1;\n            return _this;\n        }\n\n        BlockOpcode.prototype.parentElement = function parentElement() {\n            return this.bounds.parentElement();\n        };\n\n        BlockOpcode.prototype.firstNode = function firstNode() {\n            return this.bounds.firstNode();\n        };\n\n        BlockOpcode.prototype.lastNode = function lastNode() {\n            return this.bounds.lastNode();\n        };\n\n        BlockOpcode.prototype.evaluate = function evaluate(vm) {\n            vm.try(this.children, null);\n        };\n\n        BlockOpcode.prototype.destroy = function destroy() {\n            this.bounds.destroy();\n        };\n\n        BlockOpcode.prototype.didDestroy = function didDestroy() {\n            this.env.didDestroy(this.bounds);\n        };\n\n        BlockOpcode.prototype.toJSON = function toJSON() {\n            var details = (0, _util.dict)();\n            details[\"guid\"] = '' + this._guid;\n            return {\n                guid: this._guid,\n                type: this.type,\n                details: details,\n                children: this.children.toArray().map(function (op) {\n                    return op.toJSON();\n                })\n            };\n        };\n\n        return BlockOpcode;\n    }(UpdatingOpcode);\n    var TryOpcode = function (_BlockOpcode) {\n        _inherits$15(TryOpcode, _BlockOpcode);\n\n        function TryOpcode(start, state, bounds$$1, children) {\n            _classCallCheck$30(this, TryOpcode);\n\n            var _this2 = _possibleConstructorReturn$15(this, _BlockOpcode.call(this, start, state, bounds$$1, children));\n\n            _this2.type = \"try\";\n            _this2.tag = _this2._tag = _reference2.UpdatableTag.create(_reference2.CONSTANT_TAG);\n            return _this2;\n        }\n\n        TryOpcode.prototype.didInitializeChildren = function didInitializeChildren() {\n            this._tag.inner.update((0, _reference2.combineSlice)(this.children));\n        };\n\n        TryOpcode.prototype.evaluate = function evaluate(vm) {\n            vm.try(this.children, this);\n        };\n\n        TryOpcode.prototype.handleException = function handleException() {\n            var _this3 = this;\n\n            var env = this.env,\n                bounds$$1 = this.bounds,\n                children = this.children,\n                scope = this.scope,\n                dynamicScope = this.dynamicScope,\n                start = this.start,\n                stack = this.stack,\n                prev = this.prev,\n                next = this.next;\n\n            children.clear();\n            var elementStack = ElementStack.resume(env, bounds$$1, bounds$$1.reset(env));\n            var vm = new VM(env, scope, dynamicScope, elementStack);\n            var updating = new _util.LinkedList();\n            vm.execute(start, function (vm) {\n                vm.stack = EvaluationStack.restore(stack);\n                vm.updatingOpcodeStack.push(updating);\n                vm.updateWith(_this3);\n                vm.updatingOpcodeStack.push(children);\n            });\n            this.prev = prev;\n            this.next = next;\n        };\n\n        TryOpcode.prototype.toJSON = function toJSON() {\n            var json = _BlockOpcode.prototype.toJSON.call(this);\n            var details = json[\"details\"];\n            if (!details) {\n                details = json[\"details\"] = {};\n            }\n            return _BlockOpcode.prototype.toJSON.call(this);\n        };\n\n        return TryOpcode;\n    }(BlockOpcode);\n\n    var ListRevalidationDelegate = function () {\n        function ListRevalidationDelegate(opcode, marker) {\n            _classCallCheck$30(this, ListRevalidationDelegate);\n\n            this.opcode = opcode;\n            this.marker = marker;\n            this.didInsert = false;\n            this.didDelete = false;\n            this.map = opcode.map;\n            this.updating = opcode['children'];\n        }\n\n        ListRevalidationDelegate.prototype.insert = function insert(key, item, memo, before) {\n            var map$$1 = this.map,\n                opcode = this.opcode,\n                updating = this.updating;\n\n            var nextSibling = null;\n            var reference$$1 = null;\n            if (before) {\n                reference$$1 = map$$1[before];\n                nextSibling = reference$$1['bounds'].firstNode();\n            } else {\n                nextSibling = this.marker;\n            }\n            var vm = opcode.vmForInsertion(nextSibling);\n            var tryOpcode = null;\n            var start = opcode.start;\n\n            vm.execute(start, function (vm) {\n                map$$1[key] = tryOpcode = vm.iterate(memo, item);\n                vm.updatingOpcodeStack.push(new _util.LinkedList());\n                vm.updateWith(tryOpcode);\n                vm.updatingOpcodeStack.push(tryOpcode.children);\n            });\n            updating.insertBefore(tryOpcode, reference$$1);\n            this.didInsert = true;\n        };\n\n        ListRevalidationDelegate.prototype.retain = function retain(_key, _item, _memo) {};\n\n        ListRevalidationDelegate.prototype.move = function move$$1(key, _item, _memo, before) {\n            var map$$1 = this.map,\n                updating = this.updating;\n\n            var entry = map$$1[key];\n            var reference$$1 = map$$1[before] || null;\n            if (before) {\n                move(entry, reference$$1.firstNode());\n            } else {\n                move(entry, this.marker);\n            }\n            updating.remove(entry);\n            updating.insertBefore(entry, reference$$1);\n        };\n\n        ListRevalidationDelegate.prototype.delete = function _delete(key) {\n            var map$$1 = this.map;\n\n            var opcode = map$$1[key];\n            opcode.didDestroy();\n            clear(opcode);\n            this.updating.remove(opcode);\n            delete map$$1[key];\n            this.didDelete = true;\n        };\n\n        ListRevalidationDelegate.prototype.done = function done() {\n            this.opcode.didInitializeChildren(this.didInsert || this.didDelete);\n        };\n\n        return ListRevalidationDelegate;\n    }();\n\n    var ListBlockOpcode = function (_BlockOpcode2) {\n        _inherits$15(ListBlockOpcode, _BlockOpcode2);\n\n        function ListBlockOpcode(start, state, bounds$$1, children, artifacts) {\n            _classCallCheck$30(this, ListBlockOpcode);\n\n            var _this4 = _possibleConstructorReturn$15(this, _BlockOpcode2.call(this, start, state, bounds$$1, children));\n\n            _this4.type = \"list-block\";\n            _this4.map = (0, _util.dict)();\n            _this4.lastIterated = _reference2.INITIAL;\n            _this4.artifacts = artifacts;\n            var _tag = _this4._tag = _reference2.UpdatableTag.create(_reference2.CONSTANT_TAG);\n            _this4.tag = (0, _reference2.combine)([artifacts.tag, _tag]);\n            return _this4;\n        }\n\n        ListBlockOpcode.prototype.didInitializeChildren = function didInitializeChildren() {\n            var listDidChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            this.lastIterated = this.artifacts.tag.value();\n            if (listDidChange) {\n                this._tag.inner.update((0, _reference2.combineSlice)(this.children));\n            }\n        };\n\n        ListBlockOpcode.prototype.evaluate = function evaluate(vm) {\n            var artifacts = this.artifacts,\n                lastIterated = this.lastIterated;\n\n            if (!artifacts.tag.validate(lastIterated)) {\n                var bounds$$1 = this.bounds;\n                var dom = vm.dom;\n\n                var marker = dom.createComment('');\n                dom.insertAfter(bounds$$1.parentElement(), marker, bounds$$1.lastNode());\n                var target = new ListRevalidationDelegate(this, marker);\n                var synchronizer = new _reference2.IteratorSynchronizer({ target: target, artifacts: artifacts });\n                synchronizer.sync();\n                this.parentElement().removeChild(marker);\n            }\n            // Run now-updated updating opcodes\n            _BlockOpcode2.prototype.evaluate.call(this, vm);\n        };\n\n        ListBlockOpcode.prototype.vmForInsertion = function vmForInsertion(nextSibling) {\n            var env = this.env,\n                scope = this.scope,\n                dynamicScope = this.dynamicScope;\n\n            var elementStack = ElementStack.forInitialRender(this.env, this.bounds.parentElement(), nextSibling);\n            return new VM(env, scope, dynamicScope, elementStack);\n        };\n\n        ListBlockOpcode.prototype.toJSON = function toJSON() {\n            var json = _BlockOpcode2.prototype.toJSON.call(this);\n            var map$$1 = this.map;\n            var inner = Object.keys(map$$1).map(function (key) {\n                return JSON.stringify(key) + ': ' + map$$1[key]._guid;\n            }).join(\", \");\n            var details = json[\"details\"];\n            if (!details) {\n                details = json[\"details\"] = {};\n            }\n            details[\"map\"] = '{' + inner + '}';\n            return json;\n        };\n\n        return ListBlockOpcode;\n    }(BlockOpcode);\n\n    var UpdatingVMFrame = function () {\n        function UpdatingVMFrame(vm, ops, exceptionHandler) {\n            _classCallCheck$30(this, UpdatingVMFrame);\n\n            this.vm = vm;\n            this.ops = ops;\n            this.exceptionHandler = exceptionHandler;\n            this.vm = vm;\n            this.ops = ops;\n            this.current = ops.head();\n        }\n\n        UpdatingVMFrame.prototype.goto = function goto(op) {\n            this.current = op;\n        };\n\n        UpdatingVMFrame.prototype.nextStatement = function nextStatement() {\n            var current = this.current,\n                ops = this.ops;\n\n            if (current) this.current = ops.nextNode(current);\n            return current;\n        };\n\n        UpdatingVMFrame.prototype.handleException = function handleException() {\n            if (this.exceptionHandler) {\n                this.exceptionHandler.handleException();\n            }\n        };\n\n        return UpdatingVMFrame;\n    }();\n\n    function _classCallCheck$31(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var RenderResult = function () {\n        function RenderResult(env, updating, bounds$$1) {\n            _classCallCheck$31(this, RenderResult);\n\n            this.env = env;\n            this.updating = updating;\n            this.bounds = bounds$$1;\n        }\n\n        RenderResult.prototype.rerender = function rerender() {\n            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { alwaysRevalidate: false },\n                _ref$alwaysRevalidate = _ref.alwaysRevalidate,\n                alwaysRevalidate = _ref$alwaysRevalidate === undefined ? false : _ref$alwaysRevalidate;\n\n            var env = this.env,\n                updating = this.updating;\n\n            var vm = new UpdatingVM(env, { alwaysRevalidate: alwaysRevalidate });\n            vm.execute(updating, this);\n        };\n\n        RenderResult.prototype.parentElement = function parentElement() {\n            return this.bounds.parentElement();\n        };\n\n        RenderResult.prototype.firstNode = function firstNode() {\n            return this.bounds.firstNode();\n        };\n\n        RenderResult.prototype.lastNode = function lastNode() {\n            return this.bounds.lastNode();\n        };\n\n        RenderResult.prototype.opcodes = function opcodes() {\n            return this.updating;\n        };\n\n        RenderResult.prototype.handleException = function handleException() {\n            throw \"this should never happen\";\n        };\n\n        RenderResult.prototype.destroy = function destroy() {\n            this.bounds.destroy();\n            clear(this.bounds);\n        };\n\n        return RenderResult;\n    }();\n\n    var _createClass$3 = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n        };\n    }();\n\n    function _classCallCheck$22(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var EvaluationStack = function () {\n        function EvaluationStack(stack, fp, sp) {\n            _classCallCheck$22(this, EvaluationStack);\n\n            this.stack = stack;\n            this.fp = fp;\n            this.sp = sp;\n        }\n\n        EvaluationStack.empty = function empty() {\n            return new this([], 0, -1);\n        };\n\n        EvaluationStack.restore = function restore(snapshot) {\n            return new this(snapshot.slice(), 0, snapshot.length - 1);\n        };\n\n        EvaluationStack.prototype.isEmpty = function isEmpty() {\n            return this.sp === -1;\n        };\n\n        EvaluationStack.prototype.push = function push(value) {\n            this.stack[++this.sp] = value;\n        };\n\n        EvaluationStack.prototype.dup = function dup() {\n            var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.sp;\n\n            this.push(this.stack[position]);\n        };\n\n        EvaluationStack.prototype.pop = function pop() {\n            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n            var top = this.stack[this.sp];\n            this.sp -= n;\n            return top;\n        };\n\n        EvaluationStack.prototype.peek = function peek() {\n            return this.stack[this.sp];\n        };\n\n        EvaluationStack.prototype.fromBase = function fromBase(offset) {\n            return this.stack[this.fp - offset];\n        };\n\n        EvaluationStack.prototype.fromTop = function fromTop(offset) {\n            return this.stack[this.sp - offset];\n        };\n\n        EvaluationStack.prototype.capture = function capture(items) {\n            var end = this.sp + 1;\n            var start = end - items;\n            return this.stack.slice(start, end);\n        };\n\n        EvaluationStack.prototype.reset = function reset() {\n            this.stack.length = 0;\n        };\n\n        EvaluationStack.prototype.toArray = function toArray() {\n            return this.stack.slice(this.fp, this.sp + 1);\n        };\n\n        return EvaluationStack;\n    }();\n\n    var VM = function () {\n        function VM(env, scope, dynamicScope, elementStack) {\n            _classCallCheck$22(this, VM);\n\n            this.env = env;\n            this.elementStack = elementStack;\n            this.dynamicScopeStack = new _util.Stack();\n            this.scopeStack = new _util.Stack();\n            this.updatingOpcodeStack = new _util.Stack();\n            this.cacheGroups = new _util.Stack();\n            this.listBlockStack = new _util.Stack();\n            this.stack = EvaluationStack.empty();\n            /* Registers */\n            this.pc = -1;\n            this.ra = -1;\n            this.s0 = null;\n            this.s1 = null;\n            this.t0 = null;\n            this.t1 = null;\n            this.env = env;\n            this.heap = env.program.heap;\n            this.constants = env.program.constants;\n            this.elementStack = elementStack;\n            this.scopeStack.push(scope);\n            this.dynamicScopeStack.push(dynamicScope);\n        }\n\n        // Fetch a value from a register onto the stack\n        VM.prototype.fetch = function fetch(register) {\n            this.stack.push(this[Register[register]]);\n        };\n        // Load a value from the stack into a register\n\n\n        VM.prototype.load = function load(register) {\n            this[Register[register]] = this.stack.pop();\n        };\n        // Fetch a value from a register\n\n\n        VM.prototype.fetchValue = function fetchValue(register) {\n            return this[Register[register]];\n        };\n        // Load a value into a register\n\n\n        VM.prototype.loadValue = function loadValue(register, value) {\n            this[Register[register]] = value;\n        };\n        // Start a new frame and save $ra and $fp on the stack\n\n\n        VM.prototype.pushFrame = function pushFrame() {\n            this.stack.push(this.ra);\n            this.stack.push(this.fp);\n            this.fp = this.sp - 1;\n        };\n        // Restore $ra, $sp and $fp\n\n\n        VM.prototype.popFrame = function popFrame() {\n            this.sp = this.fp - 1;\n            this.ra = this.stack.fromBase(0);\n            this.fp = this.stack.fromBase(-1);\n        };\n        // Jump to an address in `program`\n\n\n        VM.prototype.goto = function goto(offset) {\n            this.pc = (0, _util.typePos)(this.pc + offset);\n        };\n        // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)\n\n\n        VM.prototype.call = function call(handle) {\n            var pc = this.heap.getaddr(handle);\n            this.ra = this.pc;\n            this.pc = pc;\n        };\n        // Put a specific `program` address in $ra\n\n\n        VM.prototype.returnTo = function returnTo(offset) {\n            this.ra = (0, _util.typePos)(this.pc + offset);\n        };\n        // Return to the `program` address stored in $ra\n\n\n        VM.prototype.return = function _return() {\n            this.pc = this.ra;\n        };\n\n        VM.initial = function initial(env, self, dynamicScope, elementStack, program) {\n            var scope = Scope.root(self, program.symbolTable.symbols.length);\n            var vm = new VM(env, scope, dynamicScope, elementStack);\n            vm.pc = vm.heap.getaddr(program.handle);\n            vm.updatingOpcodeStack.push(new _util.LinkedList());\n            return vm;\n        };\n\n        VM.prototype.capture = function capture(args) {\n            return {\n                dynamicScope: this.dynamicScope(),\n                env: this.env,\n                scope: this.scope(),\n                stack: this.stack.capture(args)\n            };\n        };\n\n        VM.prototype.beginCacheGroup = function beginCacheGroup() {\n            this.cacheGroups.push(this.updating().tail());\n        };\n\n        VM.prototype.commitCacheGroup = function commitCacheGroup() {\n            //        JumpIfNotModified(END)\n            //        (head)\n            //        (....)\n            //        (tail)\n            //        DidModify\n            // END:   Noop\n            var END = new LabelOpcode(\"END\");\n            var opcodes = this.updating();\n            var marker = this.cacheGroups.pop();\n            var head = marker ? opcodes.nextNode(marker) : opcodes.head();\n            var tail = opcodes.tail();\n            var tag = (0, _reference2.combineSlice)(new _util.ListSlice(head, tail));\n            var guard = new JumpIfNotModifiedOpcode(tag, END);\n            opcodes.insertBefore(guard, head);\n            opcodes.append(new DidModifyOpcode(guard));\n            opcodes.append(END);\n        };\n\n        VM.prototype.enter = function enter(args) {\n            var updating = new _util.LinkedList();\n            var state = this.capture(args);\n            var tracker = this.elements().pushUpdatableBlock();\n            var tryOpcode = new TryOpcode(this.heap.gethandle(this.pc), state, tracker, updating);\n            this.didEnter(tryOpcode);\n        };\n\n        VM.prototype.iterate = function iterate(memo, value) {\n            var stack = this.stack;\n            stack.push(value);\n            stack.push(memo);\n            var state = this.capture(2);\n            var tracker = this.elements().pushUpdatableBlock();\n            // let ip = this.ip;\n            // this.ip = end + 4;\n            // this.frames.push(ip);\n            return new TryOpcode(this.heap.gethandle(this.pc), state, tracker, new _util.LinkedList());\n        };\n\n        VM.prototype.enterItem = function enterItem(key, opcode) {\n            this.listBlock().map[key] = opcode;\n            this.didEnter(opcode);\n        };\n\n        VM.prototype.enterList = function enterList(relativeStart) {\n            var updating = new _util.LinkedList();\n            var state = this.capture(0);\n            var tracker = this.elements().pushBlockList(updating);\n            var artifacts = this.stack.peek().artifacts;\n            var start = this.heap.gethandle((0, _util.typePos)(this.pc + relativeStart));\n            var opcode = new ListBlockOpcode(start, state, tracker, updating, artifacts);\n            this.listBlockStack.push(opcode);\n            this.didEnter(opcode);\n        };\n\n        VM.prototype.didEnter = function didEnter(opcode) {\n            this.updateWith(opcode);\n            this.updatingOpcodeStack.push(opcode.children);\n        };\n\n        VM.prototype.exit = function exit() {\n            this.elements().popBlock();\n            this.updatingOpcodeStack.pop();\n            var parent = this.updating().tail();\n            parent.didInitializeChildren();\n        };\n\n        VM.prototype.exitList = function exitList() {\n            this.exit();\n            this.listBlockStack.pop();\n        };\n\n        VM.prototype.updateWith = function updateWith(opcode) {\n            this.updating().append(opcode);\n        };\n\n        VM.prototype.listBlock = function listBlock() {\n            return this.listBlockStack.current;\n        };\n\n        VM.prototype.updating = function updating() {\n            return this.updatingOpcodeStack.current;\n        };\n\n        VM.prototype.elements = function elements() {\n            return this.elementStack;\n        };\n\n        VM.prototype.scope = function scope() {\n            return this.scopeStack.current;\n        };\n\n        VM.prototype.dynamicScope = function dynamicScope() {\n            return this.dynamicScopeStack.current;\n        };\n\n        VM.prototype.pushChildScope = function pushChildScope() {\n            this.scopeStack.push(this.scope().child());\n        };\n\n        VM.prototype.pushCallerScope = function pushCallerScope() {\n            var childScope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            var callerScope = this.scope().getCallerScope();\n            this.scopeStack.push(childScope ? callerScope.child() : callerScope);\n        };\n\n        VM.prototype.pushDynamicScope = function pushDynamicScope() {\n            var child = this.dynamicScope().child();\n            this.dynamicScopeStack.push(child);\n            return child;\n        };\n\n        VM.prototype.pushRootScope = function pushRootScope(size, bindCaller) {\n            var scope = Scope.sized(size);\n            if (bindCaller) scope.bindCallerScope(this.scope());\n            this.scopeStack.push(scope);\n            return scope;\n        };\n\n        VM.prototype.popScope = function popScope() {\n            this.scopeStack.pop();\n        };\n\n        VM.prototype.popDynamicScope = function popDynamicScope() {\n            this.dynamicScopeStack.pop();\n        };\n\n        VM.prototype.newDestroyable = function newDestroyable(d) {\n            this.elements().newDestroyable(d);\n        };\n        /// SCOPE HELPERS\n\n\n        VM.prototype.getSelf = function getSelf() {\n            return this.scope().getSelf();\n        };\n\n        VM.prototype.referenceForSymbol = function referenceForSymbol(symbol) {\n            return this.scope().getSymbol(symbol);\n        };\n        /// EXECUTION\n\n\n        VM.prototype.execute = function execute(start, initialize) {\n            this.pc = this.heap.getaddr(start);\n            if (initialize) initialize(this);\n            var result = void 0;\n            while (true) {\n                result = this.next();\n                if (result.done) break;\n            }\n            return result.value;\n        };\n\n        VM.prototype.next = function next() {\n            var env = this.env,\n                updatingOpcodeStack = this.updatingOpcodeStack,\n                elementStack = this.elementStack;\n\n            var opcode = this.nextStatement(env);\n            var result = void 0;\n            if (opcode !== null) {\n                APPEND_OPCODES.evaluate(this, opcode, opcode.type);\n                result = { done: false, value: null };\n            } else {\n                // Unload the stack\n                this.stack.reset();\n                result = {\n                    done: true,\n                    value: new RenderResult(env, updatingOpcodeStack.pop(), elementStack.popBlock())\n                };\n            }\n            return result;\n        };\n\n        VM.prototype.nextStatement = function nextStatement(env) {\n            var pc = this.pc;\n\n            if (pc === -1) {\n                return null;\n            }\n            var program = env.program;\n            this.pc += 4;\n            return program.opcode(pc);\n        };\n\n        VM.prototype.evaluateOpcode = function evaluateOpcode(opcode) {\n            APPEND_OPCODES.evaluate(this, opcode, opcode.type);\n        };\n\n        VM.prototype.bindDynamicScope = function bindDynamicScope(names) {\n            var scope = this.dynamicScope();\n            for (var i = names.length - 1; i >= 0; i--) {\n                var name = this.constants.getString(names[i]);\n                scope.set(name, this.stack.pop());\n            }\n        };\n\n        _createClass$3(VM, [{\n            key: 'fp',\n            get: function () {\n                return this.stack.fp;\n            },\n            set: function (fp) {\n                this.stack.fp = fp;\n            }\n        }, {\n            key: 'sp',\n            get: function () {\n                return this.stack.sp;\n            },\n            set: function (sp) {\n                this.stack.sp = sp;\n            }\n        }]);\n\n        return VM;\n    }();\n\n    function _classCallCheck$14(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var TemplateIterator = function () {\n        function TemplateIterator(vm) {\n            _classCallCheck$14(this, TemplateIterator);\n\n            this.vm = vm;\n        }\n\n        TemplateIterator.prototype.next = function next() {\n            return this.vm.next();\n        };\n\n        return TemplateIterator;\n    }();\n    var clientId = 0;\n    function templateFactory(_ref) {\n        var templateId = _ref.id,\n            meta = _ref.meta,\n            block = _ref.block;\n\n        var parsedBlock = void 0;\n        var id = templateId || 'client-' + clientId++;\n        var create = function (env, envMeta) {\n            var newMeta = envMeta ? (0, _util.assign)({}, envMeta, meta) : meta;\n            if (!parsedBlock) {\n                parsedBlock = JSON.parse(block);\n            }\n            return new ScannableTemplate(id, newMeta, env, parsedBlock);\n        };\n        return { id: id, meta: meta, create: create };\n    }\n\n    var ScannableTemplate = function () {\n        function ScannableTemplate(id, meta, env, rawBlock) {\n            _classCallCheck$14(this, ScannableTemplate);\n\n            this.id = id;\n            this.meta = meta;\n            this.env = env;\n            this.entryPoint = null;\n            this.layout = null;\n            this.partial = null;\n            this.block = null;\n            this.scanner = new Scanner(rawBlock, env);\n            this.symbols = rawBlock.symbols;\n            this.hasEval = rawBlock.hasEval;\n        }\n\n        ScannableTemplate.prototype.render = function render(self, appendTo, dynamicScope) {\n            var env = this.env;\n\n            var elementStack = ElementStack.forInitialRender(env, appendTo, null);\n            var compiled = this.asEntryPoint().compileDynamic(env);\n            var vm = VM.initial(env, self, dynamicScope, elementStack, compiled);\n            return new TemplateIterator(vm);\n        };\n\n        ScannableTemplate.prototype.asEntryPoint = function asEntryPoint() {\n            if (!this.entryPoint) this.entryPoint = this.scanner.scanEntryPoint(this.compilationMeta());\n            return this.entryPoint;\n        };\n\n        ScannableTemplate.prototype.asLayout = function asLayout(componentName, attrs) {\n            if (!this.layout) this.layout = this.scanner.scanLayout(this.compilationMeta(), attrs || _util.EMPTY_ARRAY, componentName);\n            return this.layout;\n        };\n\n        ScannableTemplate.prototype.asPartial = function asPartial() {\n            if (!this.partial) this.partial = this.scanner.scanEntryPoint(this.compilationMeta(true));\n            return this.partial;\n        };\n\n        ScannableTemplate.prototype.asBlock = function asBlock() {\n            if (!this.block) this.block = this.scanner.scanBlock(this.compilationMeta());\n            return this.block;\n        };\n\n        ScannableTemplate.prototype.compilationMeta = function compilationMeta() {\n            var asPartial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            return { templateMeta: this.meta, symbols: this.symbols, asPartial: asPartial };\n        };\n\n        return ScannableTemplate;\n    }();\n\n    function _classCallCheck$32(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var DynamicVarReference = function () {\n        function DynamicVarReference(scope, nameRef) {\n            _classCallCheck$32(this, DynamicVarReference);\n\n            this.scope = scope;\n            this.nameRef = nameRef;\n            var varTag = this.varTag = _reference2.UpdatableTag.create(_reference2.CONSTANT_TAG);\n            this.tag = (0, _reference2.combine)([nameRef.tag, varTag]);\n        }\n\n        DynamicVarReference.prototype.value = function value() {\n            return this.getVar().value();\n        };\n\n        DynamicVarReference.prototype.get = function get(key) {\n            return this.getVar().get(key);\n        };\n\n        DynamicVarReference.prototype.getVar = function getVar() {\n            var name = String(this.nameRef.value());\n            var ref = this.scope.get(name);\n            this.varTag.inner.update(ref.tag);\n            return ref;\n        };\n\n        return DynamicVarReference;\n    }();\n\n    function getDynamicVar(vm, args) {\n        var scope = vm.dynamicScope();\n        var nameRef = args.positional.at(0);\n        return new DynamicVarReference(scope, nameRef);\n    }\n\n    function _classCallCheck$33(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var PartialDefinition = function PartialDefinition(name, // for debugging\n    template) {\n        _classCallCheck$33(this, PartialDefinition);\n\n        this.name = name;\n        this.template = template;\n    };\n\n    var NodeType;\n    (function (NodeType) {\n        NodeType[NodeType[\"Element\"] = 0] = \"Element\";\n        NodeType[NodeType[\"Attribute\"] = 1] = \"Attribute\";\n        NodeType[NodeType[\"Text\"] = 2] = \"Text\";\n        NodeType[NodeType[\"CdataSection\"] = 3] = \"CdataSection\";\n        NodeType[NodeType[\"EntityReference\"] = 4] = \"EntityReference\";\n        NodeType[NodeType[\"Entity\"] = 5] = \"Entity\";\n        NodeType[NodeType[\"ProcessingInstruction\"] = 6] = \"ProcessingInstruction\";\n        NodeType[NodeType[\"Comment\"] = 7] = \"Comment\";\n        NodeType[NodeType[\"Document\"] = 8] = \"Document\";\n        NodeType[NodeType[\"DocumentType\"] = 9] = \"DocumentType\";\n        NodeType[NodeType[\"DocumentFragment\"] = 10] = \"DocumentFragment\";\n        NodeType[NodeType[\"Notation\"] = 11] = \"Notation\";\n    })(NodeType || (NodeType = {}));\n\n    var interfaces = Object.freeze({\n        get NodeType() {\n            return NodeType;\n        }\n    });\n\n    exports.Simple = interfaces;\n    exports.templateFactory = templateFactory;\n    exports.NULL_REFERENCE = NULL_REFERENCE;\n    exports.UNDEFINED_REFERENCE = UNDEFINED_REFERENCE;\n    exports.PrimitiveReference = PrimitiveReference;\n    exports.ConditionalReference = ConditionalReference;\n    exports.OpcodeBuilderDSL = OpcodeBuilder;\n    exports.compileLayout = compileLayout;\n    exports.CompiledStaticTemplate = CompiledStaticTemplate;\n    exports.CompiledDynamicTemplate = CompiledDynamicTemplate;\n    exports.IAttributeManager = AttributeManager;\n    exports.AttributeManager = AttributeManager;\n    exports.PropertyManager = PropertyManager;\n    exports.INPUT_VALUE_PROPERTY_MANAGER = INPUT_VALUE_PROPERTY_MANAGER;\n    exports.defaultManagers = defaultManagers;\n    exports.defaultAttributeManagers = defaultAttributeManagers;\n    exports.defaultPropertyManagers = defaultPropertyManagers;\n    exports.readDOMAttr = readDOMAttr;\n    exports.Register = Register;\n    exports.debugSlice = debugSlice;\n    exports.normalizeTextValue = normalizeTextValue;\n    exports.setDebuggerCallback = setDebuggerCallback;\n    exports.resetDebuggerCallback = resetDebuggerCallback;\n    exports.getDynamicVar = getDynamicVar;\n    exports.BlockMacros = Blocks;\n    exports.InlineMacros = Inlines;\n    exports.compileList = compileList;\n    exports.compileExpression = expr;\n    exports.UpdatingVM = UpdatingVM;\n    exports.RenderResult = RenderResult;\n    exports.isSafeString = isSafeString;\n    exports.Scope = Scope;\n    exports.Environment = Environment;\n    exports.PartialDefinition = PartialDefinition;\n    exports.ComponentDefinition = ComponentDefinition;\n    exports.isComponentDefinition = isComponentDefinition;\n    exports.DOMChanges = helper$1;\n    exports.IDOMChanges = DOMChanges;\n    exports.DOMTreeConstruction = DOMTreeConstruction;\n    exports.isWhitespace = isWhitespace;\n    exports.insertHTMLBefore = _insertHTMLBefore;\n    exports.ElementStack = ElementStack;\n    exports.ConcreteBounds = ConcreteBounds;\n});","enifed('@glimmer/util', ['exports'], function (exports) {\n    'use strict';\n\n    // There is a small whitelist of namespaced attributes specially\n    // enumerated in\n    // https://www.w3.org/TR/html/syntax.html#attributes-0\n    //\n    // > When a foreign element has one of the namespaced attributes given by\n    // > the local name and namespace of the first and second cells of a row\n    // > from the following table, it must be written using the name given by\n    // > the third cell from the same row.\n    //\n    // In all other cases, colons are interpreted as a regular character\n    // with no special meaning:\n    //\n    // > No other namespaced attribute can be expressed in the HTML syntax.\n    var XLINK = 'http://www.w3.org/1999/xlink';\n    var XML = 'http://www.w3.org/XML/1998/namespace';\n    var XMLNS = 'http://www.w3.org/2000/xmlns/';\n    var WHITELIST = {\n        'xlink:actuate': XLINK,\n        'xlink:arcrole': XLINK,\n        'xlink:href': XLINK,\n        'xlink:role': XLINK,\n        'xlink:show': XLINK,\n        'xlink:title': XLINK,\n        'xlink:type': XLINK,\n        'xml:base': XML,\n        'xml:lang': XML,\n        'xml:space': XML,\n        'xmlns': XMLNS,\n        'xmlns:xlink': XMLNS\n    };\n    function getAttrNamespace(attrName) {\n        return WHITELIST[attrName] || null;\n    }\n\n    function unwrap(val) {\n        if (val === null || val === undefined) throw new Error('Expected value to be present');\n        return val;\n    }\n    function expect(val, message) {\n        if (val === null || val === undefined) throw new Error(message);\n        return val;\n    }\n    function unreachable() {\n        return new Error('unreachable');\n    }\n    function typePos(lastOperand) {\n        return lastOperand - 4;\n    }\n\n    // import Logger from './logger';\n    // let alreadyWarned = false;\n    // import Logger from './logger';\n    function debugAssert(test, msg) {\n        // if (!alreadyWarned) {\n        //   alreadyWarned = true;\n        //   Logger.warn(\"Don't leave debug assertions on in public builds\");\n        // }\n        if (!test) {\n            throw new Error(msg || \"assertion failure\");\n        }\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var LogLevel;\n    (function (LogLevel) {\n        LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n        LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n        LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\n        LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\n    })(LogLevel || (exports.LogLevel = LogLevel = {}));\n\n    var NullConsole = function () {\n        function NullConsole() {\n            _classCallCheck(this, NullConsole);\n        }\n\n        NullConsole.prototype.log = function log(_message) {};\n\n        NullConsole.prototype.warn = function warn(_message) {};\n\n        NullConsole.prototype.error = function error(_message) {};\n\n        NullConsole.prototype.trace = function trace() {};\n\n        return NullConsole;\n    }();\n\n    var ALWAYS = void 0;\n    var Logger = function () {\n        function Logger(_ref) {\n            var console = _ref.console,\n                level = _ref.level;\n\n            _classCallCheck(this, Logger);\n\n            this.f = ALWAYS;\n            this.force = ALWAYS;\n            this.console = console;\n            this.level = level;\n        }\n\n        Logger.prototype.skipped = function skipped(level) {\n            return level < this.level;\n        };\n\n        Logger.prototype.trace = function trace(message) {\n            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref2$stackTrace = _ref2.stackTrace,\n                stackTrace = _ref2$stackTrace === undefined ? false : _ref2$stackTrace;\n\n            if (this.skipped(LogLevel.Trace)) return;\n            this.console.log(message);\n            if (stackTrace) this.console.trace();\n        };\n\n        Logger.prototype.debug = function debug(message) {\n            var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref3$stackTrace = _ref3.stackTrace,\n                stackTrace = _ref3$stackTrace === undefined ? false : _ref3$stackTrace;\n\n            if (this.skipped(LogLevel.Debug)) return;\n            this.console.log(message);\n            if (stackTrace) this.console.trace();\n        };\n\n        Logger.prototype.warn = function warn(message) {\n            var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref4$stackTrace = _ref4.stackTrace,\n                stackTrace = _ref4$stackTrace === undefined ? false : _ref4$stackTrace;\n\n            if (this.skipped(LogLevel.Warn)) return;\n            this.console.warn(message);\n            if (stackTrace) this.console.trace();\n        };\n\n        Logger.prototype.error = function error(message) {\n            if (this.skipped(LogLevel.Error)) return;\n            this.console.error(message);\n        };\n\n        return Logger;\n    }();\n    var _console = typeof console === 'undefined' ? new NullConsole() : console;\n    ALWAYS = new Logger({ console: _console, level: LogLevel.Trace });\n    var LOG_LEVEL = LogLevel.Debug;\n    var logger = new Logger({ console: _console, level: LOG_LEVEL });\n\n    var objKeys = Object.keys;\n\n    function assign(obj) {\n        for (var i = 1; i < arguments.length; i++) {\n            var assignment = arguments[i];\n            if (assignment === null || typeof assignment !== 'object') continue;\n            var keys = objKeys(assignment);\n            for (var j = 0; j < keys.length; j++) {\n                var key = keys[j];\n                obj[key] = assignment[key];\n            }\n        }\n        return obj;\n    }\n    function fillNulls(count) {\n        var arr = new Array(count);\n        for (var i = 0; i < count; i++) {\n            arr[i] = null;\n        }\n        return arr;\n    }\n\n    var GUID = 0;\n    function initializeGuid(object) {\n        return object._guid = ++GUID;\n    }\n    function ensureGuid(object) {\n        return object._guid || initializeGuid(object);\n    }\n\n    function _classCallCheck$1(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var proto = Object.create(null, {\n        // without this, we will always still end up with (new\n        // EmptyObject()).constructor === Object\n        constructor: {\n            value: undefined,\n            enumerable: false,\n            writable: true\n        }\n    });\n    function EmptyObject() {}\n    EmptyObject.prototype = proto;\n    function dict() {\n        // let d = Object.create(null);\n        // d.x = 1;\n        // delete d.x;\n        // return d;\n        return new EmptyObject();\n    }\n    var DictSet = function () {\n        function DictSet() {\n            _classCallCheck$1(this, DictSet);\n\n            this.dict = dict();\n        }\n\n        DictSet.prototype.add = function add(obj) {\n            if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;\n            return this;\n        };\n\n        DictSet.prototype.delete = function _delete(obj) {\n            if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];\n        };\n\n        DictSet.prototype.forEach = function forEach(callback) {\n            var dict = this.dict;\n\n            var dictKeys = Object.keys(dict);\n            for (var i = 0; dictKeys.length; i++) {\n                callback(dict[dictKeys[i]]);\n            }\n        };\n\n        DictSet.prototype.toArray = function toArray() {\n            return Object.keys(this.dict);\n        };\n\n        return DictSet;\n    }();\n    var Stack = function () {\n        function Stack() {\n            _classCallCheck$1(this, Stack);\n\n            this.stack = [];\n            this.current = null;\n        }\n\n        Stack.prototype.toArray = function toArray() {\n            return this.stack;\n        };\n\n        Stack.prototype.push = function push(item) {\n            this.current = item;\n            this.stack.push(item);\n        };\n\n        Stack.prototype.pop = function pop() {\n            var item = this.stack.pop();\n            var len = this.stack.length;\n            this.current = len === 0 ? null : this.stack[len - 1];\n            return item === undefined ? null : item;\n        };\n\n        Stack.prototype.isEmpty = function isEmpty() {\n            return this.stack.length === 0;\n        };\n\n        return Stack;\n    }();\n\n    function _classCallCheck$2(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var ListNode = function ListNode(value) {\n        _classCallCheck$2(this, ListNode);\n\n        this.next = null;\n        this.prev = null;\n        this.value = value;\n    };\n    var LinkedList = function () {\n        function LinkedList() {\n            _classCallCheck$2(this, LinkedList);\n\n            this.clear();\n        }\n\n        LinkedList.fromSlice = function fromSlice(slice) {\n            var list = new LinkedList();\n            slice.forEachNode(function (n) {\n                return list.append(n.clone());\n            });\n            return list;\n        };\n\n        LinkedList.prototype.head = function head() {\n            return this._head;\n        };\n\n        LinkedList.prototype.tail = function tail() {\n            return this._tail;\n        };\n\n        LinkedList.prototype.clear = function clear() {\n            this._head = this._tail = null;\n        };\n\n        LinkedList.prototype.isEmpty = function isEmpty() {\n            return this._head === null;\n        };\n\n        LinkedList.prototype.toArray = function toArray() {\n            var out = [];\n            this.forEachNode(function (n) {\n                return out.push(n);\n            });\n            return out;\n        };\n\n        LinkedList.prototype.splice = function splice(start, end, reference) {\n            var before = void 0;\n            if (reference === null) {\n                before = this._tail;\n                this._tail = end;\n            } else {\n                before = reference.prev;\n                end.next = reference;\n                reference.prev = end;\n            }\n            if (before) {\n                before.next = start;\n                start.prev = before;\n            }\n        };\n\n        LinkedList.prototype.nextNode = function nextNode(node) {\n            return node.next;\n        };\n\n        LinkedList.prototype.prevNode = function prevNode(node) {\n            return node.prev;\n        };\n\n        LinkedList.prototype.forEachNode = function forEachNode(callback) {\n            var node = this._head;\n            while (node !== null) {\n                callback(node);\n                node = node.next;\n            }\n        };\n\n        LinkedList.prototype.contains = function contains(needle) {\n            var node = this._head;\n            while (node !== null) {\n                if (node === needle) return true;\n                node = node.next;\n            }\n            return false;\n        };\n\n        LinkedList.prototype.insertBefore = function insertBefore(node) {\n            var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (reference === null) return this.append(node);\n            if (reference.prev) reference.prev.next = node;else this._head = node;\n            node.prev = reference.prev;\n            node.next = reference;\n            reference.prev = node;\n            return node;\n        };\n\n        LinkedList.prototype.append = function append(node) {\n            var tail = this._tail;\n            if (tail) {\n                tail.next = node;\n                node.prev = tail;\n                node.next = null;\n            } else {\n                this._head = node;\n            }\n            return this._tail = node;\n        };\n\n        LinkedList.prototype.pop = function pop() {\n            if (this._tail) return this.remove(this._tail);\n            return null;\n        };\n\n        LinkedList.prototype.prepend = function prepend(node) {\n            if (this._head) return this.insertBefore(node, this._head);\n            return this._head = this._tail = node;\n        };\n\n        LinkedList.prototype.remove = function remove(node) {\n            if (node.prev) node.prev.next = node.next;else this._head = node.next;\n            if (node.next) node.next.prev = node.prev;else this._tail = node.prev;\n            return node;\n        };\n\n        return LinkedList;\n    }();\n    var ListSlice = function () {\n        function ListSlice(head, tail) {\n            _classCallCheck$2(this, ListSlice);\n\n            this._head = head;\n            this._tail = tail;\n        }\n\n        ListSlice.toList = function toList(slice) {\n            var list = new LinkedList();\n            slice.forEachNode(function (n) {\n                return list.append(n.clone());\n            });\n            return list;\n        };\n\n        ListSlice.prototype.forEachNode = function forEachNode(callback) {\n            var node = this._head;\n            while (node !== null) {\n                callback(node);\n                node = this.nextNode(node);\n            }\n        };\n\n        ListSlice.prototype.contains = function contains(needle) {\n            var node = this._head;\n            while (node !== null) {\n                if (node === needle) return true;\n                node = node.next;\n            }\n            return false;\n        };\n\n        ListSlice.prototype.head = function head() {\n            return this._head;\n        };\n\n        ListSlice.prototype.tail = function tail() {\n            return this._tail;\n        };\n\n        ListSlice.prototype.toArray = function toArray() {\n            var out = [];\n            this.forEachNode(function (n) {\n                return out.push(n);\n            });\n            return out;\n        };\n\n        ListSlice.prototype.nextNode = function nextNode(node) {\n            if (node === this._tail) return null;\n            return node.next;\n        };\n\n        ListSlice.prototype.prevNode = function prevNode(node) {\n            if (node === this._head) return null;\n            return node.prev;\n        };\n\n        ListSlice.prototype.isEmpty = function isEmpty() {\n            return false;\n        };\n\n        return ListSlice;\n    }();\n    var EMPTY_SLICE = new ListSlice(null, null);\n\n    var HAS_NATIVE_WEAKMAP = function () {\n        // detect if `WeakMap` is even present\n        var hasWeakMap = typeof WeakMap === 'function';\n        if (!hasWeakMap) {\n            return false;\n        }\n        var instance = new WeakMap();\n        // use `Object`'s `.toString` directly to prevent us from detecting\n        // polyfills as native weakmaps\n        return Object.prototype.toString.call(instance) === '[object WeakMap]';\n    }();\n\n    var HAS_TYPED_ARRAYS = typeof Uint32Array !== 'undefined';\n    var A = void 0;\n    if (HAS_TYPED_ARRAYS) {\n        A = Uint32Array;\n    } else {\n        A = Array;\n    }\n    var A$1 = A;\n    var EMPTY_ARRAY = HAS_NATIVE_WEAKMAP ? Object.freeze([]) : [];\n\n    exports.getAttrNamespace = getAttrNamespace;\n    exports.assert = debugAssert;\n    exports.LOGGER = logger;\n    exports.Logger = Logger;\n    exports.LogLevel = LogLevel;\n    exports.assign = assign;\n    exports.fillNulls = fillNulls;\n    exports.ensureGuid = ensureGuid;\n    exports.initializeGuid = initializeGuid;\n    exports.Stack = Stack;\n    exports.DictSet = DictSet;\n    exports.dict = dict;\n    exports.EMPTY_SLICE = EMPTY_SLICE;\n    exports.LinkedList = LinkedList;\n    exports.ListNode = ListNode;\n    exports.ListSlice = ListSlice;\n    exports.A = A$1;\n    exports.EMPTY_ARRAY = EMPTY_ARRAY;\n    exports.HAS_NATIVE_WEAKMAP = HAS_NATIVE_WEAKMAP;\n    exports.unwrap = unwrap;\n    exports.expect = expect;\n    exports.unreachable = unreachable;\n    exports.typePos = typePos;\n});","enifed(\"@glimmer/wire-format\", [\"exports\"], function (exports) {\n    \"use strict\";\n\n    var Opcodes;\n    (function (Opcodes) {\n        // Statements\n        Opcodes[Opcodes[\"Text\"] = 0] = \"Text\";\n        Opcodes[Opcodes[\"Append\"] = 1] = \"Append\";\n        Opcodes[Opcodes[\"Comment\"] = 2] = \"Comment\";\n        Opcodes[Opcodes[\"Modifier\"] = 3] = \"Modifier\";\n        Opcodes[Opcodes[\"Block\"] = 4] = \"Block\";\n        Opcodes[Opcodes[\"Component\"] = 5] = \"Component\";\n        Opcodes[Opcodes[\"OpenElement\"] = 6] = \"OpenElement\";\n        Opcodes[Opcodes[\"FlushElement\"] = 7] = \"FlushElement\";\n        Opcodes[Opcodes[\"CloseElement\"] = 8] = \"CloseElement\";\n        Opcodes[Opcodes[\"StaticAttr\"] = 9] = \"StaticAttr\";\n        Opcodes[Opcodes[\"DynamicAttr\"] = 10] = \"DynamicAttr\";\n        Opcodes[Opcodes[\"Yield\"] = 11] = \"Yield\";\n        Opcodes[Opcodes[\"Partial\"] = 12] = \"Partial\";\n        Opcodes[Opcodes[\"DynamicArg\"] = 13] = \"DynamicArg\";\n        Opcodes[Opcodes[\"StaticArg\"] = 14] = \"StaticArg\";\n        Opcodes[Opcodes[\"TrustingAttr\"] = 15] = \"TrustingAttr\";\n        Opcodes[Opcodes[\"Debugger\"] = 16] = \"Debugger\";\n        Opcodes[Opcodes[\"ClientSideStatement\"] = 17] = \"ClientSideStatement\";\n        // Expressions\n        Opcodes[Opcodes[\"Unknown\"] = 18] = \"Unknown\";\n        Opcodes[Opcodes[\"Get\"] = 19] = \"Get\";\n        Opcodes[Opcodes[\"MaybeLocal\"] = 20] = \"MaybeLocal\";\n        Opcodes[Opcodes[\"FixThisBeforeWeMerge\"] = 21] = \"FixThisBeforeWeMerge\";\n        Opcodes[Opcodes[\"HasBlock\"] = 22] = \"HasBlock\";\n        Opcodes[Opcodes[\"HasBlockParams\"] = 23] = \"HasBlockParams\";\n        Opcodes[Opcodes[\"Undefined\"] = 24] = \"Undefined\";\n        Opcodes[Opcodes[\"Helper\"] = 25] = \"Helper\";\n        Opcodes[Opcodes[\"Concat\"] = 26] = \"Concat\";\n        Opcodes[Opcodes[\"ClientSideExpression\"] = 27] = \"ClientSideExpression\";\n    })(Opcodes || (exports.Ops = Opcodes = {}));\n\n    function is(variant) {\n        return function (value) {\n            return Array.isArray(value) && value[0] === variant;\n        };\n    }\n    var Expressions;\n    (function (Expressions) {\n        Expressions.isUnknown = is(Opcodes.Unknown);\n        Expressions.isGet = is(Opcodes.Get);\n        Expressions.isConcat = is(Opcodes.Concat);\n        Expressions.isHelper = is(Opcodes.Helper);\n        Expressions.isHasBlock = is(Opcodes.HasBlock);\n        Expressions.isHasBlockParams = is(Opcodes.HasBlockParams);\n        Expressions.isUndefined = is(Opcodes.Undefined);\n        Expressions.isClientSide = is(Opcodes.ClientSideExpression);\n        Expressions.isMaybeLocal = is(Opcodes.MaybeLocal);\n        function isPrimitiveValue(value) {\n            if (value === null) {\n                return true;\n            }\n            return typeof value !== 'object';\n        }\n        Expressions.isPrimitiveValue = isPrimitiveValue;\n    })(Expressions || (exports.Expressions = Expressions = {}));\n    var Statements;\n    (function (Statements) {\n        Statements.isText = is(Opcodes.Text);\n        Statements.isAppend = is(Opcodes.Append);\n        Statements.isComment = is(Opcodes.Comment);\n        Statements.isModifier = is(Opcodes.Modifier);\n        Statements.isBlock = is(Opcodes.Block);\n        Statements.isComponent = is(Opcodes.Component);\n        Statements.isOpenElement = is(Opcodes.OpenElement);\n        Statements.isFlushElement = is(Opcodes.FlushElement);\n        Statements.isCloseElement = is(Opcodes.CloseElement);\n        Statements.isStaticAttr = is(Opcodes.StaticAttr);\n        Statements.isDynamicAttr = is(Opcodes.DynamicAttr);\n        Statements.isYield = is(Opcodes.Yield);\n        Statements.isPartial = is(Opcodes.Partial);\n        Statements.isDynamicArg = is(Opcodes.DynamicArg);\n        Statements.isStaticArg = is(Opcodes.StaticArg);\n        Statements.isTrustingAttr = is(Opcodes.TrustingAttr);\n        Statements.isDebugger = is(Opcodes.Debugger);\n        Statements.isClientSide = is(Opcodes.ClientSideStatement);\n        function isAttribute(val) {\n            return val[0] === Opcodes.StaticAttr || val[0] === Opcodes.DynamicAttr || val[0] === Opcodes.TrustingAttr;\n        }\n        Statements.isAttribute = isAttribute;\n        function isArgument(val) {\n            return val[0] === Opcodes.StaticArg || val[0] === Opcodes.DynamicArg;\n        }\n        Statements.isArgument = isArgument;\n        function isParameter(val) {\n            return isAttribute(val) || isArgument(val);\n        }\n        Statements.isParameter = isParameter;\n        function getParameterName(s) {\n            return s[1];\n        }\n        Statements.getParameterName = getParameterName;\n    })(Statements || (exports.Statements = Statements = {}));\n\n    exports.is = is;\n    exports.Expressions = Expressions;\n    exports.Statements = Statements;\n    exports.Ops = Opcodes;\n});","enifed('backburner', ['exports', 'ember-babel'], function (exports, _emberBabel) {\n    'use strict';\n\n    var NUMBER = /\\d+/;\n    function isCoercableNumber(suspect) {\n        var type = typeof suspect;\n        return type === 'number' && suspect === suspect || type === 'string' && NUMBER.test(suspect);\n    }\n    function getOnError(options) {\n        return options.onError || options.onErrorTarget && options.onErrorTarget[options.onErrorMethod];\n    }\n    function findItem(target, method, collection) {\n        var index = -1;\n        for (var i = 0, l = collection.length; i < l; i += 4) {\n            if (collection[i] === target && collection[i + 1] === method) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n    function findTimer(timer, collection) {\n        var index = -1;\n        for (var i = 3; i < collection.length; i += 4) {\n            if (collection[i] === timer) {\n                index = i - 3;\n                break;\n            }\n        }\n        return index;\n    }\n\n    function binarySearch(time, timers) {\n        var start = 0;\n        var end = timers.length - 6;\n        var middle = void 0;\n        var l = void 0;\n        while (start < end) {\n            // since timers is an array of pairs 'l' will always\n            // be an integer\n            l = (end - start) / 6;\n            // compensate for the index in case even number\n            // of pairs inside timers\n            middle = start + l - l % 6;\n            if (time >= timers[middle]) {\n                start = middle + 6;\n            } else {\n                end = middle;\n            }\n        }\n        return time >= timers[start] ? start + 6 : start;\n    }\n\n    var Queue = function () {\n        function Queue(name) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            var globalOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n            (0, _emberBabel.classCallCheck)(this, Queue);\n\n            this._queueBeingFlushed = [];\n            this.targetQueues = new Map();\n            this.index = 0;\n            this._queue = [];\n            this.name = name;\n            this.options = options;\n            this.globalOptions = globalOptions;\n        }\n\n        Queue.prototype.stackFor = function stackFor(index) {\n            if (index < this._queue.length) {\n                var entry = this._queue[index * 3 + 4];\n                if (entry) {\n                    return entry.stack;\n                } else {\n                    return null;\n                }\n            }\n        };\n\n        Queue.prototype.flush = function flush(sync) {\n            var _options = this.options,\n                before = _options.before,\n                after = _options.after;\n\n            var target = void 0;\n            var method = void 0;\n            var args = void 0;\n            var errorRecordedForStack = void 0;\n            this.targetQueues.clear();\n            if (this._queueBeingFlushed.length === 0) {\n                this._queueBeingFlushed = this._queue;\n                this._queue = [];\n            }\n            if (before !== undefined) {\n                before();\n            }\n            var invoke = void 0;\n            var queueItems = this._queueBeingFlushed;\n            if (queueItems.length > 0) {\n                var onError = getOnError(this.globalOptions);\n                invoke = onError ? this.invokeWithOnError : this.invoke;\n                for (var i = this.index; i < queueItems.length; i += 4) {\n                    this.index += 4;\n                    method = queueItems[i + 1];\n                    // method could have been nullified / canceled during flush\n                    if (method !== null) {\n                        //\n                        //    ** Attention intrepid developer **\n                        //\n                        //    To find out the stack of this task when it was scheduled onto\n                        //    the run loop, add the following to your app.js:\n                        //\n                        //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.\n                        //\n                        //    Once that is in place, when you are at a breakpoint and navigate\n                        //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,\n                        //    which will be the captured stack when this job was scheduled.\n                        //\n                        //    One possible long-term solution is the following Chrome issue:\n                        //       https://bugs.chromium.org/p/chromium/issues/detail?id=332624\n                        //\n                        target = queueItems[i];\n                        args = queueItems[i + 2];\n                        errorRecordedForStack = queueItems[i + 3]; // Debugging assistance\n                        invoke(target, method, args, onError, errorRecordedForStack);\n                    }\n                    if (this.index !== this._queueBeingFlushed.length && this.globalOptions.mustYield && this.globalOptions.mustYield()) {\n                        return 1 /* Pause */;\n                    }\n                }\n            }\n            if (after !== undefined) {\n                after();\n            }\n            this._queueBeingFlushed.length = 0;\n            this.index = 0;\n            if (sync !== false && this._queue.length > 0) {\n                // check if new items have been added\n                this.flush(true);\n            }\n        };\n\n        Queue.prototype.hasWork = function hasWork() {\n            return this._queueBeingFlushed.length > 0 || this._queue.length > 0;\n        };\n\n        Queue.prototype.cancel = function cancel(_ref) {\n            var target = _ref.target,\n                method = _ref.method;\n\n            var queue = this._queue;\n            var targetQueueMap = this.targetQueues.get(target);\n            if (targetQueueMap !== undefined) {\n                targetQueueMap.delete(method);\n            }\n            var index = findItem(target, method, queue);\n            if (index > -1) {\n                queue.splice(index, 4);\n                return true;\n            }\n            // if not found in current queue\n            // could be in the queue that is being flushed\n            queue = this._queueBeingFlushed;\n            index = findItem(target, method, queue);\n            if (index > -1) {\n                queue[index + 1] = null;\n                return true;\n            }\n            return false;\n        };\n\n        Queue.prototype.push = function push(target, method, args, stack) {\n            this._queue.push(target, method, args, stack);\n            return {\n                queue: this,\n                target: target,\n                method: method\n            };\n        };\n\n        Queue.prototype.pushUnique = function pushUnique(target, method, args, stack) {\n            var localQueueMap = this.targetQueues.get(target);\n            if (localQueueMap === undefined) {\n                localQueueMap = new Map();\n                this.targetQueues.set(target, localQueueMap);\n            }\n            var index = localQueueMap.get(method);\n            if (index === undefined) {\n                var queueIndex = this._queue.push(target, method, args, stack) - 4;\n                localQueueMap.set(method, queueIndex);\n            } else {\n                var queue = this._queue;\n                queue[index + 2] = args; // replace args\n                queue[index + 3] = stack; // replace stack\n            }\n            return {\n                queue: this,\n                target: target,\n                method: method\n            };\n        };\n\n        Queue.prototype.invoke = function invoke(target, method, args /*, onError, errorRecordedForStack */) {\n            if (args === undefined) {\n                method.call(target);\n            } else {\n                method.apply(target, args);\n            }\n        };\n\n        Queue.prototype.invokeWithOnError = function invokeWithOnError(target, method, args, onError, errorRecordedForStack) {\n            try {\n                if (args === undefined) {\n                    method.call(target);\n                } else {\n                    method.apply(target, args);\n                }\n            } catch (error) {\n                onError(error, errorRecordedForStack);\n            }\n        };\n\n        return Queue;\n    }();\n\n    var DeferredActionQueues = function () {\n        function DeferredActionQueues() {\n            var queueNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n            var options = arguments[1];\n            (0, _emberBabel.classCallCheck)(this, DeferredActionQueues);\n\n            this.queues = {};\n            this.queueNameIndex = 0;\n            this.queueNames = queueNames;\n            queueNames.reduce(function (queues, queueName) {\n                queues[queueName] = new Queue(queueName, options[queueName], options);\n                return queues;\n            }, this.queues);\n        }\n        /*\n          @method schedule\n          @param {String} queueName\n          @param {Any} target\n          @param {Any} method\n          @param {Any} args\n          @param {Boolean} onceFlag\n          @param {Any} stack\n          @return queue\n        */\n\n\n        DeferredActionQueues.prototype.schedule = function schedule(queueName, target, method, args, onceFlag, stack) {\n            var queues = this.queues;\n            var queue = queues[queueName];\n            if (queue === undefined) {\n                throw new Error('You attempted to schedule an action in a queue (' + queueName + ') that doesn\\'t exist');\n            }\n            if (method === undefined || method === null) {\n                throw new Error('You attempted to schedule an action in a queue (' + queueName + ') for a method that doesn\\'t exist');\n            }\n            if (onceFlag) {\n                return queue.pushUnique(target, method, args, stack);\n            } else {\n                return queue.push(target, method, args, stack);\n            }\n        };\n\n        DeferredActionQueues.prototype.flush = function flush() {\n            var queue = void 0;\n            var queueName = void 0;\n            var numberOfQueues = this.queueNames.length;\n            while (this.queueNameIndex < numberOfQueues) {\n                queueName = this.queueNames[this.queueNameIndex];\n                queue = this.queues[queueName];\n                if (queue.hasWork() === false) {\n                    this.queueNameIndex++;\n                } else {\n                    if (queue.flush(false /* async */) === 1 /* Pause */) {\n                            return 1 /* Pause */;\n                        }\n                    this.queueNameIndex = 0; // only reset to first queue if non-pause break\n                }\n            }\n        };\n\n        return DeferredActionQueues;\n    }();\n\n    var iteratorDrain = function (fn) {\n        var iterator = fn();\n        var result = iterator.next();\n        while (result.done === false) {\n            result.value();\n            result = iterator.next();\n        }\n    };\n\n    var noop = function () {};\n    var SET_TIMEOUT = setTimeout;\n    function parseArgs() {\n        var length = arguments.length;\n        var method = void 0;\n        var target = void 0;\n        var args = void 0;\n        if (length === 1) {\n            method = arguments[0];\n            target = null;\n        } else {\n            target = arguments[0];\n            method = arguments[1];\n            if (typeof method === 'string') {\n                method = target[method];\n            }\n            if (length > 2) {\n                args = new Array(length - 2);\n                for (var i = 0, l = length - 2; i < l; i++) {\n                    args[i] = arguments[i + 2];\n                }\n            }\n        }\n        return [target, method, args];\n    }\n    var UUID = 0;\n\n    var Backburner = function () {\n        function Backburner(queueNames) {\n            var _this = this;\n\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            (0, _emberBabel.classCallCheck)(this, Backburner);\n\n            this.DEBUG = false;\n            this.currentInstance = null;\n            this.instanceStack = [];\n            this._debouncees = [];\n            this._throttlers = [];\n            this._eventCallbacks = {\n                end: [],\n                begin: []\n            };\n            this._timerTimeoutId = null;\n            this._timers = [];\n            this._autorun = null;\n            this.queueNames = queueNames;\n            this.options = options;\n            if (!this.options.defaultQueue) {\n                this.options.defaultQueue = queueNames[0];\n            }\n            this._onBegin = this.options.onBegin || noop;\n            this._onEnd = this.options.onEnd || noop;\n            var _platform = this.options._platform || {};\n            var platform = Object.create(null);\n            platform.setTimeout = _platform.setTimeout || function (fn, ms) {\n                return setTimeout(fn, ms);\n            };\n            platform.clearTimeout = _platform.clearTimeout || function (id) {\n                return clearTimeout(id);\n            };\n            platform.next = _platform.next || function (fn) {\n                return SET_TIMEOUT(fn, 0);\n            };\n            platform.clearNext = _platform.clearNext || platform.clearTimeout;\n            platform.now = _platform.now || function () {\n                return Date.now();\n            };\n            this._platform = platform;\n            this._boundRunExpiredTimers = function () {\n                _this._runExpiredTimers();\n            };\n            this._boundAutorunEnd = function () {\n                _this._autorun = null;\n                _this.end();\n            };\n        }\n        /*\n          @method begin\n          @return instantiated class DeferredActionQueues\n        */\n\n\n        Backburner.prototype.begin = function begin() {\n            var options = this.options;\n            var previousInstance = this.currentInstance;\n            var current = void 0;\n            if (this._autorun !== null) {\n                current = previousInstance;\n                this._cancelAutorun();\n            } else {\n                if (previousInstance !== null) {\n                    this.instanceStack.push(previousInstance);\n                }\n                current = this.currentInstance = new DeferredActionQueues(this.queueNames, options);\n                this._trigger('begin', current, previousInstance);\n            }\n            this._onBegin(current, previousInstance);\n            return current;\n        };\n\n        Backburner.prototype.end = function end() {\n            var currentInstance = this.currentInstance;\n            var nextInstance = null;\n            if (currentInstance === null) {\n                throw new Error('end called without begin');\n            }\n            // Prevent double-finally bug in Safari 6.0.2 and iOS 6\n            // This bug appears to be resolved in Safari 6.0.5 and iOS 7\n            var finallyAlreadyCalled = false;\n            var result = void 0;\n            try {\n                result = currentInstance.flush();\n            } finally {\n                if (!finallyAlreadyCalled) {\n                    finallyAlreadyCalled = true;\n                    if (result === 1 /* Pause */) {\n                            var next = this._platform.next;\n                            this._autorun = next(this._boundAutorunEnd);\n                        } else {\n                        this.currentInstance = null;\n                        if (this.instanceStack.length > 0) {\n                            nextInstance = this.instanceStack.pop();\n                            this.currentInstance = nextInstance;\n                        }\n                        this._trigger('end', currentInstance, nextInstance);\n                        this._onEnd(currentInstance, nextInstance);\n                    }\n                }\n            }\n        };\n\n        Backburner.prototype.on = function on(eventName, callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('Callback must be a function');\n            }\n            var callbacks = this._eventCallbacks[eventName];\n            if (callbacks !== undefined) {\n                callbacks.push(callback);\n            } else {\n                throw new TypeError('Cannot on() event ' + eventName + ' because it does not exist');\n            }\n        };\n\n        Backburner.prototype.off = function off(eventName, callback) {\n            var callbacks = this._eventCallbacks[eventName];\n            if (!eventName || callbacks === undefined) {\n                throw new TypeError('Cannot off() event ' + eventName + ' because it does not exist');\n            }\n            var callbackFound = false;\n            if (callback) {\n                for (var i = 0; i < callbacks.length; i++) {\n                    if (callbacks[i] === callback) {\n                        callbackFound = true;\n                        callbacks.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n            if (!callbackFound) {\n                throw new TypeError('Cannot off() callback that does not exist');\n            }\n        };\n\n        Backburner.prototype.run = function run() {\n            var _parseArgs = parseArgs.apply(undefined, arguments),\n                target = _parseArgs[0],\n                method = _parseArgs[1],\n                args = _parseArgs[2];\n\n            return this._run(target, method, args);\n        };\n\n        Backburner.prototype.join = function join() {\n            var _parseArgs2 = parseArgs.apply(undefined, arguments),\n                target = _parseArgs2[0],\n                method = _parseArgs2[1],\n                args = _parseArgs2[2];\n\n            return this._join(target, method, args);\n        };\n\n        Backburner.prototype.defer = function defer(queueName, targetOrMethod) {\n            for (var _len = arguments.length, _args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                _args[_key - 2] = arguments[_key];\n            }\n\n            return this.schedule.apply(this, [queueName, targetOrMethod].concat(_args));\n        };\n\n        Backburner.prototype.schedule = function schedule(queueName) {\n            for (var _len2 = arguments.length, _args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                _args[_key2 - 1] = arguments[_key2];\n            }\n\n            var _parseArgs3 = parseArgs.apply(undefined, _args),\n                target = _parseArgs3[0],\n                method = _parseArgs3[1],\n                args = _parseArgs3[2];\n\n            var stack = this.DEBUG ? new Error() : undefined;\n            return this._ensureInstance().schedule(queueName, target, method, args, false, stack);\n        };\n\n        Backburner.prototype.scheduleIterable = function scheduleIterable(queueName, iterable) {\n            var stack = this.DEBUG ? new Error() : undefined;\n            return this._ensureInstance().schedule(queueName, null, iteratorDrain, [iterable], false, stack);\n        };\n\n        Backburner.prototype.deferOnce = function deferOnce(queueName, targetOrMethod) {\n            for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n                args[_key3 - 2] = arguments[_key3];\n            }\n\n            return this.scheduleOnce.apply(this, [queueName, targetOrMethod].concat(args));\n        };\n\n        Backburner.prototype.scheduleOnce = function scheduleOnce(queueName) {\n            for (var _len4 = arguments.length, _args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                _args[_key4 - 1] = arguments[_key4];\n            }\n\n            var _parseArgs4 = parseArgs.apply(undefined, _args),\n                target = _parseArgs4[0],\n                method = _parseArgs4[1],\n                args = _parseArgs4[2];\n\n            var stack = this.DEBUG ? new Error() : undefined;\n            return this._ensureInstance().schedule(queueName, target, method, args, true, stack);\n        };\n\n        Backburner.prototype.setTimeout = function setTimeout() {\n            return this.later.apply(this, arguments);\n        };\n\n        Backburner.prototype.later = function later() {\n            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                args[_key5] = arguments[_key5];\n            }\n\n            var length = args.length;\n            var wait = 0;\n            var method = void 0;\n            var target = void 0;\n            var methodOrTarget = void 0;\n            var methodOrArgs = void 0;\n            if (length === 0) {\n                return;\n            } else if (length === 1) {\n                method = args.shift();\n            } else {\n                var last = args[args.length - 1];\n                if (isCoercableNumber(last)) {\n                    wait = parseInt(args.pop(), 10);\n                }\n                methodOrTarget = args[0];\n                methodOrArgs = args[1];\n                var type = typeof methodOrArgs;\n                if (type === 'function') {\n                    target = args.shift();\n                    method = args.shift();\n                } else if (methodOrTarget !== null && type === 'string' && methodOrArgs in methodOrTarget) {\n                    target = args.shift();\n                    method = target[args.shift()];\n                } else {\n                    method = args.shift();\n                }\n            }\n            return this._setTimeout(target, method, args, wait);\n        };\n\n        Backburner.prototype.throttle = function throttle(targetOrThisArgOrMethod) {\n            var _this2 = this;\n\n            var target = void 0;\n            var method = void 0;\n            var immediate = void 0;\n            var isImmediate = void 0;\n            var wait = void 0;\n\n            for (var _len6 = arguments.length, args = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n                args[_key6 - 1] = arguments[_key6];\n            }\n\n            if (args.length === 1) {\n                method = targetOrThisArgOrMethod;\n                wait = args.pop();\n                target = null;\n                isImmediate = true;\n            } else {\n                target = targetOrThisArgOrMethod;\n                method = args.shift();\n                immediate = args.pop();\n                var type = typeof method;\n                if (type === 'string') {\n                    method = target[method];\n                } else if (type !== 'function') {\n                    args.unshift(method);\n                    method = target;\n                    target = null;\n                }\n                if (isCoercableNumber(immediate)) {\n                    wait = immediate;\n                    isImmediate = true;\n                } else {\n                    wait = args.pop();\n                    isImmediate = immediate === true;\n                }\n            }\n            var index = findItem(target, method, this._throttlers);\n            if (index > -1) {\n                this._throttlers[index + 2] = args;\n                return this._throttlers[index + 3];\n            } // throttled\n            wait = parseInt(wait, 10);\n            var timer = this._platform.setTimeout(function () {\n                var i = findTimer(timer, _this2._throttlers);\n\n                var _throttlers$splice = _this2._throttlers.splice(i, 4),\n                    context = _throttlers$splice[0],\n                    func = _throttlers$splice[1],\n                    params = _throttlers$splice[2];\n\n                if (isImmediate === false) {\n                    _this2._run(context, func, params);\n                }\n            }, wait);\n            if (isImmediate) {\n                this._join(target, method, args);\n            }\n            this._throttlers.push(target, method, args, timer);\n            return timer;\n        };\n\n        Backburner.prototype.debounce = function debounce(targetOrThisArgOrMethod) {\n            var _this3 = this;\n\n            var target = void 0;\n            var method = void 0;\n            var immediate = void 0;\n            var isImmediate = void 0;\n            var wait = void 0;\n\n            for (var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n                args[_key7 - 1] = arguments[_key7];\n            }\n\n            if (args.length === 1) {\n                method = targetOrThisArgOrMethod;\n                wait = args.pop();\n                target = null;\n                isImmediate = false;\n            } else {\n                target = targetOrThisArgOrMethod;\n                method = args.shift();\n                immediate = args.pop();\n                var type = typeof method;\n                if (type === 'string') {\n                    method = target[method];\n                } else if (type !== 'function') {\n                    args.unshift(method);\n                    method = target;\n                    target = null;\n                }\n                if (isCoercableNumber(immediate)) {\n                    wait = immediate;\n                    isImmediate = false;\n                } else {\n                    wait = args.pop();\n                    isImmediate = immediate === true;\n                }\n            }\n            wait = parseInt(wait, 10);\n            // Remove debouncee\n            var index = findItem(target, method, this._debouncees);\n            if (index > -1) {\n                var timerId = this._debouncees[index + 3];\n                this._platform.clearTimeout(timerId);\n                this._debouncees.splice(index, 4);\n            }\n            var timer = this._platform.setTimeout(function () {\n                var i = findTimer(timer, _this3._debouncees);\n\n                var _debouncees$splice = _this3._debouncees.splice(i, 4),\n                    context = _debouncees$splice[0],\n                    func = _debouncees$splice[1],\n                    params = _debouncees$splice[2];\n\n                if (isImmediate === false) {\n                    _this3._run(context, func, params);\n                }\n            }, wait);\n            if (isImmediate && index === -1) {\n                this._join(target, method, args);\n            }\n            this._debouncees.push(target, method, args, timer);\n            return timer;\n        };\n\n        Backburner.prototype.cancelTimers = function cancelTimers() {\n            for (var i = 3; i < this._throttlers.length; i += 4) {\n                this._platform.clearTimeout(this._throttlers[i]);\n            }\n            this._throttlers = [];\n            for (var t = 3; t < this._debouncees.length; t += 4) {\n                this._platform.clearTimeout(this._debouncees[t]);\n            }\n            this._debouncees = [];\n            this._clearTimerTimeout();\n            this._timers = [];\n            this._cancelAutorun();\n        };\n\n        Backburner.prototype.hasTimers = function hasTimers() {\n            return this._timers.length > 0 || this._debouncees.length > 0 || this._throttlers.length > 0 || this._autorun !== null;\n        };\n\n        Backburner.prototype.cancel = function cancel(timer) {\n            if (!timer) {\n                return false;\n            }\n            var timerType = typeof timer;\n            if (timerType === 'number') {\n                return this._cancelItem(timer, this._throttlers) || this._cancelItem(timer, this._debouncees);\n            } else if (timerType === 'string') {\n                return this._cancelLaterTimer(timer);\n            } else if (timerType === 'object' && timer.queue && timer.method) {\n                return timer.queue.cancel(timer);\n            }\n            return false;\n        };\n\n        Backburner.prototype.ensureInstance = function ensureInstance() {\n            this._ensureInstance();\n        };\n\n        Backburner.prototype._join = function _join(target, method, args) {\n            if (this.currentInstance === null) {\n                return this._run(target, method, args);\n            }\n            if (target === undefined && args === undefined) {\n                return method();\n            } else {\n                return method.apply(target, args);\n            }\n        };\n\n        Backburner.prototype._run = function _run(target, method, args) {\n            var onError = getOnError(this.options);\n            this.begin();\n            if (onError) {\n                try {\n                    return method.apply(target, args);\n                } catch (error) {\n                    onError(error);\n                } finally {\n                    this.end();\n                }\n            } else {\n                try {\n                    return method.apply(target, args);\n                } finally {\n                    this.end();\n                }\n            }\n        };\n\n        Backburner.prototype._cancelAutorun = function _cancelAutorun() {\n            if (this._autorun !== null) {\n                this._platform.clearNext(this._autorun);\n                this._autorun = null;\n            }\n        };\n\n        Backburner.prototype._setTimeout = function _setTimeout(target, method, args, wait) {\n            var stack = this.DEBUG ? new Error() : undefined;\n            var executeAt = this._platform.now() + wait;\n            var id = UUID++ + '';\n            if (this._timers.length === 0) {\n                this._timers.push(executeAt, id, target, method, args, stack);\n                this._installTimerTimeout();\n                return id;\n            }\n            // find position to insert\n            var i = binarySearch(executeAt, this._timers);\n            this._timers.splice(i, 0, executeAt, id, target, method, args, stack);\n            // we should be the new earliest timer if i == 0\n            if (i === 0) {\n                this._reinstallTimerTimeout();\n            }\n            return id;\n        };\n\n        Backburner.prototype._cancelLaterTimer = function _cancelLaterTimer(timer) {\n            for (var i = 1; i < this._timers.length; i += 6) {\n                if (this._timers[i] === timer) {\n                    i = i - 1;\n                    this._timers.splice(i, 6);\n                    if (i === 0) {\n                        this._reinstallTimerTimeout();\n                    }\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        Backburner.prototype._cancelItem = function _cancelItem(timer, array) {\n            var index = findTimer(timer, array);\n            if (index > -1) {\n                this._platform.clearTimeout(timer);\n                array.splice(index, 4);\n                return true;\n            }\n            return false;\n        };\n\n        Backburner.prototype._trigger = function _trigger(eventName, arg1, arg2) {\n            var callbacks = this._eventCallbacks[eventName];\n            if (callbacks !== undefined) {\n                for (var i = 0; i < callbacks.length; i++) {\n                    callbacks[i](arg1, arg2);\n                }\n            }\n        };\n\n        Backburner.prototype._runExpiredTimers = function _runExpiredTimers() {\n            this._timerTimeoutId = null;\n            if (this._timers.length === 0) {\n                return;\n            }\n            this.begin();\n            this._scheduleExpiredTimers();\n            this.end();\n        };\n\n        Backburner.prototype._scheduleExpiredTimers = function _scheduleExpiredTimers() {\n            var timers = this._timers;\n            var i = 0;\n            var l = timers.length;\n            var defaultQueue = this.options.defaultQueue;\n            var n = this._platform.now();\n            for (; i < l; i += 6) {\n                var executeAt = timers[i];\n                if (executeAt <= n) {\n                    var target = timers[i + 2];\n                    var method = timers[i + 3];\n                    var _args2 = timers[i + 4];\n                    var stack = timers[i + 5];\n                    this.currentInstance.schedule(defaultQueue, target, method, _args2, false, stack);\n                } else {\n                    break;\n                }\n            }\n            timers.splice(0, i);\n            this._installTimerTimeout();\n        };\n\n        Backburner.prototype._reinstallTimerTimeout = function _reinstallTimerTimeout() {\n            this._clearTimerTimeout();\n            this._installTimerTimeout();\n        };\n\n        Backburner.prototype._clearTimerTimeout = function _clearTimerTimeout() {\n            if (this._timerTimeoutId === null) {\n                return;\n            }\n            this._platform.clearTimeout(this._timerTimeoutId);\n            this._timerTimeoutId = null;\n        };\n\n        Backburner.prototype._installTimerTimeout = function _installTimerTimeout() {\n            if (this._timers.length === 0) {\n                return;\n            }\n            var minExpiresAt = this._timers[0];\n            var n = this._platform.now();\n            var wait = Math.max(0, minExpiresAt - n);\n            this._timerTimeoutId = this._platform.setTimeout(this._boundRunExpiredTimers, wait);\n        };\n\n        Backburner.prototype._ensureInstance = function _ensureInstance() {\n            var currentInstance = this.currentInstance;\n            if (currentInstance === null) {\n                currentInstance = this.begin();\n                var next = this._platform.next;\n                this._autorun = next(this._boundAutorunEnd);\n            }\n            return currentInstance;\n        };\n\n        return Backburner;\n    }();\n\n    Backburner.Queue = Queue;\n\n    exports.default = Backburner;\n});","enifed('container', ['exports', 'ember-babel', 'ember-utils', 'ember-debug', 'ember/features', 'ember-environment'], function (exports, _emberBabel, _emberUtils, _emberDebug, _features, _emberEnvironment) {\n  'use strict';\n\n  exports.Container = exports.privatize = exports.Registry = undefined;\n\n  var Container = function () {\n    function Container(registry) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _emberBabel.classCallCheck)(this, Container);\n\n      this.registry = registry;\n      this.owner = options.owner || null;\n      this.cache = (0, _emberUtils.dictionary)(options.cache || null);\n      this.factoryManagerCache = (0, _emberUtils.dictionary)(options.factoryManagerCache || null);\n      this.isDestroyed = false;\n\n      if (true) {\n        this.validationCache = (0, _emberUtils.dictionary)(options.validationCache || null);\n      }\n    }\n\n    /**\n     @private\n     @property registry\n     @type Registry\n     @since 1.11.0\n     */\n\n    /**\n     @private\n     @property cache\n     @type InheritingDict\n     */\n\n    /**\n     @private\n     @property validationCache\n     @type InheritingDict\n     */\n\n    /**\n     Given a fullName return a corresponding instance.\n      The default behavior is for lookup to return a singleton instance.\n     The singleton is scoped to the container, allowing multiple containers\n     to all have their own locally scoped singletons.\n      ```javascript\n     let registry = new Registry();\n     let container = registry.container();\n      registry.register('api:twitter', Twitter);\n      let twitter = container.lookup('api:twitter');\n      twitter instanceof Twitter; // => true\n      // by default the container will return singletons\n     let twitter2 = container.lookup('api:twitter');\n     twitter2 instanceof Twitter; // => true\n      twitter === twitter2; //=> true\n     ```\n      If singletons are not wanted, an optional flag can be provided at lookup.\n      ```javascript\n     let registry = new Registry();\n     let container = registry.container();\n      registry.register('api:twitter', Twitter);\n      let twitter = container.lookup('api:twitter', { singleton: false });\n     let twitter2 = container.lookup('api:twitter', { singleton: false });\n      twitter === twitter2; //=> false\n     ```\n      @private\n     @method lookup\n     @param {String} fullName\n     @param {Object} [options]\n     @param {String} [options.source] The fullname of the request source (used for local lookup)\n     @return {any}\n     */\n\n\n    Container.prototype.lookup = function lookup(fullName, options) {\n      (true && !(this.registry.isValidFullName(fullName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.registry.isValidFullName(fullName)));\n\n      return _lookup(this, this.registry.normalize(fullName), options);\n    };\n\n    Container.prototype.destroy = function destroy() {\n      destroyDestroyables(this);\n      this.isDestroyed = true;\n    };\n\n    Container.prototype.reset = function reset(fullName) {\n      if (fullName === undefined) {\n        resetCache(this);\n      } else {\n        resetMember(this, this.registry.normalize(fullName));\n      }\n    };\n\n    Container.prototype.ownerInjection = function ownerInjection() {\n      var _ref;\n\n      return _ref = {}, _ref[_emberUtils.OWNER] = this.owner, _ref;\n    };\n\n    Container.prototype._resolverCacheKey = function _resolverCacheKey(name, options) {\n      return this.registry.resolverCacheKey(name, options);\n    };\n\n    Container.prototype.factoryFor = function factoryFor(fullName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var normalizedName = this.registry.normalize(fullName);\n\n      (true && !(this.registry.isValidFullName(normalizedName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.registry.isValidFullName(normalizedName)));\n\n\n      if (options.source) {\n        var expandedFullName = this.registry.expandLocalLookup(fullName, options);\n        // if expandLocalLookup returns falsey, we do not support local lookup\n        if (!_features.EMBER_MODULE_UNIFICATION) {\n          if (!expandedFullName) {\n            return;\n          }\n\n          normalizedName = expandedFullName;\n        } else if (expandedFullName) {\n          // with ember-module-unification, if expandLocalLookup returns something,\n          // pass it to the resolve without the source\n          normalizedName = expandedFullName;\n          options = {};\n        }\n      }\n\n      var cacheKey = this._resolverCacheKey(normalizedName, options);\n      var cached = this.factoryManagerCache[cacheKey];\n\n      if (cached !== undefined) {\n        return cached;\n      }\n\n      var factory = _features.EMBER_MODULE_UNIFICATION ? this.registry.resolve(normalizedName, options) : this.registry.resolve(normalizedName);\n\n      if (factory === undefined) {\n        return;\n      }\n\n      if (true && factory && typeof factory._onLookup === 'function') {\n        factory._onLookup(fullName);\n      }\n\n      var manager = new FactoryManager(this, factory, fullName, normalizedName);\n\n      if (true) {\n        manager = wrapManagerInDeprecationProxy(manager);\n      }\n\n      this.factoryManagerCache[cacheKey] = manager;\n      return manager;\n    };\n\n    return Container;\n  }();\n\n  /*\n   * Wrap a factory manager in a proxy which will not permit properties to be\n   * set on the manager.\n   */\n  function wrapManagerInDeprecationProxy(manager) {\n    if (_emberUtils.HAS_NATIVE_PROXY) {\n      var validator = {\n        set: function (obj, prop) {\n          throw new Error('You attempted to set \"' + prop + '\" on a factory manager created by container#factoryFor. A factory manager is a read-only construct.');\n        }\n      };\n\n      // Note:\n      // We have to proxy access to the manager here so that private property\n      // access doesn't cause the above errors to occur.\n      var m = manager;\n      var proxiedManager = {\n        class: m.class,\n        create: function (props) {\n          return m.create(props);\n        }\n      };\n\n      return new Proxy(proxiedManager, validator);\n    }\n\n    return manager;\n  }\n\n  function isSingleton(container, fullName) {\n    return container.registry.getOption(fullName, 'singleton') !== false;\n  }\n\n  function isInstantiatable(container, fullName) {\n    return container.registry.getOption(fullName, 'instantiate') !== false;\n  }\n\n  function _lookup(container, fullName) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (options.source) {\n      var expandedFullName = container.registry.expandLocalLookup(fullName, options);\n\n      if (!_features.EMBER_MODULE_UNIFICATION) {\n        // if expandLocalLookup returns falsey, we do not support local lookup\n        if (!expandedFullName) {\n          return;\n        }\n\n        fullName = expandedFullName;\n      } else if (expandedFullName) {\n        // with ember-module-unification, if expandLocalLookup returns something,\n        // pass it to the resolve without the source\n        fullName = expandedFullName;\n        options = {};\n      }\n    }\n\n    if (options.singleton !== false) {\n      var cacheKey = container._resolverCacheKey(fullName, options);\n      var cached = container.cache[cacheKey];\n      if (cached !== undefined) {\n        return cached;\n      }\n    }\n\n    return instantiateFactory(container, fullName, options);\n  }\n\n  function isSingletonClass(container, fullName, _ref2) {\n    var instantiate = _ref2.instantiate,\n        singleton = _ref2.singleton;\n\n    return singleton !== false && !instantiate && isSingleton(container, fullName) && !isInstantiatable(container, fullName);\n  }\n\n  function isSingletonInstance(container, fullName, _ref3) {\n    var instantiate = _ref3.instantiate,\n        singleton = _ref3.singleton;\n\n    return singleton !== false && instantiate !== false && isSingleton(container, fullName) && isInstantiatable(container, fullName);\n  }\n\n  function isFactoryClass(container, fullname, _ref4) {\n    var instantiate = _ref4.instantiate,\n        singleton = _ref4.singleton;\n\n    return instantiate === false && (singleton === false || !isSingleton(container, fullname)) && !isInstantiatable(container, fullname);\n  }\n\n  function isFactoryInstance(container, fullName, _ref5) {\n    var instantiate = _ref5.instantiate,\n        singleton = _ref5.singleton;\n\n    return instantiate !== false && (singleton !== false || isSingleton(container, fullName)) && isInstantiatable(container, fullName);\n  }\n\n  function instantiateFactory(container, fullName, options) {\n    var factoryManager = _features.EMBER_MODULE_UNIFICATION && options && options.source ? container.factoryFor(fullName, options) : container.factoryFor(fullName);\n\n    if (factoryManager === undefined) {\n      return;\n    }\n\n    // SomeClass { singleton: true, instantiate: true } | { singleton: true } | { instantiate: true } | {}\n    // By default majority of objects fall into this case\n    if (isSingletonInstance(container, fullName, options)) {\n      var cacheKey = container._resolverCacheKey(fullName, options);\n      return container.cache[cacheKey] = factoryManager.create();\n    }\n\n    // SomeClass { singleton: false, instantiate: true }\n    if (isFactoryInstance(container, fullName, options)) {\n      return factoryManager.create();\n    }\n\n    // SomeClass { singleton: true, instantiate: false } | { instantiate: false } | { singleton: false, instantiation: false }\n    if (isSingletonClass(container, fullName, options) || isFactoryClass(container, fullName, options)) {\n      return factoryManager.class;\n    }\n\n    throw new Error('Could not create factory');\n  }\n\n  function buildInjections(container, injections) {\n    var hash = {};\n    var isDynamic = false;\n\n    if (injections.length > 0) {\n      if (true) {\n        container.registry.validateInjections(injections);\n      }\n\n      var injection = void 0;\n      for (var i = 0; i < injections.length; i++) {\n        injection = injections[i];\n        hash[injection.property] = _lookup(container, injection.fullName);\n        if (!isDynamic) {\n          isDynamic = !isSingleton(container, injection.fullName);\n        }\n      }\n    }\n\n    return { injections: hash, isDynamic: isDynamic };\n  }\n\n  function injectionsFor(container, fullName) {\n    var registry = container.registry;\n\n    var _fullName$split = fullName.split(':'),\n        type = _fullName$split[0];\n\n    var injections = registry.getTypeInjections(type).concat(registry.getInjections(fullName));\n    return buildInjections(container, injections);\n  }\n\n  function destroyDestroyables(container) {\n    var cache = container.cache;\n    var keys = Object.keys(cache);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = cache[key];\n\n      if (value.destroy) {\n        value.destroy();\n      }\n    }\n  }\n\n  function resetCache(container) {\n    destroyDestroyables(container);\n    container.cache = (0, _emberUtils.dictionary)(null);\n    container.factoryManagerCache = (0, _emberUtils.dictionary)(null);\n  }\n\n  function resetMember(container, fullName) {\n    var member = container.cache[fullName];\n\n    delete container.factoryManagerCache[fullName];\n\n    if (member) {\n      delete container.cache[fullName];\n\n      if (member.destroy) {\n        member.destroy();\n      }\n    }\n  }\n\n  var FactoryManager = function () {\n    function FactoryManager(container, factory, fullName, normalizedName) {\n      (0, _emberBabel.classCallCheck)(this, FactoryManager);\n\n      this.container = container;\n      this.owner = container.owner;\n      this.class = factory;\n      this.fullName = fullName;\n      this.normalizedName = normalizedName;\n      this.madeToString = undefined;\n      this.injections = undefined;\n    }\n\n    FactoryManager.prototype.toString = function toString() {\n      if (this.madeToString === undefined) {\n        this.madeToString = this.container.registry.makeToString(this.class, this.fullName);\n      }\n\n      return this.madeToString;\n    };\n\n    FactoryManager.prototype.create = function create() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var injectionsCache = this.injections;\n      if (injectionsCache === undefined) {\n        var _injectionsFor = injectionsFor(this.container, this.normalizedName),\n            injections = _injectionsFor.injections,\n            isDynamic = _injectionsFor.isDynamic;\n\n        injectionsCache = injections;\n        if (!isDynamic) {\n          this.injections = injections;\n        }\n      }\n\n      var props = (0, _emberUtils.assign)({}, injectionsCache, options);\n\n      if (true) {\n        var lazyInjections = void 0;\n        var validationCache = this.container.validationCache;\n        // Ensure that all lazy injections are valid at instantiation time\n        if (!validationCache[this.fullName] && this.class && typeof this.class._lazyInjections === 'function') {\n          lazyInjections = this.class._lazyInjections();\n          lazyInjections = this.container.registry.normalizeInjectionsHash(lazyInjections);\n\n          this.container.registry.validateInjections(lazyInjections);\n        }\n\n        validationCache[this.fullName] = true;\n      }\n\n      if (!this.class.create) {\n        throw new Error('Failed to create an instance of \\'' + this.normalizedName + '\\'. Most likely an improperly defined class or' + ' an invalid module export.');\n      }\n\n      // required to allow access to things like\n      // the customized toString, _debugContainerKey,\n      // owner, etc. without a double extend and without\n      // modifying the objects properties\n      if (typeof this.class._initFactory === 'function') {\n        this.class._initFactory(this);\n      } else {\n        // in the non-EmberObject case we need to still setOwner\n        // this is required for supporting glimmer environment and\n        // template instantiation which rely heavily on\n        // `options[OWNER]` being passed into `create`\n        // TODO: clean this up, and remove in future versions\n        (0, _emberUtils.setOwner)(props, this.owner);\n      }\n\n      return this.class.create(props);\n    };\n\n    return FactoryManager;\n  }();\n\n  var VALID_FULL_NAME_REGEXP = /^[^:]+:[^:]+$/;\n  var missingResolverFunctionsDeprecation = 'Passing a `resolver` function into a Registry is deprecated. Please pass in a Resolver object with a `resolve` method.';\n\n  /**\n   A registry used to store factory and option information keyed\n   by type.\n  \n   A `Registry` stores the factory and option information needed by a\n   `Container` to instantiate and cache objects.\n  \n   The API for `Registry` is still in flux and should not be considered stable.\n  \n   @private\n   @class Registry\n   @since 1.11.0\n  */\n\n  var Registry = function () {\n    function Registry() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _emberBabel.classCallCheck)(this, Registry);\n\n      this.fallback = options.fallback || null;\n      this.resolver = options.resolver || null;\n\n      if (_emberEnvironment.ENV._ENABLE_RESOLVER_FUNCTION_SUPPORT !== true) {\n        (true && !(typeof this.resolver !== 'function') && (0, _emberDebug.assert)(missingResolverFunctionsDeprecation, typeof this.resolver !== 'function'));\n      }\n\n      if (typeof this.resolver === 'function' && _emberEnvironment.ENV._ENABLE_RESOLVER_FUNCTION_SUPPORT === true) {\n        deprecateResolverFunction(this);\n      }\n\n      this.registrations = (0, _emberUtils.dictionary)(options.registrations || null);\n\n      this._typeInjections = (0, _emberUtils.dictionary)(null);\n      this._injections = (0, _emberUtils.dictionary)(null);\n\n      this._localLookupCache = Object.create(null);\n      this._normalizeCache = (0, _emberUtils.dictionary)(null);\n      this._resolveCache = (0, _emberUtils.dictionary)(null);\n      this._failSet = new Set();\n\n      this._options = (0, _emberUtils.dictionary)(null);\n      this._typeOptions = (0, _emberUtils.dictionary)(null);\n    }\n\n    /**\n     A backup registry for resolving registrations when no matches can be found.\n      @private\n     @property fallback\n     @type Registry\n     */\n\n    /**\n     An object that has a `resolve` method that resolves a name.\n      @private\n     @property resolver\n     @type Resolver\n     */\n\n    /**\n     @private\n     @property registrations\n     @type InheritingDict\n     */\n\n    /**\n     @private\n      @property _typeInjections\n     @type InheritingDict\n     */\n\n    /**\n     @private\n      @property _injections\n     @type InheritingDict\n     */\n\n    /**\n     @private\n      @property _normalizeCache\n     @type InheritingDict\n     */\n\n    /**\n     @private\n      @property _resolveCache\n     @type InheritingDict\n     */\n\n    /**\n     @private\n      @property _options\n     @type InheritingDict\n     */\n\n    /**\n     @private\n      @property _typeOptions\n     @type InheritingDict\n     */\n\n    /**\n     Creates a container based on this registry.\n      @private\n     @method container\n     @param {Object} options\n     @return {Container} created container\n     */\n\n\n    Registry.prototype.container = function container(options) {\n      return new Container(this, options);\n    };\n\n    Registry.prototype.register = function register(fullName, factory) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      (true && !(this.isValidFullName(fullName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));\n      (true && !(factory !== undefined) && (0, _emberDebug.assert)('Attempting to register an unknown factory: \\'' + fullName + '\\'', factory !== undefined));\n\n\n      var normalizedName = this.normalize(fullName);\n      (true && !(!this._resolveCache[normalizedName]) && (0, _emberDebug.assert)('Cannot re-register: \\'' + fullName + '\\', as it has already been resolved.', !this._resolveCache[normalizedName]));\n\n\n      this._failSet.delete(normalizedName);\n      this.registrations[normalizedName] = factory;\n      this._options[normalizedName] = options;\n    };\n\n    Registry.prototype.unregister = function unregister(fullName) {\n      (true && !(this.isValidFullName(fullName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));\n\n\n      var normalizedName = this.normalize(fullName);\n\n      this._localLookupCache = Object.create(null);\n\n      delete this.registrations[normalizedName];\n      delete this._resolveCache[normalizedName];\n      delete this._options[normalizedName];\n      this._failSet.delete(normalizedName);\n    };\n\n    Registry.prototype.resolve = function resolve(fullName, options) {\n      (true && !(this.isValidFullName(fullName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));\n\n      var factory = _resolve(this, this.normalize(fullName), options);\n      if (factory === undefined && this.fallback !== null) {\n        var _fallback;\n\n        factory = (_fallback = this.fallback).resolve.apply(_fallback, arguments);\n      }\n      return factory;\n    };\n\n    Registry.prototype.describe = function describe(fullName) {\n      if (this.resolver !== null && this.resolver.lookupDescription) {\n        return this.resolver.lookupDescription(fullName);\n      } else if (this.fallback !== null) {\n        return this.fallback.describe(fullName);\n      } else {\n        return fullName;\n      }\n    };\n\n    Registry.prototype.normalizeFullName = function normalizeFullName(fullName) {\n      if (this.resolver !== null && this.resolver.normalize) {\n        return this.resolver.normalize(fullName);\n      } else if (this.fallback !== null) {\n        return this.fallback.normalizeFullName(fullName);\n      } else {\n        return fullName;\n      }\n    };\n\n    Registry.prototype.normalize = function normalize(fullName) {\n      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this.normalizeFullName(fullName));\n    };\n\n    Registry.prototype.makeToString = function makeToString(factory, fullName) {\n      if (this.resolver !== null && this.resolver.makeToString) {\n        return this.resolver.makeToString(factory, fullName);\n      } else if (this.fallback !== null) {\n        return this.fallback.makeToString(factory, fullName);\n      } else {\n        return factory.toString();\n      }\n    };\n\n    Registry.prototype.has = function has(fullName, options) {\n      if (!this.isValidFullName(fullName)) {\n        return false;\n      }\n\n      var source = options && options.source && this.normalize(options.source);\n\n      return _has(this, this.normalize(fullName), source);\n    };\n\n    Registry.prototype.optionsForType = function optionsForType(type, options) {\n      this._typeOptions[type] = options;\n    };\n\n    Registry.prototype.getOptionsForType = function getOptionsForType(type) {\n      var optionsForType = this._typeOptions[type];\n      if (optionsForType === undefined && this.fallback !== null) {\n        optionsForType = this.fallback.getOptionsForType(type);\n      }\n      return optionsForType;\n    };\n\n    Registry.prototype.options = function options(fullName) {\n      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var normalizedName = this.normalize(fullName);\n      this._options[normalizedName] = _options;\n    };\n\n    Registry.prototype.getOptions = function getOptions(fullName) {\n      var normalizedName = this.normalize(fullName);\n      var options = this._options[normalizedName];\n\n      if (options === undefined && this.fallback !== null) {\n        options = this.fallback.getOptions(fullName);\n      }\n      return options;\n    };\n\n    Registry.prototype.getOption = function getOption(fullName, optionName) {\n      var options = this._options[fullName];\n\n      if (options && options[optionName] !== undefined) {\n        return options[optionName];\n      }\n\n      var type = fullName.split(':')[0];\n      options = this._typeOptions[type];\n\n      if (options && options[optionName] !== undefined) {\n        return options[optionName];\n      } else if (this.fallback !== null) {\n        return this.fallback.getOption(fullName, optionName);\n      }\n    };\n\n    Registry.prototype.typeInjection = function typeInjection(type, property, fullName) {\n      (true && !(this.isValidFullName(fullName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));\n\n\n      var fullNameType = fullName.split(':')[0];\n      (true && !(fullNameType !== type) && (0, _emberDebug.assert)('Cannot inject a \\'' + fullName + '\\' on other ' + type + '(s).', fullNameType !== type));\n\n\n      var injections = this._typeInjections[type] || (this._typeInjections[type] = []);\n\n      injections.push({ property: property, fullName: fullName });\n    };\n\n    Registry.prototype.injection = function injection(fullName, property, injectionName) {\n      (true && !(this.isValidFullName(injectionName)) && (0, _emberDebug.assert)('Invalid injectionName, expected: \\'type:name\\' got: ' + injectionName, this.isValidFullName(injectionName)));\n\n\n      var normalizedInjectionName = this.normalize(injectionName);\n\n      if (fullName.indexOf(':') === -1) {\n        return this.typeInjection(fullName, property, normalizedInjectionName);\n      }\n\n      (true && !(this.isValidFullName(fullName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));\n\n      var normalizedName = this.normalize(fullName);\n\n      var injections = this._injections[normalizedName] || (this._injections[normalizedName] = []);\n\n      injections.push({ property: property, fullName: normalizedInjectionName });\n    };\n\n    Registry.prototype.knownForType = function knownForType(type) {\n      var localKnown = (0, _emberUtils.dictionary)(null);\n      var registeredNames = Object.keys(this.registrations);\n      for (var index = 0; index < registeredNames.length; index++) {\n        var fullName = registeredNames[index];\n        var itemType = fullName.split(':')[0];\n\n        if (itemType === type) {\n          localKnown[fullName] = true;\n        }\n      }\n\n      var fallbackKnown = void 0,\n          resolverKnown = void 0;\n      if (this.fallback !== null) {\n        fallbackKnown = this.fallback.knownForType(type);\n      }\n\n      if (this.resolver !== null && this.resolver.knownForType) {\n        resolverKnown = this.resolver.knownForType(type);\n      }\n\n      return (0, _emberUtils.assign)({}, fallbackKnown, localKnown, resolverKnown);\n    };\n\n    Registry.prototype.isValidFullName = function isValidFullName(fullName) {\n      return VALID_FULL_NAME_REGEXP.test(fullName);\n    };\n\n    Registry.prototype.getInjections = function getInjections(fullName) {\n      var injections = this._injections[fullName] || [];\n      if (this.fallback !== null) {\n        injections = injections.concat(this.fallback.getInjections(fullName));\n      }\n      return injections;\n    };\n\n    Registry.prototype.getTypeInjections = function getTypeInjections(type) {\n      var injections = this._typeInjections[type] || [];\n      if (this.fallback !== null) {\n        injections = injections.concat(this.fallback.getTypeInjections(type));\n      }\n      return injections;\n    };\n\n    Registry.prototype.resolverCacheKey = function resolverCacheKey(name, options) {\n      if (!_features.EMBER_MODULE_UNIFICATION) {\n        return name;\n      }\n\n      return options && options.source ? options.source + ':' + name : name;\n    };\n\n    Registry.prototype.expandLocalLookup = function expandLocalLookup(fullName, options) {\n      if (this.resolver !== null && this.resolver.expandLocalLookup) {\n        (true && !(this.isValidFullName(fullName)) && (0, _emberDebug.assert)('fullName must be a proper full name', this.isValidFullName(fullName)));\n        (true && !(options && options.source) && (0, _emberDebug.assert)('options.source must be provided to expandLocalLookup', options && options.source));\n        (true && !(this.isValidFullName(options.source)) && (0, _emberDebug.assert)('options.source must be a proper full name', this.isValidFullName(options.source)));\n\n\n        var normalizedFullName = this.normalize(fullName);\n        var normalizedSource = this.normalize(options.source);\n\n        return _expandLocalLookup(this, normalizedFullName, normalizedSource);\n      } else if (this.fallback !== null) {\n        return this.fallback.expandLocalLookup(fullName, options);\n      } else {\n        return null;\n      }\n    };\n\n    return Registry;\n  }();\n\n  function deprecateResolverFunction(registry) {\n    (true && !(false) && (0, _emberDebug.deprecate)(missingResolverFunctionsDeprecation, false, { id: 'ember-application.registry-resolver-as-function', until: '3.0.0', url: 'https://emberjs.com/deprecations/v2.x#toc_registry-resolver-as-function' }));\n\n    registry.resolver = { resolve: registry.resolver };\n  }\n\n  if (true) {\n    Registry.prototype.normalizeInjectionsHash = function (hash) {\n      var injections = [];\n\n      for (var key in hash) {\n        if (hash.hasOwnProperty(key)) {\n          (true && !(this.isValidFullName(hash[key])) && (0, _emberDebug.assert)('Expected a proper full name, given \\'' + hash[key] + '\\'', this.isValidFullName(hash[key])));\n\n\n          injections.push({\n            property: key,\n            fullName: hash[key]\n          });\n        }\n      }\n\n      return injections;\n    };\n\n    Registry.prototype.validateInjections = function (injections) {\n      if (!injections) {\n        return;\n      }\n\n      var fullName = void 0;\n\n      for (var i = 0; i < injections.length; i++) {\n        fullName = injections[i].fullName;\n\n        (true && !(this.has(fullName)) && (0, _emberDebug.assert)('Attempting to inject an unknown injection: \\'' + fullName + '\\'', this.has(fullName)));\n      }\n    };\n  }\n\n  function _expandLocalLookup(registry, normalizedName, normalizedSource) {\n    var cache = registry._localLookupCache;\n    var normalizedNameCache = cache[normalizedName];\n\n    if (!normalizedNameCache) {\n      normalizedNameCache = cache[normalizedName] = Object.create(null);\n    }\n\n    var cached = normalizedNameCache[normalizedSource];\n\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    var expanded = registry.resolver.expandLocalLookup(normalizedName, normalizedSource);\n\n    return normalizedNameCache[normalizedSource] = expanded;\n  }\n\n  function _resolve(registry, normalizedName, options) {\n    if (options && options.source) {\n      // when `source` is provided expand normalizedName\n      // and source into the full normalizedName\n      var expandedNormalizedName = registry.expandLocalLookup(normalizedName, options);\n\n      // if expandLocalLookup returns falsey, we do not support local lookup\n      if (!_features.EMBER_MODULE_UNIFICATION) {\n        if (!expandedNormalizedName) {\n          return;\n        }\n\n        normalizedName = expandedNormalizedName;\n      } else if (expandedNormalizedName) {\n        // with ember-module-unification, if expandLocalLookup returns something,\n        // pass it to the resolve without the source\n        normalizedName = expandedNormalizedName;\n        options = {};\n      }\n    }\n\n    var cacheKey = registry.resolverCacheKey(normalizedName, options);\n    var cached = registry._resolveCache[cacheKey];\n    if (cached !== undefined) {\n      return cached;\n    }\n    if (registry._failSet.has(cacheKey)) {\n      return;\n    }\n\n    var resolved = void 0;\n\n    if (registry.resolver) {\n      resolved = registry.resolver.resolve(normalizedName, options && options.source);\n    }\n\n    if (resolved === undefined) {\n      resolved = registry.registrations[normalizedName];\n    }\n\n    if (resolved === undefined) {\n      registry._failSet.add(cacheKey);\n    } else {\n      registry._resolveCache[cacheKey] = resolved;\n    }\n\n    return resolved;\n  }\n\n  function _has(registry, fullName, source) {\n    return registry.resolve(fullName, { source: source }) !== undefined;\n  }\n\n  var privateNames = (0, _emberUtils.dictionary)(null);\n  var privateSuffix = ('' + Math.random() + Date.now()).replace('.', '');\n\n  function privatize(_ref6) {\n    var fullName = _ref6[0];\n\n    var name = privateNames[fullName];\n    if (name) {\n      return name;\n    }\n\n    var _fullName$split2 = fullName.split(':'),\n        type = _fullName$split2[0],\n        rawName = _fullName$split2[1];\n\n    return privateNames[fullName] = (0, _emberUtils.intern)(type + ':' + rawName + '-' + privateSuffix);\n  }\n\n  /*\n  Public API for the container is still in flux.\n  The public API, specified on the application namespace should be considered the stable API.\n  // @module container\n    @private\n  */\n\n  exports.Registry = Registry;\n  exports.privatize = privatize;\n  exports.Container = Container;\n});","enifed(\"dag-map\", [\"exports\"], function (exports) {\n    \"use strict\";\n\n    /**\n     * A topologically ordered map of key/value pairs with a simple API for adding constraints.\n     *\n     * Edges can forward reference keys that have not been added yet (the forward reference will\n     * map the key to undefined).\n     */\n    var DAG = function () {\n        function DAG() {\n            this._vertices = new Vertices();\n        }\n        /**\n         * Adds a key/value pair with dependencies on other key/value pairs.\n         *\n         * @public\n         * @param key    The key of the vertex to be added.\n         * @param value  The value of that vertex.\n         * @param before A key or array of keys of the vertices that must\n         *               be visited before this vertex.\n         * @param after  An string or array of strings with the keys of the\n         *               vertices that must be after this vertex is visited.\n         */\n        DAG.prototype.add = function (key, value, before, after) {\n            if (!key) throw new Error('argument `key` is required');\n            var vertices = this._vertices;\n            var v = vertices.add(key);\n            v.val = value;\n            if (before) {\n                if (typeof before === \"string\") {\n                    vertices.addEdge(v, vertices.add(before));\n                } else {\n                    for (var i = 0; i < before.length; i++) {\n                        vertices.addEdge(v, vertices.add(before[i]));\n                    }\n                }\n            }\n            if (after) {\n                if (typeof after === \"string\") {\n                    vertices.addEdge(vertices.add(after), v);\n                } else {\n                    for (var i = 0; i < after.length; i++) {\n                        vertices.addEdge(vertices.add(after[i]), v);\n                    }\n                }\n            }\n        };\n        /**\n         * @deprecated please use add.\n         */\n        DAG.prototype.addEdges = function (key, value, before, after) {\n            this.add(key, value, before, after);\n        };\n        /**\n         * Visits key/value pairs in topological order.\n         *\n         * @public\n         * @param callback The function to be invoked with each key/value.\n         */\n        DAG.prototype.each = function (callback) {\n            this._vertices.walk(callback);\n        };\n        /**\n         * @deprecated please use each.\n         */\n        DAG.prototype.topsort = function (callback) {\n            this.each(callback);\n        };\n        return DAG;\n    }();\n    exports.default = DAG;\n\n    /** @private */\n    var Vertices = function () {\n        function Vertices() {\n            this.length = 0;\n            this.stack = new IntStack();\n            this.path = new IntStack();\n            this.result = new IntStack();\n        }\n        Vertices.prototype.add = function (key) {\n            if (!key) throw new Error(\"missing key\");\n            var l = this.length | 0;\n            var vertex;\n            for (var i = 0; i < l; i++) {\n                vertex = this[i];\n                if (vertex.key === key) return vertex;\n            }\n            this.length = l + 1;\n            return this[l] = {\n                idx: l,\n                key: key,\n                val: undefined,\n                out: false,\n                flag: false,\n                length: 0\n            };\n        };\n        Vertices.prototype.addEdge = function (v, w) {\n            this.check(v, w.key);\n            var l = w.length | 0;\n            for (var i = 0; i < l; i++) {\n                if (w[i] === v.idx) return;\n            }\n            w.length = l + 1;\n            w[l] = v.idx;\n            v.out = true;\n        };\n        Vertices.prototype.walk = function (cb) {\n            this.reset();\n            for (var i = 0; i < this.length; i++) {\n                var vertex = this[i];\n                if (vertex.out) continue;\n                this.visit(vertex, \"\");\n            }\n            this.each(this.result, cb);\n        };\n        Vertices.prototype.check = function (v, w) {\n            if (v.key === w) {\n                throw new Error(\"cycle detected: \" + w + \" <- \" + w);\n            }\n            // quick check\n            if (v.length === 0) return;\n            // shallow check\n            for (var i = 0; i < v.length; i++) {\n                var key = this[v[i]].key;\n                if (key === w) {\n                    throw new Error(\"cycle detected: \" + w + \" <- \" + v.key + \" <- \" + w);\n                }\n            }\n            // deep check\n            this.reset();\n            this.visit(v, w);\n            if (this.path.length > 0) {\n                var msg_1 = \"cycle detected: \" + w;\n                this.each(this.path, function (key) {\n                    msg_1 += \" <- \" + key;\n                });\n                throw new Error(msg_1);\n            }\n        };\n        Vertices.prototype.reset = function () {\n            this.stack.length = 0;\n            this.path.length = 0;\n            this.result.length = 0;\n            for (var i = 0, l = this.length; i < l; i++) {\n                this[i].flag = false;\n            }\n        };\n        Vertices.prototype.visit = function (start, search) {\n            var _a = this,\n                stack = _a.stack,\n                path = _a.path,\n                result = _a.result;\n            stack.push(start.idx);\n            while (stack.length) {\n                var index = stack.pop() | 0;\n                if (index >= 0) {\n                    // enter\n                    var vertex = this[index];\n                    if (vertex.flag) continue;\n                    vertex.flag = true;\n                    path.push(index);\n                    if (search === vertex.key) break;\n                    // push exit\n                    stack.push(~index);\n                    this.pushIncoming(vertex);\n                } else {\n                    // exit\n                    path.pop();\n                    result.push(~index);\n                }\n            }\n        };\n        Vertices.prototype.pushIncoming = function (incomming) {\n            var stack = this.stack;\n            for (var i = incomming.length - 1; i >= 0; i--) {\n                var index = incomming[i];\n                if (!this[index].flag) {\n                    stack.push(index);\n                }\n            }\n        };\n        Vertices.prototype.each = function (indices, cb) {\n            for (var i = 0, l = indices.length; i < l; i++) {\n                var vertex = this[indices[i]];\n                cb(vertex.key, vertex.val);\n            }\n        };\n        return Vertices;\n    }();\n    /** @private */\n    var IntStack = function () {\n        function IntStack() {\n            this.length = 0;\n        }\n        IntStack.prototype.push = function (n) {\n            this[this.length++] = n | 0;\n        };\n        IntStack.prototype.pop = function () {\n            return this[--this.length] | 0;\n        };\n        return IntStack;\n    }();\n});","enifed('ember-application/index', ['exports', 'ember-application/system/application', 'ember-application/system/application-instance', 'ember-application/system/resolver', 'ember-application/system/engine', 'ember-application/system/engine-instance', 'ember-application/system/engine-parent', 'ember-application/initializers/dom-templates'], function (exports, _application, _applicationInstance, _resolver, _engine, _engineInstance, _engineParent) {\n  'use strict';\n\n  exports.setEngineParent = exports.getEngineParent = exports.EngineInstance = exports.Engine = exports.Resolver = exports.ApplicationInstance = exports.Application = undefined;\n  Object.defineProperty(exports, 'Application', {\n    enumerable: true,\n    get: function () {\n      return _application.default;\n    }\n  });\n  Object.defineProperty(exports, 'ApplicationInstance', {\n    enumerable: true,\n    get: function () {\n      return _applicationInstance.default;\n    }\n  });\n  Object.defineProperty(exports, 'Resolver', {\n    enumerable: true,\n    get: function () {\n      return _resolver.default;\n    }\n  });\n  Object.defineProperty(exports, 'Engine', {\n    enumerable: true,\n    get: function () {\n      return _engine.default;\n    }\n  });\n  Object.defineProperty(exports, 'EngineInstance', {\n    enumerable: true,\n    get: function () {\n      return _engineInstance.default;\n    }\n  });\n  Object.defineProperty(exports, 'getEngineParent', {\n    enumerable: true,\n    get: function () {\n      return _engineParent.getEngineParent;\n    }\n  });\n  Object.defineProperty(exports, 'setEngineParent', {\n    enumerable: true,\n    get: function () {\n      return _engineParent.setEngineParent;\n    }\n  });\n});","enifed('ember-application/initializers/dom-templates', ['require', 'ember-glimmer', 'ember-environment', 'ember-application/system/application'], function (_require2, _emberGlimmer, _emberEnvironment, _application) {\n  'use strict';\n\n  var bootstrap = function () {};\n\n  _application.default.initializer({\n    name: 'domTemplates',\n    initialize: function () {\n      var bootstrapModuleId = 'ember-template-compiler/system/bootstrap';\n      var context = void 0;\n      if (_emberEnvironment.environment.hasDOM && (0, _require2.has)(bootstrapModuleId)) {\n        bootstrap = (0, _require2.default)(bootstrapModuleId).default;\n        context = document;\n      }\n\n      bootstrap({ context: context, hasTemplate: _emberGlimmer.hasTemplate, setTemplate: _emberGlimmer.setTemplate });\n    }\n  });\n});","enifed('ember-application/system/application-instance', ['exports', 'ember-utils', 'ember-metal', 'ember-environment', 'ember-views', 'ember-application/system/engine-instance', 'ember-glimmer'], function (exports, _emberUtils, _emberMetal, _emberEnvironment, _emberViews, _engineInstance, _emberGlimmer) {\n  'use strict';\n\n  /**\n    The `ApplicationInstance` encapsulates all of the stateful aspects of a\n    running `Application`.\n  \n    At a high-level, we break application boot into two distinct phases:\n  \n    * Definition time, where all of the classes, templates, and other\n      dependencies are loaded (typically in the browser).\n    * Run time, where we begin executing the application once everything\n      has loaded.\n  \n    Definition time can be expensive and only needs to happen once since it is\n    an idempotent operation. For example, between test runs and FastBoot\n    requests, the application stays the same. It is only the state that we want\n    to reset.\n  \n    That state is what the `ApplicationInstance` manages: it is responsible for\n    creating the container that contains all application state, and disposing of\n    it once the particular test run or FastBoot request has finished.\n  \n    @public\n    @class ApplicationInstance\n    @extends EngineInstance\n  */\n\n  /**\n  @module @ember/application\n  */\n\n  var ApplicationInstance = _engineInstance.default.extend({\n    /**\n      The `Application` for which this is an instance.\n       @property {Application} application\n      @private\n    */\n    application: null,\n\n    /**\n      The DOM events for which the event dispatcher should listen.\n       By default, the application's `Ember.EventDispatcher` listens\n      for a set of standard DOM events, such as `mousedown` and\n      `keyup`, and delegates them to your application's `Ember.View`\n      instances.\n       @private\n      @property {Object} customEvents\n    */\n    customEvents: null,\n\n    /**\n      The root DOM element of the Application as an element or a\n      [jQuery-compatible selector\n      string](http://api.jquery.com/category/selectors/).\n       @private\n      @property {String|DOMElement} rootElement\n    */\n    rootElement: null,\n\n    init: function () {\n      this._super.apply(this, arguments);\n\n      // Register this instance in the per-instance registry.\n      //\n      // Why do we need to register the instance in the first place?\n      // Because we need a good way for the root route (a.k.a ApplicationRoute)\n      // to notify us when it has created the root-most view. That view is then\n      // appended to the rootElement, in the case of apps, to the fixture harness\n      // in tests, or rendered to a string in the case of FastBoot.\n      this.register('-application-instance:main', this, { instantiate: false });\n    },\n    _bootSync: function (options) {\n      if (this._booted) {\n        return this;\n      }\n\n      options = new BootOptions(options);\n\n      this.setupRegistry(options);\n\n      if (options.rootElement) {\n        this.rootElement = options.rootElement;\n      } else {\n        this.rootElement = this.application.rootElement;\n      }\n\n      if (options.location) {\n        var router = (0, _emberMetal.get)(this, 'router');\n        (0, _emberMetal.set)(router, 'location', options.location);\n      }\n\n      this.application.runInstanceInitializers(this);\n\n      if (options.isInteractive) {\n        this.setupEventDispatcher();\n      }\n\n      this._booted = true;\n\n      return this;\n    },\n    setupRegistry: function (options) {\n      this.constructor.setupRegistry(this.__registry__, options);\n    },\n\n\n    router: (0, _emberMetal.computed)(function () {\n      return this.lookup('router:main');\n    }).readOnly(),\n\n    didCreateRootView: function (view) {\n      view.appendTo(this.rootElement);\n    },\n    startRouting: function () {\n      var router = (0, _emberMetal.get)(this, 'router');\n      router.startRouting();\n      this._didSetupRouter = true;\n    },\n    setupRouter: function () {\n      if (this._didSetupRouter) {\n        return;\n      }\n      this._didSetupRouter = true;\n\n      var router = (0, _emberMetal.get)(this, 'router');\n      router.setupRouter();\n    },\n    handleURL: function (url) {\n      var router = (0, _emberMetal.get)(this, 'router');\n\n      this.setupRouter();\n      return router.handleURL(url);\n    },\n    setupEventDispatcher: function () {\n      var dispatcher = this.lookup('event_dispatcher:main');\n      var applicationCustomEvents = (0, _emberMetal.get)(this.application, 'customEvents');\n      var instanceCustomEvents = (0, _emberMetal.get)(this, 'customEvents');\n\n      var customEvents = (0, _emberUtils.assign)({}, applicationCustomEvents, instanceCustomEvents);\n      dispatcher.setup(customEvents, this.rootElement);\n\n      return dispatcher;\n    },\n    getURL: function () {\n      return (0, _emberMetal.get)(this, 'router.url');\n    },\n    visit: function (url) {\n      var _this = this;\n\n      this.setupRouter();\n\n      var bootOptions = this.__container__.lookup('-environment:main');\n\n      var router = (0, _emberMetal.get)(this, 'router');\n\n      var handleTransitionResolve = function () {\n        if (!bootOptions.options.shouldRender) {\n          // No rendering is needed, and routing has completed, simply return.\n          return _this;\n        } else {\n          // Ensure that the visit promise resolves when all rendering has completed\n          return (0, _emberGlimmer.renderSettled)().then(function () {\n            return _this;\n          });\n        }\n      };\n\n      var handleTransitionReject = function (error) {\n        if (error.error) {\n          throw error.error;\n        } else if (error.name === 'TransitionAborted' && router._routerMicrolib.activeTransition) {\n          return router._routerMicrolib.activeTransition.then(handleTransitionResolve, handleTransitionReject);\n        } else if (error.name === 'TransitionAborted') {\n          throw new Error(error.message);\n        } else {\n          throw error;\n        }\n      };\n\n      var location = (0, _emberMetal.get)(router, 'location');\n\n      // Keeps the location adapter's internal URL in-sync\n      location.setURL(url);\n\n      // getURL returns the set url with the rootURL stripped off\n      return router.handleURL(location.getURL()).then(handleTransitionResolve, handleTransitionReject);\n    }\n  });\n\n  ApplicationInstance.reopenClass({\n    setupRegistry: function (registry) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!options.toEnvironment) {\n        options = new BootOptions(options);\n      }\n\n      registry.register('-environment:main', options.toEnvironment(), { instantiate: false });\n      registry.register('service:-document', options.document, { instantiate: false });\n\n      this._super(registry, options);\n    }\n  });\n\n  /**\n    A list of boot-time configuration options for customizing the behavior of\n    an `ApplicationInstance`.\n  \n    This is an interface class that exists purely to document the available\n    options; you do not need to construct it manually. Simply pass a regular\n    JavaScript object containing the desired options into methods that require\n    one of these options object:\n  \n    ```javascript\n    MyApp.visit(\"/\", { location: \"none\", rootElement: \"#container\" });\n    ```\n  \n    Not all combinations of the supported options are valid. See the documentation\n    on `Application#visit` for the supported configurations.\n  \n    Internal, experimental or otherwise unstable flags are marked as private.\n  \n    @class BootOptions\n    @namespace ApplicationInstance\n    @public\n  */\n  function BootOptions() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /**\n      Provide a specific instance of jQuery. This is useful in conjunction with\n      the `document` option, as it allows you to use a copy of `jQuery` that is\n      appropriately bound to the foreign `document` (e.g. a jsdom).\n       This is highly experimental and support very incomplete at the moment.\n       @property jQuery\n      @type Object\n      @default auto-detected\n      @private\n    */\n    this.jQuery = _emberViews.jQuery; // This default is overridable below\n\n    /**\n      Interactive mode: whether we need to set up event delegation and invoke\n      lifecycle callbacks on Components.\n       @property isInteractive\n      @type boolean\n      @default auto-detected\n      @private\n    */\n    this.isInteractive = _emberEnvironment.environment.hasDOM; // This default is overridable below\n\n    /**\n      Run in a full browser environment.\n       When this flag is set to `false`, it will disable most browser-specific\n      and interactive features. Specifically:\n       * It does not use `jQuery` to append the root view; the `rootElement`\n        (either specified as a subsequent option or on the application itself)\n        must already be an `Element` in the given `document` (as opposed to a\n        string selector).\n       * It does not set up an `EventDispatcher`.\n       * It does not run any `Component` lifecycle hooks (such as `didInsertElement`).\n       * It sets the `location` option to `\"none\"`. (If you would like to use\n        the location adapter specified in the app's router instead, you can also\n        specify `{ location: null }` to specifically opt-out.)\n       @property isBrowser\n      @type boolean\n      @default auto-detected\n      @public\n    */\n    if (options.isBrowser !== undefined) {\n      this.isBrowser = !!options.isBrowser;\n    } else {\n      this.isBrowser = _emberEnvironment.environment.hasDOM;\n    }\n\n    if (!this.isBrowser) {\n      this.jQuery = null;\n      this.isInteractive = false;\n      this.location = 'none';\n    }\n\n    /**\n      Disable rendering completely.\n       When this flag is set to `true`, it will disable the entire rendering\n      pipeline. Essentially, this puts the app into \"routing-only\" mode. No\n      templates will be rendered, and no Components will be created.\n       @property shouldRender\n      @type boolean\n      @default true\n      @public\n    */\n    if (options.shouldRender !== undefined) {\n      this.shouldRender = !!options.shouldRender;\n    } else {\n      this.shouldRender = true;\n    }\n\n    if (!this.shouldRender) {\n      this.jQuery = null;\n      this.isInteractive = false;\n    }\n\n    /**\n      If present, render into the given `Document` object instead of the\n      global `window.document` object.\n       In practice, this is only useful in non-browser environment or in\n      non-interactive mode, because Ember's `jQuery` dependency is\n      implicitly bound to the current document, causing event delegation\n      to not work properly when the app is rendered into a foreign\n      document object (such as an iframe's `contentDocument`).\n       In non-browser mode, this could be a \"`Document`-like\" object as\n      Ember only interact with a small subset of the DOM API in non-\n      interactive mode. While the exact requirements have not yet been\n      formalized, the `SimpleDOM` library's implementation is known to\n      work.\n       @property document\n      @type Document\n      @default the global `document` object\n      @public\n    */\n    if (options.document) {\n      this.document = options.document;\n    } else {\n      this.document = typeof document !== 'undefined' ? document : null;\n    }\n\n    /**\n      If present, overrides the application's `rootElement` property on\n      the instance. This is useful for testing environment, where you\n      might want to append the root view to a fixture area.\n       In non-browser mode, because Ember does not have access to jQuery,\n      this options must be specified as a DOM `Element` object instead of\n      a selector string.\n       See the documentation on `Application`'s `rootElement` for\n      details.\n       @property rootElement\n      @type String|Element\n      @default null\n      @public\n     */\n    if (options.rootElement) {\n      this.rootElement = options.rootElement;\n    }\n\n    // Set these options last to give the user a chance to override the\n    // defaults from the \"combo\" options like `isBrowser` (although in\n    // practice, the resulting combination is probably invalid)\n\n    /**\n      If present, overrides the router's `location` property with this\n      value. This is useful for environments where trying to modify the\n      URL would be inappropriate.\n       @property location\n      @type string\n      @default null\n      @public\n    */\n    if (options.location !== undefined) {\n      this.location = options.location;\n    }\n\n    if (options.jQuery !== undefined) {\n      this.jQuery = options.jQuery;\n    }\n\n    if (options.isInteractive !== undefined) {\n      this.isInteractive = !!options.isInteractive;\n    }\n  }\n\n  BootOptions.prototype.toEnvironment = function () {\n    var env = (0, _emberUtils.assign)({}, _emberEnvironment.environment);\n    // For compatibility with existing code\n    env.hasDOM = this.isBrowser;\n    env.isInteractive = this.isInteractive;\n    env.options = this;\n    return env;\n  };\n\n  exports.default = ApplicationInstance;\n});","enifed('ember-application/system/application', ['exports', 'ember-babel', 'ember-utils', 'ember-environment', 'ember-debug', 'ember-metal', 'ember-runtime', 'ember-views', 'ember-routing', 'ember-application/system/application-instance', 'container', 'ember-application/system/engine', 'ember-glimmer', 'ember/features'], function (exports, _emberBabel, _emberUtils, _emberEnvironment, _emberDebug, _emberMetal, _emberRuntime, _emberViews, _emberRouting, _applicationInstance, _container, _engine, _emberGlimmer, _features) {\n  'use strict';\n\n  var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['-bucket-cache:main'], ['-bucket-cache:main']);\n\n  var librariesRegistered = false;\n\n  /**\n    An instance of `Application` is the starting point for every Ember\n    application. It helps to instantiate, initialize and coordinate the many\n    objects that make up your app.\n  \n    Each Ember app has one and only one `Application` object. In fact, the\n    very first thing you should do in your application is create the instance:\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    window.App = Application.create();\n    ```\n  \n    Typically, the application object is the only global variable. All other\n    classes in your app should be properties on the `Application` instance,\n    which highlights its first role: a global namespace.\n  \n    For example, if you define a view class, it might look like this:\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    App.MyView = Ember.View.extend();\n    ```\n  \n    By default, calling `Application.create()` will automatically initialize\n    your application by calling the `Application.initialize()` method. If\n    you need to delay initialization, you can call your app's `deferReadiness()`\n    method. When you are ready for your app to be initialized, call its\n    `advanceReadiness()` method.\n  \n    You can define a `ready` method on the `Application` instance, which\n    will be run by Ember when the application is initialized.\n  \n    Because `Application` inherits from `Ember.Namespace`, any classes\n    you create will have useful string representations when calling `toString()`.\n    See the `Ember.Namespace` documentation for more information.\n  \n    While you can think of your `Application` as a container that holds the\n    other classes in your application, there are several other responsibilities\n    going on under-the-hood that you may want to understand.\n  \n    ### Event Delegation\n  \n    Ember uses a technique called _event delegation_. This allows the framework\n    to set up a global, shared event listener instead of requiring each view to\n    do it manually. For example, instead of each view registering its own\n    `mousedown` listener on its associated element, Ember sets up a `mousedown`\n    listener on the `body`.\n  \n    If a `mousedown` event occurs, Ember will look at the target of the event and\n    start walking up the DOM node tree, finding corresponding views and invoking\n    their `mouseDown` method as it goes.\n  \n    `Application` has a number of default events that it listens for, as\n    well as a mapping from lowercase events to camel-cased view method names. For\n    example, the `keypress` event causes the `keyPress` method on the view to be\n    called, the `dblclick` event causes `doubleClick` to be called, and so on.\n  \n    If there is a bubbling browser event that Ember does not listen for by\n    default, you can specify custom events and their corresponding view method\n    names by setting the application's `customEvents` property:\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    let App = Application.create({\n      customEvents: {\n        // add support for the paste event\n        paste: 'paste'\n      }\n    });\n    ```\n  \n    To prevent Ember from setting up a listener for a default event,\n    specify the event name with a `null` value in the `customEvents`\n    property:\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    let App = Application.create({\n      customEvents: {\n        // prevent listeners for mouseenter/mouseleave events\n        mouseenter: null,\n        mouseleave: null\n      }\n    });\n    ```\n  \n    By default, the application sets up these event listeners on the document\n    body. However, in cases where you are embedding an Ember application inside\n    an existing page, you may want it to set up the listeners on an element\n    inside the body.\n  \n    For example, if only events inside a DOM element with the ID of `ember-app`\n    should be delegated, set your application's `rootElement` property:\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    let App = Application.create({\n      rootElement: '#ember-app'\n    });\n    ```\n  \n    The `rootElement` can be either a DOM element or a jQuery-compatible selector\n    string. Note that *views appended to the DOM outside the root element will\n    not receive events.* If you specify a custom root element, make sure you only\n    append views inside it!\n  \n    To learn more about the events Ember components use, see\n  \n    [components/handling-events](https://guides.emberjs.com/current/components/handling-events/#toc_event-names).\n  \n    ### Initializers\n  \n    Libraries on top of Ember can add initializers, like so:\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    Application.initializer({\n      name: 'api-adapter',\n  \n      initialize: function(application) {\n        application.register('api-adapter:main', ApiAdapter);\n      }\n    });\n    ```\n  \n    Initializers provide an opportunity to access the internal registry, which\n    organizes the different components of an Ember application. Additionally\n    they provide a chance to access the instantiated application. Beyond\n    being used for libraries, initializers are also a great way to organize\n    dependency injection or setup in your own application.\n  \n    ### Routing\n  \n    In addition to creating your application's router, `Application` is\n    also responsible for telling the router when to start routing. Transitions\n    between routes can be logged with the `LOG_TRANSITIONS` flag, and more\n    detailed intra-transition logging can be logged with\n    the `LOG_TRANSITIONS_INTERNAL` flag:\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    let App = Application.create({\n      LOG_TRANSITIONS: true, // basic logging of successful transitions\n      LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n    });\n    ```\n  \n    By default, the router will begin trying to translate the current URL into\n    application state once the browser emits the `DOMContentReady` event. If you\n    need to defer routing, you can call the application's `deferReadiness()`\n    method. Once routing can begin, call the `advanceReadiness()` method.\n  \n    If there is any setup required before routing begins, you can implement a\n    `ready()` method on your app that will be invoked immediately before routing\n    begins.\n  \n    @class Application\n    @extends Engine\n    @uses RegistryProxyMixin\n    @public\n  */\n\n  var Application = _engine.default.extend({\n    /**\n      The root DOM element of the Application. This can be specified as an\n      element or a\n      [jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n       This is the element that will be passed to the Application's,\n      `eventDispatcher`, which sets up the listeners for event delegation. Every\n      view in your application should be a child of the element you specify here.\n       @property rootElement\n      @type DOMElement\n      @default 'body'\n      @public\n    */\n    rootElement: 'body',\n\n    /**\n      The `Ember.EventDispatcher` responsible for delegating events to this\n      application's views.\n       The event dispatcher is created by the application at initialization time\n      and sets up event listeners on the DOM element described by the\n      application's `rootElement` property.\n       See the documentation for `Ember.EventDispatcher` for more information.\n       @property eventDispatcher\n      @type Ember.EventDispatcher\n      @default null\n      @public\n    */\n    eventDispatcher: null,\n\n    /**\n      The DOM events for which the event dispatcher should listen.\n       By default, the application's `Ember.EventDispatcher` listens\n      for a set of standard DOM events, such as `mousedown` and\n      `keyup`, and delegates them to your application's `Ember.View`\n      instances.\n       If you would like additional bubbling events to be delegated to your\n      views, set your `Application`'s `customEvents` property\n      to a hash containing the DOM event name as the key and the\n      corresponding view method name as the value. Setting an event to\n      a value of `null` will prevent a default event listener from being\n      added for that event.\n       To add new events to be listened to:\n       ```javascript\n      import Application from '@ember/application';\n       let App = Application.create({\n        customEvents: {\n          // add support for the paste event\n          paste: 'paste'\n        }\n      });\n      ```\n       To prevent default events from being listened to:\n       ```javascript\n      import Application from '@ember/application';\n       let App = Application.create({\n        customEvents: {\n          // remove support for mouseenter / mouseleave events\n          mouseenter: null,\n          mouseleave: null\n        }\n      });\n      ```\n      @property customEvents\n      @type Object\n      @default null\n      @public\n    */\n    customEvents: null,\n\n    /**\n      Whether the application should automatically start routing and render\n      templates to the `rootElement` on DOM ready. While default by true,\n      other environments such as FastBoot or a testing harness can set this\n      property to `false` and control the precise timing and behavior of the boot\n      process.\n       @property autoboot\n      @type Boolean\n      @default true\n      @private\n    */\n    autoboot: true,\n\n    /**\n      Whether the application should be configured for the legacy \"globals mode\".\n      Under this mode, the Application object serves as a global namespace for all\n      classes.\n       ```javascript\n      import Application from '@ember/application';\n      import Component from '@ember/component';\n       let App = Application.create({\n        ...\n      });\n       App.Router.reopen({\n        location: 'none'\n      });\n       App.Router.map({\n        ...\n      });\n       App.MyComponent = Component.extend({\n        ...\n      });\n      ```\n       This flag also exposes other internal APIs that assumes the existence of\n      a special \"default instance\", like `App.__container__.lookup(...)`.\n       This option is currently not configurable, its value is derived from\n      the `autoboot` flag – disabling `autoboot` also implies opting-out of\n      globals mode support, although they are ultimately orthogonal concerns.\n       Some of the global modes features are already deprecated in 1.x. The\n      existence of this flag is to untangle the globals mode code paths from\n      the autoboot code paths, so that these legacy features can be reviewed\n      for deprecation/removal separately.\n       Forcing the (autoboot=true, _globalsMode=false) here and running the tests\n      would reveal all the places where we are still relying on these legacy\n      behavior internally (mostly just tests).\n       @property _globalsMode\n      @type Boolean\n      @default true\n      @private\n    */\n    _globalsMode: true,\n\n    init: function (options) {\n      // eslint-disable-line no-unused-vars\n      this._super.apply(this, arguments);\n\n      if (!this.$) {\n        this.$ = _emberViews.jQuery;\n      }\n\n      registerLibraries();\n\n      if (true) {\n        logLibraryVersions();\n      }\n\n      // Start off the number of deferrals at 1. This will be decremented by\n      // the Application's own `boot` method.\n      this._readinessDeferrals = 1;\n      this._booted = false;\n\n      this.autoboot = this._globalsMode = !!this.autoboot;\n\n      if (this._globalsMode) {\n        this._prepareForGlobalsMode();\n      }\n\n      if (this.autoboot) {\n        this.waitForDOMReady();\n      }\n    },\n    buildInstance: function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      options.base = this;\n      options.application = this;\n      return _applicationInstance.default.create(options);\n    },\n    _prepareForGlobalsMode: function () {\n      // Create subclass of Router for this Application instance.\n      // This is to ensure that someone reopening `App.Router` does not\n      // tamper with the default `Router`.\n      this.Router = (this.Router || _emberRouting.Router).extend();\n\n      this._buildDeprecatedInstance();\n    },\n    _buildDeprecatedInstance: function () {\n      // Build a default instance\n      var instance = this.buildInstance();\n\n      // Legacy support for App.__container__ and other global methods\n      // on App that rely on a single, default instance.\n      this.__deprecatedInstance__ = instance;\n      this.__container__ = instance.__container__;\n    },\n    waitForDOMReady: function () {\n      if (!this.$ || this.$.isReady) {\n        _emberMetal.run.schedule('actions', this, 'domReady');\n      } else {\n        this.$().ready(_emberMetal.run.bind(this, 'domReady'));\n      }\n    },\n    domReady: function () {\n      if (this.isDestroyed) {\n        return;\n      }\n\n      this._bootSync();\n\n      // Continues to `didBecomeReady`\n    },\n    deferReadiness: function () {\n      (true && !(this instanceof Application) && (0, _emberDebug.assert)('You must call deferReadiness on an instance of Application', this instanceof Application));\n      (true && !(this._readinessDeferrals > 0) && (0, _emberDebug.assert)('You cannot defer readiness since the `ready()` hook has already been called.', this._readinessDeferrals > 0));\n\n      this._readinessDeferrals++;\n    },\n    advanceReadiness: function () {\n      (true && !(this instanceof Application) && (0, _emberDebug.assert)('You must call advanceReadiness on an instance of Application', this instanceof Application));\n\n      this._readinessDeferrals--;\n\n      if (this._readinessDeferrals === 0) {\n        _emberMetal.run.once(this, this.didBecomeReady);\n      }\n    },\n    boot: function () {\n      if (this._bootPromise) {\n        return this._bootPromise;\n      }\n\n      try {\n        this._bootSync();\n      } catch (_) {\n        // Ignore th error: in the asynchronous boot path, the error is already reflected\n        // in the promise rejection\n      }\n\n      return this._bootPromise;\n    },\n    _bootSync: function () {\n      if (this._booted) {\n        return;\n      }\n\n      // Even though this returns synchronously, we still need to make sure the\n      // boot promise exists for book-keeping purposes: if anything went wrong in\n      // the boot process, we need to store the error as a rejection on the boot\n      // promise so that a future caller of `boot()` can tell what failed.\n      var defer = this._bootResolver = _emberRuntime.RSVP.defer();\n      this._bootPromise = defer.promise;\n\n      try {\n        this.runInitializers();\n        (0, _emberRuntime.runLoadHooks)('application', this);\n        this.advanceReadiness();\n        // Continues to `didBecomeReady`\n      } catch (error) {\n        // For the asynchronous boot path\n        defer.reject(error);\n\n        // For the synchronous boot path\n        throw error;\n      }\n    },\n    reset: function () {\n      (true && !(this._globalsMode && this.autoboot) && (0, _emberDebug.assert)('Calling reset() on instances of `Application` is not\\n            supported when globals mode is disabled; call `visit()` to\\n            create new `ApplicationInstance`s and dispose them\\n            via their `destroy()` method instead.', this._globalsMode && this.autoboot));\n\n\n      var instance = this.__deprecatedInstance__;\n\n      this._readinessDeferrals = 1;\n      this._bootPromise = null;\n      this._bootResolver = null;\n      this._booted = false;\n\n      function handleReset() {\n        (0, _emberMetal.run)(instance, 'destroy');\n        this._buildDeprecatedInstance();\n        _emberMetal.run.schedule('actions', this, '_bootSync');\n      }\n\n      _emberMetal.run.join(this, handleReset);\n    },\n    didBecomeReady: function () {\n      try {\n        // TODO: Is this still needed for _globalsMode = false?\n        if (!(0, _emberDebug.isTesting)()) {\n          // Eagerly name all classes that are already loaded\n          _emberRuntime.Namespace.processAll();\n          (0, _emberRuntime.setNamespaceSearchDisabled)(true);\n        }\n\n        // See documentation on `_autoboot()` for details\n        if (this.autoboot) {\n          var instance = void 0;\n\n          if (this._globalsMode) {\n            // If we already have the __deprecatedInstance__ lying around, boot it to\n            // avoid unnecessary work\n            instance = this.__deprecatedInstance__;\n          } else {\n            // Otherwise, build an instance and boot it. This is currently unreachable,\n            // because we forced _globalsMode to === autoboot; but having this branch\n            // allows us to locally toggle that flag for weeding out legacy globals mode\n            // dependencies independently\n            instance = this.buildInstance();\n          }\n\n          instance._bootSync();\n\n          // TODO: App.ready() is not called when autoboot is disabled, is this correct?\n          this.ready();\n\n          instance.startRouting();\n        }\n\n        // For the asynchronous boot path\n        this._bootResolver.resolve(this);\n\n        // For the synchronous boot path\n        this._booted = true;\n      } catch (error) {\n        // For the asynchronous boot path\n        this._bootResolver.reject(error);\n\n        // For the synchronous boot path\n        throw error;\n      }\n    },\n    ready: function () {\n      return this;\n    },\n    willDestroy: function () {\n      this._super.apply(this, arguments);\n      (0, _emberRuntime.setNamespaceSearchDisabled)(false);\n      this._booted = false;\n      this._bootPromise = null;\n      this._bootResolver = null;\n\n      if (_emberRuntime._loaded.application === this) {\n        _emberRuntime._loaded.application = undefined;\n      }\n\n      if (this._globalsMode && this.__deprecatedInstance__) {\n        this.__deprecatedInstance__.destroy();\n      }\n    },\n    visit: function (url, options) {\n      var _this = this;\n\n      return this.boot().then(function () {\n        var instance = _this.buildInstance();\n\n        return instance.boot(options).then(function () {\n          return instance.visit(url);\n        }).catch(function (error) {\n          (0, _emberMetal.run)(instance, 'destroy');\n          throw error;\n        });\n      });\n    }\n  });\n\n  Application.reopenClass({\n    buildRegistry: function (application) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // eslint-disable-line no-unused-vars\n      var registry = this._super.apply(this, arguments);\n\n      commonSetupRegistry(registry);\n\n      (0, _emberGlimmer.setupApplicationRegistry)(registry);\n\n      return registry;\n    }\n  });\n\n  function commonSetupRegistry(registry) {\n    registry.register('router:main', _emberRouting.Router.extend());\n    registry.register('-view-registry:main', {\n      create: function () {\n        return (0, _emberUtils.dictionary)(null);\n      }\n    });\n\n    registry.register('route:basic', _emberRouting.Route);\n    registry.register('event_dispatcher:main', _emberViews.EventDispatcher);\n\n    registry.injection('router:main', 'namespace', 'application:main');\n\n    registry.register('location:auto', _emberRouting.AutoLocation);\n    registry.register('location:hash', _emberRouting.HashLocation);\n    registry.register('location:history', _emberRouting.HistoryLocation);\n    registry.register('location:none', _emberRouting.NoneLocation);\n\n    registry.register((0, _container.privatize)(_templateObject), _emberRouting.BucketCache);\n\n    if (_features.EMBER_ROUTING_ROUTER_SERVICE) {\n      registry.register('service:router', _emberRouting.RouterService);\n      registry.injection('service:router', '_router', 'router:main');\n    }\n  }\n\n  function registerLibraries() {\n    if (!librariesRegistered) {\n      librariesRegistered = true;\n\n      if (_emberEnvironment.environment.hasDOM && typeof _emberViews.jQuery === 'function') {\n        _emberMetal.libraries.registerCoreLibrary('jQuery', (0, _emberViews.jQuery)().jquery);\n      }\n    }\n  }\n\n  function logLibraryVersions() {\n    if (true) {\n      if (_emberEnvironment.ENV.LOG_VERSION) {\n        // we only need to see this once per Application#init\n        _emberEnvironment.ENV.LOG_VERSION = false;\n        var libs = _emberMetal.libraries._registry;\n\n        var nameLengths = libs.map(function (item) {\n          return (0, _emberMetal.get)(item, 'name.length');\n        });\n\n        var maxNameLength = Math.max.apply(this, nameLengths);\n\n        (0, _emberDebug.debug)('-------------------------------');\n        for (var i = 0; i < libs.length; i++) {\n          var lib = libs[i];\n          var spaces = new Array(maxNameLength - lib.name.length + 1).join(' ');\n          (0, _emberDebug.debug)([lib.name, spaces, ' : ', lib.version].join(''));\n        }\n        (0, _emberDebug.debug)('-------------------------------');\n      }\n    }\n  }\n\n  exports.default = Application;\n});","enifed('ember-application/system/engine-instance', ['exports', 'ember-babel', 'ember-utils', 'ember-runtime', 'ember-debug', 'container', 'ember-application/system/engine-parent'], function (exports, _emberBabel, _emberUtils, _emberRuntime, _emberDebug, _container, _engineParent) {\n  'use strict';\n\n  var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['-bucket-cache:main'], ['-bucket-cache:main']);\n\n  /**\n    The `EngineInstance` encapsulates all of the stateful aspects of a\n    running `Engine`.\n  \n    @public\n    @class EngineInstance\n    @extends EmberObject\n    @uses RegistryProxyMixin\n    @uses ContainerProxyMixin\n  */\n\n  var EngineInstance = _emberRuntime.Object.extend(_emberRuntime.RegistryProxyMixin, _emberRuntime.ContainerProxyMixin, {\n    /**\n      The base `Engine` for which this is an instance.\n       @property {Engine} engine\n      @private\n    */\n    base: null,\n\n    init: function () {\n      this._super.apply(this, arguments);\n\n      (0, _emberUtils.guidFor)(this);\n\n      var base = this.base;\n\n      if (!base) {\n        base = this.application;\n        this.base = base;\n      }\n\n      // Create a per-instance registry that will use the application's registry\n      // as a fallback for resolving registrations.\n      var registry = this.__registry__ = new _container.Registry({\n        fallback: base.__registry__\n      });\n\n      // Create a per-instance container from the instance's registry\n      this.__container__ = registry.container({ owner: this });\n\n      this._booted = false;\n    },\n    boot: function (options) {\n      var _this = this;\n\n      if (this._bootPromise) {\n        return this._bootPromise;\n      }\n\n      this._bootPromise = new _emberRuntime.RSVP.Promise(function (resolve) {\n        return resolve(_this._bootSync(options));\n      });\n\n      return this._bootPromise;\n    },\n    _bootSync: function (options) {\n      if (this._booted) {\n        return this;\n      }\n\n      (true && !((0, _engineParent.getEngineParent)(this)) && (0, _emberDebug.assert)('An engine instance\\'s parent must be set via `setEngineParent(engine, parent)` prior to calling `engine.boot()`.', (0, _engineParent.getEngineParent)(this)));\n\n\n      this.cloneParentDependencies();\n\n      this.setupRegistry(options);\n\n      this.base.runInstanceInitializers(this);\n\n      this._booted = true;\n\n      return this;\n    },\n    setupRegistry: function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__container__.lookup('-environment:main');\n\n      this.constructor.setupRegistry(this.__registry__, options);\n    },\n    unregister: function (fullName) {\n      this.__container__.reset(fullName);\n      this._super.apply(this, arguments);\n    },\n    buildChildEngineInstance: function (name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var Engine = this.lookup('engine:' + name);\n\n      if (!Engine) {\n        throw new _emberDebug.Error('You attempted to mount the engine \\'' + name + '\\', but it is not registered with its parent.');\n      }\n\n      var engineInstance = Engine.buildInstance(options);\n\n      (0, _engineParent.setEngineParent)(engineInstance, this);\n\n      return engineInstance;\n    },\n    cloneParentDependencies: function () {\n      var _this2 = this;\n\n      var parent = (0, _engineParent.getEngineParent)(this);\n\n      var registrations = ['route:basic', 'service:-routing', 'service:-glimmer-environment'];\n\n      registrations.forEach(function (key) {\n        return _this2.register(key, parent.resolveRegistration(key));\n      });\n\n      var env = parent.lookup('-environment:main');\n      this.register('-environment:main', env, { instantiate: false });\n\n      var singletons = ['router:main', (0, _container.privatize)(_templateObject), '-view-registry:main', 'renderer:-' + (env.isInteractive ? 'dom' : 'inert'), 'service:-document'];\n\n      if (env.isInteractive) {\n        singletons.push('event_dispatcher:main');\n      }\n\n      singletons.forEach(function (key) {\n        return _this2.register(key, parent.lookup(key), { instantiate: false });\n      });\n\n      this.inject('view', '_environment', '-environment:main');\n      this.inject('route', '_environment', '-environment:main');\n    }\n  });\n\n  EngineInstance.reopenClass({\n    setupRegistry: function (registry, options) {\n      // when no options/environment is present, do nothing\n      if (!options) {\n        return;\n      }\n\n      registry.injection('view', '_environment', '-environment:main');\n      registry.injection('route', '_environment', '-environment:main');\n\n      if (options.isInteractive) {\n        registry.injection('view', 'renderer', 'renderer:-dom');\n        registry.injection('component', 'renderer', 'renderer:-dom');\n      } else {\n        registry.injection('view', 'renderer', 'renderer:-inert');\n        registry.injection('component', 'renderer', 'renderer:-inert');\n      }\n    }\n  });\n\n  exports.default = EngineInstance;\n});","enifed('ember-application/system/engine-parent', ['exports', 'ember-utils'], function (exports, _emberUtils) {\n  'use strict';\n\n  exports.ENGINE_PARENT = undefined;\n  exports.getEngineParent = getEngineParent;\n  exports.setEngineParent = setEngineParent;\n  var ENGINE_PARENT = exports.ENGINE_PARENT = (0, _emberUtils.symbol)('ENGINE_PARENT');\n\n  /**\n    `getEngineParent` retrieves an engine instance's parent instance.\n  \n    @method getEngineParent\n    @param {EngineInstance} engine An engine instance.\n    @return {EngineInstance} The parent engine instance.\n    @for @ember/engine\n    @static\n    @private\n  */\n  function getEngineParent(engine) {\n    return engine[ENGINE_PARENT];\n  }\n\n  /**\n    `setEngineParent` sets an engine instance's parent instance.\n  \n    @method setEngineParent\n    @param {EngineInstance} engine An engine instance.\n    @param {EngineInstance} parent The parent engine instance.\n    @private\n  */\n  function setEngineParent(engine, parent) {\n    engine[ENGINE_PARENT] = parent;\n  }\n});","enifed('ember-application/system/engine', ['exports', 'ember-babel', 'ember-utils', 'ember-runtime', 'container', 'dag-map', 'ember-debug', 'ember-metal', 'ember-application/system/resolver', 'ember-application/system/engine-instance', 'ember-routing', 'ember-extension-support', 'ember-views', 'ember-glimmer'], function (exports, _emberBabel, _emberUtils, _emberRuntime, _container, _dagMap, _emberDebug, _emberMetal, _resolver, _engineInstance, _emberRouting, _emberExtensionSupport, _emberViews, _emberGlimmer) {\n  'use strict';\n\n  var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['-bucket-cache:main'], ['-bucket-cache:main']);\n\n  function props(obj) {\n    var properties = [];\n\n    for (var key in obj) {\n      properties.push(key);\n    }\n\n    return properties;\n  }\n\n  /**\n    The `Engine` class contains core functionality for both applications and\n    engines.\n  \n    Each engine manages a registry that's used for dependency injection and\n    exposed through `RegistryProxy`.\n  \n    Engines also manage initializers and instance initializers.\n  \n    Engines can spawn `EngineInstance` instances via `buildInstance()`.\n  \n    @class Engine\n    @extends Ember.Namespace\n    @uses RegistryProxy\n    @public\n  */\n  var Engine = _emberRuntime.Namespace.extend(_emberRuntime.RegistryProxyMixin, {\n    init: function () {\n      this._super.apply(this, arguments);\n\n      this.buildRegistry();\n    },\n\n\n    /**\n      A private flag indicating whether an engine's initializers have run yet.\n       @private\n      @property _initializersRan\n    */\n    _initializersRan: false,\n\n    ensureInitializers: function () {\n      if (!this._initializersRan) {\n        this.runInitializers();\n        this._initializersRan = true;\n      }\n    },\n    buildInstance: function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.ensureInitializers();\n      options.base = this;\n      return _engineInstance.default.create(options);\n    },\n    buildRegistry: function () {\n      var registry = this.__registry__ = this.constructor.buildRegistry(this);\n\n      return registry;\n    },\n    initializer: function (options) {\n      this.constructor.initializer(options);\n    },\n    instanceInitializer: function (options) {\n      this.constructor.instanceInitializer(options);\n    },\n    runInitializers: function () {\n      var _this = this;\n\n      this._runInitializer('initializers', function (name, initializer) {\n        (true && !(!!initializer) && (0, _emberDebug.assert)('No application initializer named \\'' + name + '\\'', !!initializer));\n\n        initializer.initialize(_this);\n      });\n    },\n    runInstanceInitializers: function (instance) {\n      this._runInitializer('instanceInitializers', function (name, initializer) {\n        (true && !(!!initializer) && (0, _emberDebug.assert)('No instance initializer named \\'' + name + '\\'', !!initializer));\n\n        initializer.initialize(instance);\n      });\n    },\n    _runInitializer: function (bucketName, cb) {\n      var initializersByName = (0, _emberMetal.get)(this.constructor, bucketName);\n      var initializers = props(initializersByName);\n      var graph = new _dagMap.default();\n      var initializer = void 0;\n\n      for (var i = 0; i < initializers.length; i++) {\n        initializer = initializersByName[initializers[i]];\n        graph.add(initializer.name, initializer, initializer.before, initializer.after);\n      }\n\n      graph.topsort(cb);\n    }\n  });\n\n  Engine.reopenClass({\n    initializers: Object.create(null),\n    instanceInitializers: Object.create(null),\n\n    /**\n      The goal of initializers should be to register dependencies and injections.\n      This phase runs once. Because these initializers may load code, they are\n      allowed to defer application readiness and advance it. If you need to access\n      the container or store you should use an InstanceInitializer that will be run\n      after all initializers and therefore after all code is loaded and the app is\n      ready.\n       Initializer receives an object which has the following attributes:\n      `name`, `before`, `after`, `initialize`. The only required attribute is\n      `initialize`, all others are optional.\n       * `name` allows you to specify under which name the initializer is registered.\n      This must be a unique name, as trying to register two initializers with the\n      same name will result in an error.\n       ```app/initializer/named-initializer.js\n      import { debug } from '@ember/debug';\n       export function initialize() {\n        debug('Running namedInitializer!');\n      }\n       export default {\n        name: 'named-initializer',\n        initialize\n      };\n      ```\n       * `before` and `after` are used to ensure that this initializer is ran prior\n      or after the one identified by the value. This value can be a single string\n      or an array of strings, referencing the `name` of other initializers.\n       An example of ordering initializers, we create an initializer named `first`:\n       ```app/initializer/first.js\n      import { debug } from '@ember/debug';\n       export function initialize() {\n        debug('First initializer!');\n      }\n       export default {\n        name: 'first',\n        initialize\n      };\n      ```\n       ```bash\n      // DEBUG: First initializer!\n      ```\n       We add another initializer named `second`, specifying that it should run\n      after the initializer named `first`:\n       ```app/initializer/second.js\n      import { debug } from '@ember/debug';\n       export function initialize() {\n        debug('Second initializer!');\n      }\n       export default {\n        name: 'second',\n        after: 'first',\n        initialize\n      };\n      ```\n       ```\n      // DEBUG: First initializer!\n      // DEBUG: Second initializer!\n      ```\n       Afterwards we add a further initializer named `pre`, this time specifying\n      that it should run before the initializer named `first`:\n       ```app/initializer/pre.js\n      import { debug } from '@ember/debug';\n       export function initialize() {\n        debug('Pre initializer!');\n      }\n       export default {\n        name: 'pre',\n        before: 'first',\n        initialize\n      };\n      ```\n       ```bash\n      // DEBUG: Pre initializer!\n      // DEBUG: First initializer!\n      // DEBUG: Second initializer!\n      ```\n       Finally we add an initializer named `post`, specifying it should run after\n      both the `first` and the `second` initializers:\n       ```app/initializer/post.js\n      import { debug } from '@ember/debug';\n       export function initialize() {\n        debug('Post initializer!');\n      }\n       export default {\n        name: 'post',\n        after: ['first', 'second'],\n        initialize\n      };\n      ```\n       ```bash\n      // DEBUG: Pre initializer!\n      // DEBUG: First initializer!\n      // DEBUG: Second initializer!\n      // DEBUG: Post initializer!\n      ```\n       * `initialize` is a callback function that receives one argument,\n        `application`, on which you can operate.\n       Example of using `application` to register an adapter:\n       ```app/initializer/api-adapter.js\n      import ApiAdapter from '../utils/api-adapter';\n       export function initialize(application) {\n        application.register('api-adapter:main', ApiAdapter);\n      }\n       export default {\n        name: 'post',\n        after: ['first', 'second'],\n        initialize\n      };\n      ```\n       @method initializer\n      @param initializer {Object}\n      @public\n    */\n\n    initializer: buildInitializerMethod('initializers', 'initializer'),\n\n    /**\n      Instance initializers run after all initializers have run. Because\n      instance initializers run after the app is fully set up. We have access\n      to the store, container, and other items. However, these initializers run\n      after code has loaded and are not allowed to defer readiness.\n       Instance initializer receives an object which has the following attributes:\n      `name`, `before`, `after`, `initialize`. The only required attribute is\n      `initialize`, all others are optional.\n       * `name` allows you to specify under which name the instanceInitializer is\n      registered. This must be a unique name, as trying to register two\n      instanceInitializer with the same name will result in an error.\n       ```app/initializer/named-instance-initializer.js\n      import { debug } from '@ember/debug';\n       export function initialize() {\n        debug('Running named-instance-initializer!');\n      }\n       export default {\n        name: 'named-instance-initializer',\n        initialize\n      };\n      ```\n       * `before` and `after` are used to ensure that this initializer is ran prior\n      or after the one identified by the value. This value can be a single string\n      or an array of strings, referencing the `name` of other initializers.\n       * See Application.initializer for discussion on the usage of before\n      and after.\n       Example instanceInitializer to preload data into the store.\n       ```app/initializer/preload-data.js\n      import $ from 'jquery';\n       export function initialize(application) {\n          var userConfig, userConfigEncoded, store;\n          // We have a HTML escaped JSON representation of the user's basic\n          // configuration generated server side and stored in the DOM of the main\n          // index.html file. This allows the app to have access to a set of data\n          // without making any additional remote calls. Good for basic data that is\n          // needed for immediate rendering of the page. Keep in mind, this data,\n          // like all local models and data can be manipulated by the user, so it\n          // should not be relied upon for security or authorization.\n           // Grab the encoded data from the meta tag\n          userConfigEncoded = $('head meta[name=app-user-config]').attr('content');\n           // Unescape the text, then parse the resulting JSON into a real object\n          userConfig = JSON.parse(unescape(userConfigEncoded));\n           // Lookup the store\n          store = application.lookup('service:store');\n           // Push the encoded JSON into the store\n          store.pushPayload(userConfig);\n      }\n       export default {\n        name: 'named-instance-initializer',\n        initialize\n      };\n      ```\n       @method instanceInitializer\n      @param instanceInitializer\n      @public\n    */\n    instanceInitializer: buildInitializerMethod('instanceInitializers', 'instance initializer'),\n\n    buildRegistry: function (namespace) {\n      var registry = new _container.Registry({\n        resolver: resolverFor(namespace)\n      });\n\n      registry.set = _emberMetal.set;\n\n      registry.register('application:main', namespace, { instantiate: false });\n\n      commonSetupRegistry(registry);\n      (0, _emberGlimmer.setupEngineRegistry)(registry);\n\n      return registry;\n    },\n\n\n    /**\n      Set this to provide an alternate class to `DefaultResolver`\n       @deprecated Use 'Resolver' instead\n      @property resolver\n      @public\n    */\n    resolver: null,\n\n    /**\n      Set this to provide an alternate class to `DefaultResolver`\n       @property resolver\n      @public\n    */\n    Resolver: null\n  });\n\n  /**\n    This function defines the default lookup rules for container lookups:\n  \n    * templates are looked up on `Ember.TEMPLATES`\n    * other names are looked up on the application after classifying the name.\n      For example, `controller:post` looks up `App.PostController` by default.\n    * if the default lookup fails, look for registered classes on the container\n  \n    This allows the application to register default injections in the container\n    that could be overridden by the normal naming convention.\n  \n    @private\n    @method resolverFor\n    @param {Ember.Namespace} namespace the namespace to look for classes\n    @return {*} the resolved value for a given lookup\n  */\n  function resolverFor(namespace) {\n    var ResolverClass = namespace.get('Resolver') || _resolver.default;\n\n    return ResolverClass.create({\n      namespace: namespace\n    });\n  }\n\n  function buildInitializerMethod(bucketName, humanName) {\n    return function (initializer) {\n      // If this is the first initializer being added to a subclass, we are going to reopen the class\n      // to make sure we have a new `initializers` object, which extends from the parent class' using\n      // prototypal inheritance. Without this, attempting to add initializers to the subclass would\n      // pollute the parent class as well as other subclasses.\n      if (this.superclass[bucketName] !== undefined && this.superclass[bucketName] === this[bucketName]) {\n        var attrs = {};\n        attrs[bucketName] = Object.create(this[bucketName]);\n        this.reopenClass(attrs);\n      }\n\n      (true && !(!this[bucketName][initializer.name]) && (0, _emberDebug.assert)('The ' + humanName + ' \\'' + initializer.name + '\\' has already been registered', !this[bucketName][initializer.name]));\n      (true && !((0, _emberUtils.canInvoke)(initializer, 'initialize')) && (0, _emberDebug.assert)('An ' + humanName + ' cannot be registered without an initialize function', (0, _emberUtils.canInvoke)(initializer, 'initialize')));\n      (true && !(initializer.name !== undefined) && (0, _emberDebug.assert)('An ' + humanName + ' cannot be registered without a name property', initializer.name !== undefined));\n\n\n      this[bucketName][initializer.name] = initializer;\n    };\n  }\n\n  function commonSetupRegistry(registry) {\n    registry.optionsForType('component', { singleton: false });\n    registry.optionsForType('view', { singleton: false });\n\n    registry.register('controller:basic', _emberRuntime.Controller, { instantiate: false });\n\n    registry.injection('view', '_viewRegistry', '-view-registry:main');\n    registry.injection('renderer', '_viewRegistry', '-view-registry:main');\n    registry.injection('event_dispatcher:main', '_viewRegistry', '-view-registry:main');\n\n    registry.injection('route', '_topLevelViewTemplate', 'template:-outlet');\n\n    registry.injection('view:-outlet', 'namespace', 'application:main');\n\n    registry.injection('controller', 'target', 'router:main');\n    registry.injection('controller', 'namespace', 'application:main');\n\n    registry.injection('router', '_bucketCache', (0, _container.privatize)(_templateObject));\n    registry.injection('route', '_bucketCache', (0, _container.privatize)(_templateObject));\n\n    registry.injection('route', 'router', 'router:main');\n\n    // Register the routing service...\n    registry.register('service:-routing', _emberRouting.RoutingService);\n    // Then inject the app router into it\n    registry.injection('service:-routing', 'router', 'router:main');\n\n    // DEBUGGING\n    registry.register('resolver-for-debugging:main', registry.resolver, { instantiate: false });\n    registry.injection('container-debug-adapter:main', 'resolver', 'resolver-for-debugging:main');\n    registry.injection('data-adapter:main', 'containerDebugAdapter', 'container-debug-adapter:main');\n    // Custom resolver authors may want to register their own ContainerDebugAdapter with this key\n\n    registry.register('container-debug-adapter:main', _emberExtensionSupport.ContainerDebugAdapter);\n\n    registry.register('component-lookup:main', _emberViews.ComponentLookup);\n  }\n\n  exports.default = Engine;\n});","enifed('ember-application/system/resolver', ['exports', 'ember-utils', 'ember-metal', 'ember-debug', 'ember-runtime', 'ember-application/utils/validate-type', 'ember-glimmer'], function (exports, _emberUtils, _emberMetal, _emberDebug, _emberRuntime, _validateType, _emberGlimmer) {\n  'use strict';\n\n  exports.Resolver = undefined;\n  /**\n  @module @ember/application\n  */\n\n  var Resolver = exports.Resolver = _emberRuntime.Object.extend({\n    /*\n      This will be set to the Application instance when it is\n      created.\n       @property namespace\n    */\n    namespace: null,\n    normalize: null, // required\n    resolve: null, // required\n    parseName: null, // required\n    lookupDescription: null, // required\n    makeToString: null, // required\n    resolveOther: null, // required\n    _logLookup: null // required\n  });\n\n  /**\n    The DefaultResolver defines the default lookup rules to resolve\n    container lookups before consulting the container for registered\n    items:\n  \n    * templates are looked up on `Ember.TEMPLATES`\n    * other names are looked up on the application after converting\n      the name. For example, `controller:post` looks up\n      `App.PostController` by default.\n    * there are some nuances (see examples below)\n  \n    ### How Resolving Works\n  \n    The container calls this object's `resolve` method with the\n    `fullName` argument.\n  \n    It first parses the fullName into an object using `parseName`.\n  \n    Then it checks for the presence of a type-specific instance\n    method of the form `resolve[Type]` and calls it if it exists.\n    For example if it was resolving 'template:post', it would call\n    the `resolveTemplate` method.\n  \n    Its last resort is to call the `resolveOther` method.\n  \n    The methods of this object are designed to be easy to override\n    in a subclass. For example, you could enhance how a template\n    is resolved like so:\n  \n    ```app/app.js\n    import Application from '@ember/application';\n    import GlobalsResolver from '@ember/application/globals-resolver';\n  \n    App = Application.create({\n      Resolver: GlobalsResolver.extend({\n        resolveTemplate(parsedName) {\n          let resolvedTemplate = this._super(parsedName);\n          if (resolvedTemplate) { return resolvedTemplate; }\n  \n          return Ember.TEMPLATES['not_found'];\n        }\n      })\n    });\n    ```\n  \n    Some examples of how names are resolved:\n  \n    ```text\n    'template:post'           //=> Ember.TEMPLATES['post']\n    'template:posts/byline'   //=> Ember.TEMPLATES['posts/byline']\n    'template:posts.byline'   //=> Ember.TEMPLATES['posts/byline']\n    'template:blogPost'       //=> Ember.TEMPLATES['blog-post']\n    'controller:post'         //=> App.PostController\n    'controller:posts.index'  //=> App.PostsIndexController\n    'controller:blog/post'    //=> Blog.PostController\n    'controller:basic'        //=> Controller\n    'route:post'              //=> App.PostRoute\n    'route:posts.index'       //=> App.PostsIndexRoute\n    'route:blog/post'         //=> Blog.PostRoute\n    'route:basic'             //=> Route\n    'foo:post'                //=> App.PostFoo\n    'model:post'              //=> App.Post\n    ```\n  \n    @class GlobalsResolver\n    @extends EmberObject\n    @public\n  */\n\n  var DefaultResolver = _emberRuntime.Object.extend({\n    /**\n      This will be set to the Application instance when it is\n      created.\n       @property namespace\n      @public\n    */\n    namespace: null,\n\n    init: function () {\n      this._parseNameCache = (0, _emberUtils.dictionary)(null);\n    },\n    normalize: function (fullName) {\n      var _fullName$split = fullName.split(':'),\n          type = _fullName$split[0],\n          name = _fullName$split[1];\n\n      (true && !(fullName.split(':').length === 2) && (0, _emberDebug.assert)('Tried to normalize a container name without a colon (:) in it. ' + 'You probably tried to lookup a name that did not contain a type, ' + 'a colon, and a name. A proper lookup name would be `view:post`.', fullName.split(':').length === 2));\n\n\n      if (type !== 'template') {\n        var result = name.replace(/(\\.|_|-)./g, function (m) {\n          return m.charAt(1).toUpperCase();\n        });\n\n        return type + ':' + result;\n      } else {\n        return fullName;\n      }\n    },\n    resolve: function (fullName) {\n      var parsedName = this.parseName(fullName);\n      var resolveMethodName = parsedName.resolveMethodName;\n      var resolved = void 0;\n\n      if (this[resolveMethodName]) {\n        resolved = this[resolveMethodName](parsedName);\n      }\n\n      resolved = resolved || this.resolveOther(parsedName);\n\n      if (true) {\n        if (parsedName.root && parsedName.root.LOG_RESOLVER) {\n          this._logLookup(resolved, parsedName);\n        }\n      }\n\n      if (resolved) {\n        (0, _validateType.default)(resolved, parsedName);\n      }\n\n      return resolved;\n    },\n    parseName: function (fullName) {\n      return this._parseNameCache[fullName] || (this._parseNameCache[fullName] = this._parseName(fullName));\n    },\n    _parseName: function (fullName) {\n      var _fullName$split2 = fullName.split(':'),\n          type = _fullName$split2[0],\n          fullNameWithoutType = _fullName$split2[1];\n\n      var name = fullNameWithoutType;\n      var namespace = (0, _emberMetal.get)(this, 'namespace');\n      var root = namespace;\n      var lastSlashIndex = name.lastIndexOf('/');\n      var dirname = lastSlashIndex !== -1 ? name.slice(0, lastSlashIndex) : null;\n\n      if (type !== 'template' && lastSlashIndex !== -1) {\n        var parts = name.split('/');\n        name = parts[parts.length - 1];\n        var namespaceName = _emberRuntime.String.capitalize(parts.slice(0, -1).join('.'));\n        root = _emberRuntime.Namespace.byName(namespaceName);\n\n        (true && !(root) && (0, _emberDebug.assert)('You are looking for a ' + name + ' ' + type + ' in the ' + namespaceName + ' namespace, but the namespace could not be found', root));\n      }\n\n      var resolveMethodName = fullNameWithoutType === 'main' ? 'Main' : _emberRuntime.String.classify(type);\n\n      if (!(name && type)) {\n        throw new TypeError('Invalid fullName: `' + fullName + '`, must be of the form `type:name` ');\n      }\n\n      return {\n        fullName: fullName,\n        type: type,\n        fullNameWithoutType: fullNameWithoutType,\n        dirname: dirname,\n        name: name,\n        root: root,\n        resolveMethodName: 'resolve' + resolveMethodName\n      };\n    },\n    lookupDescription: function (fullName) {\n      var parsedName = this.parseName(fullName);\n      var description = void 0;\n\n      if (parsedName.type === 'template') {\n        return 'template at ' + parsedName.fullNameWithoutType.replace(/\\./g, '/');\n      }\n\n      description = parsedName.root + '.' + _emberRuntime.String.classify(parsedName.name).replace(/\\./g, '');\n\n      if (parsedName.type !== 'model') {\n        description += _emberRuntime.String.classify(parsedName.type);\n      }\n\n      return description;\n    },\n    makeToString: function (factory) {\n      return factory.toString();\n    },\n    useRouterNaming: function (parsedName) {\n      if (parsedName.name === 'basic') {\n        parsedName.name = '';\n      } else {\n        parsedName.name = parsedName.name.replace(/\\./g, '_');\n      }\n    },\n    resolveTemplate: function (parsedName) {\n      var templateName = parsedName.fullNameWithoutType.replace(/\\./g, '/');\n\n      return (0, _emberGlimmer.getTemplate)(templateName) || (0, _emberGlimmer.getTemplate)(_emberRuntime.String.decamelize(templateName));\n    },\n    resolveView: function (parsedName) {\n      this.useRouterNaming(parsedName);\n      return this.resolveOther(parsedName);\n    },\n    resolveController: function (parsedName) {\n      this.useRouterNaming(parsedName);\n      return this.resolveOther(parsedName);\n    },\n    resolveRoute: function (parsedName) {\n      this.useRouterNaming(parsedName);\n      return this.resolveOther(parsedName);\n    },\n    resolveModel: function (parsedName) {\n      var className = _emberRuntime.String.classify(parsedName.name);\n      var factory = (0, _emberMetal.get)(parsedName.root, className);\n\n      return factory;\n    },\n    resolveHelper: function (parsedName) {\n      return this.resolveOther(parsedName);\n    },\n    resolveOther: function (parsedName) {\n      var className = _emberRuntime.String.classify(parsedName.name) + _emberRuntime.String.classify(parsedName.type);\n      var factory = (0, _emberMetal.get)(parsedName.root, className);\n      return factory;\n    },\n    resolveMain: function (parsedName) {\n      var className = _emberRuntime.String.classify(parsedName.type);\n      return (0, _emberMetal.get)(parsedName.root, className);\n    },\n    knownForType: function (type) {\n      var namespace = (0, _emberMetal.get)(this, 'namespace');\n      var suffix = _emberRuntime.String.classify(type);\n      var typeRegexp = new RegExp(suffix + '$');\n\n      var known = (0, _emberUtils.dictionary)(null);\n      var knownKeys = Object.keys(namespace);\n      for (var index = 0; index < knownKeys.length; index++) {\n        var name = knownKeys[index];\n\n        if (typeRegexp.test(name)) {\n          var containerName = this.translateToContainerFullname(type, name);\n\n          known[containerName] = true;\n        }\n      }\n\n      return known;\n    },\n    translateToContainerFullname: function (type, name) {\n      var suffix = _emberRuntime.String.classify(type);\n      var namePrefix = name.slice(0, suffix.length * -1);\n      var dasherizedName = _emberRuntime.String.dasherize(namePrefix);\n\n      return type + ':' + dasherizedName;\n    }\n  });\n\n  exports.default = DefaultResolver;\n\n\n  if (true) {\n    DefaultResolver.reopen({\n      _logLookup: function (found, parsedName) {\n        var symbol = found ? '[✓]' : '[ ]';\n\n        var padding = void 0;\n        if (parsedName.fullName.length > 60) {\n          padding = '.';\n        } else {\n          padding = new Array(60 - parsedName.fullName.length).join('.');\n        }\n\n        (0, _emberDebug.info)(symbol, parsedName.fullName, padding, this.lookupDescription(parsedName.fullName));\n      }\n    });\n  }\n});","enifed('ember-application/utils/validate-type', ['exports', 'ember-debug'], function (exports, _emberDebug) {\n  'use strict';\n\n  exports.default = validateType;\n\n\n  var VALIDATED_TYPES = {\n    route: ['assert', 'isRouteFactory', 'Ember.Route'],\n    component: ['deprecate', 'isComponentFactory', 'Ember.Component'],\n    view: ['deprecate', 'isViewFactory', 'Ember.View'],\n    service: ['deprecate', 'isServiceFactory', 'Ember.Service']\n  };\n\n  function validateType(resolvedType, parsedName) {\n    var validationAttributes = VALIDATED_TYPES[parsedName.type];\n\n    if (!validationAttributes) {\n      return;\n    }\n\n    var factoryFlag = validationAttributes[1],\n        expectedType = validationAttributes[2];\n    (true && !(!!resolvedType[factoryFlag]) && (0, _emberDebug.assert)('Expected ' + parsedName.fullName + ' to resolve to an ' + expectedType + ' but ' + ('instead it was ' + resolvedType + '.'), !!resolvedType[factoryFlag]));\n  }\n});","enifed('ember-babel', ['exports'], function (exports) {\n  'use strict';\n\n  exports.classCallCheck = classCallCheck;\n  exports.inherits = inherits;\n  exports.taggedTemplateLiteralLoose = taggedTemplateLiteralLoose;\n  exports.createClass = createClass;\n  exports.defaults = defaults;\n  function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  function inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : defaults(subClass, superClass);\n  }\n\n  function taggedTemplateLiteralLoose(strings, raw) {\n    strings.raw = raw;\n    return strings;\n  }\n\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function defaults(obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  }\n\n  var possibleConstructorReturn = exports.possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError('this hasn\\'t been initialized - super() hasn\\'t been called');\n    }\n    return call && (typeof call === 'object' || typeof call === 'function') ? call : self;\n  };\n\n  var slice = exports.slice = Array.prototype.slice;\n});","enifed(\"ember-console\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  /**\n     @module ember\n  */\n  /**\n    Inside Ember-Metal, simply uses the methods from `imports.console`.\n    Override this to provide more robust logging functionality.\n  \n    @class Logger\n    @namespace Ember\n    @public\n  */\n  var index = {\n    log: function () {\n      var _console;\n\n      return (_console = console).log.apply(_console, arguments);\n    },\n    warn: function () {\n      var _console2;\n\n      return (_console2 = console).warn.apply(_console2, arguments);\n    },\n    error: function () {\n      var _console3;\n\n      return (_console3 = console).error.apply(_console3, arguments);\n    },\n    info: function () {\n      var _console4;\n\n      return (_console4 = console).info.apply(_console4, arguments);\n    },\n    debug: function () {\n      var _console6;\n\n      /* eslint-disable no-console */\n      if (console.debug) {\n        var _console5;\n\n        return (_console5 = console).debug.apply(_console5, arguments);\n      }\n\n      return (_console6 = console).info.apply(_console6, arguments);\n      /* eslint-enable no-console */\n    },\n    assert: function () {\n      var _console7;\n\n      return (_console7 = console).assert.apply(_console7, arguments);\n    }\n  };\n\n  exports.default = index;\n});","enifed('ember-debug/deprecate', ['exports', 'ember-debug/error', 'ember-console', 'ember-environment', 'ember-debug/index', 'ember-debug/handlers'], function (exports, _error, _emberConsole, _emberEnvironment, _index, _handlers) {\n  'use strict';\n\n  exports.missingOptionsUntilDeprecation = exports.missingOptionsIdDeprecation = exports.missingOptionsDeprecation = exports.registerHandler = undefined;\n\n  /**\n   @module @ember/debug\n   @public\n  */\n  /**\n    Allows for runtime registration of handler functions that override the default deprecation behavior.\n    Deprecations are invoked by calls to [@ember/application/deprecations/deprecate](https://emberjs.com/api/ember/release/classes/@ember%2Fapplication%2Fdeprecations/methods/deprecate?anchor=deprecate).\n    The following example demonstrates its usage by registering a handler that throws an error if the\n    message contains the word \"should\", otherwise defers to the default handler.\n  \n    ```javascript\n    import { registerDeprecationHandler } from '@ember/debug';\n  \n    registerDeprecationHandler((message, options, next) => {\n      if (message.indexOf('should') !== -1) {\n        throw new Error(`Deprecation message with should: ${message}`);\n      } else {\n        // defer to whatever handler was registered before this one\n        next(message, options);\n      }\n    });\n    ```\n  \n    The handler function takes the following arguments:\n  \n    <ul>\n      <li> <code>message</code> - The message received from the deprecation call.</li>\n      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n        <ul>\n          <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n          <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n        </ul>\n      <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n    </ul>\n  \n    @public\n    @static\n    @method registerDeprecationHandler\n    @for @ember/debug\n    @param handler {Function} A function to handle deprecation calls.\n    @since 2.1.0\n  */\n  /*global __fail__*/\n  var registerHandler = function () {};\n  var missingOptionsDeprecation = void 0,\n      missingOptionsIdDeprecation = void 0,\n      missingOptionsUntilDeprecation = void 0,\n      deprecate = void 0;\n\n  if (true) {\n    exports.registerHandler = registerHandler = function registerHandler(handler) {\n      (0, _handlers.registerHandler)('deprecate', handler);\n    };\n\n    var formatMessage = function formatMessage(_message, options) {\n      var message = _message;\n\n      if (options && options.id) {\n        message = message + (' [deprecation id: ' + options.id + ']');\n      }\n\n      if (options && options.url) {\n        message += ' See ' + options.url + ' for more details.';\n      }\n\n      return message;\n    };\n\n    registerHandler(function logDeprecationToConsole(message, options) {\n      var updatedMessage = formatMessage(message, options);\n\n      _emberConsole.default.warn('DEPRECATION: ' + updatedMessage);\n    });\n\n    var captureErrorForStack = void 0;\n\n    if (new Error().stack) {\n      captureErrorForStack = function () {\n        return new Error();\n      };\n    } else {\n      captureErrorForStack = function () {\n        try {\n          __fail__.fail();\n        } catch (e) {\n          return e;\n        }\n      };\n    }\n\n    registerHandler(function logDeprecationStackTrace(message, options, next) {\n      if (_emberEnvironment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {\n        var stackStr = '';\n        var error = captureErrorForStack();\n        var stack = void 0;\n\n        if (error.stack) {\n          if (error['arguments']) {\n            // Chrome\n            stack = error.stack.replace(/^\\s+at\\s+/gm, '').replace(/^([^\\(]+?)([\\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm, '{anonymous}($1)').split('\\n');\n            stack.shift();\n          } else {\n            // Firefox\n            stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').replace(/^\\(/gm, '{anonymous}(').split('\\n');\n          }\n\n          stackStr = '\\n    ' + stack.slice(2).join('\\n    ');\n        }\n\n        var updatedMessage = formatMessage(message, options);\n\n        _emberConsole.default.warn('DEPRECATION: ' + updatedMessage + stackStr);\n      } else {\n        next.apply(undefined, arguments);\n      }\n    });\n\n    registerHandler(function raiseOnDeprecation(message, options, next) {\n      if (_emberEnvironment.ENV.RAISE_ON_DEPRECATION) {\n        var updatedMessage = formatMessage(message);\n\n        throw new _error.default(updatedMessage);\n      } else {\n        next.apply(undefined, arguments);\n      }\n    });\n\n    exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `deprecate` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include `id` and `until` properties.';\n    exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `deprecate` you must provide `id` in options.';\n    exports.missingOptionsUntilDeprecation = missingOptionsUntilDeprecation = 'When calling `deprecate` you must provide `until` in options.';\n    /**\n     @module @ember/application\n     @public\n     */\n    /**\n      Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only).\n       * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n       @method deprecate\n      @for @ember/application/deprecations\n      @param {String} message A description of the deprecation.\n      @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.\n      @param {Object} options\n      @param {String} options.id A unique id for this deprecation. The id can be\n        used by Ember debugging tools to change the behavior (raise, log or silence)\n        for that specific deprecation. The id should be namespaced by dots, e.g.\n        \"view.helper.select\".\n      @param {string} options.until The version of Ember when this deprecation\n        warning will be removed.\n      @param {String} [options.url] An optional url to the transition guide on the\n        emberjs.com website.\n      @static\n      @public\n      @since 1.0.0\n    */\n    deprecate = function deprecate(message, test, options) {\n      if (_emberEnvironment.ENV._ENABLE_DEPRECATION_OPTIONS_SUPPORT !== true) {\n        (0, _index.assert)(missingOptionsDeprecation, options && (options.id || options.until));\n        (0, _index.assert)(missingOptionsIdDeprecation, options.id);\n        (0, _index.assert)(missingOptionsUntilDeprecation, options.until);\n      }\n\n      if ((!options || !options.id && !options.until) && _emberEnvironment.ENV._ENABLE_DEPRECATION_OPTIONS_SUPPORT === true) {\n        deprecate(missingOptionsDeprecation, false, {\n          id: 'ember-debug.deprecate-options-missing',\n          until: '3.0.0',\n          url: 'https://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n        });\n      }\n\n      if (options && !options.id && _emberEnvironment.ENV._ENABLE_DEPRECATION_OPTIONS_SUPPORT === true) {\n        deprecate(missingOptionsIdDeprecation, false, {\n          id: 'ember-debug.deprecate-id-missing',\n          until: '3.0.0',\n          url: 'https://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n        });\n      }\n\n      if (options && !options.until && _emberEnvironment.ENV._ENABLE_DEPRECATION_OPTIONS_SUPPORT === true) {\n        deprecate(missingOptionsUntilDeprecation, options && options.until, {\n          id: 'ember-debug.deprecate-until-missing',\n          until: '3.0.0',\n          url: 'https://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n        });\n      }\n\n      _handlers.invoke.apply(undefined, ['deprecate'].concat(Array.prototype.slice.call(arguments)));\n    };\n  }\n\n  exports.default = deprecate;\n  exports.registerHandler = registerHandler;\n  exports.missingOptionsDeprecation = missingOptionsDeprecation;\n  exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;\n  exports.missingOptionsUntilDeprecation = missingOptionsUntilDeprecation;\n});","enifed(\"ember-debug/error\", [\"exports\", \"ember-babel\"], function (exports, _emberBabel) {\n  \"use strict\";\n\n  /**\n   @module @ember/error\n  */\n  function ExtendBuiltin(klass) {\n    function ExtendableBuiltin() {\n      klass.apply(this, arguments);\n    }\n\n    ExtendableBuiltin.prototype = Object.create(klass.prototype);\n    ExtendableBuiltin.prototype.constructor = ExtendableBuiltin;\n    return ExtendableBuiltin;\n  }\n\n  /**\n    A subclass of the JavaScript Error object for use in Ember.\n  \n    @class EmberError\n    @extends Error\n    @constructor\n    @public\n  */\n\n  var EmberError = function (_ExtendBuiltin) {\n    (0, _emberBabel.inherits)(EmberError, _ExtendBuiltin);\n\n    function EmberError(message) {\n      (0, _emberBabel.classCallCheck)(this, EmberError);\n\n      var _this = (0, _emberBabel.possibleConstructorReturn)(this, _ExtendBuiltin.call(this));\n\n      if (!(_this instanceof EmberError)) {\n        var _ret;\n\n        return _ret = new EmberError(message), (0, _emberBabel.possibleConstructorReturn)(_this, _ret);\n      }\n\n      var error = Error.call(_this, message);\n      _this.stack = error.stack;\n      _this.description = error.description;\n      _this.fileName = error.fileName;\n      _this.lineNumber = error.lineNumber;\n      _this.message = error.message;\n      _this.name = error.name;\n      _this.number = error.number;\n      _this.code = error.code;\n      return _this;\n    }\n\n    return EmberError;\n  }(ExtendBuiltin(Error));\n\n  exports.default = EmberError;\n});","enifed('ember-debug/features', ['exports', 'ember-environment', 'ember/features'], function (exports, _emberEnvironment, _features) {\n  'use strict';\n\n  exports.default = isEnabled;\n  var FEATURES = _features.FEATURES;\n\n\n  /**\n   @module ember\n  */\n\n  /**\n    The hash of enabled Canary features. Add to this, any canary features\n    before creating your application.\n  \n    Alternatively (and recommended), you can also define `EmberENV.FEATURES`\n    if you need to enable features flagged at runtime.\n  \n    @class FEATURES\n    @namespace Ember\n    @static\n    @since 1.1.0\n    @public\n  */\n\n  // Auto-generated\n\n  /**\n    Determine whether the specified `feature` is enabled. Used by Ember's\n    build tools to exclude experimental features from beta/stable builds.\n  \n    You can define the following configuration options:\n  \n    * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly\n      enabled/disabled.\n  \n    @method isEnabled\n    @param {String} feature The feature to check\n    @return {Boolean}\n    @for Ember.FEATURES\n    @since 1.1.0\n    @public\n  */\n  function isEnabled(feature) {\n    var featureValue = FEATURES[feature];\n\n    if (featureValue === true || featureValue === false || featureValue === undefined) {\n      return featureValue;\n    } else if (_emberEnvironment.ENV.ENABLE_OPTIONAL_FEATURES) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n});","enifed('ember-debug/handlers', ['exports'], function (exports) {\n  'use strict';\n\n  var HANDLERS = exports.HANDLERS = {};\n\n  var registerHandler = function () {};\n  var invoke = function () {};\n\n  if (true) {\n    exports.registerHandler = registerHandler = function registerHandler(type, callback) {\n      var nextHandler = HANDLERS[type] || function () {};\n\n      HANDLERS[type] = function (message, options) {\n        callback(message, options, nextHandler);\n      };\n    };\n\n    exports.invoke = invoke = function invoke(type, message, test, options) {\n      if (test) {\n        return;\n      }\n\n      var handlerForType = HANDLERS[type];\n\n      if (handlerForType) {\n        handlerForType(message, options);\n      }\n    };\n  }\n\n  exports.registerHandler = registerHandler;\n  exports.invoke = invoke;\n});","enifed('ember-debug/index', ['exports', 'ember-debug/warn', 'ember-debug/deprecate', 'ember-debug/features', 'ember-debug/error', 'ember-debug/testing', 'ember-environment', 'ember-console', 'ember/features'], function (exports, _warn2, _deprecate2, _features, _error, _testing, _emberEnvironment, _emberConsole, _features2) {\n  'use strict';\n\n  exports._warnIfUsingStrippedFeatureFlags = exports.getDebugFunction = exports.setDebugFunction = exports.deprecateFunc = exports.runInDebug = exports.debugFreeze = exports.debugSeal = exports.deprecate = exports.debug = exports.warn = exports.info = exports.assert = exports.setTesting = exports.isTesting = exports.Error = exports.isFeatureEnabled = exports.registerDeprecationHandler = exports.registerWarnHandler = undefined;\n  Object.defineProperty(exports, 'registerWarnHandler', {\n    enumerable: true,\n    get: function () {\n      return _warn2.registerHandler;\n    }\n  });\n  Object.defineProperty(exports, 'registerDeprecationHandler', {\n    enumerable: true,\n    get: function () {\n      return _deprecate2.registerHandler;\n    }\n  });\n  Object.defineProperty(exports, 'isFeatureEnabled', {\n    enumerable: true,\n    get: function () {\n      return _features.default;\n    }\n  });\n  Object.defineProperty(exports, 'Error', {\n    enumerable: true,\n    get: function () {\n      return _error.default;\n    }\n  });\n  Object.defineProperty(exports, 'isTesting', {\n    enumerable: true,\n    get: function () {\n      return _testing.isTesting;\n    }\n  });\n  Object.defineProperty(exports, 'setTesting', {\n    enumerable: true,\n    get: function () {\n      return _testing.setTesting;\n    }\n  });\n  var DEFAULT_FEATURES = _features2.DEFAULT_FEATURES,\n      FEATURES = _features2.FEATURES;\n\n\n  // These are the default production build versions:\n  var noop = function () {};\n\n  var assert = noop;\n  var info = noop;\n  var warn = noop;\n  var debug = noop;\n  var deprecate = noop;\n  var debugSeal = noop;\n  var debugFreeze = noop;\n  var runInDebug = noop;\n  var setDebugFunction = noop;\n  var getDebugFunction = noop;\n\n  var deprecateFunc = function () {\n    return arguments[arguments.length - 1];\n  };\n\n  if (true) {\n    exports.setDebugFunction = setDebugFunction = function (type, callback) {\n      switch (type) {\n        case 'assert':\n          return exports.assert = assert = callback;\n        case 'info':\n          return exports.info = info = callback;\n        case 'warn':\n          return exports.warn = warn = callback;\n        case 'debug':\n          return exports.debug = debug = callback;\n        case 'deprecate':\n          return exports.deprecate = deprecate = callback;\n        case 'debugSeal':\n          return exports.debugSeal = debugSeal = callback;\n        case 'debugFreeze':\n          return exports.debugFreeze = debugFreeze = callback;\n        case 'runInDebug':\n          return exports.runInDebug = runInDebug = callback;\n        case 'deprecateFunc':\n          return exports.deprecateFunc = deprecateFunc = callback;\n      }\n    };\n\n    exports.getDebugFunction = getDebugFunction = function (type) {\n      switch (type) {\n        case 'assert':\n          return assert;\n        case 'info':\n          return info;\n        case 'warn':\n          return warn;\n        case 'debug':\n          return debug;\n        case 'deprecate':\n          return deprecate;\n        case 'debugSeal':\n          return debugSeal;\n        case 'debugFreeze':\n          return debugFreeze;\n        case 'runInDebug':\n          return runInDebug;\n        case 'deprecateFunc':\n          return deprecateFunc;\n      }\n    };\n  }\n\n  /**\n  @module @ember/debug\n  */\n\n  if (true) {\n    /**\n      Define an assertion that will throw an exception if the condition is not met.\n       * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n       ```javascript\n      import { assert } from '@ember/debug';\n       // Test for truthiness\n      assert('Must pass a valid object', obj);\n       // Fail unconditionally\n      assert('This code path should never be run');\n      ```\n       @method assert\n      @static\n      @for @ember/debug\n      @param {String} desc A description of the assertion. This will become\n        the text of the Error thrown if the assertion fails.\n      @param {Boolean} test Must be truthy for the assertion to pass. If\n        falsy, an exception will be thrown.\n      @public\n      @since 1.0.0\n    */\n    setDebugFunction('assert', function assert(desc, test) {\n      if (!test) {\n        throw new _error.default('Assertion Failed: ' + desc);\n      }\n    });\n\n    /**\n      Display a debug notice.\n       * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n       ```javascript\n      import { debug } from '@ember/debug';\n       debug('I\\'m a debug notice!');\n      ```\n       @method debug\n      @for @ember/debug\n      @static\n      @param {String} message A debug message to display.\n      @public\n    */\n    setDebugFunction('debug', function debug(message) {\n      _emberConsole.default.debug('DEBUG: ' + message);\n    });\n\n    /**\n      Display an info notice.\n       * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n       @method info\n      @private\n    */\n    setDebugFunction('info', function info() {\n      _emberConsole.default.info.apply(undefined, arguments);\n    });\n\n    /**\n     @module @ember/application\n     @public\n    */\n\n    /**\n      Alias an old, deprecated method with its new counterpart.\n       Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only) when the assigned method is called.\n       * In a production build, this method is defined as an empty function (NOP).\n       ```javascript\n      import { deprecateFunc } from '@ember/application/deprecations';\n       Ember.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);\n      ```\n       @method deprecateFunc\n      @static\n      @for @ember/application/deprecations\n      @param {String} message A description of the deprecation.\n      @param {Object} [options] The options object for `deprecate`.\n      @param {Function} func The new function called to replace its deprecated counterpart.\n      @return {Function} A new function that wraps the original function with a deprecation warning\n      @private\n    */\n    setDebugFunction('deprecateFunc', function deprecateFunc() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args.length === 3) {\n        var message = args[0],\n            options = args[1],\n            func = args[2];\n\n        return function () {\n          deprecate(message, false, options);\n          return func.apply(this, arguments);\n        };\n      } else {\n        var _message = args[0],\n            _func = args[1];\n\n        return function () {\n          deprecate(_message);\n          return _func.apply(this, arguments);\n        };\n      }\n    });\n\n    /**\n     @module @ember/debug\n     @public\n    */\n    /**\n      Run a function meant for debugging.\n       * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n       ```javascript\n      import Component from '@ember/component';\n      import { runInDebug } from '@ember/debug';\n       runInDebug(() => {\n        Component.reopen({\n          didInsertElement() {\n            console.log(\"I'm happy\");\n          }\n        });\n      });\n      ```\n       @method runInDebug\n      @for @ember/debug\n      @static\n      @param {Function} func The function to be executed.\n      @since 1.5.0\n      @public\n    */\n    setDebugFunction('runInDebug', function runInDebug(func) {\n      func();\n    });\n\n    setDebugFunction('debugSeal', function debugSeal(obj) {\n      Object.seal(obj);\n    });\n\n    setDebugFunction('debugFreeze', function debugFreeze(obj) {\n      Object.freeze(obj);\n    });\n\n    setDebugFunction('deprecate', _deprecate2.default);\n\n    setDebugFunction('warn', _warn2.default);\n  }\n\n  var _warnIfUsingStrippedFeatureFlags = void 0;\n\n  if (true && !(0, _testing.isTesting)()) {\n    /**\n       Will call `warn()` if ENABLE_OPTIONAL_FEATURES or\n       any specific FEATURES flag is truthy.\n        This method is called automatically in debug canary builds.\n        @private\n       @method _warnIfUsingStrippedFeatureFlags\n       @return {void}\n    */\n    exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags = function _warnIfUsingStrippedFeatureFlags(FEATURES, knownFeatures, featuresWereStripped) {\n      if (featuresWereStripped) {\n        warn('Ember.ENV.ENABLE_OPTIONAL_FEATURES is only available in canary builds.', !_emberEnvironment.ENV.ENABLE_OPTIONAL_FEATURES, { id: 'ember-debug.feature-flag-with-features-stripped' });\n\n        var keys = Object.keys(FEATURES || {});\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          if (key === 'isEnabled' || !(key in knownFeatures)) {\n            continue;\n          }\n\n          warn('FEATURE[\"' + key + '\"] is set as enabled, but FEATURE flags are only available in canary builds.', !FEATURES[key], { id: 'ember-debug.feature-flag-with-features-stripped' });\n        }\n      }\n    };\n\n    // Complain if they're using FEATURE flags in builds other than canary\n    FEATURES['features-stripped-test'] = true;\n    var featuresWereStripped = true;\n\n    if ((0, _features.default)('features-stripped-test')) {\n      featuresWereStripped = false;\n    }\n\n    delete FEATURES['features-stripped-test'];\n    _warnIfUsingStrippedFeatureFlags(_emberEnvironment.ENV.FEATURES, DEFAULT_FEATURES, featuresWereStripped);\n\n    // Inform the developer about the Ember Inspector if not installed.\n    var isFirefox = _emberEnvironment.environment.isFirefox;\n    var isChrome = _emberEnvironment.environment.isChrome;\n\n    if (typeof window !== 'undefined' && (isFirefox || isChrome) && window.addEventListener) {\n      window.addEventListener('load', function () {\n        if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset.emberExtension) {\n          var downloadURL = void 0;\n\n          if (isChrome) {\n            downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';\n          } else if (isFirefox) {\n            downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';\n          }\n\n          debug('For more advanced debugging, install the Ember Inspector from ' + downloadURL);\n        }\n      }, false);\n    }\n  }\n\n  exports.assert = assert;\n  exports.info = info;\n  exports.warn = warn;\n  exports.debug = debug;\n  exports.deprecate = deprecate;\n  exports.debugSeal = debugSeal;\n  exports.debugFreeze = debugFreeze;\n  exports.runInDebug = runInDebug;\n  exports.deprecateFunc = deprecateFunc;\n  exports.setDebugFunction = setDebugFunction;\n  exports.getDebugFunction = getDebugFunction;\n  exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;\n});","enifed(\"ember-debug/testing\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.isTesting = isTesting;\n  exports.setTesting = setTesting;\n  var testing = false;\n\n  function isTesting() {\n    return testing;\n  }\n\n  function setTesting(value) {\n    testing = !!value;\n  }\n});","enifed('ember-debug/warn', ['exports', 'ember-environment', 'ember-console', 'ember-debug/deprecate', 'ember-debug/index', 'ember-debug/handlers'], function (exports, _emberEnvironment, _emberConsole, _deprecate, _index, _handlers) {\n  'use strict';\n\n  exports.missingOptionsDeprecation = exports.missingOptionsIdDeprecation = exports.registerHandler = undefined;\n\n\n  var registerHandler = function () {};\n  var warn = function () {};\n  var missingOptionsDeprecation = void 0,\n      missingOptionsIdDeprecation = void 0;\n\n  /**\n  @module @ember/debug\n  */\n\n  if (true) {\n    /**\n      Allows for runtime registration of handler functions that override the default warning behavior.\n      Warnings are invoked by calls made to [@ember/debug/warn](https://emberjs.com/api/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).\n      The following example demonstrates its usage by registering a handler that does nothing overriding Ember's\n      default warning behavior.\n       ```javascript\n      import { registerWarnHandler } from '@ember/debug';\n       // next is not called, so no warnings get the default behavior\n      registerWarnHandler(() => {});\n      ```\n       The handler function takes the following arguments:\n       <ul>\n        <li> <code>message</code> - The message received from the warn call. </li>\n        <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n          <ul>\n            <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n          </ul>\n        <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n      </ul>\n       @public\n      @static\n      @method registerWarnHandler\n      @for @ember/debug\n      @param handler {Function} A function to handle warnings.\n      @since 2.1.0\n    */\n    exports.registerHandler = registerHandler = function registerHandler(handler) {\n      (0, _handlers.registerHandler)('warn', handler);\n    };\n\n    registerHandler(function logWarning(message) {\n      _emberConsole.default.warn('WARNING: ' + message);\n      if ('trace' in _emberConsole.default) {\n        _emberConsole.default.trace();\n      }\n    });\n\n    exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `warn` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include an `id` property.';\n    exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `warn` you must provide `id` in options.';\n\n    /**\n      Display a warning with the provided message.\n       * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n       @method warn\n      @for @ember/debug\n      @static\n      @param {String} message A warning to display.\n      @param {Boolean} test An optional boolean. If falsy, the warning\n        will be displayed.\n      @param {Object} options An object that can be used to pass a unique\n        `id` for this warning.  The `id` can be used by Ember debugging tools\n        to change the behavior (raise, log, or silence) for that specific warning.\n        The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"\n      @public\n      @since 1.0.0\n    */\n    warn = function warn(message, test, options) {\n      if (arguments.length === 2 && typeof test === 'object') {\n        options = test;\n        test = false;\n      }\n\n      if (_emberEnvironment.ENV._ENABLE_WARN_OPTIONS_SUPPORT !== true) {\n        (0, _index.assert)(missingOptionsDeprecation, options);\n        (0, _index.assert)(missingOptionsIdDeprecation, options && options.id);\n      }\n\n      if (!options && _emberEnvironment.ENV._ENABLE_WARN_OPTIONS_SUPPORT === true) {\n        (0, _deprecate.default)(missingOptionsDeprecation, false, {\n          id: 'ember-debug.warn-options-missing',\n          until: '3.0.0',\n          url: 'https://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n        });\n      }\n\n      if (options && !options.id && _emberEnvironment.ENV._ENABLE_WARN_OPTIONS_SUPPORT === true) {\n        (0, _deprecate.default)(missingOptionsIdDeprecation, false, {\n          id: 'ember-debug.warn-id-missing',\n          until: '3.0.0',\n          url: 'https://emberjs.com/deprecations/v2.x/#toc_ember-debug-function-options'\n        });\n      }\n\n      (0, _handlers.invoke)('warn', message, test, options);\n    };\n  }\n\n  exports.default = warn;\n  exports.registerHandler = registerHandler;\n  exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;\n  exports.missingOptionsDeprecation = missingOptionsDeprecation;\n});","enifed('ember-environment', ['exports'], function (exports) {\n  'use strict';\n\n  /* globals global, window, self, mainContext */\n\n  // from lodash to catch fake globals\n  function checkGlobal(value) {\n    return value && value.Object === Object ? value : undefined;\n  }\n\n  // element ids can ruin global miss checks\n  function checkElementIdShadowing(value) {\n    return value && value.nodeType === undefined ? value : undefined;\n  }\n\n  // export real global\n  var global$1 = checkGlobal(checkElementIdShadowing(typeof global === 'object' && global)) || checkGlobal(typeof self === 'object' && self) || checkGlobal(typeof window === 'object' && window) || mainContext || // set before strict mode in Ember loader/wrapper\n  new Function('return this')(); // eval outside of strict mode\n\n  function defaultTrue(v) {\n    return v === false ? false : true;\n  }\n\n  function defaultFalse(v) {\n    return v === true ? true : false;\n  }\n\n  function normalizeExtendPrototypes(obj) {\n    if (obj === false) {\n      return { String: false, Array: false, Function: false };\n    } else if (!obj || obj === true) {\n      return { String: true, Array: true, Function: true };\n    } else {\n      return {\n        String: defaultTrue(obj.String),\n        Array: defaultTrue(obj.Array),\n        Function: defaultTrue(obj.Function)\n      };\n    }\n  }\n\n  /* globals module */\n  /**\n    The hash of environment variables used to control various configuration\n    settings. To specify your own or override default settings, add the\n    desired properties to a global hash named `EmberENV` (or `ENV` for\n    backwards compatibility with earlier versions of Ember). The `EmberENV`\n    hash must be created before loading Ember.\n  \n    @class EmberENV\n    @type Object\n    @public\n  */\n  var ENV = typeof global$1.EmberENV === 'object' && global$1.EmberENV || typeof global$1.ENV === 'object' && global$1.ENV || {};\n\n  // ENABLE_ALL_FEATURES was documented, but you can't actually enable non optional features.\n  if (ENV.ENABLE_ALL_FEATURES) {\n    ENV.ENABLE_OPTIONAL_FEATURES = true;\n  }\n\n  /**\n    Determines whether Ember should add to `Array`, `Function`, and `String`\n    native object prototypes, a few extra methods in order to provide a more\n    friendly API.\n  \n    We generally recommend leaving this option set to true however, if you need\n    to turn it off, you can add the configuration property\n    `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.\n  \n    Note, when disabled (the default configuration for Ember Addons), you will\n    instead have to access all methods and functions from the Ember\n    namespace.\n  \n    @property EXTEND_PROTOTYPES\n    @type Boolean\n    @default true\n    @for EmberENV\n    @public\n  */\n  ENV.EXTEND_PROTOTYPES = normalizeExtendPrototypes(ENV.EXTEND_PROTOTYPES);\n\n  /**\n    The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log\n    a full stack trace during deprecation warnings.\n  \n    @property LOG_STACKTRACE_ON_DEPRECATION\n    @type Boolean\n    @default true\n    @for EmberENV\n    @public\n  */\n  ENV.LOG_STACKTRACE_ON_DEPRECATION = defaultTrue(ENV.LOG_STACKTRACE_ON_DEPRECATION);\n\n  /**\n    The `LOG_VERSION` property, when true, tells Ember to log versions of all\n    dependent libraries in use.\n  \n    @property LOG_VERSION\n    @type Boolean\n    @default true\n    @for EmberENV\n    @public\n  */\n  ENV.LOG_VERSION = defaultTrue(ENV.LOG_VERSION);\n\n  /**\n    Debug parameter you can turn on. This will log all bindings that fire to\n    the console. This should be disabled in production code. Note that you\n    can also enable this from the console or temporarily.\n  \n    @property LOG_BINDINGS\n    @for EmberENV\n    @type Boolean\n    @default false\n    @public\n  */\n  ENV.LOG_BINDINGS = defaultFalse(ENV.LOG_BINDINGS);\n\n  ENV.RAISE_ON_DEPRECATION = defaultFalse(ENV.RAISE_ON_DEPRECATION);\n\n  // check if window exists and actually is the global\n  var hasDOM = typeof window !== 'undefined' && window === global$1 && window.document && window.document.createElement && !ENV.disableBrowserEnvironment; // is this a public thing?\n\n  // legacy imports/exports/lookup stuff (should we keep this??)\n  var originalContext = global$1.Ember || {};\n\n  var context = {\n    // import jQuery\n    imports: originalContext.imports || global$1,\n    // export Ember\n    exports: originalContext.exports || global$1,\n    // search for Namespaces\n    lookup: originalContext.lookup || global$1\n  };\n\n  // TODO: cleanup single source of truth issues with this stuff\n  var environment = hasDOM ? {\n    hasDOM: true,\n    isChrome: !!window.chrome && !window.opera,\n    isFirefox: typeof InstallTrigger !== 'undefined',\n    location: window.location,\n    history: window.history,\n    userAgent: window.navigator.userAgent,\n    window: window\n  } : {\n    hasDOM: false,\n    isChrome: false,\n    isFirefox: false,\n    location: null,\n    history: null,\n    userAgent: 'Lynx (textmode)',\n    window: null\n  };\n\n  exports.ENV = ENV;\n  exports.context = context;\n  exports.environment = environment;\n});","enifed('ember-extension-support/container_debug_adapter', ['exports', 'ember-metal', 'ember-runtime'], function (exports, _emberMetal, _emberRuntime) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    /**\n      The resolver instance of the application\n      being debugged. This property will be injected\n      on creation.\n       @property resolver\n      @default null\n      @public\n    */\n    resolver: null,\n\n    /**\n      Returns true if it is possible to catalog a list of available\n      classes in the resolver for a given type.\n       @method canCatalogEntriesByType\n      @param {String} type The type. e.g. \"model\", \"controller\", \"route\".\n      @return {boolean} whether a list is available for this type.\n      @public\n    */\n    canCatalogEntriesByType: function (type) {\n      if (type === 'model' || type === 'template') {\n        return false;\n      }\n\n      return true;\n    },\n\n\n    /**\n      Returns the available classes a given type.\n       @method catalogEntriesByType\n      @param {String} type The type. e.g. \"model\", \"controller\", \"route\".\n      @return {Array} An array of strings.\n      @public\n    */\n    catalogEntriesByType: function (type) {\n      var namespaces = (0, _emberRuntime.A)(_emberRuntime.Namespace.NAMESPACES);\n      var types = (0, _emberRuntime.A)();\n      var typeSuffixRegex = new RegExp(_emberRuntime.String.classify(type) + '$');\n\n      namespaces.forEach(function (namespace) {\n        if (namespace !== _emberMetal.default) {\n          for (var key in namespace) {\n            if (!namespace.hasOwnProperty(key)) {\n              continue;\n            }\n            if (typeSuffixRegex.test(key)) {\n              var klass = namespace[key];\n              if ((0, _emberRuntime.typeOf)(klass) === 'class') {\n                types.push(_emberRuntime.String.dasherize(key.replace(typeSuffixRegex, '')));\n              }\n            }\n          }\n        }\n      });\n      return types;\n    }\n  });\n});","enifed('ember-extension-support/data_adapter', ['exports', 'ember-utils', 'ember-metal', 'ember-runtime'], function (exports, _emberUtils, _emberMetal, _emberRuntime) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    init: function () {\n      this._super.apply(this, arguments);\n      this.releaseMethods = (0, _emberRuntime.A)();\n    },\n\n\n    /**\n      The container-debug-adapter which is used\n      to list all models.\n       @property containerDebugAdapter\n      @default undefined\n      @since 1.5.0\n      @public\n    **/\n    containerDebugAdapter: undefined,\n\n    /**\n      The number of attributes to send\n      as columns. (Enough to make the record\n      identifiable).\n       @private\n      @property attributeLimit\n      @default 3\n      @since 1.3.0\n    */\n    attributeLimit: 3,\n\n    /**\n       Ember Data > v1.0.0-beta.18\n       requires string model names to be passed\n       around instead of the actual factories.\n        This is a stamp for the Ember Inspector\n       to differentiate between the versions\n       to be able to support older versions too.\n        @public\n       @property acceptsModelName\n     */\n    acceptsModelName: true,\n\n    /**\n      Stores all methods that clear observers.\n      These methods will be called on destruction.\n       @private\n      @property releaseMethods\n      @since 1.3.0\n    */\n    releaseMethods: (0, _emberRuntime.A)(),\n\n    /**\n      Specifies how records can be filtered.\n      Records returned will need to have a `filterValues`\n      property with a key for every name in the returned array.\n       @public\n      @method getFilters\n      @return {Array} List of objects defining filters.\n       The object should have a `name` and `desc` property.\n    */\n    getFilters: function () {\n      return (0, _emberRuntime.A)();\n    },\n\n\n    /**\n      Fetch the model types and observe them for changes.\n       @public\n      @method watchModelTypes\n       @param {Function} typesAdded Callback to call to add types.\n      Takes an array of objects containing wrapped types (returned from `wrapModelType`).\n       @param {Function} typesUpdated Callback to call when a type has changed.\n      Takes an array of objects containing wrapped types.\n       @return {Function} Method to call to remove all observers\n    */\n    watchModelTypes: function (typesAdded, typesUpdated) {\n      var _this = this;\n\n      var modelTypes = this.getModelTypes();\n      var releaseMethods = (0, _emberRuntime.A)();\n      var typesToSend = void 0;\n\n      typesToSend = modelTypes.map(function (type) {\n        var klass = type.klass;\n        var wrapped = _this.wrapModelType(klass, type.name);\n        releaseMethods.push(_this.observeModelType(type.name, typesUpdated));\n        return wrapped;\n      });\n\n      typesAdded(typesToSend);\n\n      var release = function () {\n        releaseMethods.forEach(function (fn) {\n          return fn();\n        });\n        _this.releaseMethods.removeObject(release);\n      };\n      this.releaseMethods.pushObject(release);\n      return release;\n    },\n    _nameToClass: function (type) {\n      if (typeof type === 'string') {\n        var owner = (0, _emberUtils.getOwner)(this);\n        var Factory = owner.factoryFor('model:' + type);\n        type = Factory && Factory.class;\n      }\n      return type;\n    },\n\n\n    /**\n      Fetch the records of a given type and observe them for changes.\n       @public\n      @method watchRecords\n       @param {String} modelName The model name.\n       @param {Function} recordsAdded Callback to call to add records.\n      Takes an array of objects containing wrapped records.\n      The object should have the following properties:\n        columnValues: {Object} The key and value of a table cell.\n        object: {Object} The actual record object.\n       @param {Function} recordsUpdated Callback to call when a record has changed.\n      Takes an array of objects containing wrapped records.\n       @param {Function} recordsRemoved Callback to call when a record has removed.\n      Takes the following parameters:\n        index: The array index where the records were removed.\n        count: The number of records removed.\n       @return {Function} Method to call to remove all observers.\n    */\n    watchRecords: function (modelName, recordsAdded, recordsUpdated, recordsRemoved) {\n      var _this2 = this;\n\n      var releaseMethods = (0, _emberRuntime.A)();\n      var klass = this._nameToClass(modelName);\n      var records = this.getRecords(klass, modelName);\n      var release = void 0;\n\n      function recordUpdated(updatedRecord) {\n        recordsUpdated([updatedRecord]);\n      }\n\n      var recordsToSend = records.map(function (record) {\n        releaseMethods.push(_this2.observeRecord(record, recordUpdated));\n        return _this2.wrapRecord(record);\n      });\n\n      var contentDidChange = function (array, idx, removedCount, addedCount) {\n        for (var i = idx; i < idx + addedCount; i++) {\n          var record = (0, _emberRuntime.objectAt)(array, i);\n          var wrapped = _this2.wrapRecord(record);\n          releaseMethods.push(_this2.observeRecord(record, recordUpdated));\n          recordsAdded([wrapped]);\n        }\n\n        if (removedCount) {\n          recordsRemoved(idx, removedCount);\n        }\n      };\n\n      var observer = { didChange: contentDidChange, willChange: function () {\n          return this;\n        }\n      };\n      (0, _emberRuntime.addArrayObserver)(records, this, observer);\n\n      release = function () {\n        releaseMethods.forEach(function (fn) {\n          return fn();\n        });\n        (0, _emberRuntime.removeArrayObserver)(records, _this2, observer);\n        _this2.releaseMethods.removeObject(release);\n      };\n\n      recordsAdded(recordsToSend);\n\n      this.releaseMethods.pushObject(release);\n      return release;\n    },\n\n\n    /**\n      Clear all observers before destruction\n      @private\n      @method willDestroy\n    */\n    willDestroy: function () {\n      this._super.apply(this, arguments);\n      this.releaseMethods.forEach(function (fn) {\n        return fn();\n      });\n    },\n\n\n    /**\n      Detect whether a class is a model.\n       Test that against the model class\n      of your persistence library.\n       @private\n      @method detect\n      @return boolean Whether the class is a model class or not.\n    */\n    detect: function () {\n      return false;\n    },\n\n\n    /**\n      Get the columns for a given model type.\n       @private\n      @method columnsForType\n      @return {Array} An array of columns of the following format:\n       name: {String} The name of the column.\n       desc: {String} Humanized description (what would show in a table column name).\n    */\n    columnsForType: function () {\n      return (0, _emberRuntime.A)();\n    },\n\n\n    /**\n      Adds observers to a model type class.\n       @private\n      @method observeModelType\n      @param {String} modelName The model type name.\n      @param {Function} typesUpdated Called when a type is modified.\n      @return {Function} The function to call to remove observers.\n    */\n\n    observeModelType: function (modelName, typesUpdated) {\n      var _this3 = this;\n\n      var klass = this._nameToClass(modelName);\n      var records = this.getRecords(klass, modelName);\n\n      function onChange() {\n        typesUpdated([this.wrapModelType(klass, modelName)]);\n      }\n\n      var observer = {\n        didChange: function (array, idx, removedCount, addedCount) {\n          // Only re-fetch records if the record count changed\n          // (which is all we care about as far as model types are concerned).\n          if (removedCount > 0 || addedCount > 0) {\n            _emberMetal.run.scheduleOnce('actions', this, onChange);\n          }\n        },\n        willChange: function () {\n          return this;\n        }\n      };\n\n      (0, _emberRuntime.addArrayObserver)(records, this, observer);\n\n      var release = function () {\n        return (0, _emberRuntime.removeArrayObserver)(records, _this3, observer);\n      };\n\n      return release;\n    },\n\n\n    /**\n      Wraps a given model type and observes changes to it.\n       @private\n      @method wrapModelType\n      @param {Class} klass A model class.\n      @param {String} modelName Name of the class.\n      @return {Object} Contains the wrapped type and the function to remove observers\n      Format:\n        type: {Object} The wrapped type.\n          The wrapped type has the following format:\n            name: {String} The name of the type.\n            count: {Integer} The number of records available.\n            columns: {Columns} An array of columns to describe the record.\n            object: {Class} The actual Model type class.\n        release: {Function} The function to remove observers.\n    */\n    wrapModelType: function (klass, name) {\n      var records = this.getRecords(klass, name);\n      var typeToSend = void 0;\n\n      typeToSend = {\n        name: name,\n        count: (0, _emberMetal.get)(records, 'length'),\n        columns: this.columnsForType(klass),\n        object: klass\n      };\n\n      return typeToSend;\n    },\n\n\n    /**\n      Fetches all models defined in the application.\n       @private\n      @method getModelTypes\n      @return {Array} Array of model types.\n    */\n    getModelTypes: function () {\n      var _this4 = this;\n\n      var containerDebugAdapter = this.get('containerDebugAdapter');\n      var types = void 0;\n\n      if (containerDebugAdapter.canCatalogEntriesByType('model')) {\n        types = containerDebugAdapter.catalogEntriesByType('model');\n      } else {\n        types = this._getObjectsOnNamespaces();\n      }\n\n      // New adapters return strings instead of classes.\n      types = (0, _emberRuntime.A)(types).map(function (name) {\n        return {\n          klass: _this4._nameToClass(name),\n          name: name\n        };\n      });\n      types = (0, _emberRuntime.A)(types).filter(function (type) {\n        return _this4.detect(type.klass);\n      });\n\n      return (0, _emberRuntime.A)(types);\n    },\n\n\n    /**\n      Loops over all namespaces and all objects\n      attached to them.\n       @private\n      @method _getObjectsOnNamespaces\n      @return {Array} Array of model type strings.\n    */\n    _getObjectsOnNamespaces: function () {\n      var _this5 = this;\n\n      var namespaces = (0, _emberRuntime.A)(_emberRuntime.Namespace.NAMESPACES);\n      var types = (0, _emberRuntime.A)();\n\n      namespaces.forEach(function (namespace) {\n        for (var key in namespace) {\n          if (!namespace.hasOwnProperty(key)) {\n            continue;\n          }\n          // Even though we will filter again in `getModelTypes`,\n          // we should not call `lookupFactory` on non-models\n          if (!_this5.detect(namespace[key])) {\n            continue;\n          }\n          var name = _emberRuntime.String.dasherize(key);\n          types.push(name);\n        }\n      });\n      return types;\n    },\n\n\n    /**\n      Fetches all loaded records for a given type.\n       @private\n      @method getRecords\n      @return {Array} An array of records.\n       This array will be observed for changes,\n       so it should update when new records are added/removed.\n    */\n    getRecords: function () {\n      return (0, _emberRuntime.A)();\n    },\n\n\n    /**\n      Wraps a record and observers changes to it.\n       @private\n      @method wrapRecord\n      @param {Object} record The record instance.\n      @return {Object} The wrapped record. Format:\n      columnValues: {Array}\n      searchKeywords: {Array}\n    */\n    wrapRecord: function (record) {\n      var recordToSend = { object: record };\n\n      recordToSend.columnValues = this.getRecordColumnValues(record);\n      recordToSend.searchKeywords = this.getRecordKeywords(record);\n      recordToSend.filterValues = this.getRecordFilterValues(record);\n      recordToSend.color = this.getRecordColor(record);\n\n      return recordToSend;\n    },\n\n\n    /**\n      Gets the values for each column.\n       @private\n      @method getRecordColumnValues\n      @return {Object} Keys should match column names defined\n      by the model type.\n    */\n    getRecordColumnValues: function () {\n      return {};\n    },\n\n\n    /**\n      Returns keywords to match when searching records.\n       @private\n      @method getRecordKeywords\n      @return {Array} Relevant keywords for search.\n    */\n    getRecordKeywords: function () {\n      return (0, _emberRuntime.A)();\n    },\n\n\n    /**\n      Returns the values of filters defined by `getFilters`.\n       @private\n      @method getRecordFilterValues\n      @param {Object} record The record instance.\n      @return {Object} The filter values.\n    */\n    getRecordFilterValues: function () {\n      return {};\n    },\n\n\n    /**\n      Each record can have a color that represents its state.\n       @private\n      @method getRecordColor\n      @param {Object} record The record instance\n      @return {String} The records color.\n        Possible options: black, red, blue, green.\n    */\n    getRecordColor: function () {\n      return null;\n    },\n\n\n    /**\n      Observes all relevant properties and re-sends the wrapped record\n      when a change occurs.\n       @private\n      @method observerRecord\n      @return {Function} The function to call to remove all observers.\n    */\n    observeRecord: function () {\n      return function () {};\n    }\n  });\n});","enifed('ember-extension-support/index', ['exports', 'ember-extension-support/data_adapter', 'ember-extension-support/container_debug_adapter'], function (exports, _data_adapter, _container_debug_adapter) {\n  'use strict';\n\n  Object.defineProperty(exports, 'DataAdapter', {\n    enumerable: true,\n    get: function () {\n      return _data_adapter.default;\n    }\n  });\n  Object.defineProperty(exports, 'ContainerDebugAdapter', {\n    enumerable: true,\n    get: function () {\n      return _container_debug_adapter.default;\n    }\n  });\n});","enifed('ember-glimmer/component-managers/abstract', ['exports', 'ember-babel'], function (exports, _emberBabel) {\n    'use strict';\n\n    var AbstractManager = function () {\n        function AbstractManager() {\n            (0, _emberBabel.classCallCheck)(this, AbstractManager);\n\n            this.debugStack = undefined;\n        }\n\n        AbstractManager.prototype.prepareArgs = function prepareArgs(_definition, _args) {\n            return null;\n        };\n\n        AbstractManager.prototype.didCreateElement = function didCreateElement(_component, _element, _operations) {}\n        // noop\n\n        // inheritors should also call `this.debugStack.pop()` to\n        // ensure the rerendering assertion messages are properly\n        // maintained\n        ;\n\n        AbstractManager.prototype.didRenderLayout = function didRenderLayout(_component, _bounds) {\n            // noop\n        };\n\n        AbstractManager.prototype.didCreate = function didCreate(_bucket) {\n            // noop\n        };\n\n        AbstractManager.prototype.getTag = function getTag(_bucket) {\n            return null;\n        };\n\n        AbstractManager.prototype.update = function update(_bucket, _dynamicScope) {}\n        // noop\n\n        // inheritors should also call `this.debugStack.pop()` to\n        // ensure the rerendering assertion messages are properly\n        // maintained\n        ;\n\n        AbstractManager.prototype.didUpdateLayout = function didUpdateLayout(_bucket, _bounds) {\n            // noop\n        };\n\n        AbstractManager.prototype.didUpdate = function didUpdate(_bucket) {\n            // noop\n        };\n\n        return AbstractManager;\n    }();\n\n    exports.default = AbstractManager;\n\n    if (true) {\n        AbstractManager.prototype._pushToDebugStack = function (name, environment) {\n            this.debugStack = environment.debugStack;\n            this.debugStack.push(name);\n        };\n        AbstractManager.prototype._pushEngineToDebugStack = function (name, environment) {\n            this.debugStack = environment.debugStack;\n            this.debugStack.pushEngine(name);\n        };\n    }\n});","enifed('ember-glimmer/component-managers/curly', ['exports', 'ember-babel', '@glimmer/reference', '@glimmer/runtime', 'container', 'ember-debug', 'ember-metal', 'ember-utils', 'ember-views', 'ember-glimmer/component', 'ember-glimmer/utils/bindings', 'ember-glimmer/utils/curly-component-state-bucket', 'ember-glimmer/utils/process-args', 'ember-glimmer/utils/references', 'ember-glimmer/component-managers/abstract'], function (exports, _emberBabel, _reference, _runtime, _container, _emberDebug, _emberMetal, _emberUtils, _emberViews, _component, _bindings, _curlyComponentStateBucket, _processArgs, _references, _abstract) {\n    'use strict';\n\n    exports.CurlyComponentDefinition = exports.PositionalArgumentReference = undefined;\n    exports.validatePositionalParameters = validatePositionalParameters;\n    exports.processComponentInitializationAssertions = processComponentInitializationAssertions;\n    exports.initialRenderInstrumentDetails = initialRenderInstrumentDetails;\n    exports.rerenderInstrumentDetails = rerenderInstrumentDetails;\n\n    var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['template:components/-default'], ['template:components/-default']);\n\n    var DEFAULT_LAYOUT = (0, _container.privatize)(_templateObject);\n    function aliasIdToElementId(args, props) {\n        if (args.named.has('id')) {\n            (true && !(!args.named.has('elementId')) && (0, _emberDebug.assert)('You cannot invoke a component with both \\'id\\' and \\'elementId\\' at the same time.', !args.named.has('elementId')));\n\n            props.elementId = props.id;\n        }\n    }\n    // We must traverse the attributeBindings in reverse keeping track of\n    // what has already been applied. This is essentially refining the concatenated\n    // properties applying right to left.\n    function applyAttributeBindings(element, attributeBindings, component, operations) {\n        var seen = [];\n        var i = attributeBindings.length - 1;\n        while (i !== -1) {\n            var binding = attributeBindings[i];\n            var parsed = _bindings.AttributeBinding.parse(binding);\n            var attribute = parsed[1];\n            if (seen.indexOf(attribute) === -1) {\n                seen.push(attribute);\n                _bindings.AttributeBinding.install(element, component, parsed, operations);\n            }\n            i--;\n        }\n        if (seen.indexOf('id') === -1) {\n            operations.addStaticAttribute(element, 'id', component.elementId);\n        }\n        if (seen.indexOf('style') === -1) {\n            _bindings.IsVisibleBinding.install(element, component, operations);\n        }\n    }\n    function tagName(vm) {\n        var dynamicScope = vm.dynamicScope();\n        // tslint:disable-next-line:no-shadowed-variable\n        var tagName = dynamicScope.view.tagName;\n\n        return _runtime.PrimitiveReference.create(tagName === '' ? null : tagName || 'div');\n    }\n    function ariaRole(vm) {\n        return vm.getSelf().get('ariaRole');\n    }\n\n    var CurlyComponentLayoutCompiler = function () {\n        function CurlyComponentLayoutCompiler(template) {\n            (0, _emberBabel.classCallCheck)(this, CurlyComponentLayoutCompiler);\n\n            this.template = template;\n        }\n\n        CurlyComponentLayoutCompiler.prototype.compile = function compile(builder) {\n            builder.wrapLayout(this.template);\n            builder.tag.dynamic(tagName);\n            builder.attrs.dynamic('role', ariaRole);\n            builder.attrs.static('class', 'ember-view');\n        };\n\n        return CurlyComponentLayoutCompiler;\n    }();\n\n    CurlyComponentLayoutCompiler.id = 'curly';\n\n    var PositionalArgumentReference = exports.PositionalArgumentReference = function () {\n        function PositionalArgumentReference(references) {\n            (0, _emberBabel.classCallCheck)(this, PositionalArgumentReference);\n\n            this.tag = (0, _reference.combineTagged)(references);\n            this._references = references;\n        }\n\n        PositionalArgumentReference.prototype.value = function value() {\n            return this._references.map(function (reference) {\n                return reference.value();\n            });\n        };\n\n        PositionalArgumentReference.prototype.get = function get(key) {\n            return _references.PropertyReference.create(this, key);\n        };\n\n        return PositionalArgumentReference;\n    }();\n\n    var CurlyComponentManager = function (_AbstractManager) {\n        (0, _emberBabel.inherits)(CurlyComponentManager, _AbstractManager);\n\n        function CurlyComponentManager() {\n            (0, _emberBabel.classCallCheck)(this, CurlyComponentManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager.apply(this, arguments));\n        }\n\n        CurlyComponentManager.prototype.prepareArgs = function prepareArgs(definition, args) {\n            var componentPositionalParamsDefinition = definition.ComponentClass.class.positionalParams;\n            if (true && componentPositionalParamsDefinition) {\n                validatePositionalParameters(args.named, args.positional, componentPositionalParamsDefinition);\n            }\n            var componentHasRestStylePositionalParams = typeof componentPositionalParamsDefinition === 'string';\n            var componentHasPositionalParams = componentHasRestStylePositionalParams || componentPositionalParamsDefinition.length > 0;\n            var needsPositionalParamMunging = componentHasPositionalParams && args.positional.length !== 0;\n            var isClosureComponent = definition.args;\n            if (!needsPositionalParamMunging && !isClosureComponent) {\n                return null;\n            }\n            var capturedArgs = args.capture();\n            // grab raw positional references array\n            var positional = capturedArgs.positional.references;\n            // handle prep for closure component with positional params\n            var curriedNamed = void 0;\n            if (definition.args) {\n                var remainingDefinitionPositionals = definition.args.positional.slice(positional.length);\n                positional = positional.concat(remainingDefinitionPositionals);\n                curriedNamed = definition.args.named;\n            }\n            // handle positionalParams\n            var positionalParamsToNamed = void 0;\n            if (componentHasRestStylePositionalParams) {\n                var _positionalParamsToNa;\n\n                positionalParamsToNamed = (_positionalParamsToNa = {}, _positionalParamsToNa[componentPositionalParamsDefinition] = new PositionalArgumentReference(positional), _positionalParamsToNa);\n                positional = [];\n            } else if (componentHasPositionalParams) {\n                positionalParamsToNamed = {};\n                var length = Math.min(positional.length, componentPositionalParamsDefinition.length);\n                for (var i = 0; i < length; i++) {\n                    var name = componentPositionalParamsDefinition[i];\n                    positionalParamsToNamed[name] = positional[i];\n                }\n            }\n            var named = (0, _emberUtils.assign)({}, curriedNamed, positionalParamsToNamed, capturedArgs.named.map);\n            return { positional: positional, named: named };\n        };\n\n        CurlyComponentManager.prototype.create = function create(environment, definition, args, dynamicScope, callerSelfRef, hasBlock) {\n            if (true) {\n                this._pushToDebugStack('component:' + definition.name, environment);\n            }\n            var parentView = dynamicScope.view;\n            var factory = definition.ComponentClass;\n            var capturedArgs = args.named.capture();\n            var props = (0, _processArgs.processComponentArgs)(capturedArgs);\n            aliasIdToElementId(args, props);\n            props.parentView = parentView;\n            props[_component.HAS_BLOCK] = hasBlock;\n            props._targetObject = callerSelfRef.value();\n            var component = factory.create(props);\n            var finalizer = (0, _emberMetal._instrumentStart)('render.component', initialRenderInstrumentDetails, component);\n            dynamicScope.view = component;\n            if (parentView !== null && parentView !== undefined) {\n                parentView.appendChild(component);\n            }\n            // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components\n            if (component.tagName === '') {\n                if (environment.isInteractive) {\n                    component.trigger('willRender');\n                }\n                component._transitionTo('hasElement');\n                if (environment.isInteractive) {\n                    component.trigger('willInsertElement');\n                }\n            }\n            var bucket = new _curlyComponentStateBucket.default(environment, component, capturedArgs, finalizer);\n            if (args.named.has('class')) {\n                bucket.classRef = args.named.get('class');\n            }\n            if (true) {\n                processComponentInitializationAssertions(component, props);\n            }\n            if (environment.isInteractive && component.tagName !== '') {\n                component.trigger('willRender');\n            }\n            return bucket;\n        };\n\n        CurlyComponentManager.prototype.layoutFor = function layoutFor(definition, bucket, env) {\n            var template = definition.template;\n            if (!template) {\n                template = this.templateFor(bucket.component, env);\n            }\n            return env.getCompiledBlock(CurlyComponentLayoutCompiler, template);\n        };\n\n        CurlyComponentManager.prototype.templateFor = function templateFor(component, env) {\n            var Template = (0, _emberMetal.get)(component, 'layout');\n            var owner = component[_emberUtils.OWNER];\n            if (Template) {\n                return env.getTemplate(Template, owner);\n            }\n            var layoutName = (0, _emberMetal.get)(component, 'layoutName');\n            if (layoutName) {\n                var template = owner.lookup('template:' + layoutName);\n                if (template) {\n                    return template;\n                }\n            }\n            return owner.lookup(DEFAULT_LAYOUT);\n        };\n\n        CurlyComponentManager.prototype.getSelf = function getSelf(_ref) {\n            var component = _ref.component;\n\n            return component[_component.ROOT_REF];\n        };\n\n        CurlyComponentManager.prototype.didCreateElement = function didCreateElement(_ref2, element, operations) {\n            var component = _ref2.component,\n                classRef = _ref2.classRef,\n                environment = _ref2.environment;\n\n            (0, _emberViews.setViewElement)(component, element);\n            var attributeBindings = component.attributeBindings,\n                classNames = component.classNames,\n                classNameBindings = component.classNameBindings;\n\n            if (attributeBindings && attributeBindings.length) {\n                applyAttributeBindings(element, attributeBindings, component, operations);\n            } else {\n                operations.addStaticAttribute(element, 'id', component.elementId);\n                _bindings.IsVisibleBinding.install(element, component, operations);\n            }\n            if (classRef) {\n                // TODO should make addDynamicAttribute accept an opaque\n                operations.addDynamicAttribute(element, 'class', classRef, false);\n            }\n            if (classNames && classNames.length) {\n                classNames.forEach(function (name) {\n                    operations.addStaticAttribute(element, 'class', name);\n                });\n            }\n            if (classNameBindings && classNameBindings.length) {\n                classNameBindings.forEach(function (binding) {\n                    _bindings.ClassNameBinding.install(element, component, binding, operations);\n                });\n            }\n            component._transitionTo('hasElement');\n            if (environment.isInteractive) {\n                component.trigger('willInsertElement');\n            }\n        };\n\n        CurlyComponentManager.prototype.didRenderLayout = function didRenderLayout(bucket, bounds) {\n            bucket.component[_component.BOUNDS] = bounds;\n            bucket.finalize();\n            if (true) {\n                this.debugStack.pop();\n            }\n        };\n\n        CurlyComponentManager.prototype.getTag = function getTag(_ref3) {\n            var component = _ref3.component;\n\n            return component[_component.DIRTY_TAG];\n        };\n\n        CurlyComponentManager.prototype.didCreate = function didCreate(_ref4) {\n            var component = _ref4.component,\n                environment = _ref4.environment;\n\n            if (environment.isInteractive) {\n                component._transitionTo('inDOM');\n                component.trigger('didInsertElement');\n                component.trigger('didRender');\n            }\n        };\n\n        CurlyComponentManager.prototype.update = function update(bucket) {\n            var component = bucket.component,\n                args = bucket.args,\n                argsRevision = bucket.argsRevision,\n                environment = bucket.environment;\n\n            if (true) {\n                this._pushToDebugStack(component._debugContainerKey, environment);\n            }\n            bucket.finalizer = (0, _emberMetal._instrumentStart)('render.component', rerenderInstrumentDetails, component);\n            if (!args.tag.validate(argsRevision)) {\n                var props = (0, _processArgs.processComponentArgs)(args);\n                bucket.argsRevision = args.tag.value();\n                component[_component.IS_DISPATCHING_ATTRS] = true;\n                component.setProperties(props);\n                component[_component.IS_DISPATCHING_ATTRS] = false;\n                component.trigger('didUpdateAttrs');\n                component.trigger('didReceiveAttrs');\n            }\n            if (environment.isInteractive) {\n                component.trigger('willUpdate');\n                component.trigger('willRender');\n            }\n        };\n\n        CurlyComponentManager.prototype.didUpdateLayout = function didUpdateLayout(bucket) {\n            bucket.finalize();\n            if (true) {\n                this.debugStack.pop();\n            }\n        };\n\n        CurlyComponentManager.prototype.didUpdate = function didUpdate(_ref5) {\n            var component = _ref5.component,\n                environment = _ref5.environment;\n\n            if (environment.isInteractive) {\n                component.trigger('didUpdate');\n                component.trigger('didRender');\n            }\n        };\n\n        CurlyComponentManager.prototype.getDestructor = function getDestructor(stateBucket) {\n            return stateBucket;\n        };\n\n        return CurlyComponentManager;\n    }(_abstract.default);\n\n    exports.default = CurlyComponentManager;\n    function validatePositionalParameters(named, positional, positionalParamsDefinition) {\n        if (true) {\n            if (!named || !positional || !positional.length) {\n                return;\n            }\n            var paramType = typeof positionalParamsDefinition;\n            if (paramType === 'string') {\n                (true && !(!named.has(positionalParamsDefinition)) && (0, _emberDebug.assert)('You cannot specify positional parameters and the hash argument `' + positionalParamsDefinition + '`.', !named.has(positionalParamsDefinition)));\n            } else {\n                if (positional.length < positionalParamsDefinition.length) {\n                    positionalParamsDefinition = positionalParamsDefinition.slice(0, positional.length);\n                }\n                for (var i = 0; i < positionalParamsDefinition.length; i++) {\n                    var name = positionalParamsDefinition[i];\n                    (true && !(!named.has(name)) && (0, _emberDebug.assert)('You cannot specify both a positional param (at position ' + i + ') and the hash argument `' + name + '`.', !named.has(name)));\n                }\n            }\n        }\n    }\n    function processComponentInitializationAssertions(component, props) {\n        (true && !(function () {\n            var classNameBindings = component.classNameBindings;\n\n            for (var i = 0; i < classNameBindings.length; i++) {\n                var binding = classNameBindings[i];\n                if (typeof binding !== 'string' || binding.length === 0) {\n                    return false;\n                }\n            }\n            return true;\n        }()) && (0, _emberDebug.assert)('classNameBindings must be non-empty strings: ' + component, function () {\n            var classNameBindings = component.classNameBindings;\n            for (var i = 0; i < classNameBindings.length; i++) {\n                var binding = classNameBindings[i];if (typeof binding !== 'string' || binding.length === 0) {\n                    return false;\n                }\n            }return true;\n        }()));\n        (true && !(function () {\n            var classNameBindings = component.classNameBindings;\n\n            for (var i = 0; i < classNameBindings.length; i++) {\n                var binding = classNameBindings[i];\n                if (binding.split(' ').length > 1) {\n                    return false;\n                }\n            }\n            return true;\n        }()) && (0, _emberDebug.assert)('classNameBindings must not have spaces in them: ' + component, function () {\n            var classNameBindings = component.classNameBindings;\n            for (var i = 0; i < classNameBindings.length; i++) {\n                var binding = classNameBindings[i];if (binding.split(' ').length > 1) {\n                    return false;\n                }\n            }return true;\n        }()));\n        (true && !(component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0) && (0, _emberDebug.assert)('You cannot use `classNameBindings` on a tag-less component: ' + component, component.tagName !== '' || !component.classNameBindings || component.classNameBindings.length === 0));\n        (true && !(component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== '') && (0, _emberDebug.assert)('You cannot use `elementId` on a tag-less component: ' + component, component.tagName !== '' || props.id === component.elementId || !component.elementId && component.elementId !== ''));\n        (true && !(component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0) && (0, _emberDebug.assert)('You cannot use `attributeBindings` on a tag-less component: ' + component, component.tagName !== '' || !component.attributeBindings || component.attributeBindings.length === 0));\n    }\n    function initialRenderInstrumentDetails(component) {\n        return component.instrumentDetails({ initialRender: true });\n    }\n    function rerenderInstrumentDetails(component) {\n        return component.instrumentDetails({ initialRender: false });\n    }\n    var MANAGER = new CurlyComponentManager();\n\n    var CurlyComponentDefinition = exports.CurlyComponentDefinition = function (_ComponentDefinition) {\n        (0, _emberBabel.inherits)(CurlyComponentDefinition, _ComponentDefinition);\n\n        // tslint:disable-next-line:no-shadowed-variable\n        function CurlyComponentDefinition(name, ComponentClass, template, args, customManager) {\n            (0, _emberBabel.classCallCheck)(this, CurlyComponentDefinition);\n\n            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _ComponentDefinition.call(this, name, customManager || MANAGER, ComponentClass));\n\n            _this2.template = template;\n            _this2.args = args;\n            return _this2;\n        }\n\n        return CurlyComponentDefinition;\n    }(_runtime.ComponentDefinition);\n});","enifed('ember-glimmer/component-managers/mount', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-routing', 'ember/features', 'ember-glimmer/utils/references', 'ember-glimmer/component-managers/abstract', 'ember-glimmer/component-managers/outlet'], function (exports, _emberBabel, _runtime, _emberRouting, _features, _references, _abstract, _outlet) {\n    'use strict';\n\n    exports.MountDefinition = undefined;\n\n    var MountManager = function (_AbstractManager) {\n        (0, _emberBabel.inherits)(MountManager, _AbstractManager);\n\n        function MountManager() {\n            (0, _emberBabel.classCallCheck)(this, MountManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager.apply(this, arguments));\n        }\n\n        MountManager.prototype.create = function create(environment, _ref, args) {\n            var name = _ref.name;\n\n            if (true) {\n                this._pushEngineToDebugStack('engine:' + name, environment);\n            }\n            var engine = environment.owner.buildChildEngineInstance(name);\n            engine.boot();\n            var bucket = { engine: engine };\n            if (_features.EMBER_ENGINES_MOUNT_PARAMS) {\n                bucket.modelReference = args.named.get('model');\n            }\n            return bucket;\n        };\n\n        MountManager.prototype.layoutFor = function layoutFor(_definition, _ref2, env) {\n            var engine = _ref2.engine;\n\n            var template = engine.lookup('template:application');\n            return env.getCompiledBlock(_outlet.OutletLayoutCompiler, template);\n        };\n\n        MountManager.prototype.getSelf = function getSelf(bucket) {\n            var engine = bucket.engine,\n                modelReference = bucket.modelReference;\n\n            var applicationFactory = engine.factoryFor('controller:application');\n            var controllerFactory = applicationFactory || (0, _emberRouting.generateControllerFactory)(engine, 'application');\n            var controller = bucket.controller = controllerFactory.create();\n            if (_features.EMBER_ENGINES_MOUNT_PARAMS) {\n                var model = modelReference.value();\n                bucket.modelRevision = modelReference.tag.value();\n                controller.set('model', model);\n            }\n            return new _references.RootReference(controller);\n        };\n\n        MountManager.prototype.getDestructor = function getDestructor(_ref3) {\n            var engine = _ref3.engine;\n\n            return engine;\n        };\n\n        MountManager.prototype.didRenderLayout = function didRenderLayout() {\n            if (true) {\n                this.debugStack.pop();\n            }\n        };\n\n        MountManager.prototype.update = function update(bucket) {\n            if (_features.EMBER_ENGINES_MOUNT_PARAMS) {\n                var controller = bucket.controller,\n                    modelReference = bucket.modelReference,\n                    modelRevision = bucket.modelRevision;\n\n                if (!modelReference.tag.validate(modelRevision)) {\n                    var model = modelReference.value();\n                    bucket.modelRevision = modelReference.tag.value();\n                    controller.set('model', model);\n                }\n            }\n        };\n\n        return MountManager;\n    }(_abstract.default);\n\n    var MOUNT_MANAGER = new MountManager();\n\n    var MountDefinition = exports.MountDefinition = function (_ComponentDefinition) {\n        (0, _emberBabel.inherits)(MountDefinition, _ComponentDefinition);\n\n        function MountDefinition(name) {\n            (0, _emberBabel.classCallCheck)(this, MountDefinition);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _ComponentDefinition.call(this, name, MOUNT_MANAGER, null));\n        }\n\n        return MountDefinition;\n    }(_runtime.ComponentDefinition);\n});","enifed('ember-glimmer/component-managers/outlet', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-metal', 'ember-utils', 'ember/features', 'ember-glimmer/utils/references', 'ember-glimmer/component-managers/abstract'], function (exports, _emberBabel, _runtime, _emberMetal, _emberUtils, _features, _references, _abstract) {\n    'use strict';\n\n    exports.OutletLayoutCompiler = exports.OutletComponentDefinition = exports.TopLevelOutletComponentDefinition = undefined;\n\n    function instrumentationPayload(_ref) {\n        var _ref$render = _ref.render,\n            name = _ref$render.name,\n            outlet = _ref$render.outlet;\n\n        return { object: name + ':' + outlet };\n    }\n    function NOOP() {}\n\n    var StateBucket = function () {\n        function StateBucket(outletState) {\n            (0, _emberBabel.classCallCheck)(this, StateBucket);\n\n            this.outletState = outletState;\n            this.instrument();\n        }\n\n        StateBucket.prototype.instrument = function instrument() {\n            this.finalizer = (0, _emberMetal._instrumentStart)('render.outlet', instrumentationPayload, this.outletState);\n        };\n\n        StateBucket.prototype.finalize = function finalize() {\n            var finalizer = this.finalizer;\n\n            finalizer();\n            this.finalizer = NOOP;\n        };\n\n        return StateBucket;\n    }();\n\n    var OutletComponentManager = function (_AbstractManager) {\n        (0, _emberBabel.inherits)(OutletComponentManager, _AbstractManager);\n\n        function OutletComponentManager() {\n            (0, _emberBabel.classCallCheck)(this, OutletComponentManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager.apply(this, arguments));\n        }\n\n        OutletComponentManager.prototype.create = function create(environment, definition, _args, dynamicScope) {\n            if (true) {\n                this._pushToDebugStack('template:' + definition.template.meta.moduleName, environment);\n            }\n            var outletStateReference = dynamicScope.outletState = dynamicScope.outletState.get('outlets').get(definition.outletName);\n            var outletState = outletStateReference.value();\n            return new StateBucket(outletState);\n        };\n\n        OutletComponentManager.prototype.layoutFor = function layoutFor(definition, _bucket, env) {\n            return env.getCompiledBlock(OutletLayoutCompiler, definition.template);\n        };\n\n        OutletComponentManager.prototype.getSelf = function getSelf(_ref2) {\n            var outletState = _ref2.outletState;\n\n            return new _references.RootReference(outletState.render.controller);\n        };\n\n        OutletComponentManager.prototype.didRenderLayout = function didRenderLayout(bucket) {\n            bucket.finalize();\n            if (true) {\n                this.debugStack.pop();\n            }\n        };\n\n        OutletComponentManager.prototype.getDestructor = function getDestructor() {\n            return null;\n        };\n\n        return OutletComponentManager;\n    }(_abstract.default);\n\n    var MANAGER = new OutletComponentManager();\n\n    var TopLevelOutletComponentManager = function (_OutletComponentManag) {\n        (0, _emberBabel.inherits)(TopLevelOutletComponentManager, _OutletComponentManag);\n\n        function TopLevelOutletComponentManager() {\n            (0, _emberBabel.classCallCheck)(this, TopLevelOutletComponentManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _OutletComponentManag.apply(this, arguments));\n        }\n\n        TopLevelOutletComponentManager.prototype.create = function create(environment, definition, _args, dynamicScope) {\n            if (true) {\n                this._pushToDebugStack('template:' + definition.template.meta.moduleName, environment);\n            }\n            return new StateBucket(dynamicScope.outletState.value());\n        };\n\n        return TopLevelOutletComponentManager;\n    }(OutletComponentManager);\n\n    var TOP_LEVEL_MANAGER = function () {\n        if (_features.EMBER_GLIMMER_REMOVE_APPLICATION_TEMPLATE_WRAPPER) {\n            return new TopLevelOutletComponentManager();\n        } else {\n            var WrappedTopLevelOutletLayoutCompiler = function () {\n                function WrappedTopLevelOutletLayoutCompiler(template) {\n                    (0, _emberBabel.classCallCheck)(this, WrappedTopLevelOutletLayoutCompiler);\n\n                    this.template = template;\n                }\n\n                WrappedTopLevelOutletLayoutCompiler.prototype.compile = function compile(builder) {\n                    builder.wrapLayout(this.template);\n                    builder.tag.static('div');\n                    builder.attrs.static('id', (0, _emberUtils.guidFor)(this));\n                    builder.attrs.static('class', 'ember-view');\n                };\n\n                return WrappedTopLevelOutletLayoutCompiler;\n            }();\n\n            WrappedTopLevelOutletLayoutCompiler.id = 'wrapped-top-level-outlet';\n\n            var WrappedTopLevelOutletComponentManager = function (_TopLevelOutletCompon) {\n                (0, _emberBabel.inherits)(WrappedTopLevelOutletComponentManager, _TopLevelOutletCompon);\n\n                function WrappedTopLevelOutletComponentManager() {\n                    (0, _emberBabel.classCallCheck)(this, WrappedTopLevelOutletComponentManager);\n                    return (0, _emberBabel.possibleConstructorReturn)(this, _TopLevelOutletCompon.apply(this, arguments));\n                }\n\n                WrappedTopLevelOutletComponentManager.prototype.layoutFor = function layoutFor(definition, _bucket, env) {\n                    return env.getCompiledBlock(WrappedTopLevelOutletLayoutCompiler, definition.template);\n                };\n\n                return WrappedTopLevelOutletComponentManager;\n            }(TopLevelOutletComponentManager);\n\n            return new WrappedTopLevelOutletComponentManager();\n        }\n    }();\n\n    var TopLevelOutletComponentDefinition = exports.TopLevelOutletComponentDefinition = function (_ComponentDefinition) {\n        (0, _emberBabel.inherits)(TopLevelOutletComponentDefinition, _ComponentDefinition);\n\n        function TopLevelOutletComponentDefinition(instance) {\n            (0, _emberBabel.classCallCheck)(this, TopLevelOutletComponentDefinition);\n\n            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _ComponentDefinition.call(this, 'outlet', TOP_LEVEL_MANAGER, instance));\n\n            _this4.template = instance.template;\n            (0, _emberUtils.generateGuid)(_this4);\n            return _this4;\n        }\n\n        return TopLevelOutletComponentDefinition;\n    }(_runtime.ComponentDefinition);\n\n    var OutletComponentDefinition = exports.OutletComponentDefinition = function (_ComponentDefinition2) {\n        (0, _emberBabel.inherits)(OutletComponentDefinition, _ComponentDefinition2);\n\n        function OutletComponentDefinition(outletName, template) {\n            (0, _emberBabel.classCallCheck)(this, OutletComponentDefinition);\n\n            var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _ComponentDefinition2.call(this, 'outlet', MANAGER, null));\n\n            _this5.outletName = outletName;\n            _this5.template = template;\n            (0, _emberUtils.generateGuid)(_this5);\n            return _this5;\n        }\n\n        return OutletComponentDefinition;\n    }(_runtime.ComponentDefinition);\n\n    var OutletLayoutCompiler = exports.OutletLayoutCompiler = function () {\n        function OutletLayoutCompiler(template) {\n            (0, _emberBabel.classCallCheck)(this, OutletLayoutCompiler);\n\n            this.template = template;\n        }\n\n        OutletLayoutCompiler.prototype.compile = function compile(builder) {\n            builder.wrapLayout(this.template);\n        };\n\n        return OutletLayoutCompiler;\n    }();\n\n    OutletLayoutCompiler.id = 'outlet';\n});","enifed('ember-glimmer/component-managers/render', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-debug', 'ember-routing', 'ember-glimmer/utils/references', 'ember-glimmer/component-managers/abstract', 'ember-glimmer/component-managers/outlet'], function (exports, _emberBabel, _runtime, _emberDebug, _emberRouting, _references, _abstract, _outlet) {\n    'use strict';\n\n    exports.RenderDefinition = exports.NON_SINGLETON_RENDER_MANAGER = exports.SINGLETON_RENDER_MANAGER = exports.AbstractRenderManager = undefined;\n\n    var AbstractRenderManager = exports.AbstractRenderManager = function (_AbstractManager) {\n        (0, _emberBabel.inherits)(AbstractRenderManager, _AbstractManager);\n\n        function AbstractRenderManager() {\n            (0, _emberBabel.classCallCheck)(this, AbstractRenderManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager.apply(this, arguments));\n        }\n\n        AbstractRenderManager.prototype.layoutFor = function layoutFor(definition, _bucket, env) {\n            // only curly components can have lazy layout\n            (true && !(!!definition.template) && (0, _emberDebug.assert)('definition is missing a template', !!definition.template));\n\n            return env.getCompiledBlock(_outlet.OutletLayoutCompiler, definition.template);\n        };\n\n        AbstractRenderManager.prototype.getSelf = function getSelf(_ref) {\n            var controller = _ref.controller;\n\n            return new _references.RootReference(controller);\n        };\n\n        return AbstractRenderManager;\n    }(_abstract.default);\n\n    if (true) {\n        AbstractRenderManager.prototype.didRenderLayout = function () {\n            this.debugStack.pop();\n        };\n    }\n\n    var SingletonRenderManager = function (_AbstractRenderManage) {\n        (0, _emberBabel.inherits)(SingletonRenderManager, _AbstractRenderManage);\n\n        function SingletonRenderManager() {\n            (0, _emberBabel.classCallCheck)(this, SingletonRenderManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractRenderManage.apply(this, arguments));\n        }\n\n        SingletonRenderManager.prototype.create = function create(env, definition, _args, dynamicScope) {\n            var name = definition.name;\n\n            var controller = env.owner.lookup('controller:' + name) || (0, _emberRouting.generateController)(env.owner, name);\n            if (true) {\n                this._pushToDebugStack('controller:' + name + ' (with the render helper)', env);\n            }\n            if (dynamicScope.rootOutletState) {\n                dynamicScope.outletState = dynamicScope.rootOutletState.getOrphan(name);\n            }\n            return { controller: controller };\n        };\n\n        SingletonRenderManager.prototype.getDestructor = function getDestructor() {\n            return null;\n        };\n\n        return SingletonRenderManager;\n    }(AbstractRenderManager);\n\n    var SINGLETON_RENDER_MANAGER = exports.SINGLETON_RENDER_MANAGER = new SingletonRenderManager();\n\n    var NonSingletonRenderManager = function (_AbstractRenderManage2) {\n        (0, _emberBabel.inherits)(NonSingletonRenderManager, _AbstractRenderManage2);\n\n        function NonSingletonRenderManager() {\n            (0, _emberBabel.classCallCheck)(this, NonSingletonRenderManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractRenderManage2.apply(this, arguments));\n        }\n\n        NonSingletonRenderManager.prototype.create = function create(environment, definition, args, dynamicScope) {\n            var name = definition.name,\n                env = definition.env;\n\n            var modelRef = args.positional.at(0);\n            var controllerFactory = env.owner.factoryFor('controller:' + name);\n            var factory = controllerFactory || (0, _emberRouting.generateControllerFactory)(env.owner, name);\n            var controller = factory.create({ model: modelRef.value() });\n            if (true) {\n                this._pushToDebugStack('controller:' + name + ' (with the render helper)', environment);\n            }\n            if (dynamicScope.rootOutletState) {\n                dynamicScope.outletState = dynamicScope.rootOutletState.getOrphan(name);\n            }\n            return { controller: controller, model: modelRef };\n        };\n\n        NonSingletonRenderManager.prototype.update = function update(_ref2) {\n            var controller = _ref2.controller,\n                model = _ref2.model;\n\n            controller.set('model', model.value());\n        };\n\n        NonSingletonRenderManager.prototype.getDestructor = function getDestructor(_ref3) {\n            var controller = _ref3.controller;\n\n            return controller;\n        };\n\n        return NonSingletonRenderManager;\n    }(AbstractRenderManager);\n\n    var NON_SINGLETON_RENDER_MANAGER = exports.NON_SINGLETON_RENDER_MANAGER = new NonSingletonRenderManager();\n\n    var RenderDefinition = exports.RenderDefinition = function (_ComponentDefinition) {\n        (0, _emberBabel.inherits)(RenderDefinition, _ComponentDefinition);\n\n        function RenderDefinition(name, template, env, manager) {\n            (0, _emberBabel.classCallCheck)(this, RenderDefinition);\n\n            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _ComponentDefinition.call(this, 'render', manager, null));\n\n            _this4.name = name;\n            _this4.template = template;\n            _this4.env = env;\n            return _this4;\n        }\n\n        return RenderDefinition;\n    }(_runtime.ComponentDefinition);\n});","enifed('ember-glimmer/component-managers/root', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-metal', 'ember-glimmer/utils/curly-component-state-bucket', 'ember-glimmer/component-managers/curly'], function (exports, _emberBabel, _runtime, _emberMetal, _curlyComponentStateBucket, _curly) {\n    'use strict';\n\n    exports.RootComponentDefinition = undefined;\n\n    var RootComponentManager = function (_CurlyComponentManage) {\n        (0, _emberBabel.inherits)(RootComponentManager, _CurlyComponentManage);\n\n        function RootComponentManager() {\n            (0, _emberBabel.classCallCheck)(this, RootComponentManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _CurlyComponentManage.apply(this, arguments));\n        }\n\n        RootComponentManager.prototype.create = function create(environment, definition, args, dynamicScope) {\n            var component = definition.ComponentClass.create();\n            if (true) {\n                this._pushToDebugStack(component._debugContainerKey, environment);\n            }\n            var finalizer = (0, _emberMetal._instrumentStart)('render.component', _curly.initialRenderInstrumentDetails, component);\n            dynamicScope.view = component;\n            // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components\n            if (component.tagName === '') {\n                if (environment.isInteractive) {\n                    component.trigger('willRender');\n                }\n                component._transitionTo('hasElement');\n                if (environment.isInteractive) {\n                    component.trigger('willInsertElement');\n                }\n            }\n            if (true) {\n                (0, _curly.processComponentInitializationAssertions)(component, {});\n            }\n            return new _curlyComponentStateBucket.default(environment, component, args.named.capture(), finalizer);\n        };\n\n        return RootComponentManager;\n    }(_curly.default);\n\n    var ROOT_MANAGER = new RootComponentManager();\n\n    var RootComponentDefinition = exports.RootComponentDefinition = function (_ComponentDefinition) {\n        (0, _emberBabel.inherits)(RootComponentDefinition, _ComponentDefinition);\n\n        function RootComponentDefinition(instance) {\n            (0, _emberBabel.classCallCheck)(this, RootComponentDefinition);\n\n            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _ComponentDefinition.call(this, '-root', ROOT_MANAGER, {\n                class: instance.constructor,\n                create: function () {\n                    return instance;\n                }\n            }));\n\n            _this2.template = undefined;\n            _this2.args = undefined;\n            return _this2;\n        }\n\n        return RootComponentDefinition;\n    }(_runtime.ComponentDefinition);\n});","enifed('ember-glimmer/component-managers/template-only', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-glimmer/component-managers/abstract'], function (exports, _emberBabel, _runtime, _abstract) {\n    'use strict';\n\n    exports.TemplateOnlyComponentDefinition = undefined;\n\n    var TemplateOnlyComponentLayoutCompiler = function () {\n        function TemplateOnlyComponentLayoutCompiler(template) {\n            (0, _emberBabel.classCallCheck)(this, TemplateOnlyComponentLayoutCompiler);\n\n            this.template = template;\n        }\n\n        TemplateOnlyComponentLayoutCompiler.prototype.compile = function compile(builder) {\n            // TODO: use fromLayout\n            builder.wrapLayout(this.template);\n        };\n\n        return TemplateOnlyComponentLayoutCompiler;\n    }();\n\n    TemplateOnlyComponentLayoutCompiler.id = 'template-only';\n\n    var TemplateOnlyComponentManager = function (_AbstractManager) {\n        (0, _emberBabel.inherits)(TemplateOnlyComponentManager, _AbstractManager);\n\n        function TemplateOnlyComponentManager() {\n            (0, _emberBabel.classCallCheck)(this, TemplateOnlyComponentManager);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _AbstractManager.apply(this, arguments));\n        }\n\n        TemplateOnlyComponentManager.prototype.create = function create() {\n            return null;\n        };\n\n        TemplateOnlyComponentManager.prototype.layoutFor = function layoutFor(_ref, _, env) {\n            var template = _ref.template;\n\n            return env.getCompiledBlock(TemplateOnlyComponentLayoutCompiler, template);\n        };\n\n        TemplateOnlyComponentManager.prototype.getSelf = function getSelf() {\n            return _runtime.NULL_REFERENCE;\n        };\n\n        TemplateOnlyComponentManager.prototype.getDestructor = function getDestructor() {\n            return null;\n        };\n\n        return TemplateOnlyComponentManager;\n    }(_abstract.default);\n\n    exports.default = TemplateOnlyComponentManager;\n\n    var MANAGER = new TemplateOnlyComponentManager();\n\n    var TemplateOnlyComponentDefinition = exports.TemplateOnlyComponentDefinition = function (_ComponentDefinition) {\n        (0, _emberBabel.inherits)(TemplateOnlyComponentDefinition, _ComponentDefinition);\n\n        function TemplateOnlyComponentDefinition(name, template) {\n            (0, _emberBabel.classCallCheck)(this, TemplateOnlyComponentDefinition);\n\n            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _ComponentDefinition.call(this, name, MANAGER, null));\n\n            _this2.template = template;\n            return _this2;\n        }\n\n        return TemplateOnlyComponentDefinition;\n    }(_runtime.ComponentDefinition);\n});","enifed('ember-glimmer/component', ['exports', '@glimmer/reference', '@glimmer/runtime', 'ember-debug', 'ember-metal', 'ember-runtime', 'ember-utils', 'ember-views', 'ember-glimmer/utils/references'], function (exports, _reference, _runtime, _emberDebug, _emberMetal, _emberRuntime, _emberUtils, _emberViews, _references) {\n  'use strict';\n\n  exports.BOUNDS = exports.HAS_BLOCK = exports.IS_DISPATCHING_ATTRS = exports.ROOT_REF = exports.ARGS = exports.DIRTY_TAG = undefined;\n\n  var _CoreView$extend;\n\n  var DIRTY_TAG = exports.DIRTY_TAG = (0, _emberUtils.symbol)('DIRTY_TAG');\n  var ARGS = exports.ARGS = (0, _emberUtils.symbol)('ARGS');\n  var ROOT_REF = exports.ROOT_REF = (0, _emberUtils.symbol)('ROOT_REF');\n  var IS_DISPATCHING_ATTRS = exports.IS_DISPATCHING_ATTRS = (0, _emberUtils.symbol)('IS_DISPATCHING_ATTRS');\n  var HAS_BLOCK = exports.HAS_BLOCK = (0, _emberUtils.symbol)('HAS_BLOCK');\n  var BOUNDS = exports.BOUNDS = (0, _emberUtils.symbol)('BOUNDS');\n  /**\n  @module @ember/component\n  */\n  /**\n    A `Component` is a view that is completely\n    isolated. Properties accessed in its templates go\n    to the view object and actions are targeted at\n    the view object. There is no access to the\n    surrounding context or outer controller; all\n    contextual information must be passed in.\n  \n    The easiest way to create a `Component` is via\n    a template. If you name a template\n    `app/components/my-foo.hbs`, you will be able to use\n    `{{my-foo}}` in other templates, which will make\n    an instance of the isolated component.\n  \n    ```app/components/my-foo.hbs\n    {{person-profile person=currentUser}}\n    ```\n  \n    ```app/components/person-profile.hbs\n    <h1>{{person.title}}</h1>\n    <img src={{person.avatar}}>\n    <p class='signature'>{{person.signature}}</p>\n    ```\n  \n    You can use `yield` inside a template to\n    include the **contents** of any block attached to\n    the component. The block will be executed in the\n    context of the surrounding context or outer controller:\n  \n    ```handlebars\n    {{#person-profile person=currentUser}}\n      <p>Admin mode</p>\n      {{! Executed in the controller's context. }}\n    {{/person-profile}}\n    ```\n  \n    ```app/components/person-profile.hbs\n    <h1>{{person.title}}</h1>\n    {{! Executed in the component's context. }}\n    {{yield}} {{! block contents }}\n    ```\n  \n    If you want to customize the component, in order to\n    handle events or actions, you implement a subclass\n    of `Component` named after the name of the\n    component.\n  \n    For example, you could implement the action\n    `hello` for the `person-profile` component:\n  \n    ```app/components/person-profile.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      actions: {\n        hello(name) {\n          console.log(\"Hello\", name);\n        }\n      }\n    });\n    ```\n  \n    And then use it in the component's template:\n  \n    ```app/templates/components/person-profile.hbs\n    <h1>{{person.title}}</h1>\n    {{yield}} <!-- block contents -->\n    <button {{action 'hello' person.name}}>\n      Say Hello to {{person.name}}\n    </button>\n    ```\n  \n    Components must have a `-` in their name to avoid\n    conflicts with built-in controls that wrap HTML\n    elements. This is consistent with the same\n    requirement in web components.\n  \n    ## HTML Tag\n  \n    The default HTML tag name used for a component's DOM representation is `div`.\n    This can be customized by setting the `tagName` property.\n    The following component class:\n  \n    ```app/components/emphasized-paragraph.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      tagName: 'em'\n    });\n    ```\n  \n    Would result in instances with the following HTML:\n  \n    ```html\n    <em id=\"ember1\" class=\"ember-view\"></em>\n    ```\n  \n    ## HTML `class` Attribute\n  \n    The HTML `class` attribute of a component's tag can be set by providing a\n    `classNames` property that is set to an array of strings:\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      classNames: ['my-class', 'my-other-class']\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n    ```\n  \n    `class` attribute values can also be set by providing a `classNameBindings`\n    property set to an array of properties names for the component. The return value\n    of these properties will be added as part of the value for the components's `class`\n    attribute. These properties can be computed properties:\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n    import { computed } from '@ember/object';\n  \n    export default Component.extend({\n      classNameBindings: ['propertyA', 'propertyB'],\n  \n      propertyA: 'from-a',\n      propertyB: computed(function() {\n        if (someLogic) { return 'from-b'; }\n      })\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view from-a from-b\"></div>\n    ```\n  \n    If the value of a class name binding returns a boolean the property name\n    itself will be used as the class name if the property is true.\n    The class name will not be added if the value is `false` or `undefined`.\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      classNameBindings: ['hovered'],\n  \n      hovered: true\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view hovered\"></div>\n    ```\n  \n    When using boolean class name bindings you can supply a string value other\n    than the property name for use as the `class` HTML attribute by appending the\n    preferred value after a \":\" character when defining the binding:\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      classNameBindings: ['awesome:so-very-cool'],\n  \n      awesome: true\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view so-very-cool\"></div>\n    ```\n  \n    Boolean value class name bindings whose property names are in a\n    camelCase-style format will be converted to a dasherized format:\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      classNameBindings: ['isUrgent'],\n  \n      isUrgent: true\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view is-urgent\"></div>\n    ```\n  \n    Class name bindings can also refer to object values that are found by\n    traversing a path relative to the component itself:\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n    import EmberObject from '@ember/object';\n  \n    export default Component.extend({\n      classNameBindings: ['messages.empty'],\n  \n      messages: EmberObject.create({\n        empty: true\n      })\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view empty\"></div>\n    ```\n  \n    If you want to add a class name for a property which evaluates to true and\n    and a different class name if it evaluates to false, you can pass a binding\n    like this:\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      classNameBindings: ['isEnabled:enabled:disabled'],\n      isEnabled: true\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view enabled\"></div>\n    ```\n  \n    When isEnabled is `false`, the resulting HTML representation looks like\n    this:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view disabled\"></div>\n    ```\n  \n    This syntax offers the convenience to add a class if a property is `false`:\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n  \n    // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\n    export default Component.extend({\n      classNameBindings: ['isEnabled::disabled'],\n      isEnabled: true\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view\"></div>\n    ```\n  \n    When the `isEnabled` property on the component is set to `false`, it will result\n    in component instances with an HTML representation of:\n  \n    ```html\n    <div id=\"ember1\" class=\"ember-view disabled\"></div>\n    ```\n  \n    Updates to the value of a class name binding will result in automatic\n    update of the  HTML `class` attribute in the component's rendered HTML\n    representation. If the value becomes `false` or `undefined` the class name\n    will be removed.\n    Both `classNames` and `classNameBindings` are concatenated properties. See\n    [EmberObject](/api/ember/release/classes/EmberObject) documentation for more\n    information about concatenated properties.\n  \n    ## HTML Attributes\n  \n    The HTML attribute section of a component's tag can be set by providing an\n    `attributeBindings` property set to an array of property names on the component.\n    The return value of these properties will be used as the value of the component's\n    HTML associated attribute:\n  \n    ```app/components/my-anchor.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      tagName: 'a',\n      attributeBindings: ['href'],\n  \n      href: 'http://google.com'\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n    ```\n  \n    One property can be mapped on to another by placing a \":\" between\n    the source property and the destination property:\n  \n    ```app/components/my-anchor.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      tagName: 'a',\n      attributeBindings: ['url:href'],\n  \n      url: 'http://google.com'\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n    ```\n  \n    Namespaced attributes (e.g. `xlink:href`) are supported, but have to be\n    mapped, since `:` is not a valid character for properties in Javascript:\n  \n    ```app/components/my-use.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      tagName: 'use',\n      attributeBindings: ['xlinkHref:xlink:href'],\n  \n      xlinkHref: '#triangle'\n    });\n    ```\n  \n    Will result in component instances with an HTML representation of:\n  \n    ```html\n    <use xlink:href=\"#triangle\"></use>\n    ```\n  \n    If the return value of an `attributeBindings` monitored property is a boolean\n    the attribute will be present or absent depending on the value:\n  \n    ```app/components/my-text-input.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      tagName: 'input',\n      attributeBindings: ['disabled'],\n  \n      disabled: false\n    });\n    ```\n  \n    Will result in a component instance with an HTML representation of:\n  \n    ```html\n    <input id=\"ember1\" class=\"ember-view\" />\n    ```\n  \n    `attributeBindings` can refer to computed properties:\n  \n    ```app/components/my-text-input.js\n    import Component from '@ember/component';\n    import { computed } from '@ember/object';\n  \n    export default Component.extend({\n      tagName: 'input',\n      attributeBindings: ['disabled'],\n  \n      disabled: computed(function() {\n        if (someLogic) {\n          return true;\n        } else {\n          return false;\n        }\n      })\n    });\n    ```\n  \n    To prevent setting an attribute altogether, use `null` or `undefined` as the\n    return value of the `attributeBindings` monitored property:\n  \n    ```app/components/my-text-input.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      tagName: 'form',\n      attributeBindings: ['novalidate'],\n      novalidate: null\n    });\n    ```\n  \n    Updates to the property of an attribute binding will result in automatic\n    update of the  HTML attribute in the component's rendered HTML representation.\n    `attributeBindings` is a concatenated property. See [EmberObject](/api/ember/release/classes/EmberObject)\n    documentation for more information about concatenated properties.\n  \n    ## Layouts\n  \n    See [Ember.Templates.helpers.yield](/api/ember/release/classes/Ember.Templates.helpers/methods/yield?anchor=yield)\n    for more information.\n  \n    Layout can be used to wrap content in a component. In addition\n    to wrapping content in a Component's template, you can also use\n    the public layout API in your Component JavaScript.\n  \n    ```app/templates/components/person-profile.hbs\n      <h1>Person's Title</h1>\n      <div class='details'>{{yield}}</div>\n    ```\n  \n    ```app/components/person-profile.js\n      import Component from '@ember/component';\n      import layout from '../templates/components/person-profile';\n  \n      export default Component.extend({\n        layout\n      });\n    ```\n  \n    The above will result in the following HTML output:\n  \n    ```html\n      <h1>Person's Title</h1>\n      <div class=\"details\">\n        <h2>Chief Basket Weaver</h2>\n        <h3>Fisherman Industries</h3>\n      </div>\n    ```\n  \n    ## Responding to Browser Events\n  \n    Components can respond to user-initiated events in one of three ways: method\n    implementation, through an event manager, and through `{{action}}` helper use\n    in their template or layout.\n  \n    ### Method Implementation\n  \n    Components can respond to user-initiated events by implementing a method that\n    matches the event name. A `jQuery.Event` object will be passed as the\n    argument to this method.\n  \n    ```app/components/my-widget.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      click(event) {\n        // will be called when an instance's\n        // rendered element is clicked\n      }\n    });\n    ```\n  \n    ### `{{action}}` Helper\n  \n    See [Ember.Templates.helpers.action](/api/ember/release/classes/Ember.Templates.helpers/methods/yield?anchor=yield).\n  \n    ### Event Names\n  \n    All of the event handling approaches described above respond to the same set\n    of events. The names of the built-in events are listed below. (The hash of\n    built-in events exists in `Ember.EventDispatcher`.) Additional, custom events\n    can be registered by using `Application.customEvents`.\n  \n    Touch events:\n  \n    * `touchStart`\n    * `touchMove`\n    * `touchEnd`\n    * `touchCancel`\n  \n    Keyboard events:\n  \n    * `keyDown`\n    * `keyUp`\n    * `keyPress`\n  \n    Mouse events:\n  \n    * `mouseDown`\n    * `mouseUp`\n    * `contextMenu`\n    * `click`\n    * `doubleClick`\n    * `mouseMove`\n    * `focusIn`\n    * `focusOut`\n    * `mouseEnter`\n    * `mouseLeave`\n  \n    Form events:\n  \n    * `submit`\n    * `change`\n    * `focusIn`\n    * `focusOut`\n    * `input`\n  \n    HTML5 drag and drop events:\n  \n    * `dragStart`\n    * `drag`\n    * `dragEnter`\n    * `dragLeave`\n    * `dragOver`\n    * `dragEnd`\n    * `drop`\n  \n    @class Component\n    @extends Ember.CoreView\n    @uses Ember.TargetActionSupport\n    @uses Ember.ClassNamesSupport\n    @uses Ember.ActionSupport\n    @uses Ember.ViewMixin\n    @uses Ember.ViewStateSupport\n    @public\n  */\n  var Component = _emberViews.CoreView.extend(_emberViews.ChildViewsSupport, _emberViews.ViewStateSupport, _emberViews.ClassNamesSupport, _emberRuntime.TargetActionSupport, _emberViews.ActionSupport, _emberViews.ViewMixin, (_CoreView$extend = {\n    isComponent: true,\n    init: function () {\n      var _this = this;\n\n      this._super.apply(this, arguments);\n      this[IS_DISPATCHING_ATTRS] = false;\n      this[DIRTY_TAG] = new _reference.DirtyableTag();\n      this[ROOT_REF] = new _references.RootReference(this);\n      this[BOUNDS] = null;\n      // If in a tagless component, assert that no event handlers are defined\n      (true && !(this.tagName !== '' || !this.renderer._destinedForDOM || !function () {\n        var eventDispatcher = (0, _emberUtils.getOwner)(_this).lookup('event_dispatcher:main');\n        var events = eventDispatcher && eventDispatcher._finalEvents || {};\n        // tslint:disable-next-line:forin\n        for (var key in events) {\n          var methodName = events[key];\n          if (typeof _this[methodName] === 'function') {\n            return true; // indicate that the assertion should be triggered\n          }\n        }\n        return false;\n      }()) && (0, _emberDebug.assert)('You can not define a function that handles DOM events in the `' + this + '` tagless component since it doesn\\'t have any DOM element.', this.tagName !== '' || !this.renderer._destinedForDOM || !function () {\n        var eventDispatcher = (0, _emberUtils.getOwner)(_this).lookup('event_dispatcher:main');var events = eventDispatcher && eventDispatcher._finalEvents || {};for (var key in events) {\n          var methodName = events[key];if (typeof _this[methodName] === 'function') {\n            return true;\n          }\n        }return false;\n      }()));\n    },\n    rerender: function () {\n      this[DIRTY_TAG].dirty();\n      this._super();\n    },\n    __defineNonEnumerable: function (property) {\n      this[property.name] = property.descriptor.value;\n    }\n  }, _CoreView$extend[_emberMetal.PROPERTY_DID_CHANGE] = function (key) {\n    if (this[IS_DISPATCHING_ATTRS]) {\n      return;\n    }\n    var args = this[ARGS];\n    var reference = args && args[key];\n    if (reference) {\n      if (reference[_references.UPDATE]) {\n        reference[_references.UPDATE]((0, _emberMetal.get)(this, key));\n      }\n    }\n  }, _CoreView$extend.getAttr = function (key) {\n    // TODO Intimate API should be deprecated\n    return this.get(key);\n  }, _CoreView$extend.readDOMAttr = function (name) {\n    var element = (0, _emberViews.getViewElement)(this);\n    return (0, _runtime.readDOMAttr)(element, name);\n  }, _CoreView$extend));\n  Component[_emberUtils.NAME_KEY] = 'Ember.Component';\n  Component.reopenClass({\n    isComponentFactory: true,\n    positionalParams: []\n  });\n  exports.default = Component;\n});","enifed('ember-glimmer/components/checkbox', ['exports', 'ember-metal', 'ember-glimmer/component', 'ember-glimmer/templates/empty'], function (exports, _emberMetal, _component, _empty) {\n    'use strict';\n\n    exports.default = _component.default.extend({\n        layout: _empty.default,\n        classNames: ['ember-checkbox'],\n        tagName: 'input',\n        attributeBindings: ['type', 'checked', 'indeterminate', 'disabled', 'tabindex', 'name', 'autofocus', 'required', 'form'],\n        type: 'checkbox',\n        disabled: false,\n        indeterminate: false,\n        didInsertElement: function () {\n            this._super.apply(this, arguments);\n            (0, _emberMetal.get)(this, 'element').indeterminate = !!(0, _emberMetal.get)(this, 'indeterminate');\n        },\n        change: function () {\n            (0, _emberMetal.set)(this, 'checked', this.$().prop('checked'));\n        }\n    });\n});","enifed('ember-glimmer/components/link-to', ['exports', 'ember-debug', 'ember-metal', 'ember-runtime', 'ember-views', 'ember-glimmer/component', 'ember-glimmer/templates/link-to'], function (exports, _emberDebug, _emberMetal, _emberRuntime, _emberViews, _component, _linkTo) {\n    'use strict';\n\n    /**\n      @module @ember/routing\n    */\n    /**\n      `LinkComponent` renders an element whose `click` event triggers a\n      transition of the application's instance of `Router` to\n      a supplied route by name.\n    \n      `LinkComponent` components are invoked with {{#link-to}}. Properties\n      of this class can be overridden with `reopen` to customize application-wide\n      behavior.\n    \n      @class LinkComponent\n      @extends Component\n      @see {Ember.Templates.helpers.link-to}\n      @public\n    **/\n    var LinkComponent = _component.default.extend({\n        layout: _linkTo.default,\n        tagName: 'a',\n        /**\n          Used to determine when this `LinkComponent` is active.\n             @property current-when\n          @public\n        */\n        'current-when': null,\n        /**\n          Sets the `title` attribute of the `LinkComponent`'s HTML element.\n             @property title\n          @default null\n          @public\n        **/\n        title: null,\n        /**\n          Sets the `rel` attribute of the `LinkComponent`'s HTML element.\n             @property rel\n          @default null\n          @public\n        **/\n        rel: null,\n        /**\n          Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.\n             @property tabindex\n          @default null\n          @public\n        **/\n        tabindex: null,\n        /**\n          Sets the `target` attribute of the `LinkComponent`'s HTML element.\n             @since 1.8.0\n          @property target\n          @default null\n          @public\n        **/\n        target: null,\n        /**\n          The CSS class to apply to `LinkComponent`'s element when its `active`\n          property is `true`.\n             @property activeClass\n          @type String\n          @default active\n          @public\n        **/\n        activeClass: 'active',\n        /**\n          The CSS class to apply to `LinkComponent`'s element when its `loading`\n          property is `true`.\n             @property loadingClass\n          @type String\n          @default loading\n          @private\n        **/\n        loadingClass: 'loading',\n        /**\n          The CSS class to apply to a `LinkComponent`'s element when its `disabled`\n          property is `true`.\n             @property disabledClass\n          @type String\n          @default disabled\n          @private\n        **/\n        disabledClass: 'disabled',\n        /**\n          Determines whether the `LinkComponent` will trigger routing via\n          the `replaceWith` routing strategy.\n             @property replace\n          @type Boolean\n          @default false\n          @public\n        **/\n        replace: false,\n        /**\n          By default the `{{link-to}}` component will bind to the `href` and\n          `title` attributes. It's discouraged that you override these defaults,\n          however you can push onto the array if needed.\n             @property attributeBindings\n          @type Array | String\n          @default ['title', 'rel', 'tabindex', 'target']\n          @public\n        */\n        attributeBindings: ['href', 'title', 'rel', 'tabindex', 'target'],\n        /**\n          By default the `{{link-to}}` component will bind to the `active`, `loading`,\n          and `disabled` classes. It is discouraged to override these directly.\n             @property classNameBindings\n          @type Array\n          @default ['active', 'loading', 'disabled', 'ember-transitioning-in', 'ember-transitioning-out']\n          @public\n        */\n        classNameBindings: ['active', 'loading', 'disabled', 'transitioningIn', 'transitioningOut'],\n        /**\n          By default the `{{link-to}}` component responds to the `click` event. You\n          can override this globally by setting this property to your custom\n          event name.\n             This is particularly useful on mobile when one wants to avoid the 300ms\n          click delay using some sort of custom `tap` event.\n             @property eventName\n          @type String\n          @default click\n          @private\n        */\n        eventName: 'click',\n        init: function () {\n            this._super.apply(this, arguments);\n            // Map desired event name to invoke function\n            var eventName = (0, _emberMetal.get)(this, 'eventName');\n            this.on(eventName, this, this._invoke);\n        },\n\n        _routing: _emberRuntime.inject.service('-routing'),\n        /**\n          Accessed as a classname binding to apply the `LinkComponent`'s `disabledClass`\n          CSS `class` to the element when the link is disabled.\n             When `true` interactions with the element will not trigger route changes.\n          @property disabled\n          @private\n        */\n        disabled: (0, _emberMetal.computed)({\n            get: function (_key) {\n                // always returns false for `get` because (due to the `set` just below)\n                // the cached return value from the set will prevent this getter from _ever_\n                // being called after a set has occured\n                return false;\n            },\n            set: function (_key, value) {\n                this._isDisabled = value;\n                return value ? (0, _emberMetal.get)(this, 'disabledClass') : false;\n            }\n        }),\n        _isActive: function (routerState) {\n            if ((0, _emberMetal.get)(this, 'loading')) {\n                return false;\n            }\n            var currentWhen = (0, _emberMetal.get)(this, 'current-when');\n            if (typeof currentWhen === 'boolean') {\n                return currentWhen;\n            }\n            var isCurrentWhenSpecified = !!currentWhen;\n            currentWhen = currentWhen || (0, _emberMetal.get)(this, 'qualifiedRouteName');\n            currentWhen = currentWhen.split(' ');\n            var routing = (0, _emberMetal.get)(this, '_routing');\n            var models = (0, _emberMetal.get)(this, 'models');\n            var resolvedQueryParams = (0, _emberMetal.get)(this, 'resolvedQueryParams');\n            for (var i = 0; i < currentWhen.length; i++) {\n                if (routing.isActiveForRoute(models, resolvedQueryParams, currentWhen[i], routerState, isCurrentWhenSpecified)) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n          Accessed as a classname binding to apply the `LinkComponent`'s `activeClass`\n          CSS `class` to the element when the link is active.\n             A `LinkComponent` is considered active when its `currentWhen` property is `true`\n          or the application's current route is the route the `LinkComponent` would trigger\n          transitions into.\n             The `currentWhen` property can match against multiple routes by separating\n          route names using the ` ` (space) character.\n             @property active\n          @private\n        */\n        active: (0, _emberMetal.computed)('activeClass', '_active', function computeLinkToComponentActiveClass() {\n            return this.get('_active') ? (0, _emberMetal.get)(this, 'activeClass') : false;\n        }),\n        _active: (0, _emberMetal.computed)('_routing.currentState', 'attrs.params', function computeLinkToComponentActive() {\n            var currentState = (0, _emberMetal.get)(this, '_routing.currentState');\n            if (!currentState) {\n                return false;\n            }\n            return this._isActive(currentState);\n        }),\n        willBeActive: (0, _emberMetal.computed)('_routing.targetState', function computeLinkToComponentWillBeActive() {\n            var routing = (0, _emberMetal.get)(this, '_routing');\n            var targetState = (0, _emberMetal.get)(routing, 'targetState');\n            if ((0, _emberMetal.get)(routing, 'currentState') === targetState) {\n                return;\n            }\n            return this._isActive(targetState);\n        }),\n        transitioningIn: (0, _emberMetal.computed)('active', 'willBeActive', function computeLinkToComponentTransitioningIn() {\n            if ((0, _emberMetal.get)(this, 'willBeActive') === true && !(0, _emberMetal.get)(this, '_active')) {\n                return 'ember-transitioning-in';\n            } else {\n                return false;\n            }\n        }),\n        transitioningOut: (0, _emberMetal.computed)('active', 'willBeActive', function computeLinkToComponentTransitioningOut() {\n            if ((0, _emberMetal.get)(this, 'willBeActive') === false && (0, _emberMetal.get)(this, '_active')) {\n                return 'ember-transitioning-out';\n            } else {\n                return false;\n            }\n        }),\n        _invoke: function (event) {\n            if (!(0, _emberViews.isSimpleClick)(event)) {\n                return true;\n            }\n            var preventDefault = (0, _emberMetal.get)(this, 'preventDefault');\n            var targetAttribute = (0, _emberMetal.get)(this, 'target');\n            if (preventDefault !== false) {\n                if (!targetAttribute || targetAttribute === '_self') {\n                    event.preventDefault();\n                }\n            }\n            if ((0, _emberMetal.get)(this, 'bubbles') === false) {\n                event.stopPropagation();\n            }\n            if (this._isDisabled) {\n                return false;\n            }\n            if ((0, _emberMetal.get)(this, 'loading')) {\n                (true && (0, _emberDebug.warn)('This link-to is in an inactive loading state because at least one of its parameters presently has a null/undefined value, or the provided route name is invalid.', false));\n\n                return false;\n            }\n            if (targetAttribute && targetAttribute !== '_self') {\n                return false;\n            }\n            var qualifiedRouteName = (0, _emberMetal.get)(this, 'qualifiedRouteName');\n            var models = (0, _emberMetal.get)(this, 'models');\n            var queryParams = (0, _emberMetal.get)(this, 'queryParams.values');\n            var shouldReplace = (0, _emberMetal.get)(this, 'replace');\n            var payload = {\n                queryParams: queryParams,\n                routeName: qualifiedRouteName\n            };\n            // tslint:disable-next-line:max-line-length\n            (0, _emberMetal.flaggedInstrument)('interaction.link-to', payload, this._generateTransition(payload, qualifiedRouteName, models, queryParams, shouldReplace));\n            return false;\n        },\n        _generateTransition: function (payload, qualifiedRouteName, models, queryParams, shouldReplace) {\n            var routing = (0, _emberMetal.get)(this, '_routing');\n            return function () {\n                payload.transition = routing.transitionTo(qualifiedRouteName, models, queryParams, shouldReplace);\n            };\n        },\n\n        queryParams: null,\n        qualifiedRouteName: (0, _emberMetal.computed)('targetRouteName', '_routing.currentState', function computeLinkToComponentQualifiedRouteName() {\n            var params = (0, _emberMetal.get)(this, 'params');\n            var paramsLength = params.length;\n            var lastParam = params[paramsLength - 1];\n            if (lastParam && lastParam.isQueryParams) {\n                paramsLength--;\n            }\n            var onlyQueryParamsSupplied = this[_component.HAS_BLOCK] ? paramsLength === 0 : paramsLength === 1;\n            if (onlyQueryParamsSupplied) {\n                return (0, _emberMetal.get)(this, '_routing.currentRouteName');\n            }\n            return (0, _emberMetal.get)(this, 'targetRouteName');\n        }),\n        resolvedQueryParams: (0, _emberMetal.computed)('queryParams', function computeLinkToComponentResolvedQueryParams() {\n            var resolvedQueryParams = {};\n            var queryParams = (0, _emberMetal.get)(this, 'queryParams');\n            if (!queryParams) {\n                return resolvedQueryParams;\n            }\n            var values = queryParams.values;\n            for (var key in values) {\n                if (!values.hasOwnProperty(key)) {\n                    continue;\n                }\n                resolvedQueryParams[key] = values[key];\n            }\n            return resolvedQueryParams;\n        }),\n        /**\n          Sets the element's `href` attribute to the url for\n          the `LinkComponent`'s targeted route.\n             If the `LinkComponent`'s `tagName` is changed to a value other\n          than `a`, this property will be ignored.\n             @property href\n          @private\n        */\n        href: (0, _emberMetal.computed)('models', 'qualifiedRouteName', function computeLinkToComponentHref() {\n            if ((0, _emberMetal.get)(this, 'tagName') !== 'a') {\n                return;\n            }\n            var qualifiedRouteName = (0, _emberMetal.get)(this, 'qualifiedRouteName');\n            var models = (0, _emberMetal.get)(this, 'models');\n            if ((0, _emberMetal.get)(this, 'loading')) {\n                return (0, _emberMetal.get)(this, 'loadingHref');\n            }\n            var routing = (0, _emberMetal.get)(this, '_routing');\n            var queryParams = (0, _emberMetal.get)(this, 'queryParams.values');\n            if (true) {\n                /*\n                 * Unfortunately, to get decent error messages, we need to do this.\n                 * In some future state we should be able to use a \"feature flag\"\n                 * which allows us to strip this without needing to call it twice.\n                 *\n                 * if (isDebugBuild()) {\n                 *   // Do the useful debug thing, probably including try/catch.\n                 * } else {\n                 *   // Do the performant thing.\n                 * }\n                 */\n                try {\n                    routing.generateURL(qualifiedRouteName, models, queryParams);\n                } catch (e) {\n                    (true && !(false) && (0, _emberDebug.assert)('You attempted to define a `{{link-to \"' + qualifiedRouteName + '\"}}` but did not pass the parameters required for generating its dynamic segments. ' + e.message));\n                }\n            }\n            return routing.generateURL(qualifiedRouteName, models, queryParams);\n        }),\n        loading: (0, _emberMetal.computed)('_modelsAreLoaded', 'qualifiedRouteName', function computeLinkToComponentLoading() {\n            var qualifiedRouteName = (0, _emberMetal.get)(this, 'qualifiedRouteName');\n            var modelsAreLoaded = (0, _emberMetal.get)(this, '_modelsAreLoaded');\n            if (!modelsAreLoaded || qualifiedRouteName === null || qualifiedRouteName === undefined) {\n                return (0, _emberMetal.get)(this, 'loadingClass');\n            }\n        }),\n        _modelsAreLoaded: (0, _emberMetal.computed)('models', function computeLinkToComponentModelsAreLoaded() {\n            var models = (0, _emberMetal.get)(this, 'models');\n            for (var i = 0; i < models.length; i++) {\n                var model = models[i];\n                if (model === null || model === undefined) {\n                    return false;\n                }\n            }\n            return true;\n        }),\n        _getModels: function (params) {\n            var modelCount = params.length - 1;\n            var models = new Array(modelCount);\n            for (var i = 0; i < modelCount; i++) {\n                var value = params[i + 1];\n                models[i] = value;\n            }\n            return models;\n        },\n\n        /**\n          The default href value to use while a link-to is loading.\n          Only applies when tagName is 'a'\n             @property loadingHref\n          @type String\n          @default #\n          @private\n        */\n        loadingHref: '#',\n        didReceiveAttrs: function () {\n            var queryParams = void 0;\n            var params = (0, _emberMetal.get)(this, 'params');\n            if (params) {\n                // Do not mutate params in place\n                params = params.slice();\n            }\n            (true && !(params && params.length) && (0, _emberDebug.assert)('You must provide one or more parameters to the link-to component.', params && params.length));\n\n            var disabledWhen = (0, _emberMetal.get)(this, 'disabledWhen');\n            if (disabledWhen !== undefined) {\n                this.set('disabled', disabledWhen);\n            }\n            // Process the positional arguments, in order.\n            // 1. Inline link title comes first, if present.\n            if (!this[_component.HAS_BLOCK]) {\n                this.set('linkTitle', params.shift());\n            }\n            // 2. `targetRouteName` is now always at index 0.\n            this.set('targetRouteName', params[0]);\n            // 3. The last argument (if still remaining) is the `queryParams` object.\n            var lastParam = params[params.length - 1];\n            if (lastParam && lastParam.isQueryParams) {\n                queryParams = params.pop();\n            } else {\n                queryParams = { values: {} };\n            }\n            this.set('queryParams', queryParams);\n            // 4. Any remaining indices (excepting `targetRouteName` at 0) are `models`.\n            if (params.length > 1) {\n                this.set('models', this._getModels(params));\n            } else {\n                this.set('models', []);\n            }\n        }\n    }); /**\n        @module ember\n        */\n    /**\n      The `{{link-to}}` component renders a link to the supplied\n      `routeName` passing an optionally supplied model to the\n      route as its `model` context of the route. The block\n      for `{{link-to}}` becomes the innerHTML of the rendered\n      element:\n    \n      ```handlebars\n      {{#link-to 'photoGallery'}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n    \n      You can also use an inline form of `{{link-to}}` component by\n      passing the link text as the first argument\n      to the component:\n    \n      ```handlebars\n      {{link-to 'Great Hamster Photos' 'photoGallery'}}\n      ```\n    \n      Both will result in:\n    \n      ```html\n      <a href=\"/hamster-photos\">\n        Great Hamster Photos\n      </a>\n      ```\n    \n      ### Supplying a tagName\n      By default `{{link-to}}` renders an `<a>` element. This can\n      be overridden for a single use of `{{link-to}}` by supplying\n      a `tagName` option:\n    \n      ```handlebars\n      {{#link-to 'photoGallery' tagName=\"li\"}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n    \n      ```html\n      <li>\n        Great Hamster Photos\n      </li>\n      ```\n    \n      To override this option for your entire application, see\n      \"Overriding Application-wide Defaults\".\n    \n      ### Disabling the `link-to` component\n      By default `{{link-to}}` is enabled.\n      any passed value to the `disabled` component property will disable\n      the `link-to` component.\n    \n      static use: the `disabled` option:\n    \n      ```handlebars\n      {{#link-to 'photoGallery' disabled=true}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n    \n      dynamic use: the `disabledWhen` option:\n    \n      ```handlebars\n      {{#link-to 'photoGallery' disabledWhen=controller.someProperty}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n    \n      any truthy value passed to `disabled` will disable it except `undefined`.\n    \n      See \"Overriding Application-wide Defaults\" for more.\n    \n      ### Handling `href`\n      `{{link-to}}` will use your application's Router to\n      fill the element's `href` property with a url that\n      matches the path to the supplied `routeName` for your\n      router's configured `Location` scheme, which defaults\n      to HashLocation.\n    \n      ### Handling current route\n      `{{link-to}}` will apply a CSS class name of 'active'\n      when the application's current route matches\n      the supplied routeName. For example, if the application's\n      current route is 'photoGallery.recent' the following\n      use of `{{link-to}}`:\n    \n      ```handlebars\n      {{#link-to 'photoGallery.recent'}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n    \n      will result in\n    \n      ```html\n      <a href=\"/hamster-photos/this-week\" class=\"active\">\n        Great Hamster Photos\n      </a>\n      ```\n    \n      The CSS class name used for active classes can be customized\n      for a single use of `{{link-to}}` by passing an `activeClass`\n      option:\n    \n      ```handlebars\n      {{#link-to 'photoGallery.recent' activeClass=\"current-url\"}}\n        Great Hamster Photos\n      {{/link-to}}\n      ```\n    \n      ```html\n      <a href=\"/hamster-photos/this-week\" class=\"current-url\">\n        Great Hamster Photos\n      </a>\n      ```\n    \n      To override this option for your entire application, see\n      \"Overriding Application-wide Defaults\".\n    \n      ### Keeping a link active for other routes\n    \n      If you need a link to be 'active' even when it doesn't match\n      the current route, you can use the `current-when` argument.\n    \n      ```handlebars\n      {{#link-to 'photoGallery' current-when='photos'}}\n        Photo Gallery\n      {{/link-to}}\n      ```\n    \n      This may be helpful for keeping links active for:\n    \n      * non-nested routes that are logically related\n      * some secondary menu approaches\n      * 'top navigation' with 'sub navigation' scenarios\n    \n      A link will be active if `current-when` is `true` or the current\n      route is the route this link would transition to.\n    \n      To match multiple routes 'space-separate' the routes:\n    \n      ```handlebars\n      {{#link-to 'gallery' current-when='photos drawings paintings'}}\n        Art Gallery\n      {{/link-to}}\n      ```\n    \n      ### Supplying a model\n      An optional model argument can be used for routes whose\n      paths contain dynamic segments. This argument will become\n      the model context of the linked route:\n    \n      ```javascript\n      Router.map(function() {\n        this.route(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n      });\n      ```\n    \n      ```handlebars\n      {{#link-to 'photoGallery' aPhoto}}\n        {{aPhoto.title}}\n      {{/link-to}}\n      ```\n    \n      ```html\n      <a href=\"/hamster-photos/42\">\n        Tomster\n      </a>\n      ```\n    \n      ### Supplying multiple models\n      For deep-linking to route paths that contain multiple\n      dynamic segments, multiple model arguments can be used.\n      As the router transitions through the route path, each\n      supplied model argument will become the context for the\n      route with the dynamic segments:\n    \n      ```javascript\n      Router.map(function() {\n        this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" }, function() {\n          this.route(\"comment\", {path: \"comments/:comment_id\"});\n        });\n      });\n      ```\n      This argument will become the model context of the linked route:\n    \n      ```handlebars\n      {{#link-to 'photoGallery.comment' aPhoto comment}}\n        {{comment.body}}\n      {{/link-to}}\n      ```\n    \n      ```html\n      <a href=\"/hamster-photos/42/comments/718\">\n        A+++ would snuggle again.\n      </a>\n      ```\n    \n      ### Supplying an explicit dynamic segment value\n      If you don't have a model object available to pass to `{{link-to}}`,\n      an optional string or integer argument can be passed for routes whose\n      paths contain dynamic segments. This argument will become the value\n      of the dynamic segment:\n    \n      ```javascript\n      Router.map(function() {\n        this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" });\n      });\n      ```\n    \n      ```handlebars\n      {{#link-to 'photoGallery' aPhotoId}}\n        {{aPhoto.title}}\n      {{/link-to}}\n      ```\n    \n      ```html\n      <a href=\"/hamster-photos/42\">\n        Tomster\n      </a>\n      ```\n    \n      When transitioning into the linked route, the `model` hook will\n      be triggered with parameters including this passed identifier.\n    \n      ### Allowing Default Action\n    \n      By default the `{{link-to}}` component prevents the default browser action\n      by calling `preventDefault()` as this sort of action bubbling is normally\n      handled internally and we do not want to take the browser to a new URL (for\n      example).\n    \n      If you need to override this behavior specify `preventDefault=false` in\n      your template:\n    \n      ```handlebars\n      {{#link-to 'photoGallery' aPhotoId preventDefault=false}}\n        {{aPhotoId.title}}\n      {{/link-to}}\n      ```\n    \n      ### Overriding attributes\n      You can override any given property of the `LinkComponent`\n      that is generated by the `{{link-to}}` component by passing\n      key/value pairs, like so:\n    \n      ```handlebars\n      {{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}\n        Uh-mazing!\n      {{/link-to}}\n      ```\n    \n      See [LinkComponent](/api/ember/release/classes/LinkComponent) for a\n      complete list of overrideable properties. Be sure to also\n      check out inherited properties of `LinkComponent`.\n    \n      ### Overriding Application-wide Defaults\n    \n      ``{{link-to}}`` creates an instance of `LinkComponent` for rendering. To\n      override options for your entire application, export your customized\n      `LinkComponent` from `app/components/link-to.js` with the desired overrides:\n    \n      ```javascript\n      // app/components/link-to.js\n      import LinkComponent from '@ember/routing/link-component';\n    \n      export default LinkComponent.extend({\n        activeClass: \"is-active\",\n        tagName: 'li'\n      })\n      ```\n    \n      It is also possible to override the default event in this manner:\n    \n      ```javascript\n      import LinkCompoennt from '@ember/routing/link-component';\n    \n      export default LinkComponent.extend({\n        eventName: 'customEventName'\n      });\n      ```\n    \n      @method link-to\n      @for Ember.Templates.helpers\n      @param {String} routeName\n      @param {Object} [context]*\n      @param [options] {Object} Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent\n      @return {String} HTML string\n      @see {LinkComponent}\n      @public\n    */\n\n    LinkComponent.toString = function () {\n        return 'LinkComponent';\n    };\n    LinkComponent.reopenClass({\n        positionalParams: 'params'\n    });\n    exports.default = LinkComponent;\n});","enifed('ember-glimmer/components/text_area', ['exports', 'ember-views', 'ember-glimmer/component', 'ember-glimmer/templates/empty'], function (exports, _emberViews, _component, _empty) {\n  'use strict';\n\n  exports.default = _component.default.extend(_emberViews.TextSupport, {\n    classNames: ['ember-text-area'],\n    layout: _empty.default,\n    tagName: 'textarea',\n    attributeBindings: ['rows', 'cols', 'name', 'selectionEnd', 'selectionStart', 'wrap', 'lang', 'dir', 'value'],\n    rows: null,\n    cols: null\n  });\n});","enifed('ember-glimmer/components/text_field', ['exports', 'ember-environment', 'ember-metal', 'ember-views', 'ember-glimmer/component', 'ember-glimmer/templates/empty'], function (exports, _emberEnvironment, _emberMetal, _emberViews, _component, _empty) {\n    'use strict';\n\n    var inputTypes = Object.create(null); /**\n                                          @module @ember/component\n                                          */\n\n    function canSetTypeOfInput(type) {\n        if (type in inputTypes) {\n            return inputTypes[type];\n        }\n        // if running in outside of a browser always return the\n        // original type\n        if (!_emberEnvironment.environment.hasDOM) {\n            inputTypes[type] = type;\n            return type;\n        }\n        var inputTypeTestElement = document.createElement('input');\n        try {\n            inputTypeTestElement.type = type;\n        } catch (e) {\n            // ignored\n        }\n        return inputTypes[type] = inputTypeTestElement.type === type;\n    }\n    /**\n    \n      The internal class used to create text inputs when the `{{input}}`\n      helper is used with `type` of `text`.\n    \n      See [Ember.Templates.helpers.input](/api/ember/release/classes/Ember.Templates.helpers/methods/input?anchor=input)  for usage details.\n    \n      ## Layout and LayoutName properties\n    \n      Because HTML `input` elements are self closing `layout` and `layoutName`\n      properties will not be applied.\n    \n      @class TextField\n      @extends Component\n      @uses Ember.TextSupport\n      @public\n    */\n    exports.default = _component.default.extend(_emberViews.TextSupport, {\n        layout: _empty.default,\n        classNames: ['ember-text-field'],\n        tagName: 'input',\n        attributeBindings: ['accept', 'autocomplete', 'autosave', 'dir', 'formaction', 'formenctype', 'formmethod', 'formnovalidate', 'formtarget', 'height', 'inputmode', 'lang', 'list', 'type', 'max', 'min', 'multiple', 'name', 'pattern', 'size', 'step', 'value', 'width'],\n        /**\n          The `value` attribute of the input element. As the user inputs text, this\n          property is updated live.\n             @property value\n          @type String\n          @default \"\"\n          @public\n        */\n        value: '',\n        /**\n          The `type` attribute of the input element.\n             @property type\n          @type String\n          @default \"text\"\n          @public\n        */\n        type: (0, _emberMetal.computed)({\n            get: function () {\n                return 'text';\n            },\n            set: function (_key, value) {\n                var type = 'text';\n                if (canSetTypeOfInput(value)) {\n                    type = value;\n                }\n                return type;\n            }\n        }),\n        /**\n          The `size` of the text field in characters.\n             @property size\n          @type String\n          @default null\n          @public\n        */\n        size: null,\n        /**\n          The `pattern` attribute of input element.\n             @property pattern\n          @type String\n          @default null\n          @public\n        */\n        pattern: null,\n        /**\n          The `min` attribute of input element used with `type=\"number\"` or `type=\"range\"`.\n             @property min\n          @type String\n          @default null\n          @since 1.4.0\n          @public\n        */\n        min: null,\n        /**\n          The `max` attribute of input element used with `type=\"number\"` or `type=\"range\"`.\n             @property max\n          @type String\n          @default null\n          @since 1.4.0\n          @public\n        */\n        max: null\n    });\n});","enifed('ember-glimmer/dom', ['exports', '@glimmer/runtime', '@glimmer/node'], function (exports, _runtime, _node) {\n  'use strict';\n\n  Object.defineProperty(exports, 'DOMChanges', {\n    enumerable: true,\n    get: function () {\n      return _runtime.DOMChanges;\n    }\n  });\n  Object.defineProperty(exports, 'DOMTreeConstruction', {\n    enumerable: true,\n    get: function () {\n      return _runtime.DOMTreeConstruction;\n    }\n  });\n  Object.defineProperty(exports, 'NodeDOMTreeConstruction', {\n    enumerable: true,\n    get: function () {\n      return _node.NodeDOMTreeConstruction;\n    }\n  });\n});","enifed('ember-glimmer/environment', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-debug', 'ember-metal', 'ember-utils', 'ember-views', 'ember-glimmer/component-managers/curly', 'ember-glimmer/component-managers/template-only', 'ember-glimmer/syntax', 'ember-glimmer/utils/debug-stack', 'ember-glimmer/utils/iterable', 'ember-glimmer/utils/references', 'ember-glimmer/helpers/-class', 'ember-glimmer/helpers/-html-safe', 'ember-glimmer/helpers/-input-type', 'ember-glimmer/helpers/-normalize-class', 'ember-glimmer/helpers/action', 'ember-glimmer/helpers/component', 'ember-glimmer/helpers/concat', 'ember-glimmer/helpers/each-in', 'ember-glimmer/helpers/get', 'ember-glimmer/helpers/hash', 'ember-glimmer/helpers/if-unless', 'ember-glimmer/helpers/log', 'ember-glimmer/helpers/mut', 'ember-glimmer/helpers/query-param', 'ember-glimmer/helpers/readonly', 'ember-glimmer/helpers/unbound', 'ember-glimmer/modifiers/action', 'ember-glimmer/protocol-for-url', 'ember/features'], function (exports, _emberBabel, _runtime, _emberDebug, _emberMetal, _emberUtils, _emberViews, _curly, _templateOnly, _syntax, _debugStack, _iterable, _references, _class, _htmlSafe, _inputType, _normalizeClass, _action, _component, _concat, _eachIn, _get, _hash, _ifUnless, _log, _mut, _queryParam, _readonly, _unbound, _action2, _protocolForUrl, _features) {\n    'use strict';\n\n    function instrumentationPayload(name) {\n        return { object: 'component:' + name };\n    }\n    function isTemplateFactory(template) {\n        return typeof template.create === 'function';\n    }\n\n    var Environment = function (_GlimmerEnvironment) {\n        (0, _emberBabel.inherits)(Environment, _GlimmerEnvironment);\n\n        Environment.create = function create(options) {\n            return new this(options);\n        };\n\n        function Environment(injections) {\n            (0, _emberBabel.classCallCheck)(this, Environment);\n\n            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _GlimmerEnvironment.call(this, injections));\n\n            _this.owner = injections[_emberUtils.OWNER];\n            _this.isInteractive = _this.owner.lookup('-environment:main').isInteractive;\n            // can be removed once https://github.com/tildeio/glimmer/pull/305 lands\n            _this.destroyedComponents = [];\n            (0, _protocolForUrl.default)(_this);\n            _this._definitionCache = new _emberMetal.Cache(2000, function (_ref) {\n                var name = _ref.name,\n                    source = _ref.source,\n                    owner = _ref.owner;\n\n                var _lookupComponent = (0, _emberViews.lookupComponent)(owner, name, { source: source }),\n                    componentFactory = _lookupComponent.component,\n                    layout = _lookupComponent.layout;\n\n                var customManager = void 0;\n                if (_features.EMBER_GLIMMER_TEMPLATE_ONLY_COMPONENTS && layout && !componentFactory) {\n                    return new _templateOnly.TemplateOnlyComponentDefinition(name, layout);\n                } else if (componentFactory || layout) {\n                    if (_features.GLIMMER_CUSTOM_COMPONENT_MANAGER) {\n                        var managerId = layout && layout.meta.managerId;\n                        if (managerId) {\n                            customManager = owner.factoryFor('component-manager:' + managerId).class;\n                        }\n                    }\n                    return new _curly.CurlyComponentDefinition(name, componentFactory, layout, undefined, customManager);\n                }\n                return undefined;\n            }, function (_ref2) {\n                var name = _ref2.name,\n                    source = _ref2.source,\n                    owner = _ref2.owner;\n\n                var expandedName = source && _this._resolveLocalLookupName(name, source, owner) || name;\n                var ownerGuid = (0, _emberUtils.guidFor)(owner);\n                return ownerGuid + '|' + expandedName;\n            });\n            _this._templateCache = new _emberMetal.Cache(1000, function (_ref3) {\n                var Template = _ref3.Template,\n                    owner = _ref3.owner;\n\n                if (isTemplateFactory(Template)) {\n                    var _Template$create;\n\n                    // we received a factory\n                    return Template.create((_Template$create = { env: _this }, _Template$create[_emberUtils.OWNER] = owner, _Template$create));\n                } else {\n                    // we were provided an instance already\n                    return Template;\n                }\n            }, function (_ref4) {\n                var Template = _ref4.Template,\n                    owner = _ref4.owner;\n                return (0, _emberUtils.guidFor)(owner) + '|' + Template.id;\n            });\n            _this._compilerCache = new _emberMetal.Cache(10, function (Compiler) {\n                return new _emberMetal.Cache(2000, function (template) {\n                    var compilable = new Compiler(template);\n                    return (0, _runtime.compileLayout)(compilable, _this);\n                }, function (template) {\n                    var owner = template.meta.owner;\n                    return (0, _emberUtils.guidFor)(owner) + '|' + template.id;\n                });\n            }, function (Compiler) {\n                return Compiler.id;\n            });\n            _this.builtInModifiers = {\n                action: new _action2.default()\n            };\n            _this.builtInHelpers = {\n                'if': _ifUnless.inlineIf,\n                action: _action.default,\n                concat: _concat.default,\n                get: _get.default,\n                hash: _hash.default,\n                log: _log.default,\n                mut: _mut.default,\n                'query-params': _queryParam.default,\n                readonly: _readonly.default,\n                unbound: _unbound.default,\n                'unless': _ifUnless.inlineUnless,\n                '-class': _class.default,\n                '-each-in': _eachIn.default,\n                '-input-type': _inputType.default,\n                '-normalize-class': _normalizeClass.default,\n                '-html-safe': _htmlSafe.default,\n                '-get-dynamic-var': _runtime.getDynamicVar\n            };\n            if (true) {\n                _this.debugStack = new _debugStack.default();\n            }\n            return _this;\n        }\n        // this gets clobbered by installPlatformSpecificProtocolForURL\n        // it really should just delegate to a platform specific injection\n\n\n        Environment.prototype.protocolForURL = function protocolForURL(s) {\n            return s;\n        };\n\n        Environment.prototype._resolveLocalLookupName = function _resolveLocalLookupName(name, source, owner) {\n            return _features.EMBER_MODULE_UNIFICATION ? source + ':' + name : owner._resolveLocalLookupName(name, source);\n        };\n\n        Environment.prototype.macros = function macros() {\n            var macros = _GlimmerEnvironment.prototype.macros.call(this);\n            (0, _syntax.populateMacros)(macros.blocks, macros.inlines);\n            return macros;\n        };\n\n        Environment.prototype.hasComponentDefinition = function hasComponentDefinition() {\n            return false;\n        };\n\n        Environment.prototype.getComponentDefinition = function getComponentDefinition(name, _ref5) {\n            var owner = _ref5.owner,\n                moduleName = _ref5.moduleName;\n\n            var finalizer = (0, _emberMetal._instrumentStart)('render.getComponentDefinition', instrumentationPayload, name);\n            var source = moduleName && 'template:' + moduleName;\n            var definition = this._definitionCache.get({ name: name, source: source, owner: owner });\n            finalizer();\n            // TODO the glimmer-vm wants this to always have a def\n            // but internally we need it to sometimes be undefined\n            return definition;\n        };\n\n        Environment.prototype.getTemplate = function getTemplate(Template, owner) {\n            return this._templateCache.get({ Template: Template, owner: owner });\n        };\n\n        Environment.prototype.getCompiledBlock = function getCompiledBlock(Compiler, template) {\n            var compilerCache = this._compilerCache.get(Compiler);\n            return compilerCache.get(template);\n        };\n\n        Environment.prototype.hasPartial = function hasPartial(name, meta) {\n            return (0, _emberViews.hasPartial)(name, meta.owner);\n        };\n\n        Environment.prototype.lookupPartial = function lookupPartial(name, meta) {\n            var partial = {\n                name: name,\n                template: (0, _emberViews.lookupPartial)(name, meta.owner)\n            };\n            if (partial.template) {\n                return partial;\n            } else {\n                throw new Error(name + ' is not a partial');\n            }\n        };\n\n        Environment.prototype.hasHelper = function hasHelper(name, _ref6) {\n            var owner = _ref6.owner,\n                moduleName = _ref6.moduleName;\n\n            if (name === 'component' || this.builtInHelpers[name]) {\n                return true;\n            }\n            var options = { source: 'template:' + moduleName };\n            return owner.hasRegistration('helper:' + name, options) || owner.hasRegistration('helper:' + name);\n        };\n\n        Environment.prototype.lookupHelper = function lookupHelper(name, meta) {\n            if (name === 'component') {\n                return function (vm, args) {\n                    return (0, _component.default)(vm, args, meta);\n                };\n            }\n            var owner = meta.owner,\n                moduleName = meta.moduleName;\n\n            var helper = this.builtInHelpers[name];\n            if (helper) {\n                return helper;\n            }\n            var options = moduleName && { source: 'template:' + moduleName } || {};\n            var helperFactory = owner.factoryFor('helper:' + name, options) || owner.factoryFor('helper:' + name);\n            // TODO: try to unify this into a consistent protocol to avoid wasteful closure allocations\n            var HelperReference = void 0;\n            if (helperFactory.class.isSimpleHelperFactory) {\n                HelperReference = _references.SimpleHelperReference;\n            } else if (helperFactory.class.isHelperFactory) {\n                HelperReference = _references.ClassBasedHelperReference;\n            } else {\n                throw new Error(name + ' is not a helper');\n            }\n            return function (vm, args) {\n                return HelperReference.create(helperFactory, vm, args.capture());\n            };\n        };\n\n        Environment.prototype.hasModifier = function hasModifier(name) {\n            return !!this.builtInModifiers[name];\n        };\n\n        Environment.prototype.lookupModifier = function lookupModifier(name) {\n            var modifier = this.builtInModifiers[name];\n            if (modifier) {\n                return modifier;\n            } else {\n                throw new Error(name + ' is not a modifier');\n            }\n        };\n\n        Environment.prototype.toConditionalReference = function toConditionalReference(reference) {\n            return _references.ConditionalReference.create(reference);\n        };\n\n        Environment.prototype.iterableFor = function iterableFor(ref, key) {\n            return (0, _iterable.default)(ref, key);\n        };\n\n        Environment.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {\n            if (this.isInteractive) {\n                _GlimmerEnvironment.prototype.scheduleInstallModifier.call(this, modifier, manager);\n            }\n        };\n\n        Environment.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {\n            if (this.isInteractive) {\n                _GlimmerEnvironment.prototype.scheduleUpdateModifier.call(this, modifier, manager);\n            }\n        };\n\n        Environment.prototype.didDestroy = function didDestroy(destroyable) {\n            destroyable.destroy();\n        };\n\n        Environment.prototype.begin = function begin() {\n            this.inTransaction = true;\n            _GlimmerEnvironment.prototype.begin.call(this);\n        };\n\n        Environment.prototype.commit = function commit() {\n            var destroyedComponents = this.destroyedComponents;\n            this.destroyedComponents = [];\n            // components queued for destruction must be destroyed before firing\n            // `didCreate` to prevent errors when removing and adding a component\n            // with the same name (would throw an error when added to view registry)\n            for (var i = 0; i < destroyedComponents.length; i++) {\n                destroyedComponents[i].destroy();\n            }\n            _GlimmerEnvironment.prototype.commit.call(this);\n            this.inTransaction = false;\n        };\n\n        return Environment;\n    }(_runtime.Environment);\n\n    exports.default = Environment;\n\n    if (true) {\n        var StyleAttributeManager = function (_AttributeManager) {\n            (0, _emberBabel.inherits)(StyleAttributeManager, _AttributeManager);\n\n            function StyleAttributeManager() {\n                (0, _emberBabel.classCallCheck)(this, StyleAttributeManager);\n                return (0, _emberBabel.possibleConstructorReturn)(this, _AttributeManager.apply(this, arguments));\n            }\n\n            StyleAttributeManager.prototype.setAttribute = function setAttribute(dom, element, value) {\n                (true && (0, _emberDebug.warn)((0, _emberViews.constructStyleDeprecationMessage)(value), function () {\n                    if (value === null || value === undefined || (0, _runtime.isSafeString)(value)) {\n                        return true;\n                    }\n                    return false;\n                }(), { id: 'ember-htmlbars.style-xss-warning' }));\n\n                _AttributeManager.prototype.setAttribute.call(this, dom, element, value);\n            };\n\n            StyleAttributeManager.prototype.updateAttribute = function updateAttribute(dom, element, value) {\n                (true && (0, _emberDebug.warn)((0, _emberViews.constructStyleDeprecationMessage)(value), function () {\n                    if (value === null || value === undefined || (0, _runtime.isSafeString)(value)) {\n                        return true;\n                    }\n                    return false;\n                }(), { id: 'ember-htmlbars.style-xss-warning' }));\n\n                _AttributeManager.prototype.updateAttribute.call(this, dom, element, value);\n            };\n\n            return StyleAttributeManager;\n        }(_runtime.AttributeManager);\n\n        var STYLE_ATTRIBUTE_MANANGER = new StyleAttributeManager('style');\n        Environment.prototype.attributeFor = function (element, attribute, isTrusting) {\n            if (attribute === 'style' && !isTrusting) {\n                return STYLE_ATTRIBUTE_MANANGER;\n            }\n            return _runtime.Environment.prototype.attributeFor.call(this, element, attribute, isTrusting);\n        };\n    }\n});","enifed('ember-glimmer/helper', ['exports', 'ember-babel', '@glimmer/reference', 'ember-runtime', 'ember-utils'], function (exports, _emberBabel, _reference, _emberRuntime, _emberUtils) {\n    'use strict';\n\n    exports.SimpleHelper = exports.RECOMPUTE_TAG = undefined;\n    exports.helper = helper;\n    var RECOMPUTE_TAG = exports.RECOMPUTE_TAG = (0, _emberUtils.symbol)('RECOMPUTE_TAG');\n    /**\n      Ember Helpers are functions that can compute values, and are used in templates.\n      For example, this code calls a helper named `format-currency`:\n    \n      ```handlebars\n      <div>{{format-currency cents currency=\"$\"}}</div>\n      ```\n    \n      Additionally a helper can be called as a nested helper (sometimes called a\n      subexpression). In this example, the computed value of a helper is passed\n      to a component named `show-money`:\n    \n      ```handlebars\n      {{show-money amount=(format-currency cents currency=\"$\")}}\n      ```\n    \n      Helpers defined using a class must provide a `compute` function. For example:\n    \n      ```app/helpers/format-currency.js\n      import Helper from '@ember/component/helper';\n    \n      export default Helper.extend({\n        compute(params, hash) {\n          let cents = params[0];\n          let currency = hash.currency;\n          return `${currency}${cents * 0.01}`;\n        }\n      });\n      ```\n    \n      Each time the input to a helper changes, the `compute` function will be\n      called again.\n    \n      As instances, these helpers also have access to the container an will accept\n      injected dependencies.\n    \n      Additionally, class helpers can call `recompute` to force a new computation.\n    \n      @class Helper\n      @public\n      @since 1.13.0\n    */\n    /**\n    @module @ember/component\n    */\n    var Helper = _emberRuntime.FrameworkObject.extend({\n        isHelperInstance: true,\n        init: function () {\n            this._super.apply(this, arguments);\n            this[RECOMPUTE_TAG] = new _reference.DirtyableTag();\n        },\n        recompute: function () {\n            this[RECOMPUTE_TAG].dirty();\n        }\n    });\n    Helper.reopenClass({\n        isHelperFactory: true\n    });\n\n    var SimpleHelper = exports.SimpleHelper = function () {\n        function SimpleHelper(compute) {\n            (0, _emberBabel.classCallCheck)(this, SimpleHelper);\n\n            this.compute = compute;\n            this.isHelperFactory = true;\n            this.isHelperInstance = true;\n            this.isSimpleHelperFactory = true;\n        }\n\n        SimpleHelper.prototype.create = function create() {\n            return this;\n        };\n\n        return SimpleHelper;\n    }();\n\n    /**\n      In many cases, the ceremony of a full `Helper` class is not required.\n      The `helper` method create pure-function helpers without instances. For\n      example:\n    \n      ```app/helpers/format-currency.js\n      import { helper } from '@ember/component/helper';\n    \n      export default helper(function(params, hash) {\n        let cents = params[0];\n        let currency = hash.currency;\n        return `${currency}${cents * 0.01}`;\n      });\n      ```\n    \n      @static\n      @param {Function} helper The helper function\n      @method helper\n      @for @ember/component/helper\n      @public\n      @since 1.13.0\n    */\n    function helper(helperFn) {\n        return new SimpleHelper(helperFn);\n    }\n    exports.default = Helper;\n});","enifed('ember-glimmer/helpers/-class', ['exports', 'ember-runtime', 'ember-glimmer/utils/references'], function (exports, _emberRuntime, _references) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return new _references.InternalHelperReference(classHelper, args.capture());\n    };\n\n    function classHelper(_ref) {\n        var positional = _ref.positional;\n\n        var path = positional.at(0);\n        var args = positional.length;\n        var value = path.value();\n        if (value === true) {\n            if (args > 1) {\n                return _emberRuntime.String.dasherize(positional.at(1).value());\n            }\n            return null;\n        }\n        if (value === false) {\n            if (args > 2) {\n                return _emberRuntime.String.dasherize(positional.at(2).value());\n            }\n            return null;\n        }\n        return value;\n    }\n});","enifed('ember-glimmer/helpers/-html-safe', ['exports', 'ember-glimmer/utils/references', 'ember-glimmer/utils/string'], function (exports, _references, _string) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return new _references.InternalHelperReference(htmlSafe, args.capture());\n    };\n\n    function htmlSafe(_ref) {\n        var positional = _ref.positional;\n\n        var path = positional.at(0);\n        return new _string.SafeString(path.value());\n    }\n});","enifed('ember-glimmer/helpers/-input-type', ['exports', 'ember-glimmer/utils/references'], function (exports, _references) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return new _references.InternalHelperReference(inputTypeHelper, args.capture());\n    };\n\n    function inputTypeHelper(_ref) {\n        var positional = _ref.positional;\n\n        var type = positional.at(0).value();\n        if (type === 'checkbox') {\n            return '-checkbox';\n        }\n        return '-text-field';\n    }\n});","enifed('ember-glimmer/helpers/-normalize-class', ['exports', 'ember-runtime', 'ember-glimmer/utils/references'], function (exports, _emberRuntime, _references) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return new _references.InternalHelperReference(normalizeClass, args.capture());\n    };\n\n    function normalizeClass(_ref) {\n        var positional = _ref.positional;\n\n        var classNameParts = positional.at(0).value().split('.');\n        var className = classNameParts[classNameParts.length - 1];\n        var value = positional.at(1).value();\n        if (value === true) {\n            return _emberRuntime.String.dasherize(className);\n        } else if (!value && value !== 0) {\n            return '';\n        } else {\n            return String(value);\n        }\n    }\n});","enifed('ember-glimmer/helpers/action', ['exports', '@glimmer/reference', 'ember-debug', 'ember-metal', 'ember-utils', 'ember-glimmer/utils/references'], function (exports, _reference, _emberDebug, _emberMetal, _emberUtils, _references) {\n  'use strict';\n\n  exports.ACTION = exports.INVOKE = undefined;\n\n  exports.default = function (_vm, args) {\n    var named = args.named,\n        positional = args.positional;\n\n    var capturedArgs = positional.capture();\n    // The first two argument slots are reserved.\n    // pos[0] is the context (or `this`)\n    // pos[1] is the action name or function\n    // Anything else is an action argument.\n\n    var _capturedArgs$referen = capturedArgs.references,\n        context = _capturedArgs$referen[0],\n        action = _capturedArgs$referen[1],\n        restArgs = _capturedArgs$referen.slice(2);\n    // TODO: Is there a better way of doing this?\n\n\n    var debugKey = action._propertyKey;\n    var target = named.has('target') ? named.get('target') : context;\n    var processArgs = makeArgsProcessor(named.has('value') && named.get('value'), restArgs);\n    var fn = void 0;\n    if (typeof action[INVOKE] === 'function') {\n      fn = makeClosureAction(action, action, action[INVOKE], processArgs, debugKey);\n    } else if ((0, _reference.isConst)(target) && (0, _reference.isConst)(action)) {\n      fn = makeClosureAction(context.value(), target.value(), action.value(), processArgs, debugKey);\n    } else {\n      fn = makeDynamicClosureAction(context.value(), target, action, processArgs, debugKey);\n    }\n    fn[ACTION] = true;\n    return new _references.UnboundReference(fn);\n  };\n\n  var INVOKE = exports.INVOKE = (0, _emberUtils.symbol)('INVOKE'); /**\n                                                                   @module ember\n                                                                   */\n  var ACTION = exports.ACTION = (0, _emberUtils.symbol)('ACTION');\n  /**\n    The `{{action}}` helper provides a way to pass triggers for behavior (usually\n    just a function) between components, and into components from controllers.\n  \n    ### Passing functions with the action helper\n  \n    There are three contexts an action helper can be used in. The first two\n    contexts to discuss are attribute context, and Handlebars value context.\n  \n    ```handlebars\n    {{! An example of attribute context }}\n    <div onclick={{action \"save\"}}></div>\n    {{! Examples of Handlebars value context }}\n    {{input on-input=(action \"save\")}}\n    {{yield (action \"refreshData\") andAnotherParam}}\n    ```\n  \n    In these contexts,\n    the helper is called a \"closure action\" helper. Its behavior is simple:\n    If passed a function name, read that function off the `actions` property\n    of the current context. Once that function is read (or if a function was\n    passed), create a closure over that function and any arguments.\n    The resulting value of an action helper used this way is simply a function.\n  \n    For example, in the attribute context:\n  \n    ```handlebars\n    {{! An example of attribute context }}\n    <div onclick={{action \"save\"}}></div>\n    ```\n  \n    The resulting template render logic would be:\n  \n    ```js\n    var div = document.createElement('div');\n    var actionFunction = (function(context){\n      return function() {\n        return context.actions.save.apply(context, arguments);\n      };\n    })(context);\n    div.onclick = actionFunction;\n    ```\n  \n    Thus when the div is clicked, the action on that context is called.\n    Because the `actionFunction` is just a function, closure actions can be\n    passed between components and still execute in the correct context.\n  \n    Here is an example action handler on a component:\n  \n    ```app/components/my-component.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      actions: {\n        save() {\n          this.get('model').save();\n        }\n      }\n    });\n    ```\n  \n    Actions are always looked up on the `actions` property of the current context.\n    This avoids collisions in the naming of common actions, such as `destroy`.\n    Two options can be passed to the `action` helper when it is used in this way.\n  \n    * `target=someProperty` will look to `someProperty` instead of the current\n      context for the `actions` hash. This can be useful when targeting a\n      service for actions.\n    * `value=\"target.value\"` will read the path `target.value` off the first\n      argument to the action when it is called and rewrite the first argument\n      to be that value. This is useful when attaching actions to event listeners.\n  \n    ### Invoking an action\n  \n    Closure actions curry both their scope and any arguments. When invoked, any\n    additional arguments are added to the already curried list.\n    Actions should be invoked using the [sendAction](/api/ember/release/classes/Component/methods/sendAction?anchor=sendAction)\n    method. The first argument to `sendAction` is the action to be called, and\n    additional arguments are passed to the action function. This has interesting\n    properties combined with currying of arguments. For example:\n  \n    ```app/components/my-component.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      actions: {\n        // Usage {{input on-input=(action (action 'setName' model) value=\"target.value\")}}\n        setName(model, name) {\n          model.set('name', name);\n        }\n      }\n    });\n    ```\n  \n    The first argument (`model`) was curried over, and the run-time argument (`event`)\n    becomes a second argument. Action calls can be nested this way because each simply\n    returns a function. Any function can be passed to the `{{action}}` helper, including\n    other actions.\n  \n    Actions invoked with `sendAction` have the same currying behavior as demonstrated\n    with `on-input` above. For example:\n  \n    ```app/components/my-input.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      actions: {\n        setName(model, name) {\n          model.set('name', name);\n        }\n      }\n    });\n    ```\n  \n    ```handlebars\n    {{my-input submit=(action 'setName' model)}}\n    ```\n  \n    ```app/components/my-component.js\n    import Component from '@ember/component';\n  \n    export default Component.extend({\n      click() {\n        // Note that model is not passed, it was curried in the template\n        this.sendAction('submit', 'bob');\n      }\n    });\n    ```\n  \n    ### Attaching actions to DOM elements\n  \n    The third context of the `{{action}}` helper can be called \"element space\".\n    For example:\n  \n    ```handlebars\n    {{! An example of element space }}\n    <div {{action \"save\"}}></div>\n    ```\n  \n    Used this way, the `{{action}}` helper provides a useful shortcut for\n    registering an HTML element in a template for a single DOM event and\n    forwarding that interaction to the template's context (controller or component).\n    If the context of a template is a controller, actions used this way will\n    bubble to routes when the controller does not implement the specified action.\n    Once an action hits a route, it will bubble through the route hierarchy.\n  \n    ### Event Propagation\n  \n    `{{action}}` helpers called in element space can control event bubbling. Note\n    that the closure style actions cannot.\n  \n    Events triggered through the action helper will automatically have\n    `.preventDefault()` called on them. You do not need to do so in your event\n    handlers. If you need to allow event propagation (to handle file inputs for\n    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:\n  \n    ```handlebars\n    <div {{action \"sayHello\" preventDefault=false}}>\n      <input type=\"file\" />\n      <input type=\"checkbox\" />\n    </div>\n    ```\n  \n    To disable bubbling, pass `bubbles=false` to the helper:\n  \n    ```handlebars\n    <button {{action 'edit' post bubbles=false}}>Edit</button>\n    ```\n  \n    To disable bubbling with closure style actions you must create your own\n    wrapper helper that makes use of `event.stopPropagation()`:\n  \n    ```handlebars\n    <div onclick={{disable-bubbling (action \"sayHello\")}}>Hello</div>\n    ```\n  \n    ```app/helpers/disable-bubbling.js\n    import { helper } from '@ember/component/helper';\n  \n    export function disableBubbling([action]) {\n      return function(event) {\n        event.stopPropagation();\n        return action(event);\n      };\n    }\n    export default helper(disableBubbling);\n    ```\n  \n    If you need the default handler to trigger you should either register your\n    own event handler, or use event methods on your view class. See\n    [\"Responding to Browser Events\"](/api/ember/release/classes/Component)\n    in the documentation for `Component` for more information.\n  \n    ### Specifying DOM event type\n  \n    `{{action}}` helpers called in element space can specify an event type.\n    By default the `{{action}}` helper registers for DOM `click` events. You can\n    supply an `on` option to the helper to specify a different DOM event name:\n  \n    ```handlebars\n    <div {{action \"anActionName\" on=\"doubleClick\"}}>\n      click me\n    </div>\n    ```\n  \n    See [\"Event Names\"](/api/ember/release/classes/Component) for a list of\n    acceptable DOM event names.\n  \n    ### Specifying whitelisted modifier keys\n  \n    `{{action}}` helpers called in element space can specify modifier keys.\n    By default the `{{action}}` helper will ignore click events with pressed modifier\n    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.\n  \n    ```handlebars\n    <div {{action \"anActionName\" allowedKeys=\"alt\"}}>\n      click me\n    </div>\n    ```\n  \n    This way the action will fire when clicking with the alt key pressed down.\n    Alternatively, supply \"any\" to the `allowedKeys` option to accept any combination of modifier keys.\n  \n    ```handlebars\n    <div {{action \"anActionName\" allowedKeys=\"any\"}}>\n      click me with any key pressed\n    </div>\n    ```\n  \n    ### Specifying a Target\n  \n    A `target` option can be provided to the helper to change\n    which object will receive the method call. This option must be a path\n    to an object, accessible in the current context:\n  \n    ```app/templates/application.hbs\n    <div {{action \"anActionName\" target=someService}}>\n      click me\n    </div>\n    ```\n  \n    ```app/controllers/application.js\n    import Controller from '@ember/controller';\n    import { inject as service } from '@ember/service';\n  \n    export default Controller.extend({\n      someService: service()\n    });\n    ```\n  \n    @method action\n    @for Ember.Templates.helpers\n    @public\n  */\n\n  function NOOP(args) {\n    return args;\n  }\n  function makeArgsProcessor(valuePathRef, actionArgsRef) {\n    var mergeArgs = void 0;\n    if (actionArgsRef.length > 0) {\n      mergeArgs = function (args) {\n        return actionArgsRef.map(function (ref) {\n          return ref.value();\n        }).concat(args);\n      };\n    }\n    var readValue = void 0;\n    if (valuePathRef) {\n      readValue = function (args) {\n        var valuePath = valuePathRef.value();\n        if (valuePath && args.length > 0) {\n          args[0] = (0, _emberMetal.get)(args[0], valuePath);\n        }\n        return args;\n      };\n    }\n    if (mergeArgs && readValue) {\n      return function (args) {\n        return readValue(mergeArgs(args));\n      };\n    } else {\n      return mergeArgs || readValue || NOOP;\n    }\n  }\n  function makeDynamicClosureAction(context, targetRef, actionRef, processArgs, debugKey) {\n    // We don't allow undefined/null values, so this creates a throw-away action to trigger the assertions\n    if (true) {\n      makeClosureAction(context, targetRef.value(), actionRef.value(), processArgs, debugKey);\n    }\n    return function () {\n      return makeClosureAction(context, targetRef.value(), actionRef.value(), processArgs, debugKey).apply(undefined, arguments);\n    };\n  }\n  function makeClosureAction(context, target, action, processArgs, debugKey) {\n    var self = void 0;\n    var fn = void 0;\n    (true && !(!(0, _emberMetal.isNone)(action)) && (0, _emberDebug.assert)('Action passed is null or undefined in (action) from ' + target + '.', !(0, _emberMetal.isNone)(action)));\n\n    if (typeof action[INVOKE] === 'function') {\n      self = action;\n      fn = action[INVOKE];\n    } else {\n      var typeofAction = typeof action;\n      if (typeofAction === 'string') {\n        self = target;\n        fn = target.actions && target.actions[action];\n        (true && !(fn) && (0, _emberDebug.assert)('An action named \\'' + action + '\\' was not found in ' + target, fn));\n      } else if (typeofAction === 'function') {\n        self = context;\n        fn = action;\n      } else {\n        (true && !(false) && (0, _emberDebug.assert)('An action could not be made for `' + (debugKey || action) + '` in ' + target + '. Please confirm that you are using either a quoted action name (i.e. `(action \\'' + (debugKey || 'myAction') + '\\')`) or a function available in ' + target + '.', false));\n      }\n    }\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var payload = { target: self, args: args, label: '@glimmer/closure-action' };\n      return (0, _emberMetal.flaggedInstrument)('interaction.ember-action', payload, function () {\n        return _emberMetal.run.join.apply(_emberMetal.run, [self, fn].concat(processArgs(args)));\n      });\n    };\n  }\n});","enifed('ember-glimmer/helpers/component', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-debug', 'ember-utils', 'ember-glimmer/component-managers/curly', 'ember-glimmer/utils/references'], function (exports, _emberBabel, _runtime, _emberDebug, _emberUtils, _curly, _references) {\n  'use strict';\n\n  exports.ClosureComponentReference = undefined;\n\n  exports.default = function (vm, args, meta) {\n    return ClosureComponentReference.create(args.capture(), meta, vm.env);\n  };\n\n  var ClosureComponentReference = exports.ClosureComponentReference = function (_CachedReference) {\n    (0, _emberBabel.inherits)(ClosureComponentReference, _CachedReference);\n\n    ClosureComponentReference.create = function create(args, meta, env) {\n      return new ClosureComponentReference(args, meta, env);\n    };\n\n    function ClosureComponentReference(args, meta, env) {\n      (0, _emberBabel.classCallCheck)(this, ClosureComponentReference);\n\n      var _this = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.call(this));\n\n      var firstArg = args.positional.at(0);\n      _this.defRef = firstArg;\n      _this.tag = firstArg.tag;\n      _this.args = args;\n      _this.meta = meta;\n      _this.env = env;\n      _this.lastDefinition = undefined;\n      _this.lastName = undefined;\n      return _this;\n    }\n\n    ClosureComponentReference.prototype.compute = function compute() {\n      // TODO: Figure out how to extract this because it's nearly identical to\n      // DynamicComponentReference::compute(). The only differences besides\n      // currying are in the assertion messages.\n      var args = this.args,\n          defRef = this.defRef,\n          env = this.env,\n          meta = this.meta,\n          lastDefinition = this.lastDefinition,\n          lastName = this.lastName;\n\n      var nameOrDef = defRef.value();\n      var definition = void 0;\n      if (nameOrDef && nameOrDef === lastName) {\n        return lastDefinition;\n      }\n      this.lastName = nameOrDef;\n      if (typeof nameOrDef === 'string') {\n        // tslint:disable-next-line:max-line-length\n        (true && !(nameOrDef !== 'input') && (0, _emberDebug.assert)('You cannot use the input helper as a contextual helper. Please extend TextField or Checkbox to use it as a contextual component.', nameOrDef !== 'input'));\n        // tslint:disable-next-line:max-line-length\n\n        (true && !(nameOrDef !== 'textarea') && (0, _emberDebug.assert)('You cannot use the textarea helper as a contextual helper. Please extend TextArea to use it as a contextual component.', nameOrDef !== 'textarea'));\n\n        definition = env.getComponentDefinition(nameOrDef, meta);\n        // tslint:disable-next-line:max-line-length\n        (true && !(!!definition) && (0, _emberDebug.assert)('The component helper cannot be used without a valid component name. You used \"' + nameOrDef + '\" via (component \"' + nameOrDef + '\")', !!definition));\n      } else if ((0, _runtime.isComponentDefinition)(nameOrDef)) {\n        definition = nameOrDef;\n      } else {\n        (true && !(nameOrDef) && (0, _emberDebug.assert)('You cannot create a component from ' + nameOrDef + ' using the {{component}} helper', nameOrDef));\n\n        return null;\n      }\n      var newDef = createCurriedDefinition(definition, args);\n      this.lastDefinition = newDef;\n      return newDef;\n    };\n\n    return ClosureComponentReference;\n  }(_references.CachedReference);\n\n  function createCurriedDefinition(definition, args) {\n    var curriedArgs = curryArgs(definition, args);\n    return new _curly.CurlyComponentDefinition(definition.name, definition.ComponentClass, definition.template, curriedArgs);\n  }\n  function curryArgs(definition, newArgs) {\n    var args = definition.args,\n        ComponentClass = definition.ComponentClass;\n\n    var positionalParams = ComponentClass.class.positionalParams;\n    // The args being passed in are from the (component ...) invocation,\n    // so the first positional argument is actually the name or component\n    // definition. It needs to be dropped in order for any actual positional\n    // args to coincide with the ComponentClass's positionParams.\n    // For \"normal\" curly components this slicing is done at the syntax layer,\n    // but we don't have that luxury here.\n\n    var _newArgs$positional$r = newArgs.positional.references,\n        slicedPositionalArgs = _newArgs$positional$r.slice(1);\n\n    if (positionalParams && slicedPositionalArgs.length) {\n      (0, _curly.validatePositionalParameters)(newArgs.named, slicedPositionalArgs, positionalParams);\n    }\n    var isRest = typeof positionalParams === 'string';\n    // For non-rest position params, we need to perform the position -> name mapping\n    // at each layer to avoid a collision later when the args are used to construct\n    // the component instance (inside of processArgs(), inside of create()).\n    var positionalToNamedParams = {};\n    if (!isRest && positionalParams.length > 0) {\n      var limit = Math.min(positionalParams.length, slicedPositionalArgs.length);\n      for (var i = 0; i < limit; i++) {\n        var name = positionalParams[i];\n        positionalToNamedParams[name] = slicedPositionalArgs[i];\n      }\n      slicedPositionalArgs.length = 0; // Throw them away since you're merged in.\n    }\n    // args (aka 'oldArgs') may be undefined or simply be empty args, so\n    // we need to fall back to an empty array or object.\n    var oldNamed = args && args.named || {};\n    var oldPositional = args && args.positional || [];\n    // Merge positional arrays\n    var positional = new Array(Math.max(oldPositional.length, slicedPositionalArgs.length));\n    positional.splice.apply(positional, [0, oldPositional.length].concat(oldPositional));\n    positional.splice.apply(positional, [0, slicedPositionalArgs.length].concat(slicedPositionalArgs));\n    // Merge named maps\n    var named = (0, _emberUtils.assign)({}, oldNamed, positionalToNamedParams, newArgs.named.map);\n    return { positional: positional, named: named };\n  }\n});","enifed('ember-glimmer/helpers/concat', ['exports', '@glimmer/runtime', 'ember-glimmer/utils/references'], function (exports, _runtime, _references) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return new _references.InternalHelperReference(concat, args.capture());\n    };\n\n    /**\n    @module ember\n    */\n    /**\n      Concatenates the given arguments into a string.\n    \n      Example:\n    \n      ```handlebars\n      {{some-component name=(concat firstName \" \" lastName)}}\n    \n      {{! would pass name=\"<first name value> <last name value>\" to the component}}\n      ```\n    \n      @public\n      @method concat\n      @for Ember.Templates.helpers\n      @since 1.13.0\n    */\n    function concat(_ref) {\n        var positional = _ref.positional;\n\n        return positional.value().map(_runtime.normalizeTextValue).join('');\n    }\n});","enifed('ember-glimmer/helpers/each-in', ['exports', 'ember-utils'], function (exports, _emberUtils) {\n  'use strict';\n\n  exports.isEachIn = isEachIn;\n\n  exports.default = function (_vm, args) {\n    var ref = Object.create(args.positional.at(0));\n    ref[EACH_IN_REFERENCE] = true;\n    return ref;\n  };\n\n  /**\n    The `{{#each}}` helper loops over elements in a collection. It is an extension\n    of the base Handlebars `{{#each}}` helper.\n    The default behavior of `{{#each}}` is to yield its inner block once for every\n    item in an array passing the item as the first block parameter.\n  \n    ```javascript\n    var developers = [{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];\n    ```\n  \n    ```handlebars\n    {{#each developers key=\"name\" as |person|}}\n      {{person.name}}\n      {{! `this` is whatever it was outside the #each }}\n    {{/each}}\n    ```\n  \n    The same rules apply to arrays of primitives.\n  \n    ```javascript\n    var developerNames = ['Yehuda', 'Tom', 'Paul']\n    ```\n  \n    ```handlebars\n    {{#each developerNames key=\"@index\" as |name|}}\n      {{name}}\n    {{/each}}\n    ```\n  \n    During iteration, the index of each item in the array is provided as a second block parameter.\n  \n    ```handlebars\n    <ul>\n      {{#each people as |person index|}}\n        <li>Hello, {{person.name}}! You're number {{index}} in line</li>\n      {{/each}}\n    </ul>\n    ```\n  \n    ### Specifying Keys\n  \n    The `key` option is used to tell Ember how to determine if the array being\n    iterated over with `{{#each}}` has changed between renders. By helping Ember\n    detect that some elements in the array are the same, DOM elements can be\n    re-used, significantly improving rendering speed.\n  \n    For example, here's the `{{#each}}` helper with its `key` set to `id`:\n  \n    ```handlebars\n    {{#each model key=\"id\" as |item|}}\n    {{/each}}\n    ```\n  \n    When this `{{#each}}` re-renders, Ember will match up the previously rendered\n    items (and reorder the generated DOM elements) based on each item's `id`\n    property.\n    By default the item's own reference is used.\n  \n    ### {{else}} condition\n  \n    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render\n    if the collection is empty.\n  \n    ```handlebars\n    {{#each developers as |person|}}\n      {{person.name}}\n    {{else}}\n      <p>Sorry, nobody is available for this task.</p>\n    {{/each}}\n    ```\n  \n    @method each\n    @for Ember.Templates.helpers\n    @public\n   */\n  /**\n    The `{{each-in}}` helper loops over properties on an object.\n  \n    For example, given a `user` object that looks like:\n  \n    ```javascript\n    {\n      \"name\": \"Shelly Sails\",\n      \"age\": 42\n    }\n    ```\n  \n    This template would display all properties on the `user`\n    object in a list:\n  \n    ```handlebars\n    <ul>\n    {{#each-in user as |key value|}}\n      <li>{{key}}: {{value}}</li>\n    {{/each-in}}\n    </ul>\n    ```\n  \n    Outputting their name and age.\n  \n    @method each-in\n    @for Ember.Templates.helpers\n    @public\n    @since 2.1.0\n  */\n  var EACH_IN_REFERENCE = (0, _emberUtils.symbol)('EACH_IN');\n  function isEachIn(ref) {\n    return ref && ref[EACH_IN_REFERENCE];\n  }\n});","enifed('ember-glimmer/helpers/get', ['exports', 'ember-babel', '@glimmer/reference', '@glimmer/runtime', 'ember-metal', 'ember-glimmer/utils/references'], function (exports, _emberBabel, _reference, _runtime, _emberMetal, _references) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return GetHelperReference.create(args.positional.at(0), args.positional.at(1));\n    };\n\n    var GetHelperReference = function (_CachedReference) {\n        (0, _emberBabel.inherits)(GetHelperReference, _CachedReference);\n\n        GetHelperReference.create = function create(sourceReference, pathReference) {\n            if ((0, _reference.isConst)(pathReference)) {\n                var path = pathReference.value();\n                if (path === undefined || path === null || path === '') {\n                    return _runtime.NULL_REFERENCE;\n                } else if (typeof path === 'string' && path.indexOf('.') > -1) {\n                    return (0, _reference.referenceFromParts)(sourceReference, path.split('.'));\n                } else {\n                    return sourceReference.get(path);\n                }\n            } else {\n                return new GetHelperReference(sourceReference, pathReference);\n            }\n        };\n\n        function GetHelperReference(sourceReference, pathReference) {\n            (0, _emberBabel.classCallCheck)(this, GetHelperReference);\n\n            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.call(this));\n\n            _this.sourceReference = sourceReference;\n            _this.pathReference = pathReference;\n            _this.lastPath = null;\n            _this.innerReference = _runtime.NULL_REFERENCE;\n            var innerTag = _this.innerTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);\n            _this.tag = (0, _reference.combine)([sourceReference.tag, pathReference.tag, innerTag]);\n            return _this;\n        }\n\n        GetHelperReference.prototype.compute = function compute() {\n            var lastPath = this.lastPath,\n                innerReference = this.innerReference,\n                innerTag = this.innerTag;\n\n            var path = this.lastPath = this.pathReference.value();\n            if (path !== lastPath) {\n                if (path === undefined || path === null || path === '') {\n                    innerReference = _runtime.NULL_REFERENCE;\n                } else if (typeof path === 'string' && path.indexOf('.') > -1) {\n                    innerReference = (0, _reference.referenceFromParts)(this.sourceReference, path.split('.'));\n                } else {\n                    innerReference = this.sourceReference.get(path);\n                }\n                innerTag.inner.update(innerReference.tag);\n                this.innerReference = innerReference;\n            }\n            return innerReference.value();\n        };\n\n        GetHelperReference.prototype[_references.UPDATE] = function (value) {\n            (0, _emberMetal.set)(this.sourceReference.value(), this.pathReference.value(), value);\n        };\n\n        return GetHelperReference;\n    }(_references.CachedReference);\n});","enifed(\"ember-glimmer/helpers/hash\", [\"exports\"], function (exports) {\n   \"use strict\";\n\n   exports.default = function (_vm, args) {\n      return args.named.capture();\n   };\n});","enifed('ember-glimmer/helpers/if-unless', ['exports', 'ember-babel', '@glimmer/reference', 'ember-debug', 'ember-glimmer/utils/references'], function (exports, _emberBabel, _reference, _emberDebug, _references) {\n    'use strict';\n\n    exports.inlineIf = inlineIf;\n    exports.inlineUnless = inlineUnless;\n\n    var ConditionalHelperReference = function (_CachedReference) {\n        (0, _emberBabel.inherits)(ConditionalHelperReference, _CachedReference);\n\n        ConditionalHelperReference.create = function create(_condRef, truthyRef, falsyRef) {\n            var condRef = _references.ConditionalReference.create(_condRef);\n            if ((0, _reference.isConst)(condRef)) {\n                return condRef.value() ? truthyRef : falsyRef;\n            } else {\n                return new ConditionalHelperReference(condRef, truthyRef, falsyRef);\n            }\n        };\n\n        function ConditionalHelperReference(cond, truthy, falsy) {\n            (0, _emberBabel.classCallCheck)(this, ConditionalHelperReference);\n\n            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.call(this));\n\n            _this.branchTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);\n            _this.tag = (0, _reference.combine)([cond.tag, _this.branchTag]);\n            _this.cond = cond;\n            _this.truthy = truthy;\n            _this.falsy = falsy;\n            return _this;\n        }\n\n        ConditionalHelperReference.prototype.compute = function compute() {\n            var branch = this.cond.value() ? this.truthy : this.falsy;\n            this.branchTag.inner.update(branch.tag);\n            return branch.value();\n        };\n\n        return ConditionalHelperReference;\n    }(_references.CachedReference);\n\n    /**\n      The `if` helper allows you to conditionally render one of two branches,\n      depending on the \"truthiness\" of a property.\n      For example the following values are all falsey: `false`, `undefined`, `null`, `\"\"`, `0`, `NaN` or an empty array.\n    \n      This helper has two forms, block and inline.\n    \n      ## Block form\n    \n      You can use the block form of `if` to conditionally render a section of the template.\n    \n      To use it, pass the conditional value to the `if` helper,\n      using the block form to wrap the section of template you want to conditionally render.\n      Like so:\n    \n      ```handlebars\n      {{! will not render if foo is falsey}}\n      {{#if foo}}\n        Welcome to the {{foo.bar}}\n      {{/if}}\n      ```\n    \n      You can also specify a template to show if the property is falsey by using\n      the `else` helper.\n    \n      ```handlebars\n      {{! is it raining outside?}}\n      {{#if isRaining}}\n        Yes, grab an umbrella!\n      {{else}}\n        No, it's lovely outside!\n      {{/if}}\n      ```\n    \n      You are also able to combine `else` and `if` helpers to create more complex\n      conditional logic.\n    \n      ```handlebars\n      {{#if isMorning}}\n        Good morning\n      {{else if isAfternoon}}\n        Good afternoon\n      {{else}}\n        Good night\n      {{/if}}\n      ```\n    \n      ## Inline form\n    \n      The inline `if` helper conditionally renders a single property or string.\n    \n      In this form, the `if` helper receives three arguments, the conditional value,\n      the value to render when truthy, and the value to render when falsey.\n    \n      For example, if `useLongGreeting` is truthy, the following:\n    \n      ```handlebars\n      {{if useLongGreeting \"Hello\" \"Hi\"}} Alex\n      ```\n    \n      Will render:\n    \n      ```html\n      Hello Alex\n      ```\n    \n      ### Nested `if`\n    \n      You can use the `if` helper inside another helper as a nested helper:\n    \n      ```handlebars\n      {{some-component height=(if isBig \"100\" \"10\")}}\n      ```\n    \n      One detail to keep in mind is that both branches of the `if` helper will be evaluated,\n      so if you have `{{if condition \"foo\" (expensive-operation \"bar\")`,\n      `expensive-operation` will always calculate.\n    \n      @method if\n      @for Ember.Templates.helpers\n      @public\n    */\n    function inlineIf(_vm, _ref) {\n        var positional = _ref.positional;\n        (true && !(positional.length === 3 || positional.length === 2) && (0, _emberDebug.assert)('The inline form of the `if` helper expects two or three arguments, e.g. ' + '`{{if trialExpired \"Expired\" expiryDate}}`.', positional.length === 3 || positional.length === 2));\n\n        return ConditionalHelperReference.create(positional.at(0), positional.at(1), positional.at(2));\n    }\n    /**\n      The inline `unless` helper conditionally renders a single property or string.\n      This helper acts like a ternary operator. If the first property is falsy,\n      the second argument will be displayed, otherwise, the third argument will be\n      displayed\n    \n      ```handlebars\n      {{unless useLongGreeting \"Hi\" \"Hello\"}} Ben\n      ```\n    \n      You can use the `unless` helper inside another helper as a subexpression.\n    \n      ```handlebars\n      {{some-component height=(unless isBig \"10\" \"100\")}}\n      ```\n    \n      @method unless\n      @for Ember.Templates.helpers\n      @public\n    */\n    function inlineUnless(_vm, _ref2) {\n        var positional = _ref2.positional;\n        (true && !(positional.length === 3 || positional.length === 2) && (0, _emberDebug.assert)('The inline form of the `unless` helper expects two or three arguments, e.g. ' + '`{{unless isFirstLogin \"Welcome back!\"}}`.', positional.length === 3 || positional.length === 2));\n\n        return ConditionalHelperReference.create(positional.at(0), positional.at(2), positional.at(1));\n    }\n});","enifed('ember-glimmer/helpers/loc', ['exports', 'ember-glimmer/helper', 'ember-runtime'], function (exports, _helper, _emberRuntime) {\n  'use strict';\n\n  exports.default = (0, _helper.helper)(function (params) {\n    return _emberRuntime.String.loc.apply(null, params);\n  });\n});","enifed('ember-glimmer/helpers/log', ['exports', 'ember-glimmer/utils/references', 'ember-console'], function (exports, _references, _emberConsole) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return new _references.InternalHelperReference(log, args.capture());\n    };\n\n    /**\n      `log` allows you to output the value of variables in the current rendering\n      context. `log` also accepts primitive types such as strings or numbers.\n    \n      ```handlebars\n      {{log \"myVariable:\" myVariable }}\n      ```\n    \n      @method log\n      @for Ember.Templates.helpers\n      @param {Array} params\n      @public\n    */\n    function log(_ref) {\n        var positional = _ref.positional;\n\n        _emberConsole.default.log.apply(null, positional.value());\n    }\n    /**\n    @module ember\n    */\n});","enifed('ember-glimmer/helpers/mut', ['exports', 'ember-debug', 'ember-utils', 'ember-glimmer/utils/references', 'ember-glimmer/helpers/action'], function (exports, _emberDebug, _emberUtils, _references, _action) {\n  'use strict';\n\n  exports.isMut = isMut;\n  exports.unMut = unMut;\n\n  exports.default = function (_vm, args) {\n    var rawRef = args.positional.at(0);\n    if (isMut(rawRef)) {\n      return rawRef;\n    }\n    // TODO: Improve this error message. This covers at least two distinct\n    // cases:\n    //\n    // 1. (mut \"not a path\") – passing a literal, result from a helper\n    //    invocation, etc\n    //\n    // 2. (mut receivedValue) – passing a value received from the caller\n    //    that was originally derived from a literal, result from a helper\n    //    invocation, etc\n    //\n    // This message is alright for the first case, but could be quite\n    // confusing for the second case.\n    (true && !(rawRef[_references.UPDATE]) && (0, _emberDebug.assert)('You can only pass a path to mut', rawRef[_references.UPDATE]));\n\n    var wrappedRef = Object.create(rawRef);\n    wrappedRef[SOURCE] = rawRef;\n    wrappedRef[_action.INVOKE] = rawRef[_references.UPDATE];\n    wrappedRef[MUT_REFERENCE] = true;\n    return wrappedRef;\n  };\n\n  /**\n    The `mut` helper lets you __clearly specify__ that a child `Component` can update the\n    (mutable) value passed to it, which will __change the value of the parent component__.\n  \n    To specify that a parameter is mutable, when invoking the child `Component`:\n  \n    ```handlebars\n    {{my-child childClickCount=(mut totalClicks)}}\n    ```\n  \n    The child `Component` can then modify the parent's value just by modifying its own\n    property:\n  \n    ```javascript\n    // my-child.js\n    export default Component.extend({\n      click() {\n        this.incrementProperty('childClickCount');\n      }\n    });\n    ```\n  \n    Note that for curly components (`{{my-component}}`) the bindings are already mutable,\n    making the `mut` unnecessary.\n  \n    Additionally, the `mut` helper can be combined with the `action` helper to\n    mutate a value. For example:\n  \n    ```handlebars\n    {{my-child childClickCount=totalClicks click-count-change=(action (mut totalClicks))}}\n    ```\n  \n    The child `Component` would invoke the action with the new click value:\n  \n    ```javascript\n    // my-child.js\n    export default Component.extend({\n      click() {\n        this.get('click-count-change')(this.get('childClickCount') + 1);\n      }\n    });\n    ```\n  \n    The `mut` helper changes the `totalClicks` value to what was provided as the action argument.\n  \n    The `mut` helper, when used with `action`, will return a function that\n    sets the value passed to `mut` to its first argument. This works like any other\n    closure action and interacts with the other features `action` provides.\n    As an example, we can create a button that increments a value passing the value\n    directly to the `action`:\n  \n    ```handlebars\n    {{! inc helper is not provided by Ember }}\n    <button onclick={{action (mut count) (inc count)}}>\n      Increment count\n    </button>\n    ```\n  \n    You can also use the `value` option:\n  \n    ```handlebars\n    <input value={{name}} oninput={{action (mut name) value=\"target.value\"}}>\n    ```\n  \n    @method mut\n    @param {Object} [attr] the \"two-way\" attribute that can be modified.\n    @for Ember.Templates.helpers\n    @public\n  */\n  var MUT_REFERENCE = (0, _emberUtils.symbol)('MUT');\n  var SOURCE = (0, _emberUtils.symbol)('SOURCE');\n  function isMut(ref) {\n    return ref && ref[MUT_REFERENCE];\n  }\n  function unMut(ref) {\n    return ref[SOURCE] || ref;\n  }\n});","enifed('ember-glimmer/helpers/query-param', ['exports', 'ember-debug', 'ember-routing', 'ember-utils', 'ember-glimmer/utils/references'], function (exports, _emberDebug, _emberRouting, _emberUtils, _references) {\n    'use strict';\n\n    exports.default = function (_vm, args) {\n        return new _references.InternalHelperReference(queryParams, args.capture());\n    };\n\n    /**\n      This is a helper to be used in conjunction with the link-to helper.\n      It will supply url query parameters to the target route.\n    \n      Example\n    \n      ```handlebars\n      {{#link-to 'posts' (query-params direction=\"asc\")}}Sort{{/link-to}}\n      ```\n    \n      @method query-params\n      @for Ember.Templates.helpers\n      @param {Object} hash takes a hash of query parameters\n      @return {Object} A `QueryParams` object for `{{link-to}}`\n      @public\n    */\n    function queryParams(_ref) {\n        var positional = _ref.positional,\n            named = _ref.named;\n        (true && !(positional.value().length === 0) && (0, _emberDebug.assert)('The `query-params` helper only accepts hash parameters, e.g. (query-params queryParamPropertyName=\\'foo\\') as opposed to just (query-params \\'foo\\')', positional.value().length === 0));\n\n        return _emberRouting.QueryParams.create({\n            values: (0, _emberUtils.assign)({}, named.value())\n        });\n    }\n});","enifed('ember-glimmer/helpers/readonly', ['exports', 'ember-glimmer/utils/references', 'ember-glimmer/helpers/mut'], function (exports, _references, _mut) {\n  'use strict';\n\n  exports.default = function (_vm, args) {\n    var ref = (0, _mut.unMut)(args.positional.at(0));\n    var wrapped = Object.create(ref);\n    wrapped[_references.UPDATE] = undefined;\n    return wrapped;\n  };\n});","enifed('ember-glimmer/helpers/unbound', ['exports', 'ember-debug', 'ember-glimmer/utils/references'], function (exports, _emberDebug, _references) {\n  'use strict';\n\n  exports.default = function (_vm, args) {\n    (true && !(args.positional.length === 1 && args.named.length === 0) && (0, _emberDebug.assert)('unbound helper cannot be called with multiple params or hash params', args.positional.length === 1 && args.named.length === 0));\n\n    return _references.UnboundReference.create(args.positional.at(0).value());\n  };\n});","enifed('ember-glimmer/index', ['exports', 'ember-glimmer/helpers/action', 'ember-glimmer/templates/root', 'ember-glimmer/template', 'ember-glimmer/components/checkbox', 'ember-glimmer/components/text_field', 'ember-glimmer/components/text_area', 'ember-glimmer/components/link-to', 'ember-glimmer/component', 'ember-glimmer/helper', 'ember-glimmer/environment', 'ember-glimmer/utils/string', 'ember-glimmer/renderer', 'ember-glimmer/template_registry', 'ember-glimmer/setup-registry', 'ember-glimmer/dom', 'ember-glimmer/syntax', 'ember-glimmer/component-managers/abstract'], function (exports, _action, _root, _template, _checkbox, _text_field, _text_area, _linkTo, _component, _helper, _environment, _string, _renderer, _template_registry, _setupRegistry, _dom, _syntax, _abstract) {\n  'use strict';\n\n  Object.defineProperty(exports, 'INVOKE', {\n    enumerable: true,\n    get: function () {\n      return _action.INVOKE;\n    }\n  });\n  Object.defineProperty(exports, 'RootTemplate', {\n    enumerable: true,\n    get: function () {\n      return _root.default;\n    }\n  });\n  Object.defineProperty(exports, 'template', {\n    enumerable: true,\n    get: function () {\n      return _template.default;\n    }\n  });\n  Object.defineProperty(exports, 'Checkbox', {\n    enumerable: true,\n    get: function () {\n      return _checkbox.default;\n    }\n  });\n  Object.defineProperty(exports, 'TextField', {\n    enumerable: true,\n    get: function () {\n      return _text_field.default;\n    }\n  });\n  Object.defineProperty(exports, 'TextArea', {\n    enumerable: true,\n    get: function () {\n      return _text_area.default;\n    }\n  });\n  Object.defineProperty(exports, 'LinkComponent', {\n    enumerable: true,\n    get: function () {\n      return _linkTo.default;\n    }\n  });\n  Object.defineProperty(exports, 'Component', {\n    enumerable: true,\n    get: function () {\n      return _component.default;\n    }\n  });\n  Object.defineProperty(exports, 'Helper', {\n    enumerable: true,\n    get: function () {\n      return _helper.default;\n    }\n  });\n  Object.defineProperty(exports, 'helper', {\n    enumerable: true,\n    get: function () {\n      return _helper.helper;\n    }\n  });\n  Object.defineProperty(exports, 'Environment', {\n    enumerable: true,\n    get: function () {\n      return _environment.default;\n    }\n  });\n  Object.defineProperty(exports, 'SafeString', {\n    enumerable: true,\n    get: function () {\n      return _string.SafeString;\n    }\n  });\n  Object.defineProperty(exports, 'escapeExpression', {\n    enumerable: true,\n    get: function () {\n      return _string.escapeExpression;\n    }\n  });\n  Object.defineProperty(exports, 'htmlSafe', {\n    enumerable: true,\n    get: function () {\n      return _string.htmlSafe;\n    }\n  });\n  Object.defineProperty(exports, 'isHTMLSafe', {\n    enumerable: true,\n    get: function () {\n      return _string.isHTMLSafe;\n    }\n  });\n  Object.defineProperty(exports, 'Renderer', {\n    enumerable: true,\n    get: function () {\n      return _renderer.Renderer;\n    }\n  });\n  Object.defineProperty(exports, 'InertRenderer', {\n    enumerable: true,\n    get: function () {\n      return _renderer.InertRenderer;\n    }\n  });\n  Object.defineProperty(exports, 'InteractiveRenderer', {\n    enumerable: true,\n    get: function () {\n      return _renderer.InteractiveRenderer;\n    }\n  });\n  Object.defineProperty(exports, '_resetRenderers', {\n    enumerable: true,\n    get: function () {\n      return _renderer._resetRenderers;\n    }\n  });\n  Object.defineProperty(exports, 'renderSettled', {\n    enumerable: true,\n    get: function () {\n      return _renderer.renderSettled;\n    }\n  });\n  Object.defineProperty(exports, 'getTemplate', {\n    enumerable: true,\n    get: function () {\n      return _template_registry.getTemplate;\n    }\n  });\n  Object.defineProperty(exports, 'setTemplate', {\n    enumerable: true,\n    get: function () {\n      return _template_registry.setTemplate;\n    }\n  });\n  Object.defineProperty(exports, 'hasTemplate', {\n    enumerable: true,\n    get: function () {\n      return _template_registry.hasTemplate;\n    }\n  });\n  Object.defineProperty(exports, 'getTemplates', {\n    enumerable: true,\n    get: function () {\n      return _template_registry.getTemplates;\n    }\n  });\n  Object.defineProperty(exports, 'setTemplates', {\n    enumerable: true,\n    get: function () {\n      return _template_registry.setTemplates;\n    }\n  });\n  Object.defineProperty(exports, 'setupEngineRegistry', {\n    enumerable: true,\n    get: function () {\n      return _setupRegistry.setupEngineRegistry;\n    }\n  });\n  Object.defineProperty(exports, 'setupApplicationRegistry', {\n    enumerable: true,\n    get: function () {\n      return _setupRegistry.setupApplicationRegistry;\n    }\n  });\n  Object.defineProperty(exports, 'DOMChanges', {\n    enumerable: true,\n    get: function () {\n      return _dom.DOMChanges;\n    }\n  });\n  Object.defineProperty(exports, 'NodeDOMTreeConstruction', {\n    enumerable: true,\n    get: function () {\n      return _dom.NodeDOMTreeConstruction;\n    }\n  });\n  Object.defineProperty(exports, 'DOMTreeConstruction', {\n    enumerable: true,\n    get: function () {\n      return _dom.DOMTreeConstruction;\n    }\n  });\n  Object.defineProperty(exports, '_registerMacros', {\n    enumerable: true,\n    get: function () {\n      return _syntax.registerMacros;\n    }\n  });\n  Object.defineProperty(exports, '_experimentalMacros', {\n    enumerable: true,\n    get: function () {\n      return _syntax.experimentalMacros;\n    }\n  });\n  Object.defineProperty(exports, 'AbstractComponentManager', {\n    enumerable: true,\n    get: function () {\n      return _abstract.default;\n    }\n  });\n});","enifed('ember-glimmer/modifiers/action', ['exports', 'ember-babel', 'ember-debug', 'ember-metal', 'ember-utils', 'ember-views', 'ember-glimmer/helpers/action'], function (exports, _emberBabel, _emberDebug, _emberMetal, _emberUtils, _emberViews, _action) {\n    'use strict';\n\n    exports.ActionState = exports.ActionHelper = undefined;\n\n    var MODIFIERS = ['alt', 'shift', 'meta', 'ctrl'];\n    var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;\n    function isAllowedEvent(event, allowedKeys) {\n        if (allowedKeys === null || allowedKeys === undefined) {\n            if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {\n                return (0, _emberViews.isSimpleClick)(event);\n            } else {\n                allowedKeys = '';\n            }\n        }\n        if (allowedKeys.indexOf('any') >= 0) {\n            return true;\n        }\n        for (var i = 0; i < MODIFIERS.length; i++) {\n            if (event[MODIFIERS[i] + 'Key'] && allowedKeys.indexOf(MODIFIERS[i]) === -1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    var ActionHelper = exports.ActionHelper = {\n        // registeredActions is re-exported for compatibility with older plugins\n        // that were using this undocumented API.\n        registeredActions: _emberViews.ActionManager.registeredActions,\n        registerAction: function (actionState) {\n            var actionId = actionState.actionId;\n\n            _emberViews.ActionManager.registeredActions[actionId] = actionState;\n            return actionId;\n        },\n        unregisterAction: function (actionState) {\n            var actionId = actionState.actionId;\n\n            delete _emberViews.ActionManager.registeredActions[actionId];\n        }\n    };\n\n    var ActionState = exports.ActionState = function () {\n        function ActionState(element, actionId, actionName, actionArgs, namedArgs, positionalArgs, implicitTarget, dom) {\n            (0, _emberBabel.classCallCheck)(this, ActionState);\n\n            this.element = element;\n            this.actionId = actionId;\n            this.actionName = actionName;\n            this.actionArgs = actionArgs;\n            this.namedArgs = namedArgs;\n            this.positional = positionalArgs;\n            this.implicitTarget = implicitTarget;\n            this.dom = dom;\n            this.eventName = this.getEventName();\n        }\n\n        ActionState.prototype.getEventName = function getEventName() {\n            return this.namedArgs.get('on').value() || 'click';\n        };\n\n        ActionState.prototype.getActionArgs = function getActionArgs() {\n            var result = new Array(this.actionArgs.length);\n            for (var i = 0; i < this.actionArgs.length; i++) {\n                result[i] = this.actionArgs[i].value();\n            }\n            return result;\n        };\n\n        ActionState.prototype.getTarget = function getTarget() {\n            var implicitTarget = this.implicitTarget,\n                namedArgs = this.namedArgs;\n\n            var target = void 0;\n            if (namedArgs.has('target')) {\n                target = namedArgs.get('target').value();\n            } else {\n                target = implicitTarget.value();\n            }\n            return target;\n        };\n\n        ActionState.prototype.handler = function handler(event) {\n            var _this = this;\n\n            var actionName = this.actionName,\n                namedArgs = this.namedArgs;\n\n            var bubbles = namedArgs.get('bubbles');\n            var preventDefault = namedArgs.get('preventDefault');\n            var allowedKeys = namedArgs.get('allowedKeys');\n            var target = this.getTarget();\n            if (!isAllowedEvent(event, allowedKeys.value())) {\n                return true;\n            }\n            if (preventDefault.value() !== false) {\n                event.preventDefault();\n            }\n            if (bubbles.value() === false) {\n                event.stopPropagation();\n            }\n            _emberMetal.run.join(function () {\n                var args = _this.getActionArgs();\n                var payload = {\n                    args: args,\n                    target: target,\n                    name: null\n                };\n                if (typeof actionName[_action.INVOKE] === 'function') {\n                    (0, _emberMetal.flaggedInstrument)('interaction.ember-action', payload, function () {\n                        actionName[_action.INVOKE].apply(actionName, args);\n                    });\n                    return;\n                }\n                if (typeof actionName === 'function') {\n                    (0, _emberMetal.flaggedInstrument)('interaction.ember-action', payload, function () {\n                        actionName.apply(target, args);\n                    });\n                    return;\n                }\n                payload.name = actionName;\n                if (target.send) {\n                    (0, _emberMetal.flaggedInstrument)('interaction.ember-action', payload, function () {\n                        target.send.apply(target, [actionName].concat(args));\n                    });\n                } else {\n                    (true && !(typeof target[actionName] === 'function') && (0, _emberDebug.assert)('The action \\'' + actionName + '\\' did not exist on ' + target, typeof target[actionName] === 'function'));\n\n                    (0, _emberMetal.flaggedInstrument)('interaction.ember-action', payload, function () {\n                        target[actionName].apply(target, args);\n                    });\n                }\n            });\n            return false;\n        };\n\n        ActionState.prototype.destroy = function destroy() {\n            ActionHelper.unregisterAction(this);\n        };\n\n        return ActionState;\n    }();\n\n    var ActionModifierManager = function () {\n        function ActionModifierManager() {\n            (0, _emberBabel.classCallCheck)(this, ActionModifierManager);\n        }\n\n        ActionModifierManager.prototype.create = function create(element, args, _dynamicScope, dom) {\n            var _args$capture = args.capture(),\n                named = _args$capture.named,\n                positional = _args$capture.positional;\n\n            var implicitTarget = void 0;\n            var actionName = void 0;\n            var actionNameRef = void 0;\n            if (positional.length > 1) {\n                implicitTarget = positional.at(0);\n                actionNameRef = positional.at(1);\n                if (actionNameRef[_action.INVOKE]) {\n                    actionName = actionNameRef;\n                } else {\n                    var actionLabel = actionNameRef._propertyKey;\n                    actionName = actionNameRef.value();\n                    (true && !(typeof actionName === 'string' || typeof actionName === 'function') && (0, _emberDebug.assert)('You specified a quoteless path, `' + actionLabel + '`, to the ' + '{{action}} helper which did not resolve to an action name (a ' + 'string). Perhaps you meant to use a quoted actionName? (e.g. ' + '{{action \"' + actionLabel + '\"}}).', typeof actionName === 'string' || typeof actionName === 'function'));\n                }\n            }\n            var actionArgs = [];\n            // The first two arguments are (1) `this` and (2) the action name.\n            // Everything else is a param.\n            for (var i = 2; i < positional.length; i++) {\n                actionArgs.push(positional.at(i));\n            }\n            var actionId = (0, _emberUtils.uuid)();\n            return new ActionState(element, actionId, actionName, actionArgs, named, positional, implicitTarget, dom);\n        };\n\n        ActionModifierManager.prototype.install = function install(actionState) {\n            var dom = actionState.dom,\n                element = actionState.element,\n                actionId = actionState.actionId;\n\n            ActionHelper.registerAction(actionState);\n            dom.setAttribute(element, 'data-ember-action', '');\n            dom.setAttribute(element, 'data-ember-action-' + actionId, actionId);\n        };\n\n        ActionModifierManager.prototype.update = function update(actionState) {\n            var positional = actionState.positional;\n\n            var actionNameRef = positional.at(1);\n            if (!actionNameRef[_action.INVOKE]) {\n                actionState.actionName = actionNameRef.value();\n            }\n            actionState.eventName = actionState.getEventName();\n        };\n\n        ActionModifierManager.prototype.getDestructor = function getDestructor(modifier) {\n            return modifier;\n        };\n\n        return ActionModifierManager;\n    }();\n\n    exports.default = ActionModifierManager;\n});","enifed('ember-glimmer/protocol-for-url', ['exports', 'ember-environment', 'node-module'], function (exports, _emberEnvironment, _nodeModule) {\n    'use strict';\n\n    exports.default = installProtocolForURL;\n    /* globals module, URL */\n    var nodeURL = void 0;\n    var parsingNode = void 0;\n    function installProtocolForURL(environment) {\n        var protocol = void 0;\n        if (_emberEnvironment.environment.hasDOM) {\n            protocol = browserProtocolForURL.call(environment, 'foobar:baz');\n        }\n        // Test to see if our DOM implementation parses\n        // and normalizes URLs.\n        if (protocol === 'foobar:') {\n            // Swap in the method that doesn't do this test now that\n            // we know it works.\n            environment.protocolForURL = browserProtocolForURL;\n        } else if (typeof URL === 'object') {\n            // URL globally provided, likely from FastBoot's sandbox\n            nodeURL = URL;\n            environment.protocolForURL = nodeProtocolForURL;\n        } else if (_nodeModule.IS_NODE) {\n            // Otherwise, we need to fall back to our own URL parsing.\n            // Global `require` is shadowed by Ember's loader so we have to use the fully\n            // qualified `module.require`.\n            // tslint:disable-next-line:no-require-imports\n            nodeURL = (0, _nodeModule.require)('url');\n            environment.protocolForURL = nodeProtocolForURL;\n        } else {\n            throw new Error('Could not find valid URL parsing mechanism for URL Sanitization');\n        }\n    }\n    function browserProtocolForURL(url) {\n        if (!parsingNode) {\n            parsingNode = document.createElement('a');\n        }\n        parsingNode.href = url;\n        return parsingNode.protocol;\n    }\n    function nodeProtocolForURL(url) {\n        var protocol = null;\n        if (typeof url === 'string') {\n            protocol = nodeURL.parse(url).protocol;\n        }\n        return protocol === null ? ':' : protocol;\n    }\n});","enifed('ember-glimmer/renderer', ['exports', 'ember-babel', '@glimmer/reference', 'ember-debug', 'ember-metal', 'ember-views', 'ember-glimmer/component', 'ember-glimmer/component-managers/outlet', 'ember-glimmer/component-managers/root', 'ember-glimmer/utils/references', '@glimmer/runtime', 'rsvp'], function (exports, _emberBabel, _reference, _emberDebug, _emberMetal, _emberViews, _component, _outlet, _root2, _references, _runtime, _rsvp) {\n    'use strict';\n\n    exports.InteractiveRenderer = exports.InertRenderer = exports.Renderer = exports.DynamicScope = undefined;\n    exports._resetRenderers = _resetRenderers;\n    exports.renderSettled = renderSettled;\n    var backburner = _emberMetal.run.backburner;\n\n    var DynamicScope = exports.DynamicScope = function () {\n        function DynamicScope(view, outletState, rootOutletState) {\n            (0, _emberBabel.classCallCheck)(this, DynamicScope);\n\n            this.view = view;\n            this.outletState = outletState;\n            this.rootOutletState = rootOutletState;\n        }\n\n        DynamicScope.prototype.child = function child() {\n            return new DynamicScope(this.view, this.outletState, this.rootOutletState);\n        };\n\n        DynamicScope.prototype.get = function get(key) {\n            // tslint:disable-next-line:max-line-length\n            (true && !(key === 'outletState') && (0, _emberDebug.assert)('Using `-get-dynamic-scope` is only supported for `outletState` (you used `' + key + '`).', key === 'outletState'));\n\n            return this.outletState;\n        };\n\n        DynamicScope.prototype.set = function set(key, value) {\n            // tslint:disable-next-line:max-line-length\n            (true && !(key === 'outletState') && (0, _emberDebug.assert)('Using `-with-dynamic-scope` is only supported for `outletState` (you used `' + key + '`).', key === 'outletState'));\n\n            this.outletState = value;\n            return value;\n        };\n\n        return DynamicScope;\n    }();\n\n    var RootState = function () {\n        function RootState(root, env, template, self, parentElement, dynamicScope) {\n            var _this = this;\n\n            (0, _emberBabel.classCallCheck)(this, RootState);\n            (true && !(template !== undefined) && (0, _emberDebug.assert)('You cannot render `' + self.value() + '` without a template.', template !== undefined));\n\n            this.id = (0, _emberViews.getViewId)(root);\n            this.env = env;\n            this.root = root;\n            this.result = undefined;\n            this.shouldReflush = false;\n            this.destroyed = false;\n            var options = this.options = {\n                alwaysRevalidate: false\n            };\n            this.render = function () {\n                var iterator = template.render(self, parentElement, dynamicScope);\n                var iteratorResult = void 0;\n                do {\n                    iteratorResult = iterator.next();\n                } while (!iteratorResult.done);\n                var result = _this.result = iteratorResult.value;\n                // override .render function after initial render\n                _this.render = function () {\n                    return result.rerender(options);\n                };\n            };\n        }\n\n        RootState.prototype.isFor = function isFor(possibleRoot) {\n            return this.root === possibleRoot;\n        };\n\n        RootState.prototype.destroy = function destroy() {\n            var result = this.result,\n                env = this.env;\n\n            this.destroyed = true;\n            this.env = undefined;\n            this.root = null;\n            this.result = undefined;\n            this.render = undefined;\n            if (result) {\n                /*\n                 Handles these scenarios:\n                        * When roots are removed during standard rendering process, a transaction exists already\n                   `.begin()` / `.commit()` are not needed.\n                 * When roots are being destroyed manually (`component.append(); component.destroy() case), no\n                   transaction exists already.\n                 * When roots are being destroyed during `Renderer#destroy`, no transaction exists\n                        */\n                var needsTransaction = !env.inTransaction;\n                if (needsTransaction) {\n                    env.begin();\n                }\n                result.destroy();\n                if (needsTransaction) {\n                    env.commit();\n                }\n            }\n        };\n\n        return RootState;\n    }();\n\n    var renderers = [];\n    function _resetRenderers() {\n        renderers.length = 0;\n    }\n    (0, _emberMetal.setHasViews)(function () {\n        return renderers.length > 0;\n    });\n    function register(renderer) {\n        (true && !(renderers.indexOf(renderer) === -1) && (0, _emberDebug.assert)('Cannot register the same renderer twice', renderers.indexOf(renderer) === -1));\n\n        renderers.push(renderer);\n    }\n    function deregister(renderer) {\n        var index = renderers.indexOf(renderer);\n        (true && !(index !== -1) && (0, _emberDebug.assert)('Cannot deregister unknown unregistered renderer', index !== -1));\n\n        renderers.splice(index, 1);\n    }\n    function loopBegin() {\n        for (var i = 0; i < renderers.length; i++) {\n            renderers[i]._scheduleRevalidate();\n        }\n    }\n    function K() {}\n    var renderSettledDeferred = null;\n    /*\n      Returns a promise which will resolve when rendering has settled. Settled in\n      this context is defined as when all of the tags in use are \"current\" (e.g.\n      `renderers.every(r => r._isValid())`). When this is checked at the _end_ of\n      the run loop, this essentially guarantees that all rendering is completed.\n    \n      @method renderSettled\n      @returns {Promise<void>} a promise which fulfills when rendering has settled\n    */\n    function renderSettled() {\n        if (renderSettledDeferred === null) {\n            renderSettledDeferred = _rsvp.default.defer();\n            // if there is no current runloop, the promise created above will not have\n            // a chance to resolve (because its resolved in backburner's \"end\" event)\n            if (!_emberMetal.run.currentRunLoop) {\n                // ensure a runloop has been kicked off\n                backburner.schedule('actions', null, K);\n            }\n        }\n        return renderSettledDeferred.promise;\n    }\n    function resolveRenderPromise() {\n        if (renderSettledDeferred !== null) {\n            var resolve = renderSettledDeferred.resolve;\n            renderSettledDeferred = null;\n            backburner.join(null, resolve);\n        }\n    }\n    var loops = 0;\n    function loopEnd() {\n        for (var i = 0; i < renderers.length; i++) {\n            if (!renderers[i]._isValid()) {\n                if (loops > 10) {\n                    loops = 0;\n                    // TODO: do something better\n                    renderers[i].destroy();\n                    throw new Error('infinite rendering invalidation detected');\n                }\n                loops++;\n                return backburner.join(null, K);\n            }\n        }\n        loops = 0;\n        resolveRenderPromise();\n    }\n    backburner.on('begin', loopBegin);\n    backburner.on('end', loopEnd);\n\n    var Renderer = exports.Renderer = function () {\n        function Renderer(env, rootTemplate) {\n            var _viewRegistry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emberViews.fallbackViewRegistry;\n\n            var destinedForDOM = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            (0, _emberBabel.classCallCheck)(this, Renderer);\n\n            this._env = env;\n            this._rootTemplate = rootTemplate;\n            this._viewRegistry = _viewRegistry;\n            this._destinedForDOM = destinedForDOM;\n            this._destroyed = false;\n            this._roots = [];\n            this._lastRevision = -1;\n            this._isRenderingRoots = false;\n            this._removedRoots = [];\n        }\n        // renderer HOOKS\n\n\n        Renderer.prototype.appendOutletView = function appendOutletView(view, target) {\n            var definition = new _outlet.TopLevelOutletComponentDefinition(view);\n            var outletStateReference = view.toReference();\n            this._appendDefinition(view, definition, target, outletStateReference);\n        };\n\n        Renderer.prototype.appendTo = function appendTo(view, target) {\n            var rootDef = new _root2.RootComponentDefinition(view);\n            this._appendDefinition(view, rootDef, target);\n        };\n\n        Renderer.prototype._appendDefinition = function _appendDefinition(root, definition, target, outletStateReference) {\n            var self = new _references.RootReference(definition);\n            var dynamicScope = new DynamicScope(null, outletStateReference || _runtime.NULL_REFERENCE, outletStateReference);\n            var rootState = new RootState(root, this._env, this._rootTemplate, self, target, dynamicScope);\n            this._renderRoot(rootState);\n        };\n\n        Renderer.prototype.rerender = function rerender() {\n            this._scheduleRevalidate();\n        };\n\n        Renderer.prototype.register = function register(view) {\n            var id = (0, _emberViews.getViewId)(view);\n            (true && !(!this._viewRegistry[id]) && (0, _emberDebug.assert)('Attempted to register a view with an id already in use: ' + id, !this._viewRegistry[id]));\n\n            this._viewRegistry[id] = view;\n        };\n\n        Renderer.prototype.unregister = function unregister(view) {\n            delete this._viewRegistry[(0, _emberViews.getViewId)(view)];\n        };\n\n        Renderer.prototype.remove = function remove(view) {\n            view._transitionTo('destroying');\n            this.cleanupRootFor(view);\n            (0, _emberViews.setViewElement)(view, null);\n            if (this._destinedForDOM) {\n                view.trigger('didDestroyElement');\n            }\n            if (!view.isDestroying) {\n                view.destroy();\n            }\n        };\n\n        Renderer.prototype.cleanupRootFor = function cleanupRootFor(view) {\n            // no need to cleanup roots if we have already been destroyed\n            if (this._destroyed) {\n                return;\n            }\n            var roots = this._roots;\n            // traverse in reverse so we can remove items\n            // without mucking up the index\n            var i = this._roots.length;\n            while (i--) {\n                var root = roots[i];\n                if (root.isFor(view)) {\n                    root.destroy();\n                    roots.splice(i, 1);\n                }\n            }\n        };\n\n        Renderer.prototype.destroy = function destroy() {\n            if (this._destroyed) {\n                return;\n            }\n            this._destroyed = true;\n            this._clearAllRoots();\n        };\n\n        Renderer.prototype.getBounds = function getBounds(view) {\n            var bounds = view[_component.BOUNDS];\n            var parentElement = bounds.parentElement();\n            var firstNode = bounds.firstNode();\n            var lastNode = bounds.lastNode();\n            return { parentElement: parentElement, firstNode: firstNode, lastNode: lastNode };\n        };\n\n        Renderer.prototype.createElement = function createElement(tagName) {\n            return this._env.getAppendOperations().createElement(tagName);\n        };\n\n        Renderer.prototype._renderRoot = function _renderRoot(root) {\n            var roots = this._roots;\n\n            roots.push(root);\n            if (roots.length === 1) {\n                register(this);\n            }\n            this._renderRootsTransaction();\n        };\n\n        Renderer.prototype._renderRoots = function _renderRoots() {\n            var roots = this._roots,\n                env = this._env,\n                removedRoots = this._removedRoots;\n\n            var globalShouldReflush = void 0;\n            var initialRootsLength = void 0;\n            do {\n                env.begin();\n                // ensure that for the first iteration of the loop\n                // each root is processed\n                initialRootsLength = roots.length;\n                globalShouldReflush = false;\n                for (var i = 0; i < roots.length; i++) {\n                    var root = roots[i];\n                    if (root.destroyed) {\n                        // add to the list of roots to be removed\n                        // they will be removed from `this._roots` later\n                        removedRoots.push(root);\n                        // skip over roots that have been marked as destroyed\n                        continue;\n                    }\n                    var shouldReflush = root.shouldReflush;\n                    // when processing non-initial reflush loops,\n                    // do not process more roots than needed\n\n                    if (i >= initialRootsLength && !shouldReflush) {\n                        continue;\n                    }\n                    root.options.alwaysRevalidate = shouldReflush;\n                    // track shouldReflush based on this roots render result\n                    shouldReflush = root.shouldReflush = (0, _emberMetal.runInTransaction)(root, 'render');\n                    // globalShouldReflush should be `true` if *any* of\n                    // the roots need to reflush\n                    globalShouldReflush = globalShouldReflush || shouldReflush;\n                }\n                this._lastRevision = _reference.CURRENT_TAG.value();\n                env.commit();\n            } while (globalShouldReflush || roots.length > initialRootsLength);\n            // remove any roots that were destroyed during this transaction\n            while (removedRoots.length) {\n                var _root = removedRoots.pop();\n                var rootIndex = roots.indexOf(_root);\n                roots.splice(rootIndex, 1);\n            }\n            if (this._roots.length === 0) {\n                deregister(this);\n            }\n        };\n\n        Renderer.prototype._renderRootsTransaction = function _renderRootsTransaction() {\n            if (this._isRenderingRoots) {\n                // currently rendering roots, a new root was added and will\n                // be processed by the existing _renderRoots invocation\n                return;\n            }\n            // used to prevent calling _renderRoots again (see above)\n            // while we are actively rendering roots\n            this._isRenderingRoots = true;\n            var completedWithoutError = false;\n            try {\n                this._renderRoots();\n                completedWithoutError = true;\n            } finally {\n                if (!completedWithoutError) {\n                    this._lastRevision = _reference.CURRENT_TAG.value();\n                    if (this._env.inTransaction === true) {\n                        this._env.commit();\n                    }\n                }\n                this._isRenderingRoots = false;\n            }\n        };\n\n        Renderer.prototype._clearAllRoots = function _clearAllRoots() {\n            var roots = this._roots;\n            for (var i = 0; i < roots.length; i++) {\n                var root = roots[i];\n                root.destroy();\n            }\n            this._removedRoots.length = 0;\n            this._roots = [];\n            // if roots were present before destroying\n            // deregister this renderer instance\n            if (roots.length) {\n                deregister(this);\n            }\n        };\n\n        Renderer.prototype._scheduleRevalidate = function _scheduleRevalidate() {\n            backburner.scheduleOnce('render', this, this._revalidate);\n        };\n\n        Renderer.prototype._isValid = function _isValid() {\n            return this._destroyed || this._roots.length === 0 || _reference.CURRENT_TAG.validate(this._lastRevision);\n        };\n\n        Renderer.prototype._revalidate = function _revalidate() {\n            if (this._isValid()) {\n                return;\n            }\n            this._renderRootsTransaction();\n        };\n\n        return Renderer;\n    }();\n\n    var InertRenderer = exports.InertRenderer = function (_Renderer) {\n        (0, _emberBabel.inherits)(InertRenderer, _Renderer);\n\n        function InertRenderer() {\n            (0, _emberBabel.classCallCheck)(this, InertRenderer);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _Renderer.apply(this, arguments));\n        }\n\n        InertRenderer.create = function create(_ref) {\n            var env = _ref.env,\n                rootTemplate = _ref.rootTemplate,\n                _viewRegistry = _ref._viewRegistry;\n\n            return new this(env, rootTemplate, _viewRegistry, false);\n        };\n\n        InertRenderer.prototype.getElement = function getElement(_view) {\n            throw new Error('Accessing `this.element` is not allowed in non-interactive environments (such as FastBoot).');\n        };\n\n        return InertRenderer;\n    }(Renderer);\n\n    var InteractiveRenderer = exports.InteractiveRenderer = function (_Renderer2) {\n        (0, _emberBabel.inherits)(InteractiveRenderer, _Renderer2);\n\n        function InteractiveRenderer() {\n            (0, _emberBabel.classCallCheck)(this, InteractiveRenderer);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _Renderer2.apply(this, arguments));\n        }\n\n        InteractiveRenderer.create = function create(_ref2) {\n            var env = _ref2.env,\n                rootTemplate = _ref2.rootTemplate,\n                _viewRegistry = _ref2._viewRegistry;\n\n            return new this(env, rootTemplate, _viewRegistry, true);\n        };\n\n        InteractiveRenderer.prototype.getElement = function getElement(view) {\n            return (0, _emberViews.getViewElement)(view);\n        };\n\n        return InteractiveRenderer;\n    }(Renderer);\n});","enifed('ember-glimmer/setup-registry', ['exports', 'ember-babel', 'container', 'ember-environment', 'ember-glimmer/component', 'ember-glimmer/components/checkbox', 'ember-glimmer/components/link-to', 'ember-glimmer/components/text_area', 'ember-glimmer/components/text_field', 'ember-glimmer/dom', 'ember-glimmer/environment', 'ember-glimmer/renderer', 'ember-glimmer/templates/component', 'ember-glimmer/templates/outlet', 'ember-glimmer/templates/root', 'ember-glimmer/views/outlet', 'ember-glimmer/helpers/loc', 'ember/features'], function (exports, _emberBabel, _container, _emberEnvironment, _component, _checkbox, _linkTo, _text_area, _text_field, _dom, _environment, _renderer, _component2, _outlet, _root, _outlet2, _loc, _features) {\n    'use strict';\n\n    exports.setupApplicationRegistry = setupApplicationRegistry;\n    exports.setupEngineRegistry = setupEngineRegistry;\n\n    var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['template:-root'], ['template:-root']),\n        _templateObject2 = (0, _emberBabel.taggedTemplateLiteralLoose)(['template:components/-default'], ['template:components/-default']),\n        _templateObject3 = (0, _emberBabel.taggedTemplateLiteralLoose)(['component:-default'], ['component:-default']);\n\n    function setupApplicationRegistry(registry) {\n        registry.injection('service:-glimmer-environment', 'appendOperations', 'service:-dom-tree-construction');\n        registry.injection('renderer', 'env', 'service:-glimmer-environment');\n        registry.register((0, _container.privatize)(_templateObject), _root.default);\n        registry.injection('renderer', 'rootTemplate', (0, _container.privatize)(_templateObject));\n        registry.register('renderer:-dom', _renderer.InteractiveRenderer);\n        registry.register('renderer:-inert', _renderer.InertRenderer);\n        if (_emberEnvironment.environment.hasDOM) {\n            registry.injection('service:-glimmer-environment', 'updateOperations', 'service:-dom-changes');\n        }\n        registry.register('service:-dom-changes', {\n            create: function (_ref) {\n                var document = _ref.document;\n\n                return new _dom.DOMChanges(document);\n            }\n        });\n        registry.register('service:-dom-tree-construction', {\n            create: function (_ref2) {\n                var document = _ref2.document;\n\n                var Implementation = _emberEnvironment.environment.hasDOM ? _dom.DOMTreeConstruction : _dom.NodeDOMTreeConstruction;\n                return new Implementation(document);\n            }\n        });\n    }\n    function setupEngineRegistry(registry) {\n        registry.register('view:-outlet', _outlet2.default);\n        registry.register('template:-outlet', _outlet.default);\n        registry.injection('view:-outlet', 'template', 'template:-outlet');\n        registry.injection('service:-dom-changes', 'document', 'service:-document');\n        registry.injection('service:-dom-tree-construction', 'document', 'service:-document');\n        registry.register((0, _container.privatize)(_templateObject2), _component2.default);\n        registry.register('service:-glimmer-environment', _environment.default);\n        registry.injection('template', 'env', 'service:-glimmer-environment');\n        registry.optionsForType('helper', { instantiate: false });\n        registry.register('helper:loc', _loc.default);\n        registry.register('component:-text-field', _text_field.default);\n        registry.register('component:-text-area', _text_area.default);\n        registry.register('component:-checkbox', _checkbox.default);\n        registry.register('component:link-to', _linkTo.default);\n        if (!_features.EMBER_GLIMMER_TEMPLATE_ONLY_COMPONENTS) {\n            registry.register((0, _container.privatize)(_templateObject3), _component.default);\n        }\n    }\n});","enifed('ember-glimmer/syntax', ['exports', 'ember-debug', 'ember-environment', 'ember-glimmer/syntax/-text-area', 'ember-glimmer/syntax/dynamic-component', 'ember-glimmer/syntax/input', 'ember-glimmer/syntax/mount', 'ember-glimmer/syntax/outlet', 'ember-glimmer/syntax/render', 'ember-glimmer/syntax/utils', 'ember-glimmer/utils/bindings'], function (exports, _emberDebug, _emberEnvironment, _textArea, _dynamicComponent, _input, _mount, _outlet, _render, _utils, _bindings) {\n    'use strict';\n\n    exports.experimentalMacros = undefined;\n    exports.registerMacros = registerMacros;\n    exports.populateMacros = populateMacros;\n\n    function refineInlineSyntax(name, params, hash, builder) {\n        (true && !(!(builder.env.builtInHelpers[name] && builder.env.owner.hasRegistration('helper:' + name))) && (0, _emberDebug.assert)('You attempted to overwrite the built-in helper \"' + name + '\" which is not allowed. Please rename the helper.', !(builder.env.builtInHelpers[name] && builder.env.owner.hasRegistration('helper:' + name))));\n\n        var definition = void 0;\n        if (name.indexOf('-') > -1) {\n            definition = builder.env.getComponentDefinition(name, builder.meta.templateMeta);\n        }\n        if (definition) {\n            (0, _bindings.wrapComponentClassAttribute)(hash);\n            builder.component.static(definition, [params, (0, _utils.hashToArgs)(hash), null, null]);\n            return true;\n        }\n        return false;\n    }\n    function refineBlockSyntax(name, params, hash, _default, inverse, builder) {\n        if (name.indexOf('-') === -1) {\n            return false;\n        }\n        var meta = builder.meta.templateMeta;\n        var definition = void 0;\n        if (name.indexOf('-') > -1) {\n            definition = builder.env.getComponentDefinition(name, meta);\n        }\n        if (definition) {\n            (0, _bindings.wrapComponentClassAttribute)(hash);\n            builder.component.static(definition, [params, (0, _utils.hashToArgs)(hash), _default, inverse]);\n            return true;\n        }\n        (true && !(builder.env.hasHelper(name, meta)) && (0, _emberDebug.assert)('A component or helper named \"' + name + '\" could not be found', builder.env.hasHelper(name, meta)));\n        (true && !(!builder.env.hasHelper(name, meta)) && (0, _emberDebug.assert)('Helpers may not be used in the block form, for example {{#' + name + '}}{{/' + name + '}}. Please use a component, or alternatively use the helper in combination with a built-in Ember helper, for example {{#if (' + name + ')}}{{/if}}.', !builder.env.hasHelper(name, meta)));\n\n        return false;\n    }\n    var experimentalMacros = exports.experimentalMacros = [];\n    // This is a private API to allow for experimental macros\n    // to be created in user space. Registering a macro should\n    // should be done in an initializer.\n    function registerMacros(macro) {\n        experimentalMacros.push(macro);\n    }\n    function populateMacros(blocks, inlines) {\n        inlines.add('outlet', _outlet.outletMacro);\n        inlines.add('component', _dynamicComponent.inlineComponentMacro);\n        if (_emberEnvironment.ENV._ENABLE_RENDER_SUPPORT === true) {\n            inlines.add('render', _render.renderMacro);\n        }\n        inlines.add('mount', _mount.mountMacro);\n        inlines.add('input', _input.inputMacro);\n        inlines.add('textarea', _textArea.textAreaMacro);\n        inlines.addMissing(refineInlineSyntax);\n        blocks.add('component', _dynamicComponent.blockComponentMacro);\n        blocks.addMissing(refineBlockSyntax);\n        for (var i = 0; i < experimentalMacros.length; i++) {\n            var macro = experimentalMacros[i];\n            macro(blocks, inlines);\n        }\n        return { blocks: blocks, inlines: inlines };\n    }\n});","enifed('ember-glimmer/syntax/-text-area', ['exports', 'ember-glimmer/utils/bindings', 'ember-glimmer/syntax/utils'], function (exports, _bindings, _utils) {\n    'use strict';\n\n    exports.textAreaMacro = textAreaMacro;\n    function textAreaMacro(_name, params, hash, builder) {\n        var definition = builder.env.getComponentDefinition('-text-area', builder.meta.templateMeta);\n        (0, _bindings.wrapComponentClassAttribute)(hash);\n        builder.component.static(definition, [params, (0, _utils.hashToArgs)(hash), null, null]);\n        return true;\n    }\n});","enifed('ember-glimmer/syntax/dynamic-component', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-debug', 'ember-glimmer/syntax/utils'], function (exports, _emberBabel, _runtime, _emberDebug, _utils) {\n    'use strict';\n\n    exports.dynamicComponentMacro = dynamicComponentMacro;\n    exports.blockComponentMacro = blockComponentMacro;\n    exports.inlineComponentMacro = inlineComponentMacro;\n\n    function dynamicComponentFor(vm, args, meta) {\n        var env = vm.env;\n        var nameRef = args.positional.at(0);\n        return new DynamicComponentReference({ nameRef: nameRef, env: env, meta: meta, args: null });\n    }\n    function dynamicComponentMacro(params, hash, _default, _inverse, builder) {\n        var definitionArgs = [params.slice(0, 1), null, null, null];\n        var args = [params.slice(1), (0, _utils.hashToArgs)(hash), null, null];\n        builder.component.dynamic(definitionArgs, dynamicComponentFor, args);\n        return true;\n    }\n    function blockComponentMacro(params, hash, _default, inverse, builder) {\n        var definitionArgs = [params.slice(0, 1), null, null, null];\n        var args = [params.slice(1), (0, _utils.hashToArgs)(hash), _default, inverse];\n        builder.component.dynamic(definitionArgs, dynamicComponentFor, args);\n        return true;\n    }\n    function inlineComponentMacro(_name, params, hash, builder) {\n        var definitionArgs = [params.slice(0, 1), null, null, null];\n        var args = [params.slice(1), (0, _utils.hashToArgs)(hash), null, null];\n        builder.component.dynamic(definitionArgs, dynamicComponentFor, args);\n        return true;\n    }\n\n    var DynamicComponentReference = function () {\n        function DynamicComponentReference(_ref) {\n            var nameRef = _ref.nameRef,\n                env = _ref.env,\n                meta = _ref.meta,\n                args = _ref.args;\n            (0, _emberBabel.classCallCheck)(this, DynamicComponentReference);\n\n            this.tag = nameRef.tag;\n            this.nameRef = nameRef;\n            this.env = env;\n            this.meta = meta;\n            this.args = args;\n        }\n\n        DynamicComponentReference.prototype.value = function value() {\n            var env = this.env,\n                nameRef = this.nameRef,\n                meta = this.meta;\n\n            var nameOrDef = nameRef.value();\n            if (typeof nameOrDef === 'string') {\n                var definition = env.getComponentDefinition(nameOrDef, meta);\n                // tslint:disable-next-line:max-line-length\n                (true && !(!!definition) && (0, _emberDebug.assert)('Could not find component named \"' + nameOrDef + '\" (no component or template with that name was found)', !!definition));\n\n                return definition;\n            } else if ((0, _runtime.isComponentDefinition)(nameOrDef)) {\n                return nameOrDef;\n            } else {\n                return null;\n            }\n        };\n\n        DynamicComponentReference.prototype.get = function get() {};\n\n        return DynamicComponentReference;\n    }();\n});","enifed('ember-glimmer/syntax/input', ['exports', 'ember-debug', 'ember-glimmer/utils/bindings', 'ember-glimmer/syntax/dynamic-component', 'ember-glimmer/syntax/utils'], function (exports, _emberDebug, _bindings, _dynamicComponent, _utils) {\n    'use strict';\n\n    exports.inputMacro = inputMacro;\n    /**\n    @module ember\n    */\n    function buildSyntax(type, params, hash, builder) {\n        var definition = builder.env.getComponentDefinition(type, builder.meta.templateMeta);\n        builder.component.static(definition, [params, (0, _utils.hashToArgs)(hash), null, null]);\n        return true;\n    }\n    /**\n      The `{{input}}` helper lets you create an HTML `<input />` component.\n      It causes an `TextField` component to be rendered.  For more info,\n      see the [TextField](/api/ember/release/classes/TextField) docs and\n      the [templates guide](https://emberjs.com/guides/templates/input-helpers/).\n    \n      ```handlebars\n      {{input value=\"987\"}}\n      ```\n    \n      renders as:\n    \n      ```HTML\n      <input type=\"text\" value=\"987\" />\n      ```\n    \n      ### Text field\n    \n      If no `type` option is specified, a default of type 'text' is used.\n      Many of the standard HTML attributes may be passed to this helper.\n      <table>\n        <tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>\n        <tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>\n        <tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>\n        <tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>\n        <tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>\n        <tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>\n        <tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>\n        <tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>\n        <tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>\n        <tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&nbsp;</td></tr>\n      </table>\n      When set to a quoted string, these values will be directly applied to the HTML\n      element. When left unquoted, these values will be bound to a property on the\n      template's current rendering context (most typically a controller instance).\n      A very common use of this helper is to bind the `value` of an input to an Object's attribute:\n    \n      ```handlebars\n      Search:\n      {{input value=searchWord}}\n      ```\n    \n      In this example, the initial value in the `<input />` will be set to the value of `searchWord`.\n      If the user changes the text, the value of `searchWord` will also be updated.\n    \n      ### Actions\n    \n      The helper can send multiple actions based on user events.\n      The action property defines the action which is sent when\n      the user presses the return key.\n    \n      ```handlebars\n      {{input action=\"submit\"}}\n      ```\n    \n      The helper allows some user events to send actions.\n    \n      * `enter`\n      * `insert-newline`\n      * `escape-press`\n      * `focus-in`\n      * `focus-out`\n      * `key-press`\n      * `key-up`\n    \n      For example, if you desire an action to be sent when the input is blurred,\n      you only need to setup the action name to the event name property.\n    \n      ```handlebars\n      {{input focus-out=\"alertMessage\"}}\n      ```\n      See more about [Text Support Actions](/api/ember/release/classes/TextField)\n    \n      ### Extending `TextField`\n    \n      Internally, `{{input type=\"text\"}}` creates an instance of `TextField`, passing\n      arguments from the helper to `TextField`'s `create` method. You can extend the\n      capabilities of text inputs in your applications by reopening this class. For example,\n      if you are building a Bootstrap project where `data-*` attributes are used, you\n      can add one to the `TextField`'s `attributeBindings` property:\n    \n      ```javascript\n      import TextField from '@ember/component/text-field';\n      TextField.reopen({\n        attributeBindings: ['data-error']\n      });\n      ```\n    \n      Keep in mind when writing `TextField` subclasses that `TextField`\n      itself extends `Component`. Expect isolated component semantics, not\n      legacy 1.x view semantics (like `controller` being present).\n      See more about [Ember components](/api/ember/release/classes/Component)\n    \n      ### Checkbox\n    \n      Checkboxes are special forms of the `{{input}}` helper.  To create a `<checkbox />`:\n    \n      ```handlebars\n      Emberize Everything:\n      {{input type=\"checkbox\" name=\"isEmberized\" checked=isEmberized}}\n      ```\n    \n      This will bind checked state of this checkbox to the value of `isEmberized`  -- if either one changes,\n      it will be reflected in the other.\n    \n      The following HTML attributes can be set via the helper:\n    \n      * `checked`\n      * `disabled`\n      * `tabindex`\n      * `indeterminate`\n      * `name`\n      * `autofocus`\n      * `form`\n    \n      ### Extending `Checkbox`\n    \n      Internally, `{{input type=\"checkbox\"}}` creates an instance of `Checkbox`, passing\n      arguments from the helper to `Checkbox`'s `create` method. You can extend the\n      capablilties of checkbox inputs in your applications by reopening this class. For example,\n      if you wanted to add a css class to all checkboxes in your application:\n    \n      ```javascript\n      import Checkbox from '@ember/component/checkbox';\n    \n      Checkbox.reopen({\n        classNames: ['my-app-checkbox']\n      });\n      ```\n    \n      @method input\n      @for Ember.Templates.helpers\n      @param {Hash} options\n      @public\n    */\n    function inputMacro(_name, params, hash, builder) {\n        var keys = void 0;\n        var values = void 0;\n        var typeIndex = -1;\n        var valueIndex = -1;\n        if (hash) {\n            keys = hash[0];\n            values = hash[1];\n            typeIndex = keys.indexOf('type');\n            valueIndex = keys.indexOf('value');\n        }\n        if (!params) {\n            params = [];\n        }\n        if (typeIndex > -1) {\n            var typeArg = values[typeIndex];\n            if (Array.isArray(typeArg)) {\n                return (0, _dynamicComponent.dynamicComponentMacro)(params, hash, null, null, builder);\n            } else if (typeArg === 'checkbox') {\n                (true && !(valueIndex === -1) && (0, _emberDebug.assert)('{{input type=\\'checkbox\\'}} does not support setting `value=someBooleanValue`; ' + 'you must use `checked=someBooleanValue` instead.', valueIndex === -1));\n\n                (0, _bindings.wrapComponentClassAttribute)(hash);\n                return buildSyntax('-checkbox', params, hash, builder);\n            }\n        }\n        return buildSyntax('-text-field', params, hash, builder);\n    }\n});","enifed('ember-glimmer/syntax/mount', ['exports', 'ember-babel', 'ember-debug', 'ember/features', 'ember-glimmer/component-managers/mount', 'ember-glimmer/syntax/utils'], function (exports, _emberBabel, _emberDebug, _features, _mount, _utils) {\n    'use strict';\n\n    exports.mountMacro = mountMacro;\n\n    function dynamicEngineFor(vm, args, meta) {\n        var env = vm.env;\n        var nameRef = args.positional.at(0);\n        return new DynamicEngineReference({ nameRef: nameRef, env: env, meta: meta });\n    }\n    /**\n      The `{{mount}}` helper lets you embed a routeless engine in a template.\n      Mounting an engine will cause an instance to be booted and its `application`\n      template to be rendered.\n    \n      For example, the following template mounts the `ember-chat` engine:\n    \n      ```handlebars\n      {{! application.hbs }}\n      {{mount \"ember-chat\"}}\n      ```\n    \n      Additionally, you can also pass in a `model` argument that will be\n      set as the engines model. This can be an existing object:\n    \n      ```\n      <div>\n        {{mount 'admin' model=userSettings}}\n      </div>\n      ```\n    \n      Or an inline `hash`, and you can even pass components:\n    \n      ```\n      <div>\n        <h1>Application template!</h1>\n        {{mount 'admin' model=(hash\n            title='Secret Admin'\n            signInButton=(component 'sign-in-button')\n        )}}\n      </div>\n      ```\n    \n      @method mount\n      @param {String} name Name of the engine to mount.\n      @param {Object} [model] Object that will be set as\n                              the model of the engine.\n      @for Ember.Templates.helpers\n      @category ember-application-engines\n      @public\n    */\n    function mountMacro(_name, params, hash, builder) {\n        if (_features.EMBER_ENGINES_MOUNT_PARAMS) {\n            (true && !(params.length === 1) && (0, _emberDebug.assert)('You can only pass a single positional argument to the {{mount}} helper, e.g. {{mount \"chat-engine\"}}.', params.length === 1));\n        } else {\n            (true && !(params.length === 1 && hash === null) && (0, _emberDebug.assert)('You can only pass a single argument to the {{mount}} helper, e.g. {{mount \"chat-engine\"}}.', params.length === 1 && hash === null));\n        }\n        var definitionArgs = [params.slice(0, 1), null, null, null];\n        var args = [null, (0, _utils.hashToArgs)(hash), null, null];\n        builder.component.dynamic(definitionArgs, dynamicEngineFor, args);\n        return true;\n    }\n\n    var DynamicEngineReference = function () {\n        function DynamicEngineReference(_ref) {\n            var nameRef = _ref.nameRef,\n                env = _ref.env,\n                meta = _ref.meta;\n            (0, _emberBabel.classCallCheck)(this, DynamicEngineReference);\n\n            this.tag = nameRef.tag;\n            this.nameRef = nameRef;\n            this.env = env;\n            this.meta = meta;\n            this._lastName = undefined;\n            this._lastDef = undefined;\n        }\n\n        DynamicEngineReference.prototype.value = function value() {\n            var env = this.env,\n                nameRef = this.nameRef;\n\n            var nameOrDef = nameRef.value();\n            if (typeof nameOrDef === 'string') {\n                if (this._lastName === nameOrDef) {\n                    return this._lastDef;\n                }\n                (true && !(env.owner.hasRegistration('engine:' + nameOrDef)) && (0, _emberDebug.assert)('You used `{{mount \\'' + nameOrDef + '\\'}}`, but the engine \\'' + nameOrDef + '\\' can not be found.', env.owner.hasRegistration('engine:' + nameOrDef)));\n\n                if (!env.owner.hasRegistration('engine:' + nameOrDef)) {\n                    return null;\n                }\n                this._lastName = nameOrDef;\n                this._lastDef = new _mount.MountDefinition(nameOrDef);\n                return this._lastDef;\n            } else {\n                (true && !(nameOrDef === null || nameOrDef === undefined) && (0, _emberDebug.assert)('Invalid engine name \\'' + nameOrDef + '\\' specified, engine name must be either a string, null or undefined.', nameOrDef === null || nameOrDef === undefined));\n\n                return null;\n            }\n        };\n\n        return DynamicEngineReference;\n    }();\n});","enifed('ember-glimmer/syntax/outlet', ['exports', 'ember-babel', '@glimmer/reference', 'ember-glimmer/component-managers/outlet'], function (exports, _emberBabel, _reference, _outlet) {\n    'use strict';\n\n    exports.outletMacro = outletMacro;\n\n    var OutletComponentReference = function () {\n        function OutletComponentReference(outletNameRef, parentOutletStateRef) {\n            (0, _emberBabel.classCallCheck)(this, OutletComponentReference);\n\n            this.outletNameRef = outletNameRef;\n            this.parentOutletStateRef = parentOutletStateRef;\n            this.definition = null;\n            this.lastState = null;\n            var outletStateTag = this.outletStateTag = _reference.UpdatableTag.create(parentOutletStateRef.tag);\n            this.tag = (0, _reference.combine)([outletStateTag.inner, outletNameRef.tag]);\n        }\n\n        OutletComponentReference.prototype.value = function value() {\n            var outletNameRef = this.outletNameRef,\n                parentOutletStateRef = this.parentOutletStateRef,\n                definition = this.definition,\n                lastState = this.lastState;\n\n            var outletName = outletNameRef.value();\n            var outletStateRef = parentOutletStateRef.get('outlets').get(outletName);\n            var newState = this.lastState = outletStateRef.value();\n            this.outletStateTag.inner.update(outletStateRef.tag);\n            definition = revalidate(definition, lastState, newState);\n            var hasTemplate = newState && newState.render.template;\n            if (definition) {\n                return definition;\n            } else if (hasTemplate) {\n                return this.definition = new _outlet.OutletComponentDefinition(outletName, newState.render.template);\n            } else {\n                return this.definition = null;\n            }\n        };\n\n        return OutletComponentReference;\n    }();\n\n    function revalidate(definition, lastState, newState) {\n        if (!lastState && !newState) {\n            return definition;\n        }\n        if (!lastState && newState || lastState && !newState) {\n            return null;\n        }\n        if (newState.render.template === lastState.render.template && newState.render.controller === lastState.render.controller) {\n            return definition;\n        }\n        return null;\n    }\n    function outletComponentFor(vm, args) {\n        var _vm$dynamicScope = vm.dynamicScope(),\n            outletState = _vm$dynamicScope.outletState;\n\n        var outletNameRef = void 0;\n        if (args.positional.length === 0) {\n            outletNameRef = new _reference.ConstReference('main');\n        } else {\n            outletNameRef = args.positional.at(0);\n        }\n        return new OutletComponentReference(outletNameRef, outletState);\n    }\n    /**\n      The `{{outlet}}` helper lets you specify where a child route will render in\n      your template. An important use of the `{{outlet}}` helper is in your\n      application's `application.hbs` file:\n    \n      ```handlebars\n      {{! app/templates/application.hbs }}\n      <!-- header content goes here, and will always display -->\n      {{my-header}}\n      <div class=\"my-dynamic-content\">\n        <!-- this content will change based on the current route, which depends on the current URL -->\n        {{outlet}}\n      </div>\n      <!-- footer content goes here, and will always display -->\n      {{my-footer}}\n      ```\n    \n      See [templates guide](https://emberjs.com/guides/templates/the-application-template/) for\n      additional information on using `{{outlet}}` in `application.hbs`.\n      You may also specify a name for the `{{outlet}}`, which is useful when using more than one\n      `{{outlet}}` in a template:\n    \n      ```handlebars\n      {{outlet \"menu\"}}\n      {{outlet \"sidebar\"}}\n      {{outlet \"main\"}}\n      ```\n    \n      Your routes can then render into a specific one of these `outlet`s by specifying the `outlet`\n      attribute in your `renderTemplate` function:\n    \n      ```app/routes/menu.js\n      import Route from '@ember/routing/route';\n    \n      export default Route.extend({\n        renderTemplate() {\n          this.render({ outlet: 'menu' });\n        }\n      });\n      ```\n    \n      See the [routing guide](https://emberjs.com/guides/routing/rendering-a-template/) for more\n      information on how your `route` interacts with the `{{outlet}}` helper.\n      Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.\n    \n      @method outlet\n      @param {String} [name]\n      @for Ember.Templates.helpers\n      @public\n    */\n    function outletMacro(_name, params, _hash, builder) {\n        if (!params) {\n            params = [];\n        }\n        var definitionArgs = [params.slice(0, 1), null, null, null];\n        var emptyArgs = [[], null, null, null]; // FIXME\n        builder.component.dynamic(definitionArgs, outletComponentFor, emptyArgs);\n        return true;\n    }\n});","enifed('ember-glimmer/syntax/render', ['exports', '@glimmer/reference', 'ember-debug', 'ember-glimmer/component-managers/render', 'ember-glimmer/syntax/utils'], function (exports, _reference, _emberDebug, _render, _utils) {\n    'use strict';\n\n    exports.renderMacro = renderMacro;\n    /**\n    @module ember\n    \n    Remove after 3.4 once _ENABLE_RENDER_SUPPORT flag is no longer needed.\n    */\n    function makeComponentDefinition(vm, args) {\n        var env = vm.env;\n        var nameRef = args.positional.at(0);\n        (true && !((0, _reference.isConst)(nameRef)) && (0, _emberDebug.assert)('The first argument of {{render}} must be quoted, e.g. {{render \"sidebar\"}}.', (0, _reference.isConst)(nameRef)));\n        (true && !(args.positional.length === 1 || !(0, _reference.isConst)(args.positional.at(1))) && (0, _emberDebug.assert)('The second argument of {{render}} must be a path, e.g. {{render \"post\" post}}.', args.positional.length === 1 || !(0, _reference.isConst)(args.positional.at(1))));\n\n        var templateName = nameRef.value();\n        // tslint:disable-next-line:max-line-length\n        (true && !(env.owner.hasRegistration('template:' + templateName)) && (0, _emberDebug.assert)('You used `{{render \\'' + templateName + '\\'}}`, but \\'' + templateName + '\\' can not be found as a template.', env.owner.hasRegistration('template:' + templateName)));\n\n        var template = env.owner.lookup('template:' + templateName);\n        var controllerName = void 0;\n        if (args.named.has('controller')) {\n            var controllerNameRef = args.named.get('controller');\n            // tslint:disable-next-line:max-line-length\n            (true && !((0, _reference.isConst)(controllerNameRef)) && (0, _emberDebug.assert)('The controller argument for {{render}} must be quoted, e.g. {{render \"sidebar\" controller=\"foo\"}}.', (0, _reference.isConst)(controllerNameRef)));\n\n            // TODO should be ensuring this to string here\n            controllerName = controllerNameRef.value();\n            // tslint:disable-next-line:max-line-length\n            (true && !(env.owner.hasRegistration('controller:' + controllerName)) && (0, _emberDebug.assert)('The controller name you supplied \\'' + controllerName + '\\' did not resolve to a controller.', env.owner.hasRegistration('controller:' + controllerName)));\n        } else {\n            controllerName = templateName;\n        }\n        if (args.positional.length === 1) {\n            return new _reference.ConstReference(new _render.RenderDefinition(controllerName, template, env, _render.SINGLETON_RENDER_MANAGER));\n        } else {\n            return new _reference.ConstReference(new _render.RenderDefinition(controllerName, template, env, _render.NON_SINGLETON_RENDER_MANAGER));\n        }\n    }\n    /**\n      Calling ``{{render}}`` from within a template will insert another\n      template that matches the provided name. The inserted template will\n      access its properties on its own controller (rather than the controller\n      of the parent template).\n    \n      If a view class with the same name exists, the view class also will be used.\n      Note: A given controller may only be used *once* in your app in this manner.\n      A singleton instance of the controller will be created for you.\n    \n      Example:\n    \n      ```app/controllers/navigation.js\n      import Controller from '@ember/controller';\n    \n      export default Controller.extend({\n        who: \"world\"\n      });\n      ```\n    \n      ```handlebars\n      <!-- navigation.hbs -->\n      Hello, {{who}}.\n      ```\n    \n      ```handlebars\n      <!-- application.hbs -->\n      <h1>My great app</h1>\n      {{render \"navigation\"}}\n      ```\n    \n      ```html\n      <h1>My great app</h1>\n      <div class='ember-view'>\n        Hello, world.\n      </div>\n      ```\n    \n      Optionally you may provide a second argument: a property path\n      that will be bound to the `model` property of the controller.\n      If a `model` property path is specified, then a new instance of the\n      controller will be created and `{{render}}` can be used multiple times\n      with the same name.\n    \n      For example if you had this `author` template.\n    \n      ```handlebars\n      <div class=\"author\">\n        Written by {{firstName}} {{lastName}}.\n        Total Posts: {{postCount}}\n      </div>\n      ```\n    \n      You could render it inside the `post` template using the `render` helper.\n    \n      ```handlebars\n      <div class=\"post\">\n        <h1>{{title}}</h1>\n        <div>{{body}}</div>\n        {{render \"author\" author}}\n      </div>\n      ```\n    \n      @method render\n      @for Ember.Templates.helpers\n      @param {String} name\n      @param {Object?} context\n      @param {Hash} options\n      @return {String} HTML string\n      @public\n      @deprecated Use a component instead\n    */\n    function renderMacro(_name, params, hash, builder) {\n        if (!params) {\n            params = [];\n        }\n        var definitionArgs = [params.slice(0), hash, null, null];\n        var args = [params.slice(1), (0, _utils.hashToArgs)(hash), null, null];\n        builder.component.dynamic(definitionArgs, makeComponentDefinition, args);\n        return true;\n    }\n});","enifed(\"ember-glimmer/syntax/utils\", [\"exports\"], function (exports) {\n    \"use strict\";\n\n    exports.hashToArgs = hashToArgs;\n    function hashToArgs(hash) {\n        if (hash === null) {\n            return null;\n        }\n        var names = hash[0].map(function (key) {\n            return \"@\" + key;\n        });\n        return [names, hash[1]];\n    }\n});","enifed('ember-glimmer/template', ['exports', 'ember-babel', '@glimmer/runtime', 'ember-utils'], function (exports, _emberBabel, _runtime, _emberUtils) {\n    'use strict';\n\n    exports.WrappedTemplateFactory = undefined;\n    exports.default = template;\n\n    var WrappedTemplateFactory = exports.WrappedTemplateFactory = function () {\n        function WrappedTemplateFactory(factory) {\n            (0, _emberBabel.classCallCheck)(this, WrappedTemplateFactory);\n\n            this.factory = factory;\n            this.id = factory.id;\n            this.meta = factory.meta;\n        }\n\n        WrappedTemplateFactory.prototype.create = function create(props) {\n            var owner = props[_emberUtils.OWNER];\n            return this.factory.create(props.env, { owner: owner });\n        };\n\n        return WrappedTemplateFactory;\n    }();\n\n    function template(json) {\n        var factory = (0, _runtime.templateFactory)(json);\n        return new WrappedTemplateFactory(factory);\n    }\n});","enifed(\"ember-glimmer/template_registry\", [\"exports\"], function (exports) {\n    \"use strict\";\n\n    exports.setTemplates = setTemplates;\n    exports.getTemplates = getTemplates;\n    exports.getTemplate = getTemplate;\n    exports.hasTemplate = hasTemplate;\n    exports.setTemplate = setTemplate;\n    var TEMPLATES = {};\n    function setTemplates(templates) {\n        TEMPLATES = templates;\n    }\n    function getTemplates() {\n        return TEMPLATES;\n    }\n    function getTemplate(name) {\n        if (TEMPLATES.hasOwnProperty(name)) {\n            return TEMPLATES[name];\n        }\n    }\n    function hasTemplate(name) {\n        return TEMPLATES.hasOwnProperty(name);\n    }\n    function setTemplate(name, template) {\n        return TEMPLATES[name] = template;\n    }\n});","enifed(\"ember-glimmer/templates/component\", [\"exports\", \"ember-glimmer/template\"], function (exports, _template) {\n  \"use strict\";\n\n  exports.default = (0, _template.default)({ \"id\": \"RxHsBKwy\", \"block\": \"{\\\"symbols\\\":[\\\"&default\\\"],\\\"statements\\\":[[11,1]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"packages/ember-glimmer/lib/templates/component.hbs\" } });\n});","enifed(\"ember-glimmer/templates/empty\", [\"exports\", \"ember-glimmer/template\"], function (exports, _template) {\n  \"use strict\";\n\n  exports.default = (0, _template.default)({ \"id\": \"5jp2oO+o\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"packages/ember-glimmer/lib/templates/empty.hbs\" } });\n});","enifed(\"ember-glimmer/templates/link-to\", [\"exports\", \"ember-glimmer/template\"], function (exports, _template) {\n  \"use strict\";\n\n  exports.default = (0, _template.default)({ \"id\": \"VZn3uSPL\", \"block\": \"{\\\"symbols\\\":[\\\"&default\\\"],\\\"statements\\\":[[4,\\\"if\\\",[[20,[\\\"linkTitle\\\"]]],null,{\\\"statements\\\":[[1,[18,\\\"linkTitle\\\"],false]],\\\"parameters\\\":[]},{\\\"statements\\\":[[11,1]],\\\"parameters\\\":[]}]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"packages/ember-glimmer/lib/templates/link-to.hbs\" } });\n});","enifed(\"ember-glimmer/templates/outlet\", [\"exports\", \"ember-glimmer/template\"], function (exports, _template) {\n  \"use strict\";\n\n  exports.default = (0, _template.default)({ \"id\": \"/7rqcQ85\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"outlet\\\"],false]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"packages/ember-glimmer/lib/templates/outlet.hbs\" } });\n});","enifed(\"ember-glimmer/templates/root\", [\"exports\", \"ember-glimmer/template\"], function (exports, _template) {\n  \"use strict\";\n\n  exports.default = (0, _template.default)({ \"id\": \"AdIsk/cm\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"component\\\",[[19,0,[]]],null],false]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"packages/ember-glimmer/lib/templates/root.hbs\" } });\n});","enifed('ember-glimmer/utils/bindings', ['exports', 'ember-babel', '@glimmer/reference', '@glimmer/wire-format', 'ember-debug', 'ember-metal', 'ember-runtime', 'ember-glimmer/component', 'ember-glimmer/utils/string'], function (exports, _emberBabel, _reference, _wireFormat, _emberDebug, _emberMetal, _emberRuntime, _component, _string) {\n    'use strict';\n\n    exports.ClassNameBinding = exports.IsVisibleBinding = exports.AttributeBinding = undefined;\n    exports.wrapComponentClassAttribute = wrapComponentClassAttribute;\n\n    function referenceForKey(component, key) {\n        return component[_component.ROOT_REF].get(key);\n    }\n    function referenceForParts(component, parts) {\n        var isAttrs = parts[0] === 'attrs';\n        // TODO deprecate this\n        if (isAttrs) {\n            parts.shift();\n            if (parts.length === 1) {\n                return referenceForKey(component, parts[0]);\n            }\n        }\n        return (0, _reference.referenceFromParts)(component[_component.ROOT_REF], parts);\n    }\n    // TODO we should probably do this transform at build time\n    function wrapComponentClassAttribute(hash) {\n        if (!hash) {\n            return hash;\n        }\n        var keys = hash[0],\n            values = hash[1];\n\n        var index = keys.indexOf('class');\n        if (index !== -1) {\n            var _values$index = values[index],\n                type = _values$index[0];\n\n            if (type === _wireFormat.Ops.Get || type === _wireFormat.Ops.MaybeLocal) {\n                var getExp = values[index];\n                var path = getExp[getExp.length - 1];\n                var propName = path[path.length - 1];\n                hash[1][index] = [_wireFormat.Ops.Helper, ['-class'], [getExp, propName]];\n            }\n        }\n        return hash;\n    }\n    var AttributeBinding = exports.AttributeBinding = {\n        parse: function (microsyntax) {\n            var colonIndex = microsyntax.indexOf(':');\n            if (colonIndex === -1) {\n                (true && !(microsyntax !== 'class') && (0, _emberDebug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', microsyntax !== 'class'));\n\n                return [microsyntax, microsyntax, true];\n            } else {\n                var prop = microsyntax.substring(0, colonIndex);\n                var attribute = microsyntax.substring(colonIndex + 1);\n                (true && !(attribute !== 'class') && (0, _emberDebug.assert)('You cannot use class as an attributeBinding, use classNameBindings instead.', attribute !== 'class'));\n\n                return [prop, attribute, false];\n            }\n        },\n        install: function (element, component, parsed, operations) {\n            var prop = parsed[0],\n                attribute = parsed[1],\n                isSimple = parsed[2];\n\n            if (attribute === 'id') {\n                var elementId = (0, _emberMetal.get)(component, prop);\n                if (elementId === undefined || elementId === null) {\n                    elementId = component.elementId;\n                }\n                operations.addStaticAttribute(element, 'id', elementId);\n                return;\n            }\n            var isPath = prop.indexOf('.') > -1;\n            var reference = isPath ? referenceForParts(component, prop.split('.')) : referenceForKey(component, prop);\n            (true && !(!(isSimple && isPath)) && (0, _emberDebug.assert)('Illegal attributeBinding: \\'' + prop + '\\' is not a valid attribute name.', !(isSimple && isPath)));\n\n            if (attribute === 'style') {\n                reference = new StyleBindingReference(reference, referenceForKey(component, 'isVisible'));\n            }\n            operations.addDynamicAttribute(element, attribute, reference, false);\n        }\n    };\n    var DISPLAY_NONE = 'display: none;';\n    var SAFE_DISPLAY_NONE = (0, _string.htmlSafe)(DISPLAY_NONE);\n\n    var StyleBindingReference = function (_CachedReference) {\n        (0, _emberBabel.inherits)(StyleBindingReference, _CachedReference);\n\n        function StyleBindingReference(inner, isVisible) {\n            (0, _emberBabel.classCallCheck)(this, StyleBindingReference);\n\n            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.call(this));\n\n            _this.inner = inner;\n            _this.isVisible = isVisible;\n            _this.tag = (0, _reference.combine)([inner.tag, isVisible.tag]);\n            return _this;\n        }\n\n        StyleBindingReference.prototype.compute = function compute() {\n            var value = this.inner.value();\n            var isVisible = this.isVisible.value();\n            if (isVisible !== false) {\n                return value;\n            } else if (!value) {\n                return SAFE_DISPLAY_NONE;\n            } else {\n                var style = value + ' ' + DISPLAY_NONE;\n                return (0, _string.isHTMLSafe)(value) ? (0, _string.htmlSafe)(style) : style;\n            }\n        };\n\n        return StyleBindingReference;\n    }(_reference.CachedReference);\n\n    var IsVisibleBinding = exports.IsVisibleBinding = {\n        install: function (element, component, operations) {\n            var ref = (0, _reference.map)(referenceForKey(component, 'isVisible'), this.mapStyleValue);\n            // the upstream type for addDynamicAttribute's `value` argument\n            // appears to be incorrect. It is currently a Reference<string>, I\n            // think it should be a Reference<string|null>.\n            operations.addDynamicAttribute(element, 'style', ref, false);\n        },\n        mapStyleValue: function (isVisible) {\n            return isVisible === false ? SAFE_DISPLAY_NONE : null;\n        }\n    };\n    var ClassNameBinding = exports.ClassNameBinding = {\n        install: function (element, component, microsyntax, operations) {\n            var _microsyntax$split = microsyntax.split(':'),\n                prop = _microsyntax$split[0],\n                truthy = _microsyntax$split[1],\n                falsy = _microsyntax$split[2];\n\n            var isStatic = prop === '';\n            if (isStatic) {\n                operations.addStaticAttribute(element, 'class', truthy);\n            } else {\n                var isPath = prop.indexOf('.') > -1;\n                var parts = isPath ? prop.split('.') : [];\n                var value = isPath ? referenceForParts(component, parts) : referenceForKey(component, prop);\n                var ref = void 0;\n                if (truthy === undefined) {\n                    ref = new SimpleClassNameBindingReference(value, isPath ? parts[parts.length - 1] : prop);\n                } else {\n                    ref = new ColonClassNameBindingReference(value, truthy, falsy);\n                }\n                // the upstream type for addDynamicAttribute's `value` argument\n                // appears to be incorrect. It is currently a Reference<string>, I\n                // think it should be a Reference<string|null>.\n                operations.addDynamicAttribute(element, 'class', ref, false);\n            }\n        }\n    };\n\n    var SimpleClassNameBindingReference = function (_CachedReference2) {\n        (0, _emberBabel.inherits)(SimpleClassNameBindingReference, _CachedReference2);\n\n        function SimpleClassNameBindingReference(inner, path) {\n            (0, _emberBabel.classCallCheck)(this, SimpleClassNameBindingReference);\n\n            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference2.call(this));\n\n            _this2.inner = inner;\n            _this2.path = path;\n            _this2.tag = inner.tag;\n            _this2.inner = inner;\n            _this2.path = path;\n            _this2.dasherizedPath = null;\n            return _this2;\n        }\n\n        SimpleClassNameBindingReference.prototype.compute = function compute() {\n            var value = this.inner.value();\n            if (value === true) {\n                var path = this.path,\n                    dasherizedPath = this.dasherizedPath;\n\n                return dasherizedPath || (this.dasherizedPath = _emberRuntime.String.dasherize(path));\n            } else if (value || value === 0) {\n                return String(value);\n            } else {\n                return null;\n            }\n        };\n\n        return SimpleClassNameBindingReference;\n    }(_reference.CachedReference);\n\n    var ColonClassNameBindingReference = function (_CachedReference3) {\n        (0, _emberBabel.inherits)(ColonClassNameBindingReference, _CachedReference3);\n\n        function ColonClassNameBindingReference(inner) {\n            var truthy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            var falsy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n            (0, _emberBabel.classCallCheck)(this, ColonClassNameBindingReference);\n\n            var _this3 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference3.call(this));\n\n            _this3.inner = inner;\n            _this3.truthy = truthy;\n            _this3.falsy = falsy;\n            _this3.tag = inner.tag;\n            return _this3;\n        }\n\n        ColonClassNameBindingReference.prototype.compute = function compute() {\n            var inner = this.inner,\n                truthy = this.truthy,\n                falsy = this.falsy;\n\n            return inner.value() ? truthy : falsy;\n        };\n\n        return ColonClassNameBindingReference;\n    }(_reference.CachedReference);\n});","enifed('ember-glimmer/utils/curly-component-state-bucket', ['exports', 'ember-babel'], function (exports, _emberBabel) {\n    'use strict';\n\n    // tslint:disable-next-line:no-empty\n    function NOOP() {}\n    /**\n      @module ember\n    */\n    /**\n      Represents the internal state of the component.\n    \n      @class ComponentStateBucket\n      @private\n    */\n\n    var ComponentStateBucket = function () {\n        function ComponentStateBucket(environment, component, args, finalizer) {\n            (0, _emberBabel.classCallCheck)(this, ComponentStateBucket);\n\n            this.environment = environment;\n            this.component = component;\n            this.args = args;\n            this.finalizer = finalizer;\n            this.classRef = null;\n            this.classRef = null;\n            this.argsRevision = args.tag.value();\n        }\n\n        ComponentStateBucket.prototype.destroy = function destroy() {\n            var component = this.component,\n                environment = this.environment;\n\n            if (environment.isInteractive) {\n                component.trigger('willDestroyElement');\n                component.trigger('willClearRender');\n            }\n            environment.destroyedComponents.push(component);\n        };\n\n        ComponentStateBucket.prototype.finalize = function finalize() {\n            var finalizer = this.finalizer;\n\n            finalizer();\n            this.finalizer = NOOP;\n        };\n\n        return ComponentStateBucket;\n    }();\n\n    exports.default = ComponentStateBucket;\n});","enifed('ember-glimmer/utils/debug-stack', ['exports', 'ember-babel'], function (exports, _emberBabel) {\n    'use strict';\n\n    // @ts-check\n    var DebugStack = void 0;\n    if (true) {\n        var Element = function Element(name) {\n            (0, _emberBabel.classCallCheck)(this, Element);\n\n            this.name = name;\n        };\n\n        var TemplateElement = function (_Element) {\n            (0, _emberBabel.inherits)(TemplateElement, _Element);\n\n            function TemplateElement() {\n                (0, _emberBabel.classCallCheck)(this, TemplateElement);\n                return (0, _emberBabel.possibleConstructorReturn)(this, _Element.apply(this, arguments));\n            }\n\n            return TemplateElement;\n        }(Element);\n\n        var EngineElement = function (_Element2) {\n            (0, _emberBabel.inherits)(EngineElement, _Element2);\n\n            function EngineElement() {\n                (0, _emberBabel.classCallCheck)(this, EngineElement);\n                return (0, _emberBabel.possibleConstructorReturn)(this, _Element2.apply(this, arguments));\n            }\n\n            return EngineElement;\n        }(Element);\n\n        // tslint:disable-next-line:no-shadowed-variable\n        DebugStack = function () {\n            function DebugStack() {\n                (0, _emberBabel.classCallCheck)(this, DebugStack);\n\n                this._stack = [];\n            }\n\n            DebugStack.prototype.push = function push(name) {\n                this._stack.push(new TemplateElement(name));\n            };\n\n            DebugStack.prototype.pushEngine = function pushEngine(name) {\n                this._stack.push(new EngineElement(name));\n            };\n\n            DebugStack.prototype.pop = function pop() {\n                var element = this._stack.pop();\n                if (element) {\n                    return element.name;\n                }\n            };\n\n            DebugStack.prototype.peek = function peek() {\n                var template = this._currentTemplate();\n                var engine = this._currentEngine();\n                if (engine) {\n                    return '\"' + template + '\" (in \"' + engine + '\")';\n                } else if (template) {\n                    return '\"' + template + '\"';\n                }\n            };\n\n            DebugStack.prototype._currentTemplate = function _currentTemplate() {\n                return this._getCurrentByType(TemplateElement);\n            };\n\n            DebugStack.prototype._currentEngine = function _currentEngine() {\n                return this._getCurrentByType(EngineElement);\n            };\n\n            DebugStack.prototype._getCurrentByType = function _getCurrentByType(type) {\n                for (var i = this._stack.length; i >= 0; i--) {\n                    var element = this._stack[i];\n                    if (element instanceof type) {\n                        return element.name;\n                    }\n                }\n            };\n\n            return DebugStack;\n        }();\n    }\n    exports.default = DebugStack;\n});","enifed('ember-glimmer/utils/iterable', ['exports', 'ember-babel', '@glimmer/reference', 'ember-metal', 'ember-runtime', 'ember-utils', 'ember-glimmer/helpers/each-in', 'ember-glimmer/utils/references'], function (exports, _emberBabel, _reference, _emberMetal, _emberRuntime, _emberUtils, _eachIn, _references) {\n    'use strict';\n\n    exports.default = iterableFor;\n\n    var ITERATOR_KEY_GUID = 'be277757-bbbe-4620-9fcb-213ef433cca2';\n    function iterableFor(ref, keyPath) {\n        if ((0, _eachIn.isEachIn)(ref)) {\n            return new EachInIterable(ref, keyForEachIn(keyPath));\n        } else {\n            return new ArrayIterable(ref, keyForArray(keyPath));\n        }\n    }\n    function keyForEachIn(keyPath) {\n        switch (keyPath) {\n            case '@index':\n            case undefined:\n            case null:\n                return index;\n            case '@identity':\n                return identity;\n            default:\n                return function (item) {\n                    return (0, _emberMetal.get)(item, keyPath);\n                };\n        }\n    }\n    function keyForArray(keyPath) {\n        switch (keyPath) {\n            case '@index':\n                return index;\n            case '@identity':\n            case undefined:\n            case null:\n                return identity;\n            default:\n                return function (item) {\n                    return (0, _emberMetal.get)(item, keyPath);\n                };\n        }\n    }\n    function index(_item, i) {\n        return String(i);\n    }\n    function identity(item) {\n        switch (typeof item) {\n            case 'string':\n            case 'number':\n                return String(item);\n            default:\n                return (0, _emberUtils.guidFor)(item);\n        }\n    }\n    function ensureUniqueKey(seen, key) {\n        var seenCount = seen[key];\n        if (seenCount > 0) {\n            seen[key]++;\n            return '' + key + ITERATOR_KEY_GUID + seenCount;\n        } else {\n            seen[key] = 1;\n        }\n        return key;\n    }\n\n    var ArrayIterator = function () {\n        function ArrayIterator(array, length, keyFor) {\n            (0, _emberBabel.classCallCheck)(this, ArrayIterator);\n\n            this.array = array;\n            this.length = length;\n            this.keyFor = keyFor;\n            this.position = 0;\n            this.seen = Object.create(null);\n        }\n\n        ArrayIterator.from = function from(array, keyFor) {\n            var length = array.length;\n\n            if (length > 0) {\n                return new this(array, array.length, keyFor);\n            } else {\n                return EMPTY_ITERATOR;\n            }\n        };\n\n        ArrayIterator.prototype.isEmpty = function isEmpty() {\n            return false;\n        };\n\n        ArrayIterator.prototype.getMemo = function getMemo(position) {\n            return position;\n        };\n\n        ArrayIterator.prototype.getValue = function getValue(position) {\n            return this.array[position];\n        };\n\n        ArrayIterator.prototype.next = function next() {\n            var length = this.length,\n                keyFor = this.keyFor,\n                position = this.position,\n                seen = this.seen;\n\n            if (position >= length) {\n                return null;\n            }\n            var value = this.getValue(position);\n            var memo = this.getMemo(position);\n            var key = ensureUniqueKey(seen, keyFor(value, memo));\n            this.position++;\n            return { key: key, value: value, memo: memo };\n        };\n\n        return ArrayIterator;\n    }();\n\n    var EmberArrayIterator = function (_ArrayIterator) {\n        (0, _emberBabel.inherits)(EmberArrayIterator, _ArrayIterator);\n\n        EmberArrayIterator.from = function from(array, keyFor) {\n            var length = (0, _emberMetal.get)(array, 'length');\n            if (length > 0) {\n                return new this(array, length, keyFor);\n            } else {\n                return EMPTY_ITERATOR;\n            }\n        };\n\n        function EmberArrayIterator(array, length, keyFor) {\n            (0, _emberBabel.classCallCheck)(this, EmberArrayIterator);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _ArrayIterator.call(this, array, length, keyFor));\n        }\n\n        EmberArrayIterator.prototype.getValue = function getValue(position) {\n            return (0, _emberRuntime.objectAt)(this.array, position);\n        };\n\n        return EmberArrayIterator;\n    }(ArrayIterator);\n\n    var ObjectKeysIterator = function (_ArrayIterator2) {\n        (0, _emberBabel.inherits)(ObjectKeysIterator, _ArrayIterator2);\n\n        function ObjectKeysIterator(keys, values, length, keyFor) {\n            (0, _emberBabel.classCallCheck)(this, ObjectKeysIterator);\n\n            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _ArrayIterator2.call(this, values, length, keyFor));\n\n            _this2.keys = keys;\n            return _this2;\n        }\n\n        ObjectKeysIterator.from = function from(obj, keyFor) {\n            var keys = Object.keys(obj);\n            var length = keys.length;\n\n            if (length > 0) {\n                return new this(keys, keys.map(function (key) {\n                    return obj[key];\n                }), length, keyFor);\n            } else {\n                return EMPTY_ITERATOR;\n            }\n        };\n\n        ObjectKeysIterator.prototype.getMemo = function getMemo(position) {\n            return this.keys[position];\n        };\n\n        return ObjectKeysIterator;\n    }(ArrayIterator);\n\n    var EmptyIterator = function () {\n        function EmptyIterator() {\n            (0, _emberBabel.classCallCheck)(this, EmptyIterator);\n        }\n\n        EmptyIterator.prototype.isEmpty = function isEmpty() {\n            return true;\n        };\n\n        EmptyIterator.prototype.next = function next() {\n            throw new Error('Cannot call next() on an empty iterator');\n        };\n\n        return EmptyIterator;\n    }();\n\n    var EMPTY_ITERATOR = new EmptyIterator();\n\n    var EachInIterable = function () {\n        function EachInIterable(ref, keyFor) {\n            (0, _emberBabel.classCallCheck)(this, EachInIterable);\n\n            this.ref = ref;\n            this.keyFor = keyFor;\n            var valueTag = this.valueTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);\n            this.tag = (0, _reference.combine)([ref.tag, valueTag]);\n        }\n\n        EachInIterable.prototype.iterate = function iterate() {\n            var ref = this.ref,\n                keyFor = this.keyFor,\n                valueTag = this.valueTag;\n\n            var iterable = ref.value();\n            valueTag.inner.update((0, _emberMetal.tagFor)(iterable));\n            if ((0, _emberMetal.isProxy)(iterable)) {\n                iterable = (0, _emberMetal.get)(iterable, 'content');\n            }\n            var typeofIterable = typeof iterable;\n            if (iterable !== null && (typeofIterable === 'object' || typeofIterable === 'function')) {\n                return ObjectKeysIterator.from(iterable, keyFor);\n            } else {\n                return EMPTY_ITERATOR;\n            }\n        };\n\n        EachInIterable.prototype.valueReferenceFor = function valueReferenceFor(item) {\n            return new _references.UpdatablePrimitiveReference(item.memo);\n        };\n\n        EachInIterable.prototype.updateValueReference = function updateValueReference(reference, item) {\n            reference.update(item.memo);\n        };\n\n        EachInIterable.prototype.memoReferenceFor = function memoReferenceFor(item) {\n            return new _references.UpdatableReference(item.value);\n        };\n\n        EachInIterable.prototype.updateMemoReference = function updateMemoReference(reference, item) {\n            reference.update(item.value);\n        };\n\n        return EachInIterable;\n    }();\n\n    var ArrayIterable = function () {\n        function ArrayIterable(ref, keyFor) {\n            (0, _emberBabel.classCallCheck)(this, ArrayIterable);\n\n            this.ref = ref;\n            this.keyFor = keyFor;\n            var valueTag = this.valueTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);\n            this.tag = (0, _reference.combine)([ref.tag, valueTag]);\n        }\n\n        ArrayIterable.prototype.iterate = function iterate() {\n            var ref = this.ref,\n                keyFor = this.keyFor,\n                valueTag = this.valueTag;\n\n            var iterable = ref.value();\n            valueTag.inner.update((0, _emberMetal.tagForProperty)(iterable, '[]'));\n            if (iterable === null || typeof iterable !== 'object') {\n                return EMPTY_ITERATOR;\n            }\n            if (Array.isArray(iterable)) {\n                return ArrayIterator.from(iterable, keyFor);\n            } else if ((0, _emberRuntime.isEmberArray)(iterable)) {\n                return EmberArrayIterator.from(iterable, keyFor);\n            } else if (typeof iterable.forEach === 'function') {\n                var array = [];\n                iterable.forEach(function (item) {\n                    return array.push(item);\n                });\n                return ArrayIterator.from(array, keyFor);\n            } else {\n                return EMPTY_ITERATOR;\n            }\n        };\n\n        ArrayIterable.prototype.valueReferenceFor = function valueReferenceFor(item) {\n            return new _references.UpdatableReference(item.value);\n        };\n\n        ArrayIterable.prototype.updateValueReference = function updateValueReference(reference, item) {\n            reference.update(item.value);\n        };\n\n        ArrayIterable.prototype.memoReferenceFor = function memoReferenceFor(item) {\n            return new _references.UpdatablePrimitiveReference(item.memo);\n        };\n\n        ArrayIterable.prototype.updateMemoReference = function updateMemoReference(reference, item) {\n            reference.update(item.memo);\n        };\n\n        return ArrayIterable;\n    }();\n});","enifed('ember-glimmer/utils/process-args', ['exports', 'ember-babel', 'ember-utils', 'ember-views', 'ember-glimmer/component', 'ember-glimmer/helpers/action', 'ember-glimmer/utils/references'], function (exports, _emberBabel, _emberUtils, _emberViews, _component, _action, _references) {\n    'use strict';\n\n    exports.processComponentArgs = processComponentArgs;\n\n    // ComponentArgs takes EvaluatedNamedArgs and converts them into the\n    // inputs needed by CurlyComponents (attrs and props, with mutable\n    // cells, etc).\n    function processComponentArgs(namedArgs) {\n        var keys = namedArgs.names;\n        var attrs = namedArgs.value();\n        var props = Object.create(null);\n        var args = Object.create(null);\n        props[_component.ARGS] = args;\n        for (var i = 0; i < keys.length; i++) {\n            var name = keys[i];\n            var ref = namedArgs.get(name);\n            var value = attrs[name];\n            if (typeof value === 'function' && value[_action.ACTION]) {\n                attrs[name] = value;\n            } else if (ref[_references.UPDATE]) {\n                attrs[name] = new MutableCell(ref, value);\n            }\n            args[name] = ref;\n            props[name] = value;\n        }\n        props.attrs = attrs;\n        return props;\n    }\n    var REF = (0, _emberUtils.symbol)('REF');\n\n    var MutableCell = function () {\n        function MutableCell(ref, value) {\n            (0, _emberBabel.classCallCheck)(this, MutableCell);\n\n            this[_emberViews.MUTABLE_CELL] = true;\n            this[REF] = ref;\n            this.value = value;\n        }\n\n        MutableCell.prototype.update = function update(val) {\n            this[REF][_references.UPDATE](val);\n        };\n\n        return MutableCell;\n    }();\n});","enifed('ember-glimmer/utils/references', ['exports', 'ember-babel', '@glimmer/reference', '@glimmer/runtime', 'ember-metal', 'ember-utils', 'ember/features', 'ember-glimmer/helper', 'ember-glimmer/utils/to-bool'], function (exports, _emberBabel, _reference, _runtime, _emberMetal, _emberUtils, _features, _helper, _toBool) {\n    'use strict';\n\n    exports.UnboundReference = exports.InternalHelperReference = exports.ClassBasedHelperReference = exports.SimpleHelperReference = exports.ConditionalReference = exports.UpdatablePrimitiveReference = exports.UpdatableReference = exports.NestedPropertyReference = exports.RootPropertyReference = exports.PropertyReference = exports.RootReference = exports.CachedReference = exports.UPDATE = undefined;\n    var UPDATE = exports.UPDATE = (0, _emberUtils.symbol)('UPDATE');\n    var maybeFreeze = void 0;\n    if (true) {\n        // gaurding this in a DEBUG gaurd (as well as all invocations)\n        // so that it is properly stripped during the minification's\n        // dead code elimination\n        maybeFreeze = function (obj) {\n            // re-freezing an already frozen object introduces a significant\n            // performance penalty on Chrome (tested through 59).\n            //\n            // See: https://bugs.chromium.org/p/v8/issues/detail?id=6450\n            if (!Object.isFrozen(obj)) {\n                Object.freeze(obj);\n            }\n        };\n    }\n    // @abstract\n    // @implements PathReference\n\n    var EmberPathReference = function () {\n        function EmberPathReference() {\n            (0, _emberBabel.classCallCheck)(this, EmberPathReference);\n        }\n\n        EmberPathReference.prototype.get = function get(key) {\n            return PropertyReference.create(this, key);\n        };\n\n        return EmberPathReference;\n    }();\n\n    var CachedReference = exports.CachedReference = function (_EmberPathReference) {\n        (0, _emberBabel.inherits)(CachedReference, _EmberPathReference);\n\n        function CachedReference() {\n            (0, _emberBabel.classCallCheck)(this, CachedReference);\n\n            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _EmberPathReference.call(this));\n\n            _this._lastRevision = null;\n            _this._lastValue = null;\n            return _this;\n        }\n\n        CachedReference.prototype.compute = function compute() {};\n\n        CachedReference.prototype.value = function value() {\n            var tag = this.tag,\n                _lastRevision = this._lastRevision,\n                _lastValue = this._lastValue;\n\n            if (!_lastRevision || !tag.validate(_lastRevision)) {\n                _lastValue = this._lastValue = this.compute();\n                this._lastRevision = tag.value();\n            }\n            return _lastValue;\n        };\n\n        return CachedReference;\n    }(EmberPathReference);\n\n    var RootReference = exports.RootReference = function (_ConstReference) {\n        (0, _emberBabel.inherits)(RootReference, _ConstReference);\n\n        function RootReference(value) {\n            (0, _emberBabel.classCallCheck)(this, RootReference);\n\n            var _this2 = (0, _emberBabel.possibleConstructorReturn)(this, _ConstReference.call(this, value));\n\n            _this2.children = Object.create(null);\n            return _this2;\n        }\n\n        RootReference.prototype.get = function get(propertyKey) {\n            var ref = this.children[propertyKey];\n            if (ref === undefined) {\n                ref = this.children[propertyKey] = new RootPropertyReference(this.inner, propertyKey);\n            }\n            return ref;\n        };\n\n        return RootReference;\n    }(_reference.ConstReference);\n\n    var TwoWayFlushDetectionTag = void 0;\n    if (_features.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER) {\n        TwoWayFlushDetectionTag = function () {\n            function TwoWayFlushDetectionTag(tag, key, ref) {\n                (0, _emberBabel.classCallCheck)(this, TwoWayFlushDetectionTag);\n\n                this.tag = tag;\n                this.parent = null;\n                this.key = key;\n                this.ref = ref;\n            }\n\n            TwoWayFlushDetectionTag.prototype.value = function value() {\n                return this.tag.value();\n            };\n\n            TwoWayFlushDetectionTag.prototype.validate = function validate(ticket) {\n                var parent = this.parent,\n                    key = this.key;\n\n                var isValid = this.tag.validate(ticket);\n                if (isValid && parent) {\n                    (0, _emberMetal.didRender)(parent, key, this.ref);\n                }\n                return isValid;\n            };\n\n            TwoWayFlushDetectionTag.prototype.didCompute = function didCompute(parent) {\n                this.parent = parent;\n                (0, _emberMetal.didRender)(parent, this.key, this.ref);\n            };\n\n            return TwoWayFlushDetectionTag;\n        }();\n    }\n\n    var PropertyReference = exports.PropertyReference = function (_CachedReference) {\n        (0, _emberBabel.inherits)(PropertyReference, _CachedReference);\n\n        function PropertyReference() {\n            (0, _emberBabel.classCallCheck)(this, PropertyReference);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference.apply(this, arguments));\n        }\n\n        PropertyReference.create = function create(parentReference, propertyKey) {\n            if ((0, _reference.isConst)(parentReference)) {\n                return new RootPropertyReference(parentReference.value(), propertyKey);\n            } else {\n                return new NestedPropertyReference(parentReference, propertyKey);\n            }\n        };\n\n        PropertyReference.prototype.get = function get(key) {\n            return new NestedPropertyReference(this, key);\n        };\n\n        return PropertyReference;\n    }(CachedReference);\n\n    var RootPropertyReference = exports.RootPropertyReference = function (_PropertyReference) {\n        (0, _emberBabel.inherits)(RootPropertyReference, _PropertyReference);\n\n        function RootPropertyReference(parentValue, propertyKey) {\n            (0, _emberBabel.classCallCheck)(this, RootPropertyReference);\n\n            var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _PropertyReference.call(this));\n\n            _this4._parentValue = parentValue;\n            _this4._propertyKey = propertyKey;\n            if (_features.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER) {\n                _this4.tag = new TwoWayFlushDetectionTag((0, _emberMetal.tagForProperty)(parentValue, propertyKey), propertyKey, _this4);\n            } else {\n                _this4.tag = (0, _emberMetal.tagForProperty)(parentValue, propertyKey);\n            }\n            if (_features.MANDATORY_SETTER) {\n                (0, _emberMetal.watchKey)(parentValue, propertyKey);\n            }\n            return _this4;\n        }\n\n        RootPropertyReference.prototype.compute = function compute() {\n            var _parentValue = this._parentValue,\n                _propertyKey = this._propertyKey;\n\n            if (_features.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER) {\n                this.tag.didCompute(_parentValue);\n            }\n            return (0, _emberMetal.get)(_parentValue, _propertyKey);\n        };\n\n        RootPropertyReference.prototype[UPDATE] = function (value) {\n            (0, _emberMetal.set)(this._parentValue, this._propertyKey, value);\n        };\n\n        return RootPropertyReference;\n    }(PropertyReference);\n\n    var NestedPropertyReference = exports.NestedPropertyReference = function (_PropertyReference2) {\n        (0, _emberBabel.inherits)(NestedPropertyReference, _PropertyReference2);\n\n        function NestedPropertyReference(parentReference, propertyKey) {\n            (0, _emberBabel.classCallCheck)(this, NestedPropertyReference);\n\n            var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _PropertyReference2.call(this));\n\n            var parentReferenceTag = parentReference.tag;\n            var parentObjectTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);\n            _this5._parentReference = parentReference;\n            _this5._parentObjectTag = parentObjectTag;\n            _this5._propertyKey = propertyKey;\n            if (_features.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER) {\n                var tag = (0, _reference.combine)([parentReferenceTag, parentObjectTag]);\n                _this5.tag = new TwoWayFlushDetectionTag(tag, propertyKey, _this5);\n            } else {\n                _this5.tag = (0, _reference.combine)([parentReferenceTag, parentObjectTag]);\n            }\n            return _this5;\n        }\n\n        NestedPropertyReference.prototype.compute = function compute() {\n            var _parentReference = this._parentReference,\n                _parentObjectTag = this._parentObjectTag,\n                _propertyKey = this._propertyKey;\n\n            var parentValue = _parentReference.value();\n            _parentObjectTag.inner.update((0, _emberMetal.tagForProperty)(parentValue, _propertyKey));\n            var parentValueType = typeof parentValue;\n            if (parentValueType === 'string' && _propertyKey === 'length') {\n                return parentValue.length;\n            }\n            if (parentValueType === 'object' && parentValue !== null || parentValueType === 'function') {\n                if (_features.MANDATORY_SETTER) {\n                    (0, _emberMetal.watchKey)(parentValue, _propertyKey);\n                }\n                if (_features.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER) {\n                    this.tag.didCompute(parentValue);\n                }\n                return (0, _emberMetal.get)(parentValue, _propertyKey);\n            } else {\n                return undefined;\n            }\n        };\n\n        NestedPropertyReference.prototype[UPDATE] = function (value) {\n            var parent = this._parentReference.value();\n            (0, _emberMetal.set)(parent, this._propertyKey, value);\n        };\n\n        return NestedPropertyReference;\n    }(PropertyReference);\n\n    var UpdatableReference = exports.UpdatableReference = function (_EmberPathReference2) {\n        (0, _emberBabel.inherits)(UpdatableReference, _EmberPathReference2);\n\n        function UpdatableReference(value) {\n            (0, _emberBabel.classCallCheck)(this, UpdatableReference);\n\n            var _this6 = (0, _emberBabel.possibleConstructorReturn)(this, _EmberPathReference2.call(this));\n\n            _this6.tag = _reference.DirtyableTag.create();\n            _this6._value = value;\n            return _this6;\n        }\n\n        UpdatableReference.prototype.value = function value() {\n            return this._value;\n        };\n\n        UpdatableReference.prototype.update = function update(value) {\n            var _value = this._value;\n\n            if (value !== _value) {\n                this.tag.inner.dirty();\n                this._value = value;\n            }\n        };\n\n        return UpdatableReference;\n    }(EmberPathReference);\n\n    var UpdatablePrimitiveReference = exports.UpdatablePrimitiveReference = function (_UpdatableReference) {\n        (0, _emberBabel.inherits)(UpdatablePrimitiveReference, _UpdatableReference);\n\n        function UpdatablePrimitiveReference() {\n            (0, _emberBabel.classCallCheck)(this, UpdatablePrimitiveReference);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _UpdatableReference.apply(this, arguments));\n        }\n\n        return UpdatablePrimitiveReference;\n    }(UpdatableReference);\n\n    var ConditionalReference = exports.ConditionalReference = function (_GlimmerConditionalRe) {\n        (0, _emberBabel.inherits)(ConditionalReference, _GlimmerConditionalRe);\n\n        ConditionalReference.create = function create(reference) {\n            if ((0, _reference.isConst)(reference)) {\n                var value = reference.value();\n                if ((0, _emberMetal.isProxy)(value)) {\n                    return new RootPropertyReference(value, 'isTruthy');\n                } else {\n                    return _runtime.PrimitiveReference.create((0, _toBool.default)(value));\n                }\n            }\n            return new ConditionalReference(reference);\n        };\n\n        function ConditionalReference(reference) {\n            (0, _emberBabel.classCallCheck)(this, ConditionalReference);\n\n            var _this8 = (0, _emberBabel.possibleConstructorReturn)(this, _GlimmerConditionalRe.call(this, reference));\n\n            _this8.objectTag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);\n            _this8.tag = (0, _reference.combine)([reference.tag, _this8.objectTag]);\n            return _this8;\n        }\n\n        ConditionalReference.prototype.toBool = function toBool(predicate) {\n            if ((0, _emberMetal.isProxy)(predicate)) {\n                this.objectTag.inner.update((0, _emberMetal.tagForProperty)(predicate, 'isTruthy'));\n                return (0, _emberMetal.get)(predicate, 'isTruthy');\n            } else {\n                this.objectTag.inner.update((0, _emberMetal.tagFor)(predicate));\n                return (0, _toBool.default)(predicate);\n            }\n        };\n\n        return ConditionalReference;\n    }(_runtime.ConditionalReference);\n\n    var SimpleHelperReference = exports.SimpleHelperReference = function (_CachedReference2) {\n        (0, _emberBabel.inherits)(SimpleHelperReference, _CachedReference2);\n\n        SimpleHelperReference.create = function create(Helper, _vm, args) {\n            var helper = Helper.create();\n            if ((0, _reference.isConst)(args)) {\n                var positional = args.positional,\n                    named = args.named;\n\n                var positionalValue = positional.value();\n                var namedValue = named.value();\n                if (true) {\n                    maybeFreeze(positionalValue);\n                    maybeFreeze(namedValue);\n                }\n                var result = helper.compute(positionalValue, namedValue);\n                if (typeof result === 'object' && result !== null || typeof result === 'function') {\n                    return new RootReference(result);\n                } else {\n                    return _runtime.PrimitiveReference.create(result);\n                }\n            } else {\n                return new SimpleHelperReference(helper.compute, args);\n            }\n        };\n\n        function SimpleHelperReference(helper, args) {\n            (0, _emberBabel.classCallCheck)(this, SimpleHelperReference);\n\n            var _this9 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference2.call(this));\n\n            _this9.tag = args.tag;\n            _this9.helper = helper;\n            _this9.args = args;\n            return _this9;\n        }\n\n        SimpleHelperReference.prototype.compute = function compute() {\n            var helper = this.helper,\n                _args = this.args,\n                positional = _args.positional,\n                named = _args.named;\n\n            var positionalValue = positional.value();\n            var namedValue = named.value();\n            if (true) {\n                maybeFreeze(positionalValue);\n                maybeFreeze(namedValue);\n            }\n            return helper(positionalValue, namedValue);\n        };\n\n        return SimpleHelperReference;\n    }(CachedReference);\n\n    var ClassBasedHelperReference = exports.ClassBasedHelperReference = function (_CachedReference3) {\n        (0, _emberBabel.inherits)(ClassBasedHelperReference, _CachedReference3);\n\n        ClassBasedHelperReference.create = function create(helperClass, vm, args) {\n            var instance = helperClass.create();\n            vm.newDestroyable(instance);\n            return new ClassBasedHelperReference(instance, args);\n        };\n\n        function ClassBasedHelperReference(instance, args) {\n            (0, _emberBabel.classCallCheck)(this, ClassBasedHelperReference);\n\n            var _this10 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference3.call(this));\n\n            _this10.tag = (0, _reference.combine)([instance[_helper.RECOMPUTE_TAG], args.tag]);\n            _this10.instance = instance;\n            _this10.args = args;\n            return _this10;\n        }\n\n        ClassBasedHelperReference.prototype.compute = function compute() {\n            var instance = this.instance,\n                _args2 = this.args,\n                positional = _args2.positional,\n                named = _args2.named;\n\n            var positionalValue = positional.value();\n            var namedValue = named.value();\n            if (true) {\n                maybeFreeze(positionalValue);\n                maybeFreeze(namedValue);\n            }\n            return instance.compute(positionalValue, namedValue);\n        };\n\n        return ClassBasedHelperReference;\n    }(CachedReference);\n\n    var InternalHelperReference = exports.InternalHelperReference = function (_CachedReference4) {\n        (0, _emberBabel.inherits)(InternalHelperReference, _CachedReference4);\n\n        function InternalHelperReference(helper, args) {\n            (0, _emberBabel.classCallCheck)(this, InternalHelperReference);\n\n            var _this11 = (0, _emberBabel.possibleConstructorReturn)(this, _CachedReference4.call(this));\n\n            _this11.tag = args.tag;\n            _this11.helper = helper;\n            _this11.args = args;\n            return _this11;\n        }\n\n        InternalHelperReference.prototype.compute = function compute() {\n            var helper = this.helper,\n                args = this.args;\n\n            return helper(args);\n        };\n\n        return InternalHelperReference;\n    }(CachedReference);\n\n    var UnboundReference = exports.UnboundReference = function (_ConstReference2) {\n        (0, _emberBabel.inherits)(UnboundReference, _ConstReference2);\n\n        function UnboundReference() {\n            (0, _emberBabel.classCallCheck)(this, UnboundReference);\n            return (0, _emberBabel.possibleConstructorReturn)(this, _ConstReference2.apply(this, arguments));\n        }\n\n        UnboundReference.create = function create(value) {\n            if (typeof value === 'object' && value !== null) {\n                return new UnboundReference(value);\n            } else {\n                return _runtime.PrimitiveReference.create(value);\n            }\n        };\n\n        UnboundReference.prototype.get = function get(key) {\n            return new UnboundReference((0, _emberMetal.get)(this.inner, key));\n        };\n\n        return UnboundReference;\n    }(_reference.ConstReference);\n});","enifed('ember-glimmer/utils/string', ['exports', 'ember-babel'], function (exports, _emberBabel) {\n    'use strict';\n\n    exports.SafeString = undefined;\n    exports.escapeExpression = escapeExpression;\n    exports.htmlSafe = htmlSafe;\n    exports.isHTMLSafe = isHTMLSafe;\n\n    var SafeString = exports.SafeString = function () {\n        function SafeString(string) {\n            (0, _emberBabel.classCallCheck)(this, SafeString);\n\n            this.string = string;\n        }\n\n        SafeString.prototype.toString = function toString() {\n            return '' + this.string;\n        };\n\n        SafeString.prototype.toHTML = function toHTML() {\n            return this.toString();\n        };\n\n        return SafeString;\n    }();\n\n    var escape = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '`': '&#x60;',\n        '=': '&#x3D;'\n    };\n    var possible = /[&<>\"'`=]/;\n    var badChars = /[&<>\"'`=]/g;\n    function escapeChar(chr) {\n        return escape[chr];\n    }\n    function escapeExpression(string) {\n        if (typeof string !== 'string') {\n            // don't escape SafeStrings, since they're already safe\n            if (string && string.toHTML) {\n                return string.toHTML();\n            } else if (string === null || string === undefined) {\n                return '';\n            } else if (!string) {\n                return string + '';\n            }\n            // Force a string conversion as this will be done by the append regardless and\n            // the regex test will do this transparently behind the scenes, causing issues if\n            // an object's to string has escaped characters in it.\n            string = '' + string;\n        }\n        if (!possible.test(string)) {\n            return string;\n        }\n        return string.replace(badChars, escapeChar);\n    }\n    /**\n      Mark a string as safe for unescaped output with Ember templates. If you\n      return HTML from a helper, use this function to\n      ensure Ember's rendering layer does not escape the HTML.\n    \n      ```javascript\n      import { htmlSafe } from '@ember/string';\n    \n      htmlSafe('<div>someString</div>')\n      ```\n    \n      @method htmlSafe\n      @for @ember/template\n      @static\n      @return {Handlebars.SafeString} A string that will not be HTML escaped by Handlebars.\n      @public\n    */\n    function htmlSafe(str) {\n        if (str === null || str === undefined) {\n            str = '';\n        } else if (typeof str !== 'string') {\n            str = '' + str;\n        }\n        return new SafeString(str);\n    }\n    /**\n      Detects if a string was decorated using `htmlSafe`.\n    \n      ```javascript\n      import { htmlSafe, isHTMLSafe } from '@ember/string';\n    \n      var plainString = 'plain string',\n          safeString = htmlSafe('<div>someValue</div>');\n    \n      isHTMLSafe(plainString); // false\n      isHTMLSafe(safeString);  // true\n      ```\n    \n      @method isHTMLSafe\n      @for @ember/template\n      @static\n      @return {Boolean} `true` if the string was decorated with `htmlSafe`, `false` otherwise.\n      @public\n    */\n    function isHTMLSafe(str) {\n        return str !== null && typeof str === 'object' && typeof str.toHTML === 'function';\n    }\n});","enifed('ember-glimmer/utils/to-bool', ['exports', 'ember-metal', 'ember-runtime'], function (exports, _emberMetal, _emberRuntime) {\n    'use strict';\n\n    exports.default = toBool;\n    function toBool(predicate) {\n        if (!predicate) {\n            return false;\n        }\n        if (predicate === true) {\n            return true;\n        }\n        if ((0, _emberRuntime.isArray)(predicate)) {\n            return (0, _emberMetal.get)(predicate, 'length') !== 0;\n        }\n        return true;\n    }\n});","enifed('ember-glimmer/views/outlet', ['exports', 'ember-babel', '@glimmer/reference', 'ember-environment', 'ember-metal', 'ember-utils'], function (exports, _emberBabel, _reference, _emberEnvironment, _emberMetal, _emberUtils) {\n    'use strict';\n\n    exports.RootOutletStateReference = undefined;\n\n    var RootOutletStateReference = exports.RootOutletStateReference = function () {\n        function RootOutletStateReference(outletView) {\n            (0, _emberBabel.classCallCheck)(this, RootOutletStateReference);\n\n            this.outletView = outletView;\n            this.tag = outletView._tag;\n        }\n\n        RootOutletStateReference.prototype.get = function get(key) {\n            return new ChildOutletStateReference(this, key);\n        };\n\n        RootOutletStateReference.prototype.value = function value() {\n            return this.outletView.outletState;\n        };\n\n        RootOutletStateReference.prototype.getOrphan = function getOrphan(name) {\n            return new OrphanedOutletStateReference(this, name);\n        };\n\n        RootOutletStateReference.prototype.update = function update(state) {\n            this.outletView.setOutletState(state);\n        };\n\n        return RootOutletStateReference;\n    }();\n\n    var OrphanedOutletStateReference = function (_RootOutletStateRefer) {\n        (0, _emberBabel.inherits)(OrphanedOutletStateReference, _RootOutletStateRefer);\n\n        function OrphanedOutletStateReference(root, name) {\n            (0, _emberBabel.classCallCheck)(this, OrphanedOutletStateReference);\n\n            var _this = (0, _emberBabel.possibleConstructorReturn)(this, _RootOutletStateRefer.call(this, root.outletView));\n\n            _this.root = root;\n            _this.name = name;\n            return _this;\n        }\n\n        OrphanedOutletStateReference.prototype.value = function value() {\n            var rootState = this.root.value();\n            var orphans = rootState.outlets.main.outlets.__ember_orphans__;\n            if (!orphans) {\n                return null;\n            }\n            var matched = orphans.outlets[this.name];\n            if (!matched) {\n                return null;\n            }\n            var state = Object.create(null);\n            state[matched.render.outlet] = matched;\n            matched.wasUsed = true;\n            return { outlets: state, render: undefined };\n        };\n\n        return OrphanedOutletStateReference;\n    }(RootOutletStateReference);\n\n    var ChildOutletStateReference = function () {\n        function ChildOutletStateReference(parent, key) {\n            (0, _emberBabel.classCallCheck)(this, ChildOutletStateReference);\n\n            this.parent = parent;\n            this.key = key;\n            this.tag = parent.tag;\n        }\n\n        ChildOutletStateReference.prototype.get = function get(key) {\n            return new ChildOutletStateReference(this, key);\n        };\n\n        ChildOutletStateReference.prototype.value = function value() {\n            var parent = this.parent.value();\n            return parent && parent[this.key];\n        };\n\n        return ChildOutletStateReference;\n    }();\n\n    var OutletView = function () {\n        OutletView.extend = function extend(injections) {\n            return function (_OutletView) {\n                (0, _emberBabel.inherits)(_class, _OutletView);\n\n                function _class() {\n                    (0, _emberBabel.classCallCheck)(this, _class);\n                    return (0, _emberBabel.possibleConstructorReturn)(this, _OutletView.apply(this, arguments));\n                }\n\n                _class.create = function create(options) {\n                    if (options) {\n                        return _OutletView.create.call(this, (0, _emberUtils.assign)({}, injections, options));\n                    } else {\n                        return _OutletView.create.call(this, injections);\n                    }\n                };\n\n                return _class;\n            }(OutletView);\n        };\n\n        OutletView.reopenClass = function reopenClass(injections) {\n            (0, _emberUtils.assign)(this, injections);\n        };\n\n        OutletView.create = function create(options) {\n            var _environment = options._environment,\n                renderer = options.renderer,\n                template = options.template;\n\n            var owner = options[_emberUtils.OWNER];\n            return new OutletView(_environment, renderer, owner, template);\n        };\n\n        function OutletView(_environment, renderer, owner, template) {\n            (0, _emberBabel.classCallCheck)(this, OutletView);\n\n            this._environment = _environment;\n            this.renderer = renderer;\n            this.owner = owner;\n            this.template = template;\n            this.outletState = null;\n            this._tag = _reference.DirtyableTag.create();\n        }\n\n        OutletView.prototype.appendTo = function appendTo(selector) {\n            var env = this._environment || _emberEnvironment.environment;\n            var target = void 0;\n            if (env.hasDOM) {\n                target = typeof selector === 'string' ? document.querySelector(selector) : selector;\n            } else {\n                target = selector;\n            }\n            _emberMetal.run.schedule('render', this.renderer, 'appendOutletView', this, target);\n        };\n\n        OutletView.prototype.rerender = function rerender() {};\n\n        OutletView.prototype.setOutletState = function setOutletState(state) {\n            this.outletState = {\n                outlets: {\n                    main: state\n                },\n                render: {\n                    owner: undefined,\n                    into: undefined,\n                    outlet: 'main',\n                    name: '-top-level',\n                    controller: undefined,\n                    template: undefined\n                }\n            };\n            this._tag.inner.dirty();\n        };\n\n        OutletView.prototype.toReference = function toReference() {\n            return new RootOutletStateReference(this);\n        };\n\n        OutletView.prototype.destroy = function destroy() {};\n\n        return OutletView;\n    }();\n\n    exports.default = OutletView;\n});","enifed('ember-metal', ['exports', 'ember-environment', 'ember-utils', 'ember-debug', 'ember/features', 'ember-babel', '@glimmer/reference', 'require', 'backburner'], function (exports, emberEnvironment, emberUtils, emberDebug, features, emberBabel, reference, require, Backburner) {\n  'use strict';\n\n  require = require && require.hasOwnProperty('default') ? require['default'] : require;\n  Backburner = Backburner && Backburner.hasOwnProperty('default') ? Backburner['default'] : Backburner;\n\n  var Ember = typeof emberEnvironment.context.imports.Ember === 'object' && emberEnvironment.context.imports.Ember || {};\n\n  // Make sure these are set whether Ember was already defined or not\n  Ember.isNamespace = true;\n  Ember.toString = function () {\n    return 'Ember';\n  };\n\n  /*\n   When we render a rich template hierarchy, the set of events that\n   *might* happen tends to be much larger than the set of events that\n   actually happen. This implies that we should make listener creation &\n   destruction cheap, even at the cost of making event dispatch more\n   expensive.\n  \n   Thus we store a new listener with a single push and no new\n   allocations, without even bothering to do deduplication -- we can\n   save that for dispatch time, if an event actually happens.\n   */\n\n  /* listener flags */\n  var ONCE = 1;\n  var SUSPENDED = 2;\n\n  var protoMethods = {\n    addToListeners: function (eventName, target, method, flags) {\n      if (this._listeners === undefined) {\n        this._listeners = [];\n      }\n      this._listeners.push(eventName, target, method, flags);\n    },\n    _finalizeListeners: function () {\n      if (this._listenersFinalized) {\n        return;\n      }\n      if (this._listeners === undefined) {\n        this._listeners = [];\n      }\n      var pointer = this.parent;\n      while (pointer !== undefined) {\n        var listeners = pointer._listeners;\n        if (listeners !== undefined) {\n          this._listeners = this._listeners.concat(listeners);\n        }\n        if (pointer._listenersFinalized) {\n          break;\n        }\n        pointer = pointer.parent;\n      }\n      this._listenersFinalized = true;\n    },\n    removeFromListeners: function (eventName, target, method, didRemove) {\n      var pointer = this;\n      while (pointer !== undefined) {\n        var listeners = pointer._listeners;\n        if (listeners !== undefined) {\n          for (var index = listeners.length - 4; index >= 0; index -= 4) {\n            if (listeners[index] === eventName && (!method || listeners[index + 1] === target && listeners[index + 2] === method)) {\n              if (pointer === this) {\n                // we are modifying our own list, so we edit directly\n                if (typeof didRemove === 'function') {\n                  didRemove(eventName, target, listeners[index + 2]);\n                }\n                listeners.splice(index, 4);\n              } else {\n                // we are trying to remove an inherited listener, so we do\n                // just-in-time copying to detach our own listeners from\n                // our inheritance chain.\n                this._finalizeListeners();\n                return this.removeFromListeners(eventName, target, method);\n              }\n            }\n          }\n        }\n        if (pointer._listenersFinalized) {\n          break;\n        }\n        pointer = pointer.parent;\n      }\n    },\n    matchingListeners: function (eventName) {\n      var pointer = this;\n      var result = void 0;\n      while (pointer !== undefined) {\n        var listeners = pointer._listeners;\n        if (listeners !== undefined) {\n          for (var index = 0; index < listeners.length; index += 4) {\n            if (listeners[index] === eventName) {\n              result = result || [];\n              pushUniqueListener(result, listeners, index);\n            }\n          }\n        }\n        if (pointer._listenersFinalized) {\n          break;\n        }\n        pointer = pointer.parent;\n      }\n      return result;\n    }\n  };\n\n  function pushUniqueListener(destination, source, index) {\n    var target = source[index + 1];\n    var method = source[index + 2];\n    for (var destinationIndex = 0; destinationIndex < destination.length; destinationIndex += 3) {\n      if (destination[destinationIndex] === target && destination[destinationIndex + 1] === method) {\n        return;\n      }\n    }\n    destination.push(target, method, source[index + 3]);\n  }\n\n  /**\n  @module @ember/object\n  */\n  /*\n    The event system uses a series of nested hashes to store listeners on an\n    object. When a listener is registered, or when an event arrives, these\n    hashes are consulted to determine which target and action pair to invoke.\n  \n    The hashes are stored in the object's meta hash, and look like this:\n  \n        // Object's meta hash\n        {\n          listeners: {       // variable name: `listenerSet`\n            \"foo:changed\": [ // variable name: `actions`\n              target, method, flags\n            ]\n          }\n        }\n  \n  */\n\n  /**\n    Add an event listener\n  \n    @method addListener\n    @static\n    @for @ember/object/events\n    @param obj\n    @param {String} eventName\n    @param {Object|Function} target A target object or a function\n    @param {Function|String} method A function or the name of a function to be called on `target`\n    @param {Boolean} once A flag whether a function should only be called once\n    @public\n  */\n  function addListener(obj, eventName, target, method, once) {\n    true && !(!!obj && !!eventName) && emberDebug.assert('You must pass at least an object and event name to addListener', !!obj && !!eventName);\n\n    if (emberEnvironment.ENV._ENABLE_DID_INIT_ATTRS_SUPPORT === true) {\n      true && !(eventName !== 'didInitAttrs') && emberDebug.deprecate('didInitAttrs called in ' + (obj && obj.toString && obj.toString()) + '.', eventName !== 'didInitAttrs', {\n        id: 'ember-views.did-init-attrs',\n        until: '3.0.0',\n        url: 'https://emberjs.com/deprecations/v2.x#toc_ember-component-didinitattrs'\n      });\n    } else {\n      true && !(eventName !== 'didInitAttrs') && emberDebug.assert('didInitAttrs called in ' + (obj && obj.toString && obj.toString()) + ' is no longer supported.', eventName !== 'didInitAttrs');\n    }\n\n    if (!method && 'function' === typeof target) {\n      method = target;\n      target = null;\n    }\n\n    var flags = 0;\n    if (once) {\n      flags |= ONCE;\n    }\n\n    meta(obj).addToListeners(eventName, target, method, flags);\n\n    if ('function' === typeof obj.didAddListener) {\n      obj.didAddListener(eventName, target, method);\n    }\n  }\n\n  /**\n    Remove an event listener\n  \n    Arguments should match those passed to `addListener`.\n  \n    @method removeListener\n    @static\n    @for @ember/object/events\n    @param obj\n    @param {String} eventName\n    @param {Object|Function} target A target object or a function\n    @param {Function|String} method A function or the name of a function to be called on `target`\n    @public\n  */\n  function removeListener(obj, eventName, target, method) {\n    true && !(!!obj && !!eventName) && emberDebug.assert('You must pass at least an object and event name to removeListener', !!obj && !!eventName);\n\n    if (!method && 'function' === typeof target) {\n      method = target;\n      target = null;\n    }\n\n    var func = 'function' === typeof obj.didRemoveListener ? obj.didRemoveListener.bind(obj) : function () {};\n    meta(obj).removeFromListeners(eventName, target, method, func);\n  }\n\n  /**\n    Send an event. The execution of suspended listeners\n    is skipped, and once listeners are removed. A listener without\n    a target is executed on the passed object. If an array of actions\n    is not passed, the actions stored on the passed object are invoked.\n  \n    @method sendEvent\n    @static\n    @for @ember/object/events\n    @param obj\n    @param {String} eventName\n    @param {Array} params Optional parameters for each listener.\n    @param {Array} actions Optional array of actions (listeners).\n    @param {Meta}  meta Optional meta to lookup listeners\n    @return true\n    @public\n  */\n  function sendEvent(obj, eventName, params, actions, _meta) {\n    if (actions === undefined) {\n      var meta$$1 = _meta === undefined ? peekMeta(obj) : _meta;\n      actions = typeof meta$$1 === 'object' && meta$$1 !== null && meta$$1.matchingListeners(eventName);\n    }\n\n    if (actions === undefined || actions.length === 0) {\n      return false;\n    }\n\n    for (var i = actions.length - 3; i >= 0; i -= 3) {\n      // looping in reverse for once listeners\n      var target = actions[i];\n      var method = actions[i + 1];\n      var flags = actions[i + 2];\n\n      if (!method) {\n        continue;\n      }\n      if (flags & SUSPENDED) {\n        continue;\n      }\n      if (flags & ONCE) {\n        removeListener(obj, eventName, target, method);\n      }\n      if (!target) {\n        target = obj;\n      }\n      if ('string' === typeof method) {\n        if (params) {\n          emberUtils.applyStr(target, method, params);\n        } else {\n          target[method]();\n        }\n      } else {\n        if (params) {\n          method.apply(target, params);\n        } else {\n          method.call(target);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n    @private\n    @method hasListeners\n    @static\n    @for @ember/object/events\n    @param obj\n    @param {String} eventName\n  */\n  function hasListeners(obj, eventName) {\n    var meta$$1 = peekMeta(obj);\n    if (meta$$1 === undefined) {\n      return false;\n    }\n    var matched = meta$$1.matchingListeners(eventName);\n    return matched !== undefined && matched.length > 0;\n  }\n\n  /**\n    Define a property as a function that should be executed when\n    a specified event or events are triggered.\n  \n  \n    ``` javascript\n    import EmberObject from '@ember/object';\n    import { on } from '@ember/object/evented';\n    import { sendEvent } from '@ember/object/events';\n  \n    let Job = EmberObject.extend({\n      logCompleted: on('completed', function() {\n        console.log('Job completed!');\n      })\n    });\n  \n    let job = Job.create();\n  \n    sendEvent(job, 'completed'); // Logs 'Job completed!'\n   ```\n  \n    @method on\n    @static\n    @for @ember/object/evented\n    @param {String} eventNames*\n    @param {Function} func\n    @return func\n    @public\n  */\n  function on() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var func = args.pop();\n    var events = args;\n\n    true && !(typeof func === 'function') && emberDebug.assert('on expects function as last argument', typeof func === 'function');\n    true && !(events.length > 0 && events.every(function (p) {\n      return typeof p === 'string' && p.length;\n    })) && emberDebug.assert('on called without valid event names', events.length > 0 && events.every(function (p) {\n      return typeof p === 'string' && p.length;\n    }));\n\n    func.__ember_listens__ = events;\n    return func;\n  }\n\n  var hasViews = function () {\n    return false;\n  };\n\n  function setHasViews(fn) {\n    hasViews = fn;\n  }\n\n  function makeTag() {\n    return new reference.DirtyableTag();\n  }\n\n  function tagForProperty(object, propertyKey, _meta) {\n    if (typeof object !== 'object' || object === null) {\n      return reference.CONSTANT_TAG;\n    }\n\n    var meta$$1 = _meta === undefined ? meta(object) : _meta;\n    if (meta$$1.isProxy()) {\n      return tagFor(object, meta$$1);\n    }\n\n    var tags = meta$$1.writableTags();\n    var tag = tags[propertyKey];\n    if (tag) {\n      return tag;\n    }\n\n    return tags[propertyKey] = makeTag();\n  }\n\n  function tagFor(object, _meta) {\n    if (typeof object === 'object' && object !== null) {\n      var meta$$1 = _meta === undefined ? meta(object) : _meta;\n      return meta$$1.writableTag(makeTag);\n    } else {\n      return reference.CONSTANT_TAG;\n    }\n  }\n\n  function markObjectAsDirty(meta$$1, propertyKey) {\n    var objectTag = meta$$1.readableTag();\n\n    if (objectTag !== undefined) {\n      objectTag.dirty();\n    }\n\n    var tags = meta$$1.readableTags();\n    var propertyTag = tags !== undefined ? tags[propertyKey] : undefined;\n\n    if (propertyTag !== undefined) {\n      propertyTag.dirty();\n    }\n\n    if (propertyKey === 'content' && meta$$1.isProxy()) {\n      objectTag.contentDidChange();\n    }\n\n    if (objectTag !== undefined || propertyTag !== undefined) {\n      ensureRunloop();\n    }\n  }\n\n  var backburner = void 0;\n  function ensureRunloop() {\n    if (backburner === undefined) {\n      backburner = require('ember-metal').run.backburner;\n    }\n\n    if (hasViews()) {\n      backburner.ensureInstance();\n    }\n  }\n\n  /*\n    this.observerSet = {\n      [senderGuid]: { // variable name: `keySet`\n        [keyName]: listIndex\n      }\n    },\n    this.observers = [\n      {\n        sender: obj,\n        keyName: keyName,\n        eventName: eventName,\n        listeners: [\n          [target, method, flags]\n        ]\n      },\n      ...\n    ]\n  */\n\n  var ObserverSet = function () {\n    function ObserverSet() {\n      emberBabel.classCallCheck(this, ObserverSet);\n\n      this.clear();\n    }\n\n    ObserverSet.prototype.add = function add(sender, keyName, eventName) {\n      var observerSet = this.observerSet;\n      var observers = this.observers;\n      var senderGuid = emberUtils.guidFor(sender);\n      var keySet = observerSet[senderGuid];\n\n      if (keySet === undefined) {\n        observerSet[senderGuid] = keySet = {};\n      }\n\n      var index = keySet[keyName];\n      if (index === undefined) {\n        index = observers.push({\n          sender: sender,\n          keyName: keyName,\n          eventName: eventName,\n          listeners: []\n        }) - 1;\n        keySet[keyName] = index;\n      }\n      return observers[index].listeners;\n    };\n\n    ObserverSet.prototype.flush = function flush() {\n      var observers = this.observers;\n      var observer = void 0,\n          sender = void 0;\n      this.clear();\n      for (var i = 0; i < observers.length; ++i) {\n        observer = observers[i];\n        sender = observer.sender;\n        if (sender.isDestroying || sender.isDestroyed) {\n          continue;\n        }\n        sendEvent(sender, observer.eventName, [sender, observer.keyName], observer.listeners);\n      }\n    };\n\n    ObserverSet.prototype.clear = function clear() {\n      this.observerSet = {};\n      this.observers = [];\n    };\n\n    return ObserverSet;\n  }();\n\n  exports.runInTransaction = void 0;\n  exports.didRender = void 0;\n  exports.assertNotRendered = void 0;\n\n  // detect-backtracking-rerender by default is debug build only\n  if (features.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER) {\n\n    // there are 2 states\n\n    // DEBUG\n    // tracks lastRef and lastRenderedIn per rendered object and key during a transaction\n    // release everything via normal weakmap semantics by just derefencing the weakmap\n\n    // RELEASE\n    // tracks transactionId per rendered object and key during a transaction\n    // release everything via normal weakmap semantics by just derefencing the weakmap\n\n    var TransactionRunner = function () {\n      function TransactionRunner() {\n        emberBabel.classCallCheck(this, TransactionRunner);\n\n        this.transactionId = 0;\n        this.inTransaction = false;\n        this.shouldReflush = false;\n        this.weakMap = new WeakMap();\n        {\n          // track templates\n          this.debugStack = undefined;\n        }\n      }\n\n      TransactionRunner.prototype.runInTransaction = function runInTransaction(context$$1, methodName) {\n        this.before(context$$1);\n        try {\n          context$$1[methodName]();\n        } finally {\n          this.after();\n        }\n        return this.shouldReflush;\n      };\n\n      TransactionRunner.prototype.didRender = function didRender(object, key, reference$$1) {\n        if (!this.inTransaction) {\n          return;\n        }\n        {\n          this.setKey(object, key, {\n            lastRef: reference$$1,\n            lastRenderedIn: this.debugStack.peek()\n          });\n        }\n      };\n\n      TransactionRunner.prototype.assertNotRendered = function assertNotRendered(object, key) {\n        if (!this.inTransaction) {\n          return;\n        }\n        if (this.hasRendered(object, key)) {\n          {\n            var _getKey = this.getKey(object, key),\n                lastRef = _getKey.lastRef,\n                lastRenderedIn = _getKey.lastRenderedIn;\n\n            var currentlyIn = this.debugStack.peek();\n\n            var parts = [];\n            var label = void 0;\n\n            if (lastRef !== undefined) {\n              while (lastRef && lastRef._propertyKey) {\n                parts.unshift(lastRef._propertyKey);\n                lastRef = lastRef._parentReference;\n              }\n\n              label = parts.join('.');\n            } else {\n              label = 'the same value';\n            }\n\n            true && !false && emberDebug.assert('You modified \"' + label + '\" twice on ' + object + ' in a single render. It was rendered in ' + lastRenderedIn + ' and modified in ' + currentlyIn + '. This was unreliable and slow in Ember 1.x and is no longer supported. See https://github.com/emberjs/ember.js/issues/13948 for more details.', false);\n          }\n\n          this.shouldReflush = true;\n        }\n      };\n\n      TransactionRunner.prototype.hasRendered = function hasRendered(object, key) {\n        if (!this.inTransaction) {\n          return false;\n        }\n        {\n          return this.getKey(object, key) !== undefined;\n        }\n        return this.getKey(object, key) === this.transactionId;\n      };\n\n      TransactionRunner.prototype.before = function before(context$$1) {\n        this.inTransaction = true;\n        this.shouldReflush = false;\n        {\n          this.debugStack = context$$1.env.debugStack;\n        }\n      };\n\n      TransactionRunner.prototype.after = function after() {\n        this.transactionId++;\n        this.inTransaction = false;\n        {\n          this.debugStack = undefined;\n        }\n        this.clearObjectMap();\n      };\n\n      TransactionRunner.prototype.createMap = function createMap(object) {\n        var map = Object.create(null);\n        this.weakMap.set(object, map);\n        return map;\n      };\n\n      TransactionRunner.prototype.getOrCreateMap = function getOrCreateMap(object) {\n        var map = this.weakMap.get(object);\n        if (map === undefined) {\n          map = this.createMap(object);\n        }\n        return map;\n      };\n\n      TransactionRunner.prototype.setKey = function setKey(object, key, value) {\n        var map = this.getOrCreateMap(object);\n        map[key] = value;\n      };\n\n      TransactionRunner.prototype.getKey = function getKey(object, key) {\n        var map = this.weakMap.get(object);\n        if (map !== undefined) {\n          return map[key];\n        }\n      };\n\n      TransactionRunner.prototype.clearObjectMap = function clearObjectMap() {\n        this.weakMap = new WeakMap();\n      };\n\n      return TransactionRunner;\n    }();\n\n    var runner = new TransactionRunner();\n\n    exports.runInTransaction = runner.runInTransaction.bind(runner);\n    exports.didRender = runner.didRender.bind(runner);\n    exports.assertNotRendered = runner.assertNotRendered.bind(runner);\n  } else {\n    // in production do nothing to detect reflushes\n    exports.runInTransaction = function (context$$1, methodName) {\n      context$$1[methodName]();\n      return false;\n    };\n  }\n\n  function watchPath(obj, keyPath, meta$$1) {\n    if (typeof obj !== 'object' || obj === null) {\n      return;\n    }\n    var m = meta$$1 === undefined ? meta(obj) : meta$$1;\n    var counter = m.peekWatching(keyPath) || 0;\n\n    m.writeWatching(keyPath, counter + 1);\n    if (counter === 0) {\n      // activate watching first time\n      m.writableChains(makeChainNode).add(keyPath);\n    }\n  }\n\n  function unwatchPath(obj, keyPath, meta$$1) {\n    if (typeof obj !== 'object' || obj === null) {\n      return;\n    }\n    var m = meta$$1 === undefined ? peekMeta(obj) : meta$$1;\n\n    if (m === undefined) {\n      return;\n    }\n    var counter = m.peekWatching(keyPath) || 0;\n\n    if (counter === 1) {\n      m.writeWatching(keyPath, 0);\n      m.writableChains(makeChainNode).remove(keyPath);\n    } else if (counter > 1) {\n      m.writeWatching(keyPath, counter - 1);\n    }\n  }\n\n  /**\n  @module ember\n  */\n  /**\n    Starts watching a property on an object. Whenever the property changes,\n    invokes `Ember.notifyPropertyChange`. This is the primitive used by observers\n    and dependent keys; usually you will never call this method directly but instead\n    use higher level methods like `addObserver()`.\n  \n    @private\n    @method watch\n    @for Ember\n    @param obj\n    @param {String} _keyPath\n  */\n  function watch(obj, _keyPath, m) {\n    if (isPath(_keyPath)) {\n      watchPath(obj, _keyPath, m);\n    } else {\n      watchKey(obj, _keyPath, m);\n    }\n  }\n\n  function isWatching(obj, key) {\n    return watcherCount(obj, key) > 0;\n  }\n\n  function watcherCount(obj, key) {\n    var meta$$1 = peekMeta(obj);\n    return meta$$1 !== undefined && meta$$1.peekWatching(key) || 0;\n  }\n\n  function unwatch(obj, _keyPath, m) {\n    if (isPath(_keyPath)) {\n      unwatchPath(obj, _keyPath, m);\n    } else {\n      unwatchKey(obj, _keyPath, m);\n    }\n  }\n\n  /**\n  @module @ember/object\n  */\n\n  var AFTER_OBSERVERS = ':change';\n  var BEFORE_OBSERVERS = ':before';\n\n  function changeEvent(keyName) {\n    return keyName + AFTER_OBSERVERS;\n  }\n\n  function beforeEvent(keyName) {\n    return keyName + BEFORE_OBSERVERS;\n  }\n\n  /**\n    @method addObserver\n    @static\n    @for @ember/object/observers\n    @param obj\n    @param {String} _path\n    @param {Object|Function} target\n    @param {Function|String} [method]\n    @public\n  */\n  function addObserver(obj, _path, target, method) {\n    addListener(obj, changeEvent(_path), target, method);\n    watch(obj, _path);\n\n    return this;\n  }\n\n  /**\n    @method removeObserver\n    @static\n    @for @ember/object/observers\n    @param obj\n    @param {String} path\n    @param {Object|Function} target\n    @param {Function|String} [method]\n    @public\n  */\n  function removeObserver(obj, path, target, method) {\n    unwatch(obj, path);\n    removeListener(obj, changeEvent(path), target, method);\n\n    return this;\n  }\n\n  /**\n    @method _addBeforeObserver\n    @static\n    @for @ember/object/observers\n    @param obj\n    @param {String} path\n    @param {Object|Function} target\n    @param {Function|String} [method]\n    @deprecated\n    @private\n  */\n  function _addBeforeObserver(obj, path, target, method) {\n    addListener(obj, beforeEvent(path), target, method);\n    watch(obj, path);\n\n    return this;\n  }\n\n  /**\n    @method removeBeforeObserver\n    @static\n    @for @ember/object/observers\n    @param obj\n    @param {String} path\n    @param {Object|Function} target\n    @param {Function|String} [method]\n    @deprecated\n    @private\n  */\n  function _removeBeforeObserver(obj, path, target, method) {\n    unwatch(obj, path);\n    removeListener(obj, beforeEvent(path), target, method);\n\n    return this;\n  }\n\n  /**\n   @module ember\n   @private\n   */\n\n  var PROPERTY_DID_CHANGE = emberUtils.symbol('PROPERTY_DID_CHANGE');\n\n  var beforeObserverSet = new ObserverSet();\n  var observerSet = new ObserverSet();\n  var deferred = 0;\n\n  // ..........................................................\n  // PROPERTY CHANGES\n  //\n\n  /**\n    This function is called just before an object property is about to change.\n    It will notify any before observers and prepare caches among other things.\n  \n    Normally you will not need to call this method directly but if for some\n    reason you can't directly watch a property you can invoke this method\n    manually along with `Ember.propertyDidChange()` which you should call just\n    after the property value changes.\n  \n    @method propertyWillChange\n    @for Ember\n    @param {Object} obj The object with the property that will change\n    @param {String} keyName The property key (or path) that will change.\n    @return {void}\n    @private\n  */\n  function propertyWillChange(obj, keyName, _meta) {\n    var meta$$1 = _meta === undefined ? peekMeta(obj) : _meta;\n    if (meta$$1 !== undefined && !meta$$1.isInitialized(obj)) {\n      return;\n    }\n\n    var watching = meta$$1 !== undefined && meta$$1.peekWatching(keyName) > 0;\n    var possibleDesc = descriptorFor(obj, keyName, meta$$1);\n\n    if (possibleDesc !== undefined && possibleDesc.willChange) {\n      possibleDesc.willChange(obj, keyName);\n    }\n\n    if (watching) {\n      dependentKeysWillChange(obj, keyName, meta$$1);\n      chainsWillChange(obj, keyName, meta$$1);\n      notifyBeforeObservers(obj, keyName, meta$$1);\n    }\n  }\n\n  /**\n    This function is called just after an object property has changed.\n    It will notify any observers and clear caches among other things.\n  \n    Normally you will not need to call this method directly but if for some\n    reason you can't directly watch a property you can invoke this method\n    manually along with `Ember.propertyWillChange()` which you should call just\n    before the property value changes.\n  \n    @method propertyDidChange\n    @for Ember\n    @param {Object} obj The object with the property that will change\n    @param {String} keyName The property key (or path) that will change.\n    @param {Meta} meta The objects meta.\n    @return {void}\n    @private\n  */\n  function propertyDidChange(obj, keyName, _meta) {\n    var meta$$1 = _meta === undefined ? peekMeta(obj) : _meta;\n    var hasMeta = meta$$1 !== undefined;\n\n    if (hasMeta && !meta$$1.isInitialized(obj)) {\n      return;\n    }\n\n    var possibleDesc = descriptorFor(obj, keyName, meta$$1);\n\n    // shouldn't this mean that we're watching this key?\n    if (possibleDesc !== undefined && possibleDesc.didChange) {\n      possibleDesc.didChange(obj, keyName);\n    }\n\n    if (hasMeta && meta$$1.peekWatching(keyName) > 0) {\n      dependentKeysDidChange(obj, keyName, meta$$1);\n      chainsDidChange(obj, keyName, meta$$1);\n      notifyObservers(obj, keyName, meta$$1);\n    }\n\n    if (obj[PROPERTY_DID_CHANGE]) {\n      obj[PROPERTY_DID_CHANGE](keyName);\n    }\n\n    if (hasMeta) {\n      if (meta$$1.isSourceDestroying()) {\n        return;\n      }\n      markObjectAsDirty(meta$$1, keyName);\n    }\n\n    if (features.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER) {\n      exports.assertNotRendered(obj, keyName, meta$$1);\n    }\n  }\n\n  var WILL_SEEN = void 0;\n  var DID_SEEN = void 0;\n  // called whenever a property is about to change to clear the cache of any dependent keys (and notify those properties of changes, etc...)\n  function dependentKeysWillChange(obj, depKey, meta$$1) {\n    if (meta$$1.isSourceDestroying() || !meta$$1.hasDeps(depKey)) {\n      return;\n    }\n    var seen = WILL_SEEN;\n    var top = !seen;\n\n    if (top) {\n      seen = WILL_SEEN = {};\n    }\n\n    iterDeps(propertyWillChange, obj, depKey, seen, meta$$1);\n\n    if (top) {\n      WILL_SEEN = null;\n    }\n  }\n\n  // called whenever a property has just changed to update dependent keys\n  function dependentKeysDidChange(obj, depKey, meta$$1) {\n    if (meta$$1.isSourceDestroying() || !meta$$1.hasDeps(depKey)) {\n      return;\n    }\n    var seen = DID_SEEN;\n    var top = !seen;\n\n    if (top) {\n      seen = DID_SEEN = {};\n    }\n\n    iterDeps(propertyDidChange, obj, depKey, seen, meta$$1);\n\n    if (top) {\n      DID_SEEN = null;\n    }\n  }\n\n  function iterDeps(method, obj, depKey, seen, meta$$1) {\n    var possibleDesc = void 0;\n    var guid = emberUtils.guidFor(obj);\n    var current = seen[guid];\n\n    if (!current) {\n      current = seen[guid] = {};\n    }\n\n    if (current[depKey]) {\n      return;\n    }\n\n    current[depKey] = true;\n\n    meta$$1.forEachInDeps(depKey, function (key, value) {\n      if (!value) {\n        return;\n      }\n\n      possibleDesc = descriptorFor(obj, key, meta$$1);\n\n      if (possibleDesc !== undefined && possibleDesc._suspended === obj) {\n        return;\n      }\n\n      method(obj, key, meta$$1);\n    });\n  }\n\n  function chainsWillChange(obj, keyName, meta$$1) {\n    var chainWatchers = meta$$1.readableChainWatchers();\n    if (chainWatchers !== undefined) {\n      chainWatchers.notify(keyName, false, propertyWillChange);\n    }\n  }\n\n  function chainsDidChange(obj, keyName, meta$$1) {\n    var chainWatchers = meta$$1.readableChainWatchers();\n    if (chainWatchers !== undefined) {\n      chainWatchers.notify(keyName, true, propertyDidChange);\n    }\n  }\n\n  function overrideChains(obj, keyName, meta$$1) {\n    var chainWatchers = meta$$1.readableChainWatchers();\n    if (chainWatchers !== undefined) {\n      chainWatchers.revalidate(keyName);\n    }\n  }\n\n  /**\n    @method beginPropertyChanges\n    @chainable\n    @private\n  */\n  function beginPropertyChanges() {\n    deferred++;\n  }\n\n  /**\n    @method endPropertyChanges\n    @private\n  */\n  function endPropertyChanges() {\n    deferred--;\n    if (deferred <= 0) {\n      beforeObserverSet.clear();\n      observerSet.flush();\n    }\n  }\n\n  /**\n    Make a series of property changes together in an\n    exception-safe way.\n  \n    ```javascript\n    Ember.changeProperties(function() {\n      obj1.set('foo', mayBlowUpWhenSet);\n      obj2.set('bar', baz);\n    });\n    ```\n  \n    @method changeProperties\n    @param {Function} callback\n    @private\n  */\n  function changeProperties(callback) {\n    beginPropertyChanges();\n    try {\n      callback();\n    } finally {\n      endPropertyChanges();\n    }\n  }\n\n  function indexOf(array, target, method) {\n    var index = -1;\n    // hashes are added to the end of the event array\n    // so it makes sense to start searching at the end\n    // of the array and search in reverse\n    for (var i = array.length - 3; i >= 0; i -= 3) {\n      if (target === array[i] && method === array[i + 1]) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  function accumulateListeners(obj, eventName, otherActions, meta$$1) {\n    var actions = meta$$1.matchingListeners(eventName);\n    if (actions === undefined) {\n      return;\n    }\n    var newActions = [];\n\n    for (var i = actions.length - 3; i >= 0; i -= 3) {\n      var target = actions[i];\n      var method = actions[i + 1];\n      var flags = actions[i + 2];\n      var actionIndex = indexOf(otherActions, target, method);\n\n      if (actionIndex === -1) {\n        otherActions.push(target, method, flags);\n        newActions.push(target, method, flags);\n      }\n    }\n\n    return newActions;\n  }\n\n  function notifyBeforeObservers(obj, keyName, meta$$1) {\n    if (meta$$1.isSourceDestroying()) {\n      return;\n    }\n\n    var eventName = beforeEvent(keyName);\n    var listeners = void 0,\n        added = void 0;\n    if (deferred > 0) {\n      listeners = beforeObserverSet.add(obj, keyName, eventName);\n      added = accumulateListeners(obj, eventName, listeners, meta$$1);\n    }\n    sendEvent(obj, eventName, [obj, keyName], added);\n  }\n\n  function notifyObservers(obj, keyName, meta$$1) {\n    if (meta$$1.isSourceDestroying()) {\n      return;\n    }\n\n    var eventName = changeEvent(keyName);\n    var listeners = void 0;\n    if (deferred > 0) {\n      listeners = observerSet.add(obj, keyName, eventName);\n      accumulateListeners(obj, eventName, listeners, meta$$1);\n    } else {\n      sendEvent(obj, eventName, [obj, keyName]);\n    }\n  }\n\n  /**\n  @module @ember/object\n  */\n\n  // ..........................................................\n  // DESCRIPTOR\n  //\n\n  /**\n    Objects of this type can implement an interface to respond to requests to\n    get and set. The default implementation handles simple properties.\n  \n    @class Descriptor\n    @private\n  */\n  function Descriptor() {\n    this.isDescriptor = true;\n  }\n\n  // ..........................................................\n  // DEFINING PROPERTIES API\n  //\n\n  function MANDATORY_SETTER_FUNCTION(name) {\n    function SETTER_FUNCTION(value) {\n      var m = peekMeta(this);\n      if (!m.isInitialized(this)) {\n        m.writeValues(name, value);\n      } else {\n        true && !false && emberDebug.assert('You must use set() to set the `' + name + '` property (of ' + this + ') to `' + value + '`.', false);\n      }\n    }\n\n    SETTER_FUNCTION.isMandatorySetter = true;\n    return SETTER_FUNCTION;\n  }\n\n  function DEFAULT_GETTER_FUNCTION(name) {\n    return function GETTER_FUNCTION() {\n      var meta$$1 = peekMeta(this);\n      if (meta$$1 !== undefined) {\n        return meta$$1.peekValues(name);\n      }\n    };\n  }\n\n  function INHERITING_GETTER_FUNCTION(name) {\n    function IGETTER_FUNCTION() {\n      var meta$$1 = peekMeta(this);\n      var val = void 0;\n      if (meta$$1 !== undefined) {\n        val = meta$$1.readInheritedValue('values', name);\n      }\n\n      if (val === UNDEFINED) {\n        var proto = Object.getPrototypeOf(this);\n        return proto && proto[name];\n      } else {\n        return val;\n      }\n    }\n\n    IGETTER_FUNCTION.isInheritingGetter = true;\n    return IGETTER_FUNCTION;\n  }\n\n  var DESCRIPTOR_GETTER_FUNCTION = void 0;\n\n  if (features.EMBER_METAL_ES5_GETTERS) {\n    DESCRIPTOR_GETTER_FUNCTION = function (name, descriptor) {\n      return function CPGETTER_FUNCTION() {\n        return descriptor.get(this, name);\n      };\n    };\n  } else if (features.DESCRIPTOR_TRAP) {\n    // Future traveler, although this code looks scary. It merely exists in\n    // development to aid in development asertions. Production builds of\n    // ember strip this entire branch out.\n    var messageFor = function (obj, keyName, property, value) {\n      return 'You attempted to access `' + keyName + '.' + String(property) + '` ' + ('(on `' + obj + '`), but `' + keyName + '` is a computed property.\\n\\n') + 'Due to certain internal implementation details of Ember, the ' + ('`' + keyName + '` property previously contained a private \"descriptor\" ') + ('object, therefore `' + keyName + '.' + String(property) + '` would have been ') + ('`' + String(value).replace(/\\n/g, ' ') + '`.\\n\\n') + 'This implementation detail has now changed and the \"descriptor\" ' + 'object is no longer present at this location. Soon, accessing ' + ('`' + keyName + '` on this object will return the computed property\\'s ') + 'current value (see RFC #281 for more details).\\n\\n' + 'If you are seeing this error, you are likely using an addon that ' + 'relies on this now-defunct private implementation detail. If you ' + 'can, identify the addon from the stack trace below and report this ' + 'bug to the addon authors. If you feel stuck, the Ember Community ' + 'Slack (https://ember-community-slackin.herokuapp.com/) may be able ' + 'to offer some help.\\n\\n' + 'If you are an addon author and need help transitioning your code, ' + 'please get in touch in the #dev-ember channel in the Ember Community ' + 'Slack.';\n    };\n\n    var trapFor = void 0;\n\n    if (emberUtils.HAS_NATIVE_PROXY) {\n      /* globals Proxy */\n      trapFor = function (obj, keyName, descriptor) {\n        return new Proxy(descriptor, {\n          get: function (descriptor, property) {\n            if (property === DESCRIPTOR) {\n              return descriptor;\n            } else if (property === 'prototype' || property === 'constructor' || property === 'nodeType') {\n              return undefined;\n            } else if (property === 'toString' || property === 'valueOf' || property === 'inspect' || Symbol && property === Symbol.toPrimitive || Symbol && property === Symbol.toStringTag) {\n              return function () {\n                return '[COMPUTED PROPERTY]';\n              };\n            }\n\n            true && !false && emberDebug.assert(messageFor(obj, keyName, property, descriptor[property]));\n          }\n        });\n      };\n    } else {\n      trapFor = function (obj, keyName, descriptor) {\n        var trap = Object.create(null);\n\n        Object.defineProperty(trap, DESCRIPTOR, {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: descriptor\n        });\n\n        trap.toString = trap.valueOf = function () {\n          return '[COMPUTED PROPERTY]';\n        };\n\n        // Without a proxy, we can only trap the \"likely\" properties\n        ['isDescriptor', 'setup', 'teardown', 'get', '_getter', 'set', '_setter', 'meta'].forEach(function (property) {\n          Object.defineProperty(trap, property, {\n            configurable: false,\n            enumerable: false,\n            get: function () {\n              true && !false && emberDebug.assert(messageFor(obj, keyName, property, descriptor[property]));\n            }\n          });\n        });\n\n        return trap;\n      };\n    }\n\n    DESCRIPTOR_GETTER_FUNCTION = function (name, descriptor) {\n      var trap = void 0;\n      return function CPGETTER_FUNCTION() {\n        if (trap) {\n          return trap;\n        }\n\n        trap = trapFor(this, name, descriptor);\n        return trap;\n      };\n    };\n  }\n\n  /**\n    NOTE: This is a low-level method used by other parts of the API. You almost\n    never want to call this method directly. Instead you should use\n    `mixin()` to define new properties.\n  \n    Defines a property on an object. This method works much like the ES5\n    `Object.defineProperty()` method except that it can also accept computed\n    properties and other special descriptors.\n  \n    Normally this method takes only three parameters. However if you pass an\n    instance of `Descriptor` as the third param then you can pass an\n    optional value as the fourth parameter. This is often more efficient than\n    creating new descriptor hashes for each property.\n  \n    ## Examples\n  \n    ```javascript\n    import { defineProperty, computed } from '@ember/object';\n  \n    // ES5 compatible mode\n    defineProperty(contact, 'firstName', {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: 'Charles'\n    });\n  \n    // define a simple property\n    defineProperty(contact, 'lastName', undefined, 'Jolley');\n  \n    // define a computed property\n    defineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {\n      return this.firstName+' '+this.lastName;\n    }));\n    ```\n  \n    @private\n    @method defineProperty\n    @for @ember/object\n    @param {Object} obj the object to define this property on. This may be a prototype.\n    @param {String} keyName the name of the property\n    @param {Descriptor} [desc] an instance of `Descriptor` (typically a\n      computed property) or an ES5 descriptor.\n      You must provide this or `data` but not both.\n    @param {*} [data] something other than a descriptor, that will\n      become the explicit value of this property.\n  */\n  function defineProperty(obj, keyName, desc, data, meta$$1) {\n    if (meta$$1 === undefined) {\n      meta$$1 = meta(obj);\n    }\n\n    var watchEntry = meta$$1.peekWatching(keyName);\n    var watching = watchEntry !== undefined && watchEntry > 0;\n    var previousDesc = descriptorFor(obj, keyName, meta$$1);\n    var wasDescriptor = previousDesc !== undefined;\n\n    if (wasDescriptor) {\n      previousDesc.teardown(obj, keyName, meta$$1);\n\n      if (features.EMBER_METAL_ES5_GETTERS) {\n        meta$$1.removeDescriptors(keyName);\n      }\n    }\n\n    // used to track if the the property being defined be enumerable\n    var enumerable = true;\n\n    // Ember.NativeArray is a normal Ember.Mixin that we mix into `Array.prototype` when prototype extensions are enabled\n    // mutating a native object prototype like this should _not_ result in enumerable properties being added (or we have significant\n    // issues with things like deep equality checks from test frameworks, or things like jQuery.extend(true, [], [])).\n    //\n    // this is a hack, and we should stop mutating the array prototype by default 😫\n    if (obj === Array.prototype) {\n      enumerable = false;\n    }\n\n    var value = void 0;\n    if (desc instanceof Descriptor) {\n      value = desc;\n\n      if (features.EMBER_METAL_ES5_GETTERS || features.DESCRIPTOR_TRAP) {\n        Object.defineProperty(obj, keyName, {\n          configurable: true,\n          enumerable: enumerable,\n          get: DESCRIPTOR_GETTER_FUNCTION(keyName, value)\n        });\n      } else if (features.MANDATORY_SETTER && watching) {\n        Object.defineProperty(obj, keyName, {\n          configurable: true,\n          enumerable: enumerable,\n          writable: true,\n          value: value\n        });\n      } else if (enumerable === false) {\n        Object.defineProperty(obj, keyName, {\n          configurable: true,\n          writable: true,\n          enumerable: enumerable,\n          value: value\n        });\n      } else {\n        obj[keyName] = value;\n      }\n\n      if (features.EMBER_METAL_ES5_GETTERS) {\n        meta$$1.writeDescriptors(keyName, value);\n      }\n\n      didDefineComputedProperty(obj.constructor);\n\n      if (typeof desc.setup === 'function') {\n        desc.setup(obj, keyName);\n      }\n    } else if (desc === undefined || desc === null) {\n      value = data;\n\n      if (features.MANDATORY_SETTER && watching) {\n        meta$$1.writeValues(keyName, data);\n\n        var defaultDescriptor = {\n          configurable: true,\n          enumerable: enumerable,\n          set: MANDATORY_SETTER_FUNCTION(keyName),\n          get: DEFAULT_GETTER_FUNCTION(keyName)\n        };\n\n        Object.defineProperty(obj, keyName, defaultDescriptor);\n      } else if ((features.EMBER_METAL_ES5_GETTERS || features.DESCRIPTOR_TRAP) && wasDescriptor) {\n        Object.defineProperty(obj, keyName, {\n          configurable: true,\n          enumerable: enumerable,\n          writable: true,\n          value: value\n        });\n      } else if (enumerable === false) {\n        Object.defineProperty(obj, keyName, {\n          configurable: true,\n          enumerable: enumerable,\n          writable: true,\n          value: value\n        });\n      } else {\n        obj[keyName] = data;\n      }\n    } else {\n      value = desc;\n\n      // fallback to ES5\n      Object.defineProperty(obj, keyName, desc);\n    }\n\n    // if key is being watched, override chains that\n    // were initialized with the prototype\n    if (watching) {\n      overrideChains(obj, keyName, meta$$1);\n    }\n\n    // The `value` passed to the `didDefineProperty` hook is\n    // either the descriptor or data, whichever was passed.\n    if (typeof obj.didDefineProperty === 'function') {\n      obj.didDefineProperty(obj, keyName, value);\n    }\n\n    return this;\n  }\n\n  var hasCachedComputedProperties = false;\n  function _hasCachedComputedProperties() {\n    hasCachedComputedProperties = true;\n  }\n\n  function didDefineComputedProperty(constructor) {\n    if (hasCachedComputedProperties === false) {\n      return;\n    }\n    var cache = meta(constructor).readableCache();\n\n    if (cache && cache._computedProperties !== undefined) {\n      cache._computedProperties = undefined;\n    }\n  }\n\n  var handleMandatorySetter = void 0;\n\n  function watchKey(obj, keyName, _meta) {\n    if (typeof obj !== 'object' || obj === null) {\n      return;\n    }\n\n    var meta$$1 = _meta === undefined ? meta(obj) : _meta;\n    var count = meta$$1.peekWatching(keyName) || 0;\n    meta$$1.writeWatching(keyName, count + 1);\n\n    if (count === 0) {\n      // activate watching first time\n      var possibleDesc = descriptorFor(obj, keyName, meta$$1);\n\n      if (possibleDesc !== undefined && possibleDesc.willWatch) {\n        possibleDesc.willWatch(obj, keyName, meta$$1);\n      }\n\n      if (typeof obj.willWatchProperty === 'function') {\n        obj.willWatchProperty(keyName);\n      }\n\n      if (features.MANDATORY_SETTER) {\n        // NOTE: this is dropped for prod + minified builds\n        handleMandatorySetter(meta$$1, obj, keyName);\n      }\n    }\n  }\n\n  if (features.MANDATORY_SETTER) {\n    var _hasOwnProperty = function (obj, key) {\n      return Object.prototype.hasOwnProperty.call(obj, key);\n    };\n    var _propertyIsEnumerable = function (obj, key) {\n      return Object.prototype.propertyIsEnumerable.call(obj, key);\n    };\n\n    // Future traveler, although this code looks scary. It merely exists in\n    // development to aid in development asertions. Production builds of\n    // ember strip this entire block out\n    handleMandatorySetter = function handleMandatorySetter(m, obj, keyName) {\n      var descriptor = emberUtils.lookupDescriptor(obj, keyName);\n      var hasDescriptor = descriptor !== null;\n      var possibleDesc = hasDescriptor && descriptor.value;\n      if (isDescriptor(possibleDesc)) {\n        return;\n      }\n      var configurable = hasDescriptor ? descriptor.configurable : true;\n      var isWritable = hasDescriptor ? descriptor.writable : true;\n      var hasValue = hasDescriptor ? 'value' in descriptor : true;\n\n      // this x in Y deopts, so keeping it in this function is better;\n      if (configurable && isWritable && hasValue && keyName in obj) {\n        var desc = {\n          configurable: true,\n          set: MANDATORY_SETTER_FUNCTION(keyName),\n          enumerable: _propertyIsEnumerable(obj, keyName),\n          get: undefined\n        };\n\n        if (_hasOwnProperty(obj, keyName)) {\n          m.writeValues(keyName, obj[keyName]);\n          desc.get = DEFAULT_GETTER_FUNCTION(keyName);\n        } else {\n          desc.get = INHERITING_GETTER_FUNCTION(keyName);\n        }\n\n        Object.defineProperty(obj, keyName, desc);\n      }\n    };\n  }\n\n  function unwatchKey(obj, keyName, _meta) {\n    if (typeof obj !== 'object' || obj === null) {\n      return;\n    }\n    var meta$$1 = _meta === undefined ? peekMeta(obj) : _meta;\n\n    // do nothing of this object has already been destroyed\n    if (meta$$1 === undefined || meta$$1.isSourceDestroyed()) {\n      return;\n    }\n\n    var count = meta$$1.peekWatching(keyName);\n    if (count === 1) {\n      meta$$1.writeWatching(keyName, 0);\n\n      var possibleDesc = descriptorFor(obj, keyName, meta$$1);\n      var _isDescriptor = possibleDesc !== undefined;\n\n      if (_isDescriptor && possibleDesc.didUnwatch) {\n        possibleDesc.didUnwatch(obj, keyName, meta$$1);\n      }\n\n      if (typeof obj.didUnwatchProperty === 'function') {\n        obj.didUnwatchProperty(keyName);\n      }\n\n      if (features.MANDATORY_SETTER) {\n        // It is true, the following code looks quite WAT. But have no fear, It\n        // exists purely to improve development ergonomics and is removed from\n        // ember.min.js and ember.prod.js builds.\n        //\n        // Some further context: Once a property is watched by ember, bypassing `set`\n        // for mutation, will bypass observation. This code exists to assert when\n        // that occurs, and attempt to provide more helpful feedback. The alternative\n        // is tricky to debug partially observable properties.\n        if (!_isDescriptor && keyName in obj) {\n          var maybeMandatoryDescriptor = emberUtils.lookupDescriptor(obj, keyName);\n\n          if (maybeMandatoryDescriptor.set && maybeMandatoryDescriptor.set.isMandatorySetter) {\n            if (maybeMandatoryDescriptor.get && maybeMandatoryDescriptor.get.isInheritingGetter) {\n              var possibleValue = meta$$1.readInheritedValue('values', keyName);\n              if (possibleValue === UNDEFINED) {\n                delete obj[keyName];\n                return;\n              }\n            }\n\n            Object.defineProperty(obj, keyName, {\n              configurable: true,\n              enumerable: Object.prototype.propertyIsEnumerable.call(obj, keyName),\n              writable: true,\n              value: meta$$1.peekValues(keyName)\n            });\n            meta$$1.deleteFromValues(keyName);\n          }\n        }\n      }\n    } else if (count > 1) {\n      meta$$1.writeWatching(keyName, count - 1);\n    }\n  }\n\n  var FIRST_KEY = /^([^\\.]+)/;\n\n  function firstKey(path) {\n    return path.match(FIRST_KEY)[0];\n  }\n\n  function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n  }\n\n  function isVolatile(obj, keyName, meta$$1) {\n    var desc = descriptorFor(obj, keyName, meta$$1);\n    return !(desc !== undefined && desc._volatile === false);\n  }\n\n  var ChainWatchers = function () {\n    function ChainWatchers() {\n      emberBabel.classCallCheck(this, ChainWatchers);\n\n      // chain nodes that reference a key in this obj by key\n      // we only create ChainWatchers when we are going to add them\n      // so create this upfront\n      this.chains = Object.create(null);\n    }\n\n    ChainWatchers.prototype.add = function add(key, node) {\n      var nodes = this.chains[key];\n      if (nodes === undefined) {\n        this.chains[key] = [node];\n      } else {\n        nodes.push(node);\n      }\n    };\n\n    ChainWatchers.prototype.remove = function remove(key, node) {\n      var nodes = this.chains[key];\n      if (nodes !== undefined) {\n        for (var i = 0; i < nodes.length; i++) {\n          if (nodes[i] === node) {\n            nodes.splice(i, 1);\n            break;\n          }\n        }\n      }\n    };\n\n    ChainWatchers.prototype.has = function has(key, node) {\n      var nodes = this.chains[key];\n      if (nodes !== undefined) {\n        for (var i = 0; i < nodes.length; i++) {\n          if (nodes[i] === node) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n\n    ChainWatchers.prototype.revalidateAll = function revalidateAll() {\n      for (var key in this.chains) {\n        this.notify(key, true, undefined);\n      }\n    };\n\n    ChainWatchers.prototype.revalidate = function revalidate(key) {\n      this.notify(key, true, undefined);\n    };\n\n    // key: the string key that is part of a path changed\n    // revalidate: boolean; the chains that are watching this value should revalidate\n    // callback: function that will be called with the object and path that\n    //           will be/are invalidated by this key change, depending on\n    //           whether the revalidate flag is passed\n\n\n    ChainWatchers.prototype.notify = function notify(key, revalidate, callback) {\n      var nodes = this.chains[key];\n      if (nodes === undefined || nodes.length === 0) {\n        return;\n      }\n\n      var affected = void 0;\n\n      if (callback) {\n        affected = [];\n      }\n\n      for (var i = 0; i < nodes.length; i++) {\n        nodes[i].notify(revalidate, affected);\n      }\n\n      if (callback === undefined) {\n        return;\n      }\n\n      // we gather callbacks so we don't notify them during revalidation\n      for (var _i = 0; _i < affected.length; _i += 2) {\n        var obj = affected[_i];\n        var path = affected[_i + 1];\n        callback(obj, path);\n      }\n    };\n\n    return ChainWatchers;\n  }();\n\n  function makeChainWatcher() {\n    return new ChainWatchers();\n  }\n\n  function makeChainNode(obj) {\n    return new ChainNode(null, null, obj);\n  }\n\n  function addChainWatcher(obj, keyName, node) {\n    var m = meta(obj);\n    m.writableChainWatchers(makeChainWatcher).add(keyName, node);\n    watchKey(obj, keyName, m);\n  }\n\n  function removeChainWatcher(obj, keyName, node, _meta) {\n    if (!isObject(obj)) {\n      return;\n    }\n\n    var meta$$1 = _meta === undefined ? peekMeta(obj) : _meta;\n\n    if (meta$$1 === undefined || meta$$1.readableChainWatchers() === undefined) {\n      return;\n    }\n\n    // make meta writable\n    meta$$1 = meta(obj);\n\n    meta$$1.readableChainWatchers().remove(keyName, node);\n\n    unwatchKey(obj, keyName, meta$$1);\n  }\n\n  // A ChainNode watches a single key on an object. If you provide a starting\n  // value for the key then the node won't actually watch it. For a root node\n  // pass null for parent and key and object for value.\n\n  var ChainNode = function () {\n    function ChainNode(parent, key, value) {\n      emberBabel.classCallCheck(this, ChainNode);\n\n      this._parent = parent;\n      this._key = key;\n\n      // _watching is true when calling get(this._parent, this._key) will\n      // return the value of this node.\n      //\n      // It is false for the root of a chain (because we have no parent)\n      // and for global paths (because the parent node is the object with\n      // the observer on it)\n      var isWatching = this._watching = value === undefined;\n\n      this._chains = undefined;\n      this._object = undefined;\n      this.count = 0;\n\n      this._value = value;\n      this._paths = undefined;\n      if (isWatching) {\n        var obj = parent.value();\n\n        if (!isObject(obj)) {\n          return;\n        }\n\n        this._object = obj;\n\n        addChainWatcher(this._object, this._key, this);\n      }\n    }\n\n    ChainNode.prototype.value = function value() {\n      if (this._value === undefined && this._watching) {\n        var obj = this._parent.value();\n        this._value = lazyGet(obj, this._key);\n      }\n      return this._value;\n    };\n\n    ChainNode.prototype.destroy = function destroy() {\n      if (this._watching) {\n        removeChainWatcher(this._object, this._key, this);\n        this._watching = false; // so future calls do nothing\n      }\n    };\n\n    // copies a top level object only\n\n\n    ChainNode.prototype.copy = function copy(obj) {\n      var ret = makeChainNode(obj);\n      var paths = this._paths;\n      if (paths !== undefined) {\n        var path = void 0;\n        for (path in paths) {\n          if (paths[path] > 0) {\n            ret.add(path);\n          }\n        }\n      }\n      return ret;\n    };\n\n    // called on the root node of a chain to setup watchers on the specified\n    // path.\n\n\n    ChainNode.prototype.add = function add(path) {\n      var paths = this._paths || (this._paths = {});\n      paths[path] = (paths[path] || 0) + 1;\n\n      var key = firstKey(path);\n      var tail = path.slice(key.length + 1);\n\n      this.chain(key, tail);\n    };\n\n    // called on the root node of a chain to teardown watcher on the specified\n    // path\n\n\n    ChainNode.prototype.remove = function remove(path) {\n      var paths = this._paths;\n      if (paths === undefined) {\n        return;\n      }\n      if (paths[path] > 0) {\n        paths[path]--;\n      }\n\n      var key = firstKey(path);\n      var tail = path.slice(key.length + 1);\n\n      this.unchain(key, tail);\n    };\n\n    ChainNode.prototype.chain = function chain(key, path) {\n      var chains = this._chains;\n      var node = void 0;\n      if (chains === undefined) {\n        chains = this._chains = Object.create(null);\n      } else {\n        node = chains[key];\n      }\n\n      if (node === undefined) {\n        node = chains[key] = new ChainNode(this, key, undefined);\n      }\n\n      node.count++; // count chains...\n\n      // chain rest of path if there is one\n      if (path) {\n        key = firstKey(path);\n        path = path.slice(key.length + 1);\n        node.chain(key, path);\n      }\n    };\n\n    ChainNode.prototype.unchain = function unchain(key, path) {\n      var chains = this._chains;\n      var node = chains[key];\n\n      // unchain rest of path first...\n      if (path && path.length > 1) {\n        var nextKey = firstKey(path);\n        var nextPath = path.slice(nextKey.length + 1);\n        node.unchain(nextKey, nextPath);\n      }\n\n      // delete node if needed.\n      node.count--;\n      if (node.count <= 0) {\n        chains[node._key] = undefined;\n        node.destroy();\n      }\n    };\n\n    ChainNode.prototype.notify = function notify(revalidate, affected) {\n      if (revalidate && this._watching) {\n        var parentValue = this._parent.value();\n\n        if (parentValue !== this._object) {\n          removeChainWatcher(this._object, this._key, this);\n\n          if (isObject(parentValue)) {\n            this._object = parentValue;\n            addChainWatcher(parentValue, this._key, this);\n          } else {\n            this._object = undefined;\n          }\n        }\n        this._value = undefined;\n      }\n\n      // then notify chains...\n      var chains = this._chains;\n      if (chains !== undefined) {\n        var node = void 0;\n        for (var key in chains) {\n          node = chains[key];\n          if (node !== undefined) {\n            node.notify(revalidate, affected);\n          }\n        }\n      }\n\n      if (affected && this._parent) {\n        this._parent.populateAffected(this._key, 1, affected);\n      }\n    };\n\n    ChainNode.prototype.populateAffected = function populateAffected(path, depth, affected) {\n      if (this._key) {\n        path = this._key + '.' + path;\n      }\n\n      if (this._parent) {\n        this._parent.populateAffected(path, depth + 1, affected);\n      } else if (depth > 1) {\n        affected.push(this.value(), path);\n      }\n    };\n\n    return ChainNode;\n  }();\n\n  function lazyGet(obj, key) {\n    if (!isObject(obj)) {\n      return;\n    }\n\n    var meta$$1 = peekMeta(obj);\n\n    // check if object meant only to be a prototype\n    if (meta$$1 !== undefined && meta$$1.proto === obj) {\n      return;\n    }\n\n    // Use `get` if the return value is an EachProxy or an uncacheable value.\n    if (isVolatile(obj, key, meta$$1)) {\n      return get(obj, key);\n      // Otherwise attempt to get the cached value of the computed property\n    } else {\n      var cache = meta$$1.readableCache();\n      if (cache !== undefined) {\n        return cacheFor.get(cache, key);\n      }\n    }\n  }\n\n  function finishChains(meta$$1) {\n    // finish any current chains node watchers that reference obj\n    var chainWatchers = meta$$1.readableChainWatchers();\n    if (chainWatchers !== undefined) {\n      chainWatchers.revalidateAll();\n    }\n    // ensure that if we have inherited any chains they have been\n    // copied onto our own meta.\n    if (meta$$1.readableChains() !== undefined) {\n      meta$$1.writableChains(makeChainNode);\n    }\n  }\n\n  var counters = void 0;\n  {\n    counters = {\n      peekCalls: 0,\n      peekParentCalls: 0,\n      peekPrototypeWalks: 0,\n      setCalls: 0,\n      deleteCalls: 0,\n      metaCalls: 0,\n      metaInstantiated: 0\n    };\n  }\n\n  /**\n  @module ember\n  */\n\n  var UNDEFINED = emberUtils.symbol('undefined');\n\n  // FLAGS\n  var SOURCE_DESTROYING = 1 << 1;\n  var SOURCE_DESTROYED = 1 << 2;\n  var META_DESTROYED = 1 << 3;\n  var IS_PROXY = 1 << 4;\n\n  var NODE_STACK = [];\n\n  var Meta = function () {\n    function Meta(obj, parentMeta) {\n      emberBabel.classCallCheck(this, Meta);\n\n      {\n        counters.metaInstantiated++;\n      }\n\n      this._cache = undefined;\n\n      if (features.EMBER_METAL_ES5_GETTERS) {\n        this._descriptors = undefined;\n      }\n\n      this._watching = undefined;\n      this._mixins = undefined;\n      if (emberEnvironment.ENV._ENABLE_BINDING_SUPPORT) {\n        this._bindings = undefined;\n      }\n      this._values = undefined;\n      this._deps = undefined;\n      this._chainWatchers = undefined;\n      this._chains = undefined;\n      this._tag = undefined;\n      this._tags = undefined;\n      this._factory = undefined;\n\n      // initial value for all flags right now is false\n      // see FLAGS const for detailed list of flags used\n      this._flags = 0;\n\n      // used only internally\n      this.source = obj;\n\n      // when meta(obj).proto === obj, the object is intended to be only a\n      // prototype and doesn't need to actually be observable itself\n      this.proto = undefined;\n\n      // The next meta in our inheritance chain. We (will) track this\n      // explicitly instead of using prototypical inheritance because we\n      // have detailed knowledge of how each property should really be\n      // inherited, and we can optimize it much better than JS runtimes.\n      this.parent = parentMeta;\n\n      this._listeners = undefined;\n      this._listenersFinalized = false;\n    }\n\n    Meta.prototype.isInitialized = function isInitialized(obj) {\n      return this.proto !== obj;\n    };\n\n    Meta.prototype.destroy = function destroy() {\n      if (this.isMetaDestroyed()) {\n        return;\n      }\n\n      // remove chainWatchers to remove circular references that would prevent GC\n      var nodes = void 0,\n          key = void 0,\n          nodeObject = void 0;\n      var node = this.readableChains();\n      if (node !== undefined) {\n        NODE_STACK.push(node);\n        // process tree\n        while (NODE_STACK.length > 0) {\n          node = NODE_STACK.pop();\n          // push children\n          nodes = node._chains;\n          if (nodes !== undefined) {\n            for (key in nodes) {\n              if (nodes[key] !== undefined) {\n                NODE_STACK.push(nodes[key]);\n              }\n            }\n          }\n\n          // remove chainWatcher in node object\n          if (node._watching) {\n            nodeObject = node._object;\n            if (nodeObject !== undefined) {\n              var foreignMeta = peekMeta(nodeObject);\n              // avoid cleaning up chain watchers when both current and\n              // foreign objects are being destroyed\n              // if both are being destroyed manual cleanup is not needed\n              // as they will be GC'ed and no non-destroyed references will\n              // be remaining\n              if (foreignMeta && !foreignMeta.isSourceDestroying()) {\n                removeChainWatcher(nodeObject, node._key, node, foreignMeta);\n              }\n            }\n          }\n        }\n      }\n\n      this.setMetaDestroyed();\n    };\n\n    Meta.prototype.isSourceDestroying = function isSourceDestroying() {\n      return (this._flags & SOURCE_DESTROYING) !== 0;\n    };\n\n    Meta.prototype.setSourceDestroying = function setSourceDestroying() {\n      this._flags |= SOURCE_DESTROYING;\n    };\n\n    Meta.prototype.isSourceDestroyed = function isSourceDestroyed() {\n      return (this._flags & SOURCE_DESTROYED) !== 0;\n    };\n\n    Meta.prototype.setSourceDestroyed = function setSourceDestroyed() {\n      this._flags |= SOURCE_DESTROYED;\n    };\n\n    Meta.prototype.isMetaDestroyed = function isMetaDestroyed() {\n      return (this._flags & META_DESTROYED) !== 0;\n    };\n\n    Meta.prototype.setMetaDestroyed = function setMetaDestroyed() {\n      this._flags |= META_DESTROYED;\n    };\n\n    Meta.prototype.isProxy = function isProxy() {\n      return (this._flags & IS_PROXY) !== 0;\n    };\n\n    Meta.prototype.setProxy = function setProxy() {\n      this._flags |= IS_PROXY;\n    };\n\n    Meta.prototype._getOrCreateOwnMap = function _getOrCreateOwnMap(key) {\n      return this[key] || (this[key] = Object.create(null));\n    };\n\n    Meta.prototype._getInherited = function _getInherited(key) {\n      var pointer = this;\n      while (pointer !== undefined) {\n        var map = pointer[key];\n        if (map !== undefined) {\n          return map;\n        }\n        pointer = pointer.parent;\n      }\n    };\n\n    Meta.prototype._findInherited = function _findInherited(key, subkey) {\n      var pointer = this;\n      while (pointer !== undefined) {\n        var map = pointer[key];\n        if (map !== undefined) {\n          var value = map[subkey];\n          if (value !== undefined) {\n            return value;\n          }\n        }\n        pointer = pointer.parent;\n      }\n    };\n\n    // Implements a member that provides a lazily created map of maps,\n    // with inheritance at both levels.\n\n\n    Meta.prototype.writeDeps = function writeDeps(subkey, itemkey, value) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot modify dependent keys for `' + itemkey + '` on `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var outerMap = this._getOrCreateOwnMap('_deps');\n      var innerMap = outerMap[subkey];\n      if (innerMap === undefined) {\n        innerMap = outerMap[subkey] = Object.create(null);\n      }\n      innerMap[itemkey] = value;\n    };\n\n    Meta.prototype.peekDeps = function peekDeps(subkey, itemkey) {\n      var pointer = this;\n      while (pointer !== undefined) {\n        var map = pointer._deps;\n        if (map !== undefined) {\n          var value = map[subkey];\n          if (value !== undefined) {\n            var itemvalue = value[itemkey];\n            if (itemvalue !== undefined) {\n              return itemvalue;\n            }\n          }\n        }\n        pointer = pointer.parent;\n      }\n    };\n\n    Meta.prototype.hasDeps = function hasDeps(subkey) {\n      var pointer = this;\n      while (pointer !== undefined) {\n        var deps = pointer._deps;\n        if (deps !== undefined && deps[subkey] !== undefined) {\n          return true;\n        }\n        pointer = pointer.parent;\n      }\n      return false;\n    };\n\n    Meta.prototype.forEachInDeps = function forEachInDeps(subkey, fn) {\n      return this._forEachIn('_deps', subkey, fn);\n    };\n\n    Meta.prototype._forEachIn = function _forEachIn(key, subkey, fn) {\n      var pointer = this;\n      var seen = void 0;\n      var calls = void 0;\n      while (pointer !== undefined) {\n        var map = pointer[key];\n        if (map !== undefined) {\n          var innerMap = map[subkey];\n          if (innerMap !== undefined) {\n            for (var innerKey in innerMap) {\n              seen = seen === undefined ? new Set() : seen;\n              if (!seen.has(innerKey)) {\n                seen.add(innerKey);\n                calls = calls || [];\n                calls.push(innerKey, innerMap[innerKey]);\n              }\n            }\n          }\n        }\n        pointer = pointer.parent;\n      }\n\n      if (calls !== undefined) {\n        for (var i = 0; i < calls.length; i += 2) {\n          fn(calls[i], calls[i + 1]);\n        }\n      }\n    };\n\n    Meta.prototype.writableCache = function writableCache() {\n      return this._getOrCreateOwnMap('_cache');\n    };\n\n    Meta.prototype.readableCache = function readableCache() {\n      return this._cache;\n    };\n\n    Meta.prototype.writableTags = function writableTags() {\n      return this._getOrCreateOwnMap('_tags');\n    };\n\n    Meta.prototype.readableTags = function readableTags() {\n      return this._tags;\n    };\n\n    Meta.prototype.writableTag = function writableTag(create) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot create a new tag for `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var ret = this._tag;\n      if (ret === undefined) {\n        ret = this._tag = create(this.source);\n      }\n      return ret;\n    };\n\n    Meta.prototype.readableTag = function readableTag() {\n      return this._tag;\n    };\n\n    Meta.prototype.writableChainWatchers = function writableChainWatchers(create) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot create a new chain watcher for `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var ret = this._chainWatchers;\n      if (ret === undefined) {\n        ret = this._chainWatchers = create(this.source);\n      }\n      return ret;\n    };\n\n    Meta.prototype.readableChainWatchers = function readableChainWatchers() {\n      return this._chainWatchers;\n    };\n\n    Meta.prototype.writableChains = function writableChains(create) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot create a new chains for `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var ret = this._chains;\n      if (ret === undefined) {\n        if (this.parent === undefined) {\n          ret = create(this.source);\n        } else {\n          ret = this.parent.writableChains(create).copy(this.source);\n        }\n        this._chains = ret;\n      }\n      return ret;\n    };\n\n    Meta.prototype.readableChains = function readableChains() {\n      return this._getInherited('_chains');\n    };\n\n    Meta.prototype.writeWatching = function writeWatching(subkey, value) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot update watchers for `' + subkey + '` on `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var map = this._getOrCreateOwnMap('_watching');\n      map[subkey] = value;\n    };\n\n    Meta.prototype.peekWatching = function peekWatching(subkey) {\n      return this._findInherited('_watching', subkey);\n    };\n\n    Meta.prototype.writeMixins = function writeMixins(subkey, value) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot add mixins for `' + subkey + '` on `' + emberUtils.toString(this.source) + '` call writeMixins after it has been destroyed.', !this.isMetaDestroyed());\n\n      var map = this._getOrCreateOwnMap('_mixins');\n      map[subkey] = value;\n    };\n\n    Meta.prototype.peekMixins = function peekMixins(subkey) {\n      return this._findInherited('_mixins', subkey);\n    };\n\n    Meta.prototype.forEachMixins = function forEachMixins(fn) {\n      var pointer = this;\n      var seen = void 0;\n      while (pointer !== undefined) {\n        var map = pointer._mixins;\n        if (map !== undefined) {\n          for (var key in map) {\n            seen = seen === undefined ? new Set() : seen;\n            if (!seen.has(key)) {\n              seen.add(key);\n              fn(key, map[key]);\n            }\n          }\n        }\n        pointer = pointer.parent;\n      }\n    };\n\n    Meta.prototype.writeBindings = function writeBindings(subkey, value) {\n      true && !emberEnvironment.ENV._ENABLE_BINDING_SUPPORT && emberDebug.assert('Cannot invoke `meta.writeBindings` when EmberENV._ENABLE_BINDING_SUPPORT is not set', emberEnvironment.ENV._ENABLE_BINDING_SUPPORT);\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot add a binding for `' + subkey + '` on `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var map = this._getOrCreateOwnMap('_bindings');\n      map[subkey] = value;\n    };\n\n    Meta.prototype.peekBindings = function peekBindings(subkey) {\n      true && !emberEnvironment.ENV._ENABLE_BINDING_SUPPORT && emberDebug.assert('Cannot invoke `meta.peekBindings` when EmberENV._ENABLE_BINDING_SUPPORT is not set', emberEnvironment.ENV._ENABLE_BINDING_SUPPORT);\n\n      return this._findInherited('_bindings', subkey);\n    };\n\n    Meta.prototype.forEachBindings = function forEachBindings(fn) {\n      true && !emberEnvironment.ENV._ENABLE_BINDING_SUPPORT && emberDebug.assert('Cannot invoke `meta.forEachBindings` when EmberENV._ENABLE_BINDING_SUPPORT is not set', emberEnvironment.ENV._ENABLE_BINDING_SUPPORT);\n\n      var pointer = this;\n      var seen = void 0;\n      while (pointer !== undefined) {\n        var map = pointer._bindings;\n        if (map !== undefined) {\n          for (var key in map) {\n            seen = seen || Object.create(null);\n            if (seen[key] === undefined) {\n              seen[key] = true;\n              fn(key, map[key]);\n            }\n          }\n        }\n        pointer = pointer.parent;\n      }\n    };\n\n    Meta.prototype.clearBindings = function clearBindings() {\n      true && !emberEnvironment.ENV._ENABLE_BINDING_SUPPORT && emberDebug.assert('Cannot invoke `meta.clearBindings` when EmberENV._ENABLE_BINDING_SUPPORT is not set', emberEnvironment.ENV._ENABLE_BINDING_SUPPORT);\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot clear bindings on `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      this._bindings = undefined;\n    };\n\n    Meta.prototype.writeValues = function writeValues(subkey, value) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot set the value of `' + subkey + '` on `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var map = this._getOrCreateOwnMap('_values');\n      map[subkey] = value;\n    };\n\n    Meta.prototype.peekValues = function peekValues(subkey) {\n      return this._findInherited('_values', subkey);\n    };\n\n    Meta.prototype.deleteFromValues = function deleteFromValues(subkey) {\n      delete this._getOrCreateOwnMap('_values')[subkey];\n    };\n\n    emberBabel.createClass(Meta, [{\n      key: 'factory',\n      set: function (factory) {\n        this._factory = factory;\n      },\n      get: function () {\n        return this._factory;\n      }\n    }]);\n\n    return Meta;\n  }();\n\n  for (var name in protoMethods) {\n    Meta.prototype[name] = protoMethods[name];\n  }\n\n  if (features.MANDATORY_SETTER) {\n    Meta.prototype.readInheritedValue = function (key, subkey) {\n      var internalKey = '_' + key;\n\n      var pointer = this;\n\n      while (pointer !== undefined) {\n        var map = pointer[internalKey];\n        if (map !== undefined) {\n          var value = map[subkey];\n          if (value !== undefined || subkey in map) {\n            return value;\n          }\n        }\n        pointer = pointer.parent;\n      }\n\n      return UNDEFINED;\n    };\n\n    Meta.prototype.writeValue = function (obj, key, value) {\n      var descriptor = emberUtils.lookupDescriptor(obj, key);\n      var isMandatorySetter = descriptor !== null && descriptor.set && descriptor.set.isMandatorySetter;\n\n      if (isMandatorySetter) {\n        this.writeValues(key, value);\n      } else {\n        obj[key] = value;\n      }\n    };\n  }\n\n  if (features.EMBER_METAL_ES5_GETTERS) {\n    Meta.prototype.writeDescriptors = function (subkey, value) {\n      true && !!this.isMetaDestroyed() && emberDebug.assert('Cannot update descriptors for `' + subkey + '` on `' + emberUtils.toString(this.source) + '` after it has been destroyed.', !this.isMetaDestroyed());\n\n      var map = this._getOrCreateOwnMap('_descriptors');\n      map[subkey] = value;\n    };\n\n    Meta.prototype.peekDescriptors = function (subkey) {\n      var possibleDesc = this._findInherited('_descriptors', subkey);\n      return possibleDesc === UNDEFINED ? undefined : possibleDesc;\n    };\n\n    Meta.prototype.removeDescriptors = function (subkey) {\n      this.writeDescriptors(subkey, UNDEFINED);\n    };\n  }\n\n  var getPrototypeOf = Object.getPrototypeOf;\n  var metaStore = new WeakMap();\n\n  function setMeta(obj, meta) {\n    true && !(obj !== null) && emberDebug.assert('Cannot call `setMeta` on null', obj !== null);\n    true && !(obj !== undefined) && emberDebug.assert('Cannot call `setMeta` on undefined', obj !== undefined);\n    true && !(typeof obj === 'object' || typeof obj === 'function') && emberDebug.assert('Cannot call `setMeta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');\n\n    {\n      counters.setCalls++;\n    }\n    metaStore.set(obj, meta);\n  }\n\n  function peekMeta(obj) {\n    true && !(obj !== null) && emberDebug.assert('Cannot call `peekMeta` on null', obj !== null);\n    true && !(obj !== undefined) && emberDebug.assert('Cannot call `peekMeta` on undefined', obj !== undefined);\n    true && !(typeof obj === 'object' || typeof obj === 'function') && emberDebug.assert('Cannot call `peekMeta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');\n\n    var pointer = obj;\n    var meta = void 0;\n    while (pointer !== undefined && pointer !== null) {\n      meta = metaStore.get(pointer);\n      // jshint loopfunc:true\n      {\n        counters.peekCalls++;\n      }\n      if (meta !== undefined) {\n        return meta;\n      }\n\n      pointer = getPrototypeOf(pointer);\n      {\n        counters.peekPrototypeWalks++;\n      }\n    }\n  }\n\n  /**\n    Tears down the meta on an object so that it can be garbage collected.\n    Multiple calls will have no effect.\n  \n    @method deleteMeta\n    @for Ember\n    @param {Object} obj  the object to destroy\n    @return {void}\n    @private\n  */\n  function deleteMeta(obj) {\n    true && !(obj !== null) && emberDebug.assert('Cannot call `deleteMeta` on null', obj !== null);\n    true && !(obj !== undefined) && emberDebug.assert('Cannot call `deleteMeta` on undefined', obj !== undefined);\n    true && !(typeof obj === 'object' || typeof obj === 'function') && emberDebug.assert('Cannot call `deleteMeta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');\n\n    {\n      counters.deleteCalls++;\n    }\n\n    var meta = peekMeta(obj);\n    if (meta !== undefined) {\n      meta.destroy();\n    }\n  }\n\n  /**\n    Retrieves the meta hash for an object. If `writable` is true ensures the\n    hash is writable for this object as well.\n  \n    The meta object contains information about computed property descriptors as\n    well as any watched properties and other information. You generally will\n    not access this information directly but instead work with higher level\n    methods that manipulate this hash indirectly.\n  \n    @method meta\n    @for Ember\n    @private\n  \n    @param {Object} obj The object to retrieve meta for\n    @param {Boolean} [writable=true] Pass `false` if you do not intend to modify\n      the meta hash, allowing the method to avoid making an unnecessary copy.\n    @return {Object} the meta hash for an object\n  */\n  function meta(obj) {\n    true && !(obj !== null) && emberDebug.assert('Cannot call `meta` on null', obj !== null);\n    true && !(obj !== undefined) && emberDebug.assert('Cannot call `meta` on undefined', obj !== undefined);\n    true && !(typeof obj === 'object' || typeof obj === 'function') && emberDebug.assert('Cannot call `meta` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');\n\n    {\n      counters.metaCalls++;\n    }\n\n    var maybeMeta = peekMeta(obj);\n    var parent = void 0;\n\n    // remove this code, in-favor of explicit parent\n    if (maybeMeta !== undefined) {\n      if (maybeMeta.source === obj) {\n        return maybeMeta;\n      }\n      parent = maybeMeta;\n    }\n\n    var newMeta = new Meta(obj, parent);\n    setMeta(obj, newMeta);\n    return newMeta;\n  }\n\n  // Using `symbol()` here causes some node test to fail, presumably\n  // because we define the CP with one copy of Ember and boot the app\n  // with a different copy, so the random key we generate do not line\n  // up. Is that testing a legit scenario?\n  var DESCRIPTOR = '__DESCRIPTOR__';\n\n  /**\n    Returns the CP descriptor assocaited with `obj` and `keyName`, if any.\n  \n    @method descriptorFor\n    @param {Object} obj the object to check\n    @param {String} keyName the key to check\n    @return {Descriptor}\n    @private\n  */\n  function descriptorFor(obj, keyName, _meta) {\n    true && !(obj !== null) && emberDebug.assert('Cannot call `descriptorFor` on null', obj !== null);\n    true && !(obj !== undefined) && emberDebug.assert('Cannot call `descriptorFor` on undefined', obj !== undefined);\n    true && !(typeof obj === 'object' || typeof obj === 'function') && emberDebug.assert('Cannot call `descriptorFor` on ' + typeof obj, typeof obj === 'object' || typeof obj === 'function');\n\n    if (features.EMBER_METAL_ES5_GETTERS) {\n      var _meta2 = _meta === undefined ? peekMeta(obj) : _meta;\n\n      if (_meta2 !== undefined) {\n        return _meta2.peekDescriptors(keyName);\n      }\n    } else {\n      var possibleDesc = obj[keyName];\n\n      if (features.DESCRIPTOR_TRAP && isDescriptorTrap(possibleDesc)) {\n        return possibleDesc[DESCRIPTOR];\n      } else {\n        return isDescriptor(possibleDesc) ? possibleDesc : undefined;\n      }\n    }\n  }\n\n  function isDescriptorTrap(possibleDesc) {\n    if (features.DESCRIPTOR_TRAP) {\n      return possibleDesc !== null && typeof possibleDesc === 'object' && possibleDesc[DESCRIPTOR] !== undefined;\n    } else {\n      throw new Error('Cannot call `isDescriptorTrap` in production');\n    }\n  }\n\n  /**\n    Check whether a value is a CP descriptor.\n  \n    @method descriptorFor\n    @param {any} possibleDesc the value to check\n    @return {boolean}\n    @private\n  */\n  function isDescriptor(possibleDesc) {\n    return possibleDesc !== null && typeof possibleDesc === 'object' && possibleDesc.isDescriptor;\n  }\n\n  var Cache = function () {\n    function Cache(limit, func, key, store) {\n      emberBabel.classCallCheck(this, Cache);\n\n      this.size = 0;\n      this.misses = 0;\n      this.hits = 0;\n      this.limit = limit;\n      this.func = func;\n      this.key = key;\n      this.store = store || new DefaultStore();\n    }\n\n    Cache.prototype.get = function get(obj) {\n      var key = this.key === undefined ? obj : this.key(obj);\n      var value = this.store.get(key);\n      if (value === undefined) {\n        this.misses++;\n        value = this._set(key, this.func(obj));\n      } else if (value === UNDEFINED) {\n        this.hits++;\n        value = undefined;\n      } else {\n        this.hits++;\n        // nothing to translate\n      }\n\n      return value;\n    };\n\n    Cache.prototype.set = function set(obj, value) {\n      var key = this.key === undefined ? obj : this.key(obj);\n      return this._set(key, value);\n    };\n\n    Cache.prototype._set = function _set(key, value) {\n      if (this.limit > this.size) {\n        this.size++;\n        if (value === undefined) {\n          this.store.set(key, UNDEFINED);\n        } else {\n          this.store.set(key, value);\n        }\n      }\n\n      return value;\n    };\n\n    Cache.prototype.purge = function purge() {\n      this.store.clear();\n      this.size = 0;\n      this.hits = 0;\n      this.misses = 0;\n    };\n\n    return Cache;\n  }();\n\n  var DefaultStore = function () {\n    function DefaultStore() {\n      emberBabel.classCallCheck(this, DefaultStore);\n\n      this.data = Object.create(null);\n    }\n\n    DefaultStore.prototype.get = function get(key) {\n      return this.data[key];\n    };\n\n    DefaultStore.prototype.set = function set(key, value) {\n      this.data[key] = value;\n    };\n\n    DefaultStore.prototype.clear = function clear() {\n      this.data = Object.create(null);\n    };\n\n    return DefaultStore;\n  }();\n\n  var firstDotIndexCache = new Cache(1000, function (key) {\n    return key.indexOf('.');\n  });\n\n  function isPath(path) {\n    return typeof path === 'string' && firstDotIndexCache.get(path) !== -1;\n  }\n\n  /**\n  @module @ember/object\n  */\n\n  var ALLOWABLE_TYPES = {\n    object: true,\n    function: true,\n    string: true\n  };\n\n  // ..........................................................\n  // GET AND SET\n  //\n  // If we are on a platform that supports accessors we can use those.\n  // Otherwise simulate accessors by looking up the property directly on the\n  // object.\n\n  /**\n    Gets the value of a property on an object. If the property is computed,\n    the function will be invoked. If the property is not defined but the\n    object implements the `unknownProperty` method then that will be invoked.\n  \n    ```javascript\n    import { get } from '@ember/object';\n    get(obj, \"name\");\n    ```\n  \n    If you plan to run on IE8 and older browsers then you should use this\n    method anytime you want to retrieve a property on an object that you don't\n    know for sure is private. (Properties beginning with an underscore '_'\n    are considered private.)\n  \n    On all newer browsers, you only need to use this method to retrieve\n    properties if the property might not be defined on the object and you want\n    to respect the `unknownProperty` handler. Otherwise you can ignore this\n    method.\n  \n    Note that if the object itself is `undefined`, this method will throw\n    an error.\n  \n    @method get\n    @for @ember/object\n    @static\n    @param {Object} obj The object to retrieve from.\n    @param {String} keyName The property key to retrieve\n    @return {Object} the property value or `null`.\n    @public\n  */\n  function get(obj, keyName) {\n    true && !(arguments.length === 2) && emberDebug.assert('Get must be called with two arguments; an object and a property key', arguments.length === 2);\n    true && !(obj !== undefined && obj !== null) && emberDebug.assert('Cannot call get with \\'' + keyName + '\\' on an undefined object.', obj !== undefined && obj !== null);\n    true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && emberDebug.assert('The key provided to get must be a string or number, you passed ' + keyName, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName));\n    true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && emberDebug.assert('\\'this\\' in paths is not supported', typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0);\n    true && !(keyName !== '') && emberDebug.assert('Cannot call `get` with an empty string', keyName !== '');\n\n    var type = typeof obj;\n\n    var isObject = type === 'object';\n    var isFunction = type === 'function';\n    var isObjectLike = isObject || isFunction;\n\n    var descriptor = undefined;\n    var value = void 0;\n\n    if (isObjectLike) {\n      if (features.EMBER_METAL_ES5_GETTERS) {\n        descriptor = descriptorFor(obj, keyName);\n      }\n\n      if (!features.EMBER_METAL_ES5_GETTERS || descriptor === undefined) {\n        value = obj[keyName];\n\n        if (features.DESCRIPTOR_TRAP && isDescriptorTrap(value)) {\n          descriptor = value[DESCRIPTOR];\n        } else if (isDescriptor(value)) {\n          descriptor = value;\n        }\n      }\n\n      if (descriptor !== undefined) {\n        return descriptor.get(obj, keyName);\n      }\n    } else {\n      value = obj[keyName];\n    }\n\n    if (isPath(keyName)) {\n      return _getPath(obj, keyName);\n    } else if (value === undefined && isObject && !(keyName in obj) && typeof obj.unknownProperty === 'function') {\n      return obj.unknownProperty(keyName);\n    } else {\n      return value;\n    }\n  }\n\n  function _getPath(root, path) {\n    var obj = root;\n    var parts = path.split('.');\n\n    for (var i = 0; i < parts.length; i++) {\n      if (!isGettable(obj)) {\n        return undefined;\n      }\n\n      obj = get(obj, parts[i]);\n\n      if (obj && obj.isDestroyed) {\n        return undefined;\n      }\n    }\n\n    return obj;\n  }\n\n  function isGettable(obj) {\n    return obj !== undefined && obj !== null && ALLOWABLE_TYPES[typeof obj];\n  }\n\n  /**\n    Retrieves the value of a property from an Object, or a default value in the\n    case that the property returns `undefined`.\n  \n    ```javascript\n    import { getWithDefault } from '@ember/object';\n    getWithDefault(person, 'lastName', 'Doe');\n    ```\n  \n    @method getWithDefault\n    @for @ember/object\n    @static\n    @param {Object} obj The object to retrieve from.\n    @param {String} keyName The name of the property to retrieve\n    @param {Object} defaultValue The value to return if the property value is undefined\n    @return {Object} The property value or the defaultValue.\n    @public\n  */\n  function getWithDefault(root, key, defaultValue) {\n    var value = get(root, key);\n\n    if (value === undefined) {\n      return defaultValue;\n    }\n    return value;\n  }\n\n  /**\n   @module @ember/object\n  */\n  /**\n    Sets the value of a property on an object, respecting computed properties\n    and notifying observers and other listeners of the change. If the\n    property is not defined but the object implements the `setUnknownProperty`\n    method then that will be invoked as well.\n  \n    ```javascript\n    import { set } from '@ember/object';\n    set(obj, \"name\", value);\n    ```\n  \n    @method set\n    @static\n    @for @ember/object\n    @param {Object} obj The object to modify.\n    @param {String} keyName The property key to set\n    @param {Object} value The value to set\n    @return {Object} the passed value.\n    @public\n  */\n  function set(obj, keyName, value, tolerant) {\n    true && !(arguments.length === 3 || arguments.length === 4) && emberDebug.assert('Set must be called with three or four arguments; an object, a property key, a value and tolerant true/false', arguments.length === 3 || arguments.length === 4);\n    true && !(obj && typeof obj === 'object' || typeof obj === 'function') && emberDebug.assert('Cannot call set with \\'' + keyName + '\\' on an undefined object.', obj && typeof obj === 'object' || typeof obj === 'function');\n    true && !(typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName)) && emberDebug.assert('The key provided to set must be a string or number, you passed ' + keyName, typeof keyName === 'string' || typeof keyName === 'number' && !isNaN(keyName));\n    true && !(typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0) && emberDebug.assert('\\'this\\' in paths is not supported', typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0);\n    true && !!obj.isDestroyed && emberDebug.assert('calling set on destroyed object: ' + emberUtils.toString(obj) + '.' + keyName + ' = ' + emberUtils.toString(value), !obj.isDestroyed);\n\n    if (isPath(keyName)) {\n      return setPath(obj, keyName, value, tolerant);\n    }\n\n    if (features.EMBER_METAL_ES5_GETTERS) {\n      var possibleDesc = descriptorFor(obj, keyName);\n\n      if (possibleDesc !== undefined) {\n        /* computed property */\n        possibleDesc.set(obj, keyName, value);\n        return value;\n      }\n    }\n\n    var currentValue = obj[keyName];\n\n    if (features.DESCRIPTOR_TRAP && isDescriptorTrap(currentValue)) {\n      currentValue = currentValue[DESCRIPTOR];\n    }\n\n    if (isDescriptor(currentValue)) {\n      /* computed property */\n      currentValue.set(obj, keyName, value);\n    } else if (currentValue === undefined && 'object' === typeof obj && !(keyName in obj) && typeof obj.setUnknownProperty === 'function') {\n      /* unknown property */\n      obj.setUnknownProperty(keyName, value);\n    } else if (currentValue === value) {/* no change */\n    } else {\n      var meta$$1 = peekMeta(obj);\n      propertyWillChange(obj, keyName, meta$$1);\n\n      if (features.MANDATORY_SETTER) {\n        setWithMandatorySetter(meta$$1, obj, keyName, value);\n      } else {\n        obj[keyName] = value;\n      }\n\n      propertyDidChange(obj, keyName, meta$$1);\n    }\n\n    return value;\n  }\n\n  if (features.MANDATORY_SETTER) {\n    var setWithMandatorySetter = function (meta$$1, obj, keyName, value) {\n      if (meta$$1 !== undefined && meta$$1.peekWatching(keyName) > 0) {\n        makeEnumerable(obj, keyName);\n        meta$$1.writeValue(obj, keyName, value);\n      } else {\n        obj[keyName] = value;\n      }\n    };\n\n    var makeEnumerable = function (obj, key) {\n      var desc = Object.getOwnPropertyDescriptor(obj, key);\n\n      if (desc && desc.set && desc.set.isMandatorySetter) {\n        desc.enumerable = true;\n        Object.defineProperty(obj, key, desc);\n      }\n    };\n  }\n\n  function setPath(root, path, value, tolerant) {\n    var parts = path.split('.');\n    var keyName = parts.pop();\n\n    true && !(keyName.trim().length > 0) && emberDebug.assert('Property set failed: You passed an empty path', keyName.trim().length > 0);\n\n    var newPath = parts.join('.');\n\n    var newRoot = _getPath(root, newPath);\n\n    if (newRoot) {\n      return set(newRoot, keyName, value);\n    } else if (!tolerant) {\n      throw new emberDebug.Error('Property set failed: object in path \"' + newPath + '\" could not be found or was destroyed.');\n    }\n  }\n\n  /**\n    Error-tolerant form of `set`. Will not blow up if any part of the\n    chain is `undefined`, `null`, or destroyed.\n  \n    This is primarily used when syncing bindings, which may try to update after\n    an object has been destroyed.\n  \n    @method trySet\n    @static\n    @for @ember/object\n    @param {Object} root The object to modify.\n    @param {String} path The property path to set\n    @param {Object} value The value to set\n    @public\n  */\n  function trySet(root, path, value) {\n    return set(root, path, value, true);\n  }\n\n  /**\n  @module @ember/object\n  */\n\n  var END_WITH_EACH_REGEX = /\\.@each$/;\n\n  /**\n    Expands `pattern`, invoking `callback` for each expansion.\n  \n    The only pattern supported is brace-expansion, anything else will be passed\n    once to `callback` directly.\n  \n    Example\n  \n    ```js\n    import { expandProperties } from '@ember/object/computed';\n  \n    function echo(arg){ console.log(arg); }\n  \n    expandProperties('foo.bar', echo);              //=> 'foo.bar'\n    expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\n    expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\n    expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'\n    expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'\n    expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\n    expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n    ```\n  \n    @method expandProperties\n    @static\n    @for @ember/object\n    @public\n    @param {String} pattern The property pattern to expand.\n    @param {Function} callback The callback to invoke.  It is invoked once per\n    expansion, and is passed the expansion.\n  */\n  function expandProperties(pattern, callback) {\n    true && !(typeof pattern === 'string') && emberDebug.assert('A computed property key must be a string, you passed ' + typeof pattern + ' ' + pattern, typeof pattern === 'string');\n    true && !(pattern.indexOf(' ') === -1) && emberDebug.assert('Brace expanded properties cannot contain spaces, e.g. \"user.{firstName, lastName}\" should be \"user.{firstName,lastName}\"', pattern.indexOf(' ') === -1);\n    // regex to look for double open, double close, or unclosed braces\n\n    true && !(pattern.match(/\\{[^}{]*\\{|\\}[^}{]*\\}|\\{[^}]*$/g) === null) && emberDebug.assert('Brace expanded properties have to be balanced and cannot be nested, pattern: ' + pattern, pattern.match(/\\{[^}{]*\\{|\\}[^}{]*\\}|\\{[^}]*$/g) === null);\n\n    var start = pattern.indexOf('{');\n    if (start < 0) {\n      callback(pattern.replace(END_WITH_EACH_REGEX, '.[]'));\n    } else {\n      dive('', pattern, start, callback);\n    }\n  }\n\n  function dive(prefix, pattern, start, callback) {\n    var end = pattern.indexOf('}'),\n        i = 0,\n        newStart = void 0,\n        arrayLength = void 0;\n    var tempArr = pattern.substring(start + 1, end).split(',');\n    var after = pattern.substring(end + 1);\n    prefix = prefix + pattern.substring(0, start);\n\n    arrayLength = tempArr.length;\n    while (i < arrayLength) {\n      newStart = after.indexOf('{');\n      if (newStart < 0) {\n        callback((prefix + tempArr[i++] + after).replace(END_WITH_EACH_REGEX, '.[]'));\n      } else {\n        dive(prefix + tempArr[i++], after, newStart, callback);\n      }\n    }\n  }\n\n  // ..........................................................\n  // DEPENDENT KEYS\n  //\n\n  function addDependentKeys(desc, obj, keyName, meta) {\n    // the descriptor has a list of dependent keys, so\n    // add all of its dependent keys.\n    var depKeys = desc._dependentKeys;\n    if (depKeys === null || depKeys === undefined) {\n      return;\n    }\n\n    for (var idx = 0; idx < depKeys.length; idx++) {\n      var depKey = depKeys[idx];\n      // Increment the number of times depKey depends on keyName.\n      meta.writeDeps(depKey, keyName, (meta.peekDeps(depKey, keyName) || 0) + 1);\n      // Watch the depKey\n      watch(obj, depKey, meta);\n    }\n  }\n\n  function removeDependentKeys(desc, obj, keyName, meta) {\n    // the descriptor has a list of dependent keys, so\n    // remove all of its dependent keys.\n    var depKeys = desc._dependentKeys;\n    if (depKeys === null || depKeys === undefined) {\n      return;\n    }\n\n    for (var idx = 0; idx < depKeys.length; idx++) {\n      var depKey = depKeys[idx];\n      // Decrement the number of times depKey depends on keyName.\n      meta.writeDeps(depKey, keyName, (meta.peekDeps(depKey, keyName) || 0) - 1);\n      // Unwatch the depKey\n      unwatch(obj, depKey, meta);\n    }\n  }\n\n  /**\n  @module @ember/object\n  */\n\n  var DEEP_EACH_REGEX = /\\.@each\\.[^.]+\\./;\n\n  /**\n    A computed property transforms an object literal with object's accessor function(s) into a property.\n  \n    By default the function backing the computed property will only be called\n    once and the result will be cached. You can specify various properties\n    that your computed property depends on. This will force the cached\n    result to be recomputed if the dependencies are modified.\n  \n    In the following example we declare a computed property - `fullName` - by calling\n    `computed` with property dependencies (`firstName` and `lastName`) as leading arguments and getter accessor function. The `fullName` getter function\n    will be called once (regardless of how many times it is accessed) as long\n    as its dependencies have not changed. Once `firstName` or `lastName` are updated\n    any future calls (or anything bound) to `fullName` will incorporate the new\n    values.\n  \n    ```javascript\n    import EmberObject, { computed } from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      // these will be supplied by `create`\n      firstName: null,\n      lastName: null,\n  \n      fullName: computed('firstName', 'lastName', function() {\n        let firstName = this.get('firstName'),\n            lastName  = this.get('lastName');\n  \n        return `${firstName} ${lastName}`;\n      })\n    });\n  \n    let tom = Person.create({\n      firstName: 'Tom',\n      lastName: 'Dale'\n    });\n  \n    tom.get('fullName') // 'Tom Dale'\n    ```\n  \n    You can also define what Ember should do when setting a computed property by providing additional function (`set`) in hash argument.\n    If you try to set a computed property, it will try to invoke setter accessor function with the key and\n    value you want to set it to as arguments.\n  \n    ```javascript\n    import EmberObject, { computed } from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      // these will be supplied by `create`\n      firstName: null,\n      lastName: null,\n  \n      fullName: computed('firstName', 'lastName', {\n        get(key) {\n          let firstName = this.get('firstName'),\n              lastName  = this.get('lastName');\n  \n          return firstName + ' ' + lastName;\n        },\n        set(key, value) {\n          let [firstName, lastName] = value.split(' ');\n  \n          this.set('firstName', firstName);\n          this.set('lastName', lastName);\n  \n          return value;\n        }\n      })\n    });\n  \n    let person = Person.create();\n  \n    person.set('fullName', 'Peter Wagenet');\n    person.get('firstName'); // 'Peter'\n    person.get('lastName');  // 'Wagenet'\n    ```\n  \n    You can overwrite computed property with normal property (no longer computed), that won't change if dependencies change, if you set computed property and it won't have setter accessor function defined.\n  \n    You can also mark computed property as `.readOnly()` and block all attempts to set it.\n  \n    ```javascript\n    import EmberObject, { computed } from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      // these will be supplied by `create`\n      firstName: null,\n      lastName: null,\n  \n      fullName: computed('firstName', 'lastName', {\n        get(key) {\n          let firstName = this.get('firstName');\n          let lastName  = this.get('lastName');\n  \n          return firstName + ' ' + lastName;\n        }\n      }).readOnly()\n    });\n  \n    let person = Person.create();\n    person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property \"fullName\" on object: <(...):emberXXX>\n    ```\n  \n    Additional resources:\n    - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)\n    - [New computed syntax explained in \"Ember 1.12 released\" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)\n  \n    @class ComputedProperty\n    @public\n  */\n  function ComputedProperty(config, opts) {\n    this.isDescriptor = true;\n    var hasGetterOnly = typeof config === 'function';\n    if (hasGetterOnly) {\n      this._getter = config;\n    } else {\n      true && !(typeof config === 'object' && !Array.isArray(config)) && emberDebug.assert('computed expects a function or an object as last argument.', typeof config === 'object' && !Array.isArray(config));\n      true && !Object.keys(config).every(function (key) {\n        return key === 'get' || key === 'set';\n      }) && emberDebug.assert('Config object passed to computed can only contain `get` or `set` keys.', Object.keys(config).every(function (key) {\n        return key === 'get' || key === 'set';\n      }));\n\n      this._getter = config.get;\n      this._setter = config.set;\n    }\n    true && !(!!this._getter || !!this._setter) && emberDebug.assert('Computed properties must receive a getter or a setter, you passed none.', !!this._getter || !!this._setter);\n\n    this._suspended = undefined;\n    this._meta = undefined;\n    this._volatile = false;\n\n    this._dependentKeys = opts && opts.dependentKeys;\n    this._readOnly = opts && hasGetterOnly && opts.readOnly === true;\n  }\n\n  ComputedProperty.prototype = new Descriptor();\n  ComputedProperty.prototype.constructor = ComputedProperty;\n\n  var ComputedPropertyPrototype = ComputedProperty.prototype;\n\n  /**\n    Call on a computed property to set it into non-cached mode. When in this\n    mode the computed property will not automatically cache the return value.\n  \n    It also does not automatically fire any change events. You must manually notify\n    any changes if you want to observe this property.\n  \n    Dependency keys have no effect on volatile properties as they are for cache\n    invalidation and notification when cached value is invalidated.\n  \n    ```javascript\n    import EmberObject, { computed } from '@ember/object';\n  \n    let outsideService = EmberObject.extend({\n      value: computed(function() {\n        return OutsideService.getValue();\n      }).volatile()\n    }).create();\n    ```\n  \n    @method volatile\n    @return {ComputedProperty} this\n    @chainable\n    @public\n  */\n  ComputedPropertyPrototype.volatile = function () {\n    this._volatile = true;\n    return this;\n  };\n\n  /**\n    Call on a computed property to set it into read-only mode. When in this\n    mode the computed property will throw an error when set.\n  \n    ```javascript\n    import EmberObject, { computed } from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      guid: computed(function() {\n        return 'guid-guid-guid';\n      }).readOnly()\n    });\n  \n    let person = Person.create();\n  \n    person.set('guid', 'new-guid'); // will throw an exception\n    ```\n  \n    @method readOnly\n    @return {ComputedProperty} this\n    @chainable\n    @public\n  */\n  ComputedPropertyPrototype.readOnly = function () {\n    this._readOnly = true;\n    true && !!(this._readOnly && this._setter && this._setter !== this._getter) && emberDebug.assert('Computed properties that define a setter using the new syntax cannot be read-only', !(this._readOnly && this._setter && this._setter !== this._getter));\n\n    return this;\n  };\n\n  /**\n    Sets the dependent keys on this computed property. Pass any number of\n    arguments containing key paths that this computed property depends on.\n  \n    ```javascript\n    import EmberObject, { computed } from '@ember/object';\n  \n    let President = EmberObject.extend({\n      fullName: computed('firstName', 'lastName', function() {\n        return this.get('firstName') + ' ' + this.get('lastName');\n  \n        // Tell Ember that this computed property depends on firstName\n        // and lastName\n      })\n    });\n  \n    let president = President.create({\n      firstName: 'Barack',\n      lastName: 'Obama'\n    });\n  \n    president.get('fullName'); // 'Barack Obama'\n    ```\n  \n    @method property\n    @param {String} path* zero or more property paths\n    @return {ComputedProperty} this\n    @chainable\n    @public\n  */\n  ComputedPropertyPrototype.property = function () {\n    var args = [];\n\n    function addArg(property) {\n      true && emberDebug.warn('Dependent keys containing @each only work one level deep. ' + ('You used the key \"' + property + '\" which is invalid. ') + 'Please create an intermediary computed property.', DEEP_EACH_REGEX.test(property) === false, { id: 'ember-metal.computed-deep-each' });\n\n      args.push(property);\n    }\n\n    for (var i = 0; i < arguments.length; i++) {\n      expandProperties(arguments[i], addArg);\n    }\n\n    this._dependentKeys = args;\n    return this;\n  };\n\n  /**\n    In some cases, you may want to annotate computed properties with additional\n    metadata about how they function or what values they operate on. For example,\n    computed property functions may close over variables that are then no longer\n    available for introspection.\n  \n    You can pass a hash of these values to a computed property like this:\n  \n    ```\n    import { computed } from '@ember/object';\n    import Person from 'my-app/utils/person';\n  \n    person: computed(function() {\n      let personId = this.get('personId');\n      return Person.create({ id: personId });\n    }).meta({ type: Person })\n    ```\n  \n    The hash that you pass to the `meta()` function will be saved on the\n    computed property descriptor under the `_meta` key. Ember runtime\n    exposes a public API for retrieving these values from classes,\n    via the `metaForProperty()` function.\n  \n    @method meta\n    @param {Object} meta\n    @chainable\n    @public\n  */\n  ComputedPropertyPrototype.meta = function (meta$$1) {\n    if (arguments.length === 0) {\n      return this._meta || {};\n    } else {\n      this._meta = meta$$1;\n      return this;\n    }\n  };\n\n  // invalidate cache when CP key changes\n  ComputedPropertyPrototype.didChange = function (obj, keyName) {\n    // _suspended is set via a CP.set to ensure we don't clear\n    // the cached value set by the setter\n    if (this._volatile || this._suspended === obj) {\n      return;\n    }\n\n    // don't create objects just to invalidate\n    var meta$$1 = peekMeta(obj);\n    if (meta$$1 === undefined || meta$$1.source !== obj) {\n      return;\n    }\n\n    var cache = meta$$1.readableCache();\n    if (cache !== undefined && cache[keyName] !== undefined) {\n      cache[keyName] = undefined;\n      removeDependentKeys(this, obj, keyName, meta$$1);\n    }\n  };\n\n  ComputedPropertyPrototype.get = function (obj, keyName) {\n    if (this._volatile) {\n      return this._getter.call(obj, keyName);\n    }\n\n    var meta$$1 = meta(obj);\n    var cache = meta$$1.writableCache();\n\n    var result = cache[keyName];\n    if (result === UNDEFINED) {\n      return undefined;\n    } else if (result !== undefined) {\n      return result;\n    }\n\n    var ret = this._getter.call(obj, keyName);\n\n    cache[keyName] = ret === undefined ? UNDEFINED : ret;\n\n    var chainWatchers = meta$$1.readableChainWatchers();\n    if (chainWatchers !== undefined) {\n      chainWatchers.revalidate(keyName);\n    }\n    addDependentKeys(this, obj, keyName, meta$$1);\n\n    return ret;\n  };\n\n  ComputedPropertyPrototype.set = function computedPropertySetEntry(obj, keyName, value) {\n    if (this._readOnly) {\n      this._throwReadOnlyError(obj, keyName);\n    }\n\n    if (!this._setter) {\n      return this.clobberSet(obj, keyName, value);\n    }\n\n    if (this._volatile) {\n      return this.volatileSet(obj, keyName, value);\n    }\n\n    return this.setWithSuspend(obj, keyName, value);\n  };\n\n  ComputedPropertyPrototype._throwReadOnlyError = function computedPropertyThrowReadOnlyError(obj, keyName) {\n    throw new emberDebug.Error('Cannot set read-only property \"' + keyName + '\" on object: ' + emberUtils.inspect(obj));\n  };\n\n  ComputedPropertyPrototype.clobberSet = function computedPropertyClobberSet(obj, keyName, value) {\n    var cachedValue = cacheFor(obj, keyName);\n    defineProperty(obj, keyName, null, cachedValue);\n    set(obj, keyName, value);\n    return value;\n  };\n\n  ComputedPropertyPrototype.volatileSet = function computedPropertyVolatileSet(obj, keyName, value) {\n    return this._setter.call(obj, keyName, value);\n  };\n\n  ComputedPropertyPrototype.setWithSuspend = function computedPropertySetWithSuspend(obj, keyName, value) {\n    var oldSuspended = this._suspended;\n    this._suspended = obj;\n    try {\n      return this._set(obj, keyName, value);\n    } finally {\n      this._suspended = oldSuspended;\n    }\n  };\n\n  ComputedPropertyPrototype._set = function computedPropertySet(obj, keyName, value) {\n    var meta$$1 = meta(obj);\n    var cache = meta$$1.writableCache();\n\n    var val = cache[keyName];\n    var hadCachedValue = val !== undefined;\n\n    var cachedValue = void 0;\n    if (hadCachedValue && val !== UNDEFINED) {\n      cachedValue = val;\n    }\n\n    var ret = this._setter.call(obj, keyName, value, cachedValue);\n\n    // allows setter to return the same value that is cached already\n    if (hadCachedValue && cachedValue === ret) {\n      return ret;\n    }\n\n    propertyWillChange(obj, keyName, meta$$1);\n\n    if (!hadCachedValue) {\n      addDependentKeys(this, obj, keyName, meta$$1);\n    }\n\n    cache[keyName] = ret === undefined ? UNDEFINED : ret;\n\n    propertyDidChange(obj, keyName, meta$$1);\n\n    return ret;\n  };\n\n  /* called before property is overridden */\n  ComputedPropertyPrototype.teardown = function (obj, keyName, meta$$1) {\n    if (this._volatile) {\n      return;\n    }\n    var cache = meta$$1.readableCache();\n    if (cache !== undefined && cache[keyName] !== undefined) {\n      removeDependentKeys(this, obj, keyName, meta$$1);\n      cache[keyName] = undefined;\n    }\n  };\n\n  /**\n    This helper returns a new property descriptor that wraps the passed\n    computed property function. You can use this helper to define properties\n    with mixins or via `defineProperty()`.\n  \n    If you pass a function as an argument, it will be used as a getter. A computed\n    property defined in this way might look like this:\n  \n    ```js\n    import EmberObject, { computed } from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      init() {\n        this._super(...arguments);\n  \n        this.firstName = 'Betty';\n        this.lastName = 'Jones';\n      },\n  \n      fullName: computed('firstName', 'lastName', function() {\n        return `${this.get('firstName')} ${this.get('lastName')}`;\n      })\n    });\n  \n    let client = Person.create();\n  \n    client.get('fullName'); // 'Betty Jones'\n  \n    client.set('lastName', 'Fuller');\n    client.get('fullName'); // 'Betty Fuller'\n    ```\n  \n    You can pass a hash with two functions, `get` and `set`, as an\n    argument to provide both a getter and setter:\n  \n    ```js\n    import EmberObject, { computed } from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      init() {\n        this._super(...arguments);\n  \n        this.firstName = 'Betty';\n        this.lastName = 'Jones';\n      },\n  \n      fullName: computed('firstName', 'lastName', {\n        get(key) {\n          return `${this.get('firstName')} ${this.get('lastName')}`;\n        },\n        set(key, value) {\n          let [firstName, lastName] = value.split(/\\s+/);\n          this.setProperties({ firstName, lastName });\n          return value;\n        }\n      })\n    });\n  \n    let client = Person.create();\n    client.get('firstName'); // 'Betty'\n  \n    client.set('fullName', 'Carroll Fuller');\n    client.get('firstName'); // 'Carroll'\n    ```\n  \n    The `set` function should accept two parameters, `key` and `value`. The value\n    returned from `set` will be the new value of the property.\n  \n    _Note: This is the preferred way to define computed properties when writing third-party\n    libraries that depend on or use Ember, since there is no guarantee that the user\n    will have [prototype Extensions](https://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/) enabled._\n  \n    The alternative syntax, with prototype extensions, might look like:\n  \n    ```js\n    fullName: function() {\n      return this.get('firstName') + ' ' + this.get('lastName');\n    }.property('firstName', 'lastName')\n    ```\n  \n    @method computed\n    @for @ember/object\n    @static\n    @param {String} [dependentKeys*] Optional dependent keys that trigger this computed property.\n    @param {Function} func The computed property function.\n    @return {ComputedProperty} property descriptor instance\n    @public\n  */\n  function computed() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var func = args.pop();\n\n    var cp = new ComputedProperty(func);\n\n    if (args.length > 0) {\n      cp.property.apply(cp, args);\n    }\n\n    return cp;\n  }\n\n  /**\n    Returns the cached value for a property, if one exists.\n    This can be useful for peeking at the value of a computed\n    property that is generated lazily, without accidentally causing\n    it to be created.\n  \n    @method cacheFor\n    @static\n    @for @ember/object/internals\n    @param {Object} obj the object whose property you want to check\n    @param {String} key the name of the property whose cached value you want\n      to return\n    @return {Object} the cached value\n    @public\n  */\n  function cacheFor(obj, key) {\n    var meta$$1 = peekMeta(obj);\n    var cache = meta$$1 !== undefined ? meta$$1.source === obj && meta$$1.readableCache() : undefined;\n    var ret = cache !== undefined ? cache[key] : undefined;\n\n    if (ret === UNDEFINED) {\n      return undefined;\n    }\n    return ret;\n  }\n\n  cacheFor.set = function (cache, key, value) {\n    if (value === undefined) {\n      cache[key] = UNDEFINED;\n    } else {\n      cache[key] = value;\n    }\n  };\n\n  cacheFor.get = function (cache, key) {\n    var ret = cache[key];\n    if (ret === UNDEFINED) {\n      return undefined;\n    }\n    return ret;\n  };\n\n  cacheFor.remove = function (cache, key) {\n    cache[key] = undefined;\n  };\n\n  var CONSUMED = {};\n\n  function alias(altKey) {\n    return new AliasedProperty(altKey);\n  }\n\n  var AliasedProperty = function (_Descriptor) {\n    emberBabel.inherits(AliasedProperty, _Descriptor);\n\n    function AliasedProperty(altKey) {\n      emberBabel.classCallCheck(this, AliasedProperty);\n\n      var _this = emberBabel.possibleConstructorReturn(this, _Descriptor.call(this));\n\n      _this.isDescriptor = true;\n      _this.altKey = altKey;\n      _this._dependentKeys = [altKey];\n      return _this;\n    }\n\n    AliasedProperty.prototype.setup = function setup(obj, keyName) {\n      true && !(this.altKey !== keyName) && emberDebug.assert('Setting alias \\'' + keyName + '\\' on self', this.altKey !== keyName);\n\n      var meta$$1 = meta(obj);\n      if (meta$$1.peekWatching(keyName)) {\n        addDependentKeys(this, obj, keyName, meta$$1);\n      }\n    };\n\n    AliasedProperty.prototype.teardown = function teardown(obj, keyName, meta$$1) {\n      if (meta$$1.peekWatching(keyName)) {\n        removeDependentKeys(this, obj, keyName, meta$$1);\n      }\n    };\n\n    AliasedProperty.prototype.willWatch = function willWatch(obj, keyName, meta$$1) {\n      addDependentKeys(this, obj, keyName, meta$$1);\n    };\n\n    AliasedProperty.prototype.didUnwatch = function didUnwatch(obj, keyName, meta$$1) {\n      removeDependentKeys(this, obj, keyName, meta$$1);\n    };\n\n    AliasedProperty.prototype.get = function get$$1(obj, keyName) {\n      var ret = get(obj, this.altKey);\n      var meta$$1 = meta(obj);\n      var cache = meta$$1.writableCache();\n      if (cache[keyName] !== CONSUMED) {\n        cache[keyName] = CONSUMED;\n        addDependentKeys(this, obj, keyName, meta$$1);\n      }\n      return ret;\n    };\n\n    AliasedProperty.prototype.set = function set$$1(obj, keyName, value) {\n      return set(obj, this.altKey, value);\n    };\n\n    AliasedProperty.prototype.readOnly = function readOnly() {\n      this.set = AliasedProperty_readOnlySet;\n      return this;\n    };\n\n    AliasedProperty.prototype.oneWay = function oneWay() {\n      this.set = AliasedProperty_oneWaySet;\n      return this;\n    };\n\n    return AliasedProperty;\n  }(Descriptor);\n\n  function AliasedProperty_readOnlySet(obj, keyName, value) {\n    // eslint-disable-line no-unused-vars\n    throw new emberDebug.Error('Cannot set read-only property \\'' + keyName + '\\' on object: ' + emberUtils.inspect(obj));\n  }\n\n  function AliasedProperty_oneWaySet(obj, keyName, value) {\n    defineProperty(obj, keyName, null);\n    return set(obj, keyName, value);\n  }\n\n  // Backwards compatibility with Ember Data.\n  AliasedProperty.prototype._meta = undefined;\n  AliasedProperty.prototype.meta = ComputedProperty.prototype.meta;\n\n  /**\n   @module @ember/polyfills\n  */\n  /**\n    Merge the contents of two objects together into the first object.\n  \n    ```javascript\n    import { merge } from '@ember/polyfills';\n  \n    merge({ first: 'Tom' }, { last: 'Dale' }); // { first: 'Tom', last: 'Dale' }\n    var a = { first: 'Yehuda' };\n    var b = { last: 'Katz' };\n    merge(a, b); // a == { first: 'Yehuda', last: 'Katz' }, b == { last: 'Katz' }\n    ```\n  \n    @method merge\n    @static\n    @for @ember/polyfills\n    @param {Object} original The object to merge into\n    @param {Object} updates The object to copy properties from\n    @return {Object}\n    @public\n  */\n  function merge(original, updates) {\n    if (updates === null || typeof updates !== 'object') {\n      return original;\n    }\n\n    var props = Object.keys(updates);\n    var prop = void 0;\n\n    for (var i = 0; i < props.length; i++) {\n      prop = props[i];\n      original[prop] = updates[prop];\n    }\n\n    return original;\n  }\n\n  /**\n  @module ember\n  */\n\n  /**\n    Used internally to allow changing properties in a backwards compatible way, and print a helpful\n    deprecation warning.\n  \n    @method deprecateProperty\n    @param {Object} object The object to add the deprecated property to.\n    @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).\n    @param {String} newKey The property that will be aliased.\n    @private\n    @since 1.7.0\n  */\n\n  function deprecateProperty(object, deprecatedKey, newKey, options) {\n    function _deprecate() {\n      true && !false && emberDebug.deprecate('Usage of `' + deprecatedKey + '` is deprecated, use `' + newKey + '` instead.', false, options);\n    }\n\n    Object.defineProperty(object, deprecatedKey, {\n      configurable: true,\n      enumerable: false,\n      set: function (value) {\n        _deprecate();\n        set(this, newKey, value);\n      },\n      get: function () {\n        _deprecate();\n        return get(this, newKey);\n      }\n    });\n  }\n\n  /* eslint no-console:off */\n  /* global console */\n\n  /**\n  @module @ember/instrumentation\n  @private\n  */\n\n  /**\n    The purpose of the Ember Instrumentation module is\n    to provide efficient, general-purpose instrumentation\n    for Ember.\n  \n    Subscribe to a listener by using `subscribe`:\n  \n    ```javascript\n    import { subscribe } from '@ember/instrumentation';\n  \n    subscribe(\"render\", {\n      before(name, timestamp, payload) {\n  \n      },\n  \n      after(name, timestamp, payload) {\n  \n      }\n    });\n    ```\n  \n    If you return a value from the `before` callback, that same\n    value will be passed as a fourth parameter to the `after`\n    callback.\n  \n    Instrument a block of code by using `instrument`:\n  \n    ```javascript\n    import { instrument } from '@ember/instrumentation';\n  \n    instrument(\"render.handlebars\", payload, function() {\n      // rendering logic\n    }, binding);\n    ```\n  \n    Event names passed to `instrument` are namespaced\n    by periods, from more general to more specific. Subscribers\n    can listen for events by whatever level of granularity they\n    are interested in.\n  \n    In the above example, the event is `render.handlebars`,\n    and the subscriber listened for all events beginning with\n    `render`. It would receive callbacks for events named\n    `render`, `render.handlebars`, `render.container`, or\n    even `render.handlebars.layout`.\n  \n    @class Instrumentation\n    @static\n    @private\n  */\n  var subscribers = [];\n  var cache = {};\n\n  function populateListeners(name) {\n    var listeners = [];\n    var subscriber = void 0;\n\n    for (var i = 0; i < subscribers.length; i++) {\n      subscriber = subscribers[i];\n      if (subscriber.regex.test(name)) {\n        listeners.push(subscriber.object);\n      }\n    }\n\n    cache[name] = listeners;\n    return listeners;\n  }\n\n  var time = function () {\n    var perf = 'undefined' !== typeof window ? window.performance || {} : {};\n    var fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;\n    // fn.bind will be available in all the browsers that support the advanced window.performance... ;-)\n    return fn ? fn.bind(perf) : function () {\n      return +new Date();\n    };\n  }();\n\n  /**\n    Notifies event's subscribers, calls `before` and `after` hooks.\n  \n    @method instrument\n    @for @ember/instrumentation\n    @static\n    @param {String} [name] Namespaced event name.\n    @param {Object} _payload\n    @param {Function} callback Function that you're instrumenting.\n    @param {Object} binding Context that instrument function is called with.\n    @private\n  */\n  function instrument(name, _payload, callback, binding) {\n    if (arguments.length <= 3 && typeof _payload === 'function') {\n      binding = callback;\n      callback = _payload;\n      _payload = undefined;\n    }\n    if (subscribers.length === 0) {\n      return callback.call(binding);\n    }\n    var payload = _payload || {};\n    var finalizer = _instrumentStart(name, function () {\n      return payload;\n    });\n\n    if (finalizer) {\n      return withFinalizer(callback, finalizer, payload, binding);\n    } else {\n      return callback.call(binding);\n    }\n  }\n\n  exports.flaggedInstrument = void 0;\n  if (features.EMBER_IMPROVED_INSTRUMENTATION) {\n    exports.flaggedInstrument = instrument;\n  } else {\n    exports.flaggedInstrument = function (name, payload, callback) {\n      return callback();\n    };\n  }\n  function withFinalizer(callback, finalizer, payload, binding) {\n    var result = void 0;\n    try {\n      result = callback.call(binding);\n    } catch (e) {\n      payload.exception = e;\n      result = payload;\n    } finally {\n      finalizer();\n    }\n    return result;\n  }\n\n  function NOOP() {}\n\n  // private for now\n  function _instrumentStart(name, _payload, _payloadParam) {\n    if (subscribers.length === 0) {\n      return NOOP;\n    }\n\n    var listeners = cache[name];\n\n    if (!listeners) {\n      listeners = populateListeners(name);\n    }\n\n    if (listeners.length === 0) {\n      return NOOP;\n    }\n\n    var payload = _payload(_payloadParam);\n\n    var STRUCTURED_PROFILE = emberEnvironment.ENV.STRUCTURED_PROFILE;\n    var timeName = void 0;\n    if (STRUCTURED_PROFILE) {\n      timeName = name + ': ' + payload.object;\n      console.time(timeName);\n    }\n\n    var beforeValues = new Array(listeners.length);\n    var i = void 0,\n        listener = void 0;\n    var timestamp = time();\n    for (i = 0; i < listeners.length; i++) {\n      listener = listeners[i];\n      beforeValues[i] = listener.before(name, timestamp, payload);\n    }\n\n    return function _instrumentEnd() {\n      var i = void 0,\n          listener = void 0;\n      var timestamp = time();\n      for (i = 0; i < listeners.length; i++) {\n        listener = listeners[i];\n        if (typeof listener.after === 'function') {\n          listener.after(name, timestamp, payload, beforeValues[i]);\n        }\n      }\n\n      if (STRUCTURED_PROFILE) {\n        console.timeEnd(timeName);\n      }\n    };\n  }\n\n  /**\n    Subscribes to a particular event or instrumented block of code.\n  \n    @method subscribe\n    @for @ember/instrumentation\n    @static\n  \n    @param {String} [pattern] Namespaced event name.\n    @param {Object} [object] Before and After hooks.\n  \n    @return {Subscriber}\n    @private\n  */\n  function subscribe(pattern, object) {\n    var paths = pattern.split('.');\n    var path = void 0;\n    var regex = [];\n\n    for (var i = 0; i < paths.length; i++) {\n      path = paths[i];\n      if (path === '*') {\n        regex.push('[^\\\\.]*');\n      } else {\n        regex.push(path);\n      }\n    }\n\n    regex = regex.join('\\\\.');\n    regex = regex + '(\\\\..*)?';\n\n    var subscriber = {\n      pattern: pattern,\n      regex: new RegExp('^' + regex + '$'),\n      object: object\n    };\n\n    subscribers.push(subscriber);\n    cache = {};\n\n    return subscriber;\n  }\n\n  /**\n    Unsubscribes from a particular event or instrumented block of code.\n  \n    @method unsubscribe\n    @for @ember/instrumentation\n    @static\n  \n    @param {Object} [subscriber]\n    @private\n  */\n  function unsubscribe(subscriber) {\n    var index = void 0;\n\n    for (var i = 0; i < subscribers.length; i++) {\n      if (subscribers[i] === subscriber) {\n        index = i;\n      }\n    }\n\n    subscribers.splice(index, 1);\n    cache = {};\n  }\n\n  /**\n    Resets `Instrumentation` by flushing list of subscribers.\n  \n    @method reset\n    @for @ember/instrumentation\n    @static\n    @private\n  */\n  function reset() {\n    subscribers.length = 0;\n    cache = {};\n  }\n\n  var onerror = void 0;\n  var onErrorTarget = {\n    get onerror() {\n      return onerror;\n    }\n  };\n\n  // Ember.onerror getter\n  function getOnerror() {\n    return onerror;\n  }\n  // Ember.onerror setter\n  function setOnerror(handler) {\n    onerror = handler;\n  }\n\n  var dispatchOverride = void 0;\n\n  // allows testing adapter to override dispatch\n  function getDispatchOverride() {\n    return dispatchOverride;\n  }\n  function setDispatchOverride(handler) {\n    dispatchOverride = handler;\n  }\n\n  /**\n   @module @ember/utils\n  */\n  /**\n    Returns true if the passed value is null or undefined. This avoids errors\n    from JSLint complaining about use of ==, which can be technically\n    confusing.\n  \n    ```javascript\n    isNone();              // true\n    isNone(null);          // true\n    isNone(undefined);     // true\n    isNone('');            // false\n    isNone([]);            // false\n    isNone(function() {}); // false\n    ```\n  \n    @method isNone\n    @static\n    @for @ember/utils\n    @param {Object} obj Value to test\n    @return {Boolean}\n    @public\n  */\n  function isNone(obj) {\n    return obj === null || obj === undefined;\n  }\n\n  /**\n   @module @ember/utils\n  */\n  /**\n    Verifies that a value is `null` or `undefined`, an empty string, or an empty\n    array.\n  \n    Constrains the rules on `isNone` by returning true for empty strings and\n    empty arrays.\n  \n    If the value is an object with a `size` property of type number, it is used\n    to check emptiness.\n  \n    ```javascript\n    isEmpty();                 // true\n    isEmpty(null);             // true\n    isEmpty(undefined);        // true\n    isEmpty('');               // true\n    isEmpty([]);               // true\n    isEmpty({ size: 0});       // true\n    isEmpty({});               // false\n    isEmpty('Adam Hawkins');   // false\n    isEmpty([0,1,2]);          // false\n    isEmpty('\\n\\t');           // false\n    isEmpty('  ');             // false\n    isEmpty({ size: 1 })       // false\n    isEmpty({ size: () => 0 }) // false\n    ```\n  \n    @method isEmpty\n    @static\n    @for @ember/utils\n    @param {Object} obj Value to test\n    @return {Boolean}\n    @public\n  */\n  function isEmpty(obj) {\n    var none = isNone(obj);\n    if (none) {\n      return none;\n    }\n\n    if (typeof obj.size === 'number') {\n      return !obj.size;\n    }\n\n    var objectType = typeof obj;\n\n    if (objectType === 'object') {\n      var size = get(obj, 'size');\n      if (typeof size === 'number') {\n        return !size;\n      }\n    }\n\n    if (typeof obj.length === 'number' && objectType !== 'function') {\n      return !obj.length;\n    }\n\n    if (objectType === 'object') {\n      var length = get(obj, 'length');\n      if (typeof length === 'number') {\n        return !length;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   @module @ember/utils\n  */\n  /**\n    A value is blank if it is empty or a whitespace string.\n  \n    ```javascript\n    import { isBlank } from '@ember/utils';\n  \n    isBlank();                // true\n    isBlank(null);            // true\n    isBlank(undefined);       // true\n    isBlank('');              // true\n    isBlank([]);              // true\n    isBlank('\\n\\t');          // true\n    isBlank('  ');            // true\n    isBlank({});              // false\n    isBlank('\\n\\t Hello');    // false\n    isBlank('Hello world');   // false\n    isBlank([1,2,3]);         // false\n    ```\n  \n    @method isBlank\n    @static\n    @for @ember/utils\n    @param {Object} obj Value to test\n    @return {Boolean}\n    @since 1.5.0\n    @public\n  */\n  function isBlank(obj) {\n    return isEmpty(obj) || typeof obj === 'string' && /\\S/.test(obj) === false;\n  }\n\n  /**\n   @module @ember/utils\n  */\n  /**\n    A value is present if it not `isBlank`.\n  \n    ```javascript\n    isPresent();                // false\n    isPresent(null);            // false\n    isPresent(undefined);       // false\n    isPresent('');              // false\n    isPresent('  ');            // false\n    isPresent('\\n\\t');          // false\n    isPresent([]);              // false\n    isPresent({ length: 0 })    // false\n    isPresent(false);           // true\n    isPresent(true);            // true\n    isPresent('string');        // true\n    isPresent(0);               // true\n    isPresent(function() {})    // true\n    isPresent({});              // true\n    isPresent(false);           // true\n    isPresent('\\n\\t Hello');    // true\n    isPresent([1,2,3]);         // true\n    ```\n  \n    @method isPresent\n    @static\n    @for @ember/utils\n    @param {Object} obj Value to test\n    @return {Boolean}\n    @since 1.8.0\n    @public\n  */\n  function isPresent(obj) {\n    return !isBlank(obj);\n  }\n\n  function onBegin(current) {\n    run.currentRunLoop = current;\n  }\n\n  function onEnd(current, next) {\n    run.currentRunLoop = next;\n  }\n\n  var backburner$1 = new Backburner(['sync', 'actions', 'destroy'], {\n    sync: {\n      before: beginPropertyChanges,\n      after: endPropertyChanges\n    },\n    defaultQueue: 'actions',\n    onBegin: onBegin,\n    onEnd: onEnd,\n    onErrorTarget: onErrorTarget,\n    onErrorMethod: 'onerror'\n  });\n\n  /**\n   @module @ember/runloop\n  */\n  // ..........................................................\n  // run - this is ideally the only public API the dev sees\n  //\n\n  /**\n    Runs the passed target and method inside of a RunLoop, ensuring any\n    deferred actions including bindings and views updates are flushed at the\n    end.\n  \n    Normally you should not need to invoke this method yourself. However if\n    you are implementing raw event handlers when interfacing with other\n    libraries or plugins, you should probably wrap all of your code inside this\n    call.\n  \n    ```javascript\n    import { run } from '@ember/runloop';\n  \n    run(function() {\n      // code to be executed within a RunLoop\n    });\n    ```\n    @method run\n    @for @ember/runloop\n    @static\n    @param {Object} [target] target of method to call\n    @param {Function|String} method Method to invoke.\n      May be a function or a string. If you pass a string\n      then it will be looked up on the passed target.\n    @param {Object} [args*] Any additional arguments you wish to pass to the method.\n    @return {Object} return value from invoking the passed function.\n    @public\n  */\n  function run() {\n    return backburner$1.run.apply(backburner$1, arguments);\n  }\n\n  /**\n    If no run-loop is present, it creates a new one. If a run loop is\n    present it will queue itself to run on the existing run-loops action\n    queue.\n  \n    Please note: This is not for normal usage, and should be used sparingly.\n  \n    If invoked when not within a run loop:\n  \n    ```javascript\n    import { join } from '@ember/runloop';\n  \n    join(function() {\n      // creates a new run-loop\n    });\n    ```\n  \n    Alternatively, if called within an existing run loop:\n  \n    ```javascript\n    import { run, join } from '@ember/runloop';\n  \n    run(function() {\n      // creates a new run-loop\n  \n      join(function() {\n        // joins with the existing run-loop, and queues for invocation on\n        // the existing run-loops action queue.\n      });\n    });\n    ```\n  \n    @method join\n    @static\n    @for @ember/runloop\n    @param {Object} [target] target of method to call\n    @param {Function|String} method Method to invoke.\n      May be a function or a string. If you pass a string\n      then it will be looked up on the passed target.\n    @param {Object} [args*] Any additional arguments you wish to pass to the method.\n    @return {Object} Return value from invoking the passed function. Please note,\n    when called within an existing loop, no return value is possible.\n    @public\n  */\n  run.join = function () {\n    return backburner$1.join.apply(backburner$1, arguments);\n  };\n\n  /**\n    Allows you to specify which context to call the specified function in while\n    adding the execution of that function to the Ember run loop. This ability\n    makes this method a great way to asynchronously integrate third-party libraries\n    into your Ember application.\n  \n    `bind` takes two main arguments, the desired context and the function to\n    invoke in that context. Any additional arguments will be supplied as arguments\n    to the function that is passed in.\n  \n    Let's use the creation of a TinyMCE component as an example. Currently,\n    TinyMCE provides a setup configuration option we can use to do some processing\n    after the TinyMCE instance is initialized but before it is actually rendered.\n    We can use that setup option to do some additional setup for our component.\n    The component itself could look something like the following:\n  \n    ```app/components/rich-text-editor.js\n    import Component from '@ember/component';\n    import { on } from '@ember/object/evented';\n    import { bind } from '@ember/runloop';\n  \n    export default Component.extend({\n      initializeTinyMCE: on('didInsertElement', function() {\n        tinymce.init({\n          selector: '#' + this.$().prop('id'),\n          setup: bind(this, this.setupEditor)\n        });\n      }),\n  \n      didInsertElement() {\n        tinymce.init({\n          selector: '#' + this.$().prop('id'),\n          setup: bind(this, this.setupEditor)\n        });\n      }\n  \n      setupEditor(editor) {\n        this.set('editor', editor);\n  \n        editor.on('change', function() {\n          console.log('content changed!');\n        });\n      }\n    });\n    ```\n  \n    In this example, we use `bind` to bind the setupEditor method to the\n    context of the RichTextEditor component and to have the invocation of that\n    method be safely handled and executed by the Ember run loop.\n  \n    @method bind\n    @static\n    @for @ember/runloop\n    @param {Object} [target] target of method to call\n    @param {Function|String} method Method to invoke.\n      May be a function or a string. If you pass a string\n      then it will be looked up on the passed target.\n    @param {Object} [args*] Any additional arguments you wish to pass to the method.\n    @return {Function} returns a new function that will always have a particular context\n    @since 1.4.0\n    @public\n  */\n  run.bind = function () {\n    for (var _len = arguments.length, curried = Array(_len), _key = 0; _key < _len; _key++) {\n      curried[_key] = arguments[_key];\n    }\n\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return run.join.apply(run, curried.concat(args));\n    };\n  };\n\n  run.backburner = backburner$1;\n  run.currentRunLoop = null;\n  run.queues = backburner$1.queueNames;\n\n  /**\n    Begins a new RunLoop. Any deferred actions invoked after the begin will\n    be buffered until you invoke a matching call to `run.end()`. This is\n    a lower-level way to use a RunLoop instead of using `run()`.\n  \n    ```javascript\n    import { begin, end } from '@ember/runloop';\n  \n    begin();\n    // code to be executed within a RunLoop\n    end();\n    ```\n  \n    @method begin\n    @static\n    @for @ember/runloop\n    @return {void}\n    @public\n  */\n  run.begin = function () {\n    backburner$1.begin();\n  };\n\n  /**\n    Ends a RunLoop. This must be called sometime after you call\n    `run.begin()` to flush any deferred actions. This is a lower-level way\n    to use a RunLoop instead of using `run()`.\n  \n    ```javascript\n    import { begin, end } from '@ember/runloop';\n  \n    begin();\n    // code to be executed within a RunLoop\n    end();\n    ```\n  \n    @method end\n    @static\n    @for @ember/runloop\n    @return {void}\n    @public\n  */\n  run.end = function () {\n    backburner$1.end();\n  };\n\n  /**\n    Array of named queues. This array determines the order in which queues\n    are flushed at the end of the RunLoop. You can define your own queues by\n    simply adding the queue name to this array. Normally you should not need\n    to inspect or modify this property.\n  \n    @property queues\n    @type Array\n    @default ['actions', 'destroy']\n    @private\n  */\n\n  /**\n    Adds the passed target/method and any optional arguments to the named\n    queue to be executed at the end of the RunLoop. If you have not already\n    started a RunLoop when calling this method one will be started for you\n    automatically.\n  \n    At the end of a RunLoop, any methods scheduled in this way will be invoked.\n    Methods will be invoked in an order matching the named queues defined in\n    the `run.queues` property.\n  \n    ```javascript\n    import { schedule } from '@ember/runloop';\n  \n    schedule('actions', this, function() {\n      // this will be executed in the 'actions' queue, after bindings have synced.\n      console.log('scheduled on actions queue');\n    });\n  \n    // Note the functions will be run in order based on the run queues order.\n    // Output would be:\n    //   scheduled on sync queue\n    //   scheduled on actions queue\n    ```\n  \n    @method schedule\n    @static\n    @for @ember/runloop\n    @param {String} queue The name of the queue to schedule against. Default queues is 'actions'\n    @param {Object} [target] target object to use as the context when invoking a method.\n    @param {String|Function} method The method to invoke. If you pass a string it\n      will be resolved on the target object at the time the scheduled item is\n      invoked allowing you to change the target function.\n    @param {Object} [arguments*] Optional arguments to be passed to the queued method.\n    @return {*} Timer information for use in canceling, see `run.cancel`.\n    @public\n  */\n  run.schedule = function (queue /*, target, method */) {\n    true && !(run.currentRunLoop || !emberDebug.isTesting()) && emberDebug.assert('You have turned on testing mode, which disabled the run-loop\\'s autorun. ' + 'You will need to wrap any code with asynchronous side-effects in a run', run.currentRunLoop || !emberDebug.isTesting());\n    true && !(queue !== 'sync') && emberDebug.deprecate('Scheduling into the \\'' + queue + '\\' run loop queue is deprecated.', queue !== 'sync', { id: 'ember-metal.run.sync', until: '3.5.0' });\n\n    return backburner$1.schedule.apply(backburner$1, arguments);\n  };\n\n  // Used by global test teardown\n  run.hasScheduledTimers = function () {\n    return backburner$1.hasTimers();\n  };\n\n  // Used by global test teardown\n  run.cancelTimers = function () {\n    backburner$1.cancelTimers();\n  };\n\n  /**\n    Invokes the passed target/method and optional arguments after a specified\n    period of time. The last parameter of this method must always be a number\n    of milliseconds.\n  \n    You should use this method whenever you need to run some action after a\n    period of time instead of using `setTimeout()`. This method will ensure that\n    items that expire during the same script execution cycle all execute\n    together, which is often more efficient than using a real setTimeout.\n  \n    ```javascript\n    import { later } from '@ember/runloop';\n  \n    later(myContext, function() {\n      // code here will execute within a RunLoop in about 500ms with this == myContext\n    }, 500);\n    ```\n  \n    @method later\n    @static\n    @for @ember/runloop\n    @param {Object} [target] target of method to invoke\n    @param {Function|String} method The method to invoke.\n      If you pass a string it will be resolved on the\n      target at the time the method is invoked.\n    @param {Object} [args*] Optional arguments to pass to the timeout.\n    @param {Number} wait Number of milliseconds to wait.\n    @return {*} Timer information for use in canceling, see `run.cancel`.\n    @public\n  */\n  run.later = function () /*target, method*/{\n    return backburner$1.later.apply(backburner$1, arguments);\n  };\n\n  /**\n    Schedule a function to run one time during the current RunLoop. This is equivalent\n    to calling `scheduleOnce` with the \"actions\" queue.\n  \n    @method once\n    @static\n    @for @ember/runloop\n    @param {Object} [target] The target of the method to invoke.\n    @param {Function|String} method The method to invoke.\n      If you pass a string it will be resolved on the\n      target at the time the method is invoked.\n    @param {Object} [args*] Optional arguments to pass to the timeout.\n    @return {Object} Timer information for use in canceling, see `run.cancel`.\n    @public\n  */\n  run.once = function () {\n    true && !(run.currentRunLoop || !emberDebug.isTesting()) && emberDebug.assert('You have turned on testing mode, which disabled the run-loop\\'s autorun. ' + 'You will need to wrap any code with asynchronous side-effects in a run', run.currentRunLoop || !emberDebug.isTesting());\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    args.unshift('actions');\n    return backburner$1.scheduleOnce.apply(backburner$1, args);\n  };\n\n  /**\n    Schedules a function to run one time in a given queue of the current RunLoop.\n    Calling this method with the same queue/target/method combination will have\n    no effect (past the initial call).\n  \n    Note that although you can pass optional arguments these will not be\n    considered when looking for duplicates. New arguments will replace previous\n    calls.\n  \n    ```javascript\n    import { run, scheduleOnce } from '@ember/runloop';\n  \n    function sayHi() {\n      console.log('hi');\n    }\n  \n    run(function() {\n      scheduleOnce('afterRender', myContext, sayHi);\n      scheduleOnce('afterRender', myContext, sayHi);\n      // sayHi will only be executed once, in the afterRender queue of the RunLoop\n    });\n    ```\n  \n    Also note that for `run.scheduleOnce` to prevent additional calls, you need to\n    pass the same function instance. The following case works as expected:\n  \n    ```javascript\n    function log() {\n      console.log('Logging only once');\n    }\n  \n    function scheduleIt() {\n      scheduleOnce('actions', myContext, log);\n    }\n  \n    scheduleIt();\n    scheduleIt();\n    ```\n  \n    But this other case will schedule the function multiple times:\n  \n    ```javascript\n    import { scheduleOnce } from '@ember/runloop';\n  \n    function scheduleIt() {\n      scheduleOnce('actions', myContext, function() {\n        console.log('Closure');\n      });\n    }\n  \n    scheduleIt();\n    scheduleIt();\n  \n    // \"Closure\" will print twice, even though we're using `run.scheduleOnce`,\n    // because the function we pass to it won't match the\n    // previously scheduled operation.\n    ```\n  \n    Available queues, and their order, can be found at `run.queues`\n  \n    @method scheduleOnce\n    @static\n    @for @ember/runloop\n    @param {String} [queue] The name of the queue to schedule against. Default queues is 'actions'.\n    @param {Object} [target] The target of the method to invoke.\n    @param {Function|String} method The method to invoke.\n      If you pass a string it will be resolved on the\n      target at the time the method is invoked.\n    @param {Object} [args*] Optional arguments to pass to the timeout.\n    @return {Object} Timer information for use in canceling, see `run.cancel`.\n    @public\n  */\n  run.scheduleOnce = function (queue /*, target, method*/) {\n    true && !(run.currentRunLoop || !emberDebug.isTesting()) && emberDebug.assert('You have turned on testing mode, which disabled the run-loop\\'s autorun. ' + 'You will need to wrap any code with asynchronous side-effects in a run', run.currentRunLoop || !emberDebug.isTesting());\n    true && !(queue !== 'sync') && emberDebug.deprecate('Scheduling into the \\'' + queue + '\\' run loop queue is deprecated.', queue !== 'sync', { id: 'ember-metal.run.sync', until: '3.5.0' });\n\n    return backburner$1.scheduleOnce.apply(backburner$1, arguments);\n  };\n\n  /**\n    Schedules an item to run from within a separate run loop, after\n    control has been returned to the system. This is equivalent to calling\n    `run.later` with a wait time of 1ms.\n  \n    ```javascript\n    import { next } from '@ember/runloop';\n  \n    next(myContext, function() {\n      // code to be executed in the next run loop,\n      // which will be scheduled after the current one\n    });\n    ```\n  \n    Multiple operations scheduled with `run.next` will coalesce\n    into the same later run loop, along with any other operations\n    scheduled by `run.later` that expire right around the same\n    time that `run.next` operations will fire.\n  \n    Note that there are often alternatives to using `run.next`.\n    For instance, if you'd like to schedule an operation to happen\n    after all DOM element operations have completed within the current\n    run loop, you can make use of the `afterRender` run loop queue (added\n    by the `ember-views` package, along with the preceding `render` queue\n    where all the DOM element operations happen).\n  \n    Example:\n  \n    ```app/components/my-component.js\n    import Component from '@ember/component';\n    import { scheduleOnce } from '@ember/runloop';\n  \n    export Component.extend({\n      didInsertElement() {\n        this._super(...arguments);\n        scheduleOnce('afterRender', this, 'processChildElements');\n      },\n  \n      processChildElements() {\n        // ... do something with component's child component\n        // elements after they've finished rendering, which\n        // can't be done within this component's\n        // `didInsertElement` hook because that gets run\n        // before the child elements have been added to the DOM.\n      }\n    });\n    ```\n  \n    One benefit of the above approach compared to using `run.next` is\n    that you will be able to perform DOM/CSS operations before unprocessed\n    elements are rendered to the screen, which may prevent flickering or\n    other artifacts caused by delaying processing until after rendering.\n  \n    The other major benefit to the above approach is that `run.next`\n    introduces an element of non-determinism, which can make things much\n    harder to test, due to its reliance on `setTimeout`; it's much harder\n    to guarantee the order of scheduled operations when they are scheduled\n    outside of the current run loop, i.e. with `run.next`.\n  \n    @method next\n    @static\n    @for @ember/runloop\n    @param {Object} [target] target of method to invoke\n    @param {Function|String} method The method to invoke.\n      If you pass a string it will be resolved on the\n      target at the time the method is invoked.\n    @param {Object} [args*] Optional arguments to pass to the timeout.\n    @return {Object} Timer information for use in canceling, see `run.cancel`.\n    @public\n  */\n  run.next = function () {\n    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    args.push(1);\n    return backburner$1.later.apply(backburner$1, args);\n  };\n\n  /**\n    Cancels a scheduled item. Must be a value returned by `later()`,\n    `once()`, `scheduleOnce()`, `next()`, `debounce()`, or\n    `throttle()`.\n  \n    ```javascript\n    import {\n      next,\n      cancel,\n      later,\n      scheduleOnce,\n      once,\n      throttle,\n      debounce\n    } from '@ember/runloop';\n  \n    let runNext = next(myContext, function() {\n      // will not be executed\n    });\n  \n    cancel(runNext);\n  \n    let runLater = later(myContext, function() {\n      // will not be executed\n    }, 500);\n  \n    cancel(runLater);\n  \n    let runScheduleOnce = scheduleOnce('afterRender', myContext, function() {\n      // will not be executed\n    });\n  \n    cancel(runScheduleOnce);\n  \n    let runOnce = once(myContext, function() {\n      // will not be executed\n    });\n  \n    cancel(runOnce);\n  \n    let throttle = throttle(myContext, function() {\n      // will not be executed\n    }, 1, false);\n  \n    cancel(throttle);\n  \n    let debounce = debounce(myContext, function() {\n      // will not be executed\n    }, 1);\n  \n    cancel(debounce);\n  \n    let debounceImmediate = debounce(myContext, function() {\n      // will be executed since we passed in true (immediate)\n    }, 100, true);\n  \n    // the 100ms delay until this method can be called again will be canceled\n    cancel(debounceImmediate);\n    ```\n  \n    @method cancel\n    @static\n    @for @ember/runloop\n    @param {Object} timer Timer object to cancel\n    @return {Boolean} true if canceled or false/undefined if it wasn't found\n    @public\n  */\n  run.cancel = function (timer) {\n    return backburner$1.cancel(timer);\n  };\n\n  /**\n    Delay calling the target method until the debounce period has elapsed\n    with no additional debounce calls. If `debounce` is called again before\n    the specified time has elapsed, the timer is reset and the entire period\n    must pass again before the target method is called.\n  \n    This method should be used when an event may be called multiple times\n    but the action should only be called once when the event is done firing.\n    A common example is for scroll events where you only want updates to\n    happen once scrolling has ceased.\n  \n    ```javascript\n    import { debounce } from '@ember/runloop';\n  \n    function whoRan() {\n      console.log(this.name + ' ran.');\n    }\n  \n    let myContext = { name: 'debounce' };\n  \n    debounce(myContext, whoRan, 150);\n  \n    // less than 150ms passes\n    debounce(myContext, whoRan, 150);\n  \n    // 150ms passes\n    // whoRan is invoked with context myContext\n    // console logs 'debounce ran.' one time.\n    ```\n  \n    Immediate allows you to run the function immediately, but debounce\n    other calls for this function until the wait time has elapsed. If\n    `debounce` is called again before the specified time has elapsed,\n    the timer is reset and the entire period must pass again before\n    the method can be called again.\n  \n    ```javascript\n    import { debounce } from '@ember/runloop';\n  \n    function whoRan() {\n      console.log(this.name + ' ran.');\n    }\n  \n    let myContext = { name: 'debounce' };\n  \n    debounce(myContext, whoRan, 150, true);\n  \n    // console logs 'debounce ran.' one time immediately.\n    // 100ms passes\n    debounce(myContext, whoRan, 150, true);\n  \n    // 150ms passes and nothing else is logged to the console and\n    // the debouncee is no longer being watched\n    debounce(myContext, whoRan, 150, true);\n  \n    // console logs 'debounce ran.' one time immediately.\n    // 150ms passes and nothing else is logged to the console and\n    // the debouncee is no longer being watched\n    ```\n  \n    @method debounce\n    @static\n    @for @ember/runloop\n    @param {Object} [target] target of method to invoke\n    @param {Function|String} method The method to invoke.\n      May be a function or a string. If you pass a string\n      then it will be looked up on the passed target.\n    @param {Object} [args*] Optional arguments to pass to the timeout.\n    @param {Number} wait Number of milliseconds to wait.\n    @param {Boolean} immediate Trigger the function on the leading instead\n      of the trailing edge of the wait interval. Defaults to false.\n    @return {Array} Timer information for use in canceling, see `run.cancel`.\n    @public\n  */\n  run.debounce = function () {\n    return backburner$1.debounce.apply(backburner$1, arguments);\n  };\n\n  /**\n    Ensure that the target method is never called more frequently than\n    the specified spacing period. The target method is called immediately.\n  \n    ```javascript\n    import { throttle } from '@ember/runloop';\n  \n    function whoRan() {\n      console.log(this.name + ' ran.');\n    }\n  \n    let myContext = { name: 'throttle' };\n  \n    throttle(myContext, whoRan, 150);\n    // whoRan is invoked with context myContext\n    // console logs 'throttle ran.'\n  \n    // 50ms passes\n    throttle(myContext, whoRan, 150);\n  \n    // 50ms passes\n    throttle(myContext, whoRan, 150);\n  \n    // 150ms passes\n    throttle(myContext, whoRan, 150);\n    // whoRan is invoked with context myContext\n    // console logs 'throttle ran.'\n    ```\n  \n    @method throttle\n    @static\n    @for @ember/runloop\n    @param {Object} [target] target of method to invoke\n    @param {Function|String} method The method to invoke.\n      May be a function or a string. If you pass a string\n      then it will be looked up on the passed target.\n    @param {Object} [args*] Optional arguments to pass to the timeout.\n    @param {Number} spacing Number of milliseconds to space out requests.\n    @param {Boolean} immediate Trigger the function on the leading instead\n      of the trailing edge of the wait interval. Defaults to true.\n    @return {Array} Timer information for use in canceling, see `run.cancel`.\n    @public\n  */\n  run.throttle = function () {\n    return backburner$1.throttle.apply(backburner$1, arguments);\n  };\n\n  /**\n    Add a new named queue after the specified queue.\n  \n    The queue to add will only be added once.\n  \n    @method _addQueue\n    @param {String} name the name of the queue to add.\n    @param {String} after the name of the queue to add after.\n    @private\n  */\n  run._addQueue = function (name, after) {\n    if (run.queues.indexOf(name) === -1) {\n      run.queues.splice(run.queues.indexOf(after) + 1, 0, name);\n    }\n  };\n\n  /**\n   @module ember\n  */\n  /**\n    Helper class that allows you to register your library with Ember.\n  \n    Singleton created at `Ember.libraries`.\n  \n    @class Libraries\n    @constructor\n    @private\n  */\n  var Libraries = function () {\n    function Libraries() {\n      emberBabel.classCallCheck(this, Libraries);\n\n      this._registry = [];\n      this._coreLibIndex = 0;\n    }\n\n    Libraries.prototype._getLibraryByName = function _getLibraryByName(name) {\n      var libs = this._registry;\n      var count = libs.length;\n\n      for (var i = 0; i < count; i++) {\n        if (libs[i].name === name) {\n          return libs[i];\n        }\n      }\n    };\n\n    Libraries.prototype.register = function register(name, version, isCoreLibrary) {\n      var index = this._registry.length;\n\n      if (!this._getLibraryByName(name)) {\n        if (isCoreLibrary) {\n          index = this._coreLibIndex++;\n        }\n        this._registry.splice(index, 0, { name: name, version: version });\n      } else {\n        true && emberDebug.warn('Library \"' + name + '\" is already registered with Ember.', false, { id: 'ember-metal.libraries-register' });\n      }\n    };\n\n    Libraries.prototype.registerCoreLibrary = function registerCoreLibrary(name, version) {\n      this.register(name, version, true);\n    };\n\n    Libraries.prototype.deRegister = function deRegister(name) {\n      var lib = this._getLibraryByName(name);\n      var index = void 0;\n\n      if (lib) {\n        index = this._registry.indexOf(lib);\n        this._registry.splice(index, 1);\n      }\n    };\n\n    return Libraries;\n  }();\n\n  if (features.EMBER_LIBRARIES_ISREGISTERED) {\n    Libraries.prototype.isRegistered = function (name) {\n      return !!this._getLibraryByName(name);\n    };\n  }\n\n  var libraries = new Libraries();\n\n  /**\n  @module @ember/map\n  @private\n  */\n\n  /*\n    JavaScript (before ES6) does not have a Map implementation. Objects,\n    which are often used as dictionaries, may only have Strings as keys.\n  \n    Because Ember has a way to get a unique identifier for every object\n    via `guidFor`, we can implement a performant Map with arbitrary\n    keys. Because it is commonly used in low-level bookkeeping, Map is\n    implemented as a pure JavaScript object for performance.\n  \n    This implementation follows the current iteration of the ES6 proposal for\n    maps (http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets),\n    with one exception:  as we do not have the luxury of in-VM iteration, we implement a\n    forEach method for iteration.\n  \n    Map is mocked out to look like an Ember object, so you can do\n    `EmberMap.create()` for symmetry with other Ember classes.\n  */\n\n  function copyNull(obj) {\n    var output = Object.create(null);\n\n    for (var prop in obj) {\n      // hasOwnPropery is not needed because obj is Object.create(null);\n      output[prop] = obj[prop];\n    }\n\n    return output;\n  }\n\n  function copyMap(original, newObject) {\n    var keys = original._keys.copy();\n    var values = copyNull(original._values);\n\n    newObject._keys = keys;\n    newObject._values = values;\n    newObject.size = original.size;\n\n    return newObject;\n  }\n\n  /**\n    This class is used internally by Ember and Ember Data.\n    Please do not use it at this time. We plan to clean it up\n    and add many tests soon.\n  \n    @class OrderedSet\n    @namespace Ember\n    @constructor\n    @private\n  */\n\n  var OrderedSet = function () {\n    function OrderedSet() {\n      emberBabel.classCallCheck(this, OrderedSet);\n\n      this.clear();\n    }\n\n    /**\n      @method create\n      @static\n      @return {Ember.OrderedSet}\n      @private\n    */\n\n    OrderedSet.create = function create() {\n      var Constructor = this;\n      return new Constructor();\n    };\n\n    /**\n      @method clear\n      @private\n    */\n\n    OrderedSet.prototype.clear = function clear() {\n      this.presenceSet = Object.create(null);\n      this.list = [];\n      this.size = 0;\n    };\n\n    /**\n      @method add\n      @param obj\n      @param guid (optional, and for internal use)\n      @return {Ember.OrderedSet}\n      @private\n    */\n\n    OrderedSet.prototype.add = function add(obj, _guid) {\n      var guid = _guid || emberUtils.guidFor(obj);\n      var presenceSet = this.presenceSet;\n      var list = this.list;\n\n      if (presenceSet[guid] !== true) {\n        presenceSet[guid] = true;\n        this.size = list.push(obj);\n      }\n\n      return this;\n    };\n\n    /**\n      @since 1.8.0\n      @method delete\n      @param obj\n      @param _guid (optional and for internal use only)\n      @return {Boolean}\n      @private\n    */\n\n    OrderedSet.prototype.delete = function _delete(obj, _guid) {\n      var guid = _guid || emberUtils.guidFor(obj);\n      var presenceSet = this.presenceSet;\n      var list = this.list;\n\n      if (presenceSet[guid] === true) {\n        delete presenceSet[guid];\n        var index = list.indexOf(obj);\n        if (index > -1) {\n          list.splice(index, 1);\n        }\n        this.size = list.length;\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    /**\n      @method isEmpty\n      @return {Boolean}\n      @private\n    */\n\n    OrderedSet.prototype.isEmpty = function isEmpty() {\n      return this.size === 0;\n    };\n\n    /**\n      @method has\n      @param obj\n      @return {Boolean}\n      @private\n    */\n\n    OrderedSet.prototype.has = function has(obj) {\n      if (this.size === 0) {\n        return false;\n      }\n\n      var guid = emberUtils.guidFor(obj);\n      var presenceSet = this.presenceSet;\n\n      return presenceSet[guid] === true;\n    };\n\n    /**\n      @method forEach\n      @param {Function} fn\n      @param self\n      @private\n    */\n\n    OrderedSet.prototype.forEach = function forEach(fn /*, ...thisArg*/) {\n      true && !(typeof fn === 'function') && emberDebug.assert(Object.prototype.toString.call(fn) + ' is not a function', typeof fn === 'function');\n\n      if (this.size === 0) {\n        return;\n      }\n\n      var list = this.list;\n\n      if (arguments.length === 2) {\n        for (var i = 0; i < list.length; i++) {\n          fn.call(arguments[1], list[i]);\n        }\n      } else {\n        for (var _i = 0; _i < list.length; _i++) {\n          fn(list[_i]);\n        }\n      }\n    };\n\n    /**\n      @method toArray\n      @return {Array}\n      @private\n    */\n\n    OrderedSet.prototype.toArray = function toArray() {\n      return this.list.slice();\n    };\n\n    /**\n      @method copy\n      @return {Ember.OrderedSet}\n      @private\n    */\n\n    OrderedSet.prototype.copy = function copy() {\n      var Constructor = this.constructor;\n      var set = new Constructor();\n\n      set.presenceSet = copyNull(this.presenceSet);\n      set.list = this.toArray();\n      set.size = this.size;\n\n      return set;\n    };\n\n    return OrderedSet;\n  }();\n\n  /**\n    A Map stores values indexed by keys. Unlike JavaScript's\n    default Objects, the keys of a Map can be any JavaScript\n    object.\n  \n    Internally, a Map has two data structures:\n  \n    1. `keys`: an OrderedSet of all of the existing keys\n    2. `values`: a JavaScript Object indexed by the `guidFor(key)`\n  \n    When a key/value pair is added for the first time, we\n    add the key to the `keys` OrderedSet, and create or\n    replace an entry in `values`. When an entry is deleted,\n    we delete its entry in `keys` and `values`.\n  \n    @class Map\n    @private\n    @constructor\n  */\n\n  var Map = function () {\n    function Map() {\n      emberBabel.classCallCheck(this, Map);\n\n      this._keys = new OrderedSet();\n      this._values = Object.create(null);\n      this.size = 0;\n    }\n\n    /**\n      @method create\n      @static\n      @private\n    */\n\n    Map.create = function create() {\n      var Constructor = this;\n      return new Constructor();\n    };\n\n    /**\n      Retrieve the value associated with a given key.\n       @method get\n      @param {*} key\n      @return {*} the value associated with the key, or `undefined`\n      @private\n    */\n\n    Map.prototype.get = function get(key) {\n      if (this.size === 0) {\n        return;\n      }\n\n      var values = this._values;\n      var guid = emberUtils.guidFor(key);\n\n      return values[guid];\n    };\n\n    /**\n      Adds a value to the map. If a value for the given key has already been\n      provided, the new value will replace the old value.\n       @method set\n      @param {*} key\n      @param {*} value\n      @return {Map}\n      @private\n    */\n\n    Map.prototype.set = function set(key, value) {\n      var keys = this._keys;\n      var values = this._values;\n      var guid = emberUtils.guidFor(key);\n\n      // ensure we don't store -0\n      var k = key === -0 ? 0 : key;\n\n      keys.add(k, guid);\n\n      values[guid] = value;\n\n      this.size = keys.size;\n\n      return this;\n    };\n\n    /**\n      Removes a value from the map for an associated key.\n       @since 1.8.0\n      @method delete\n      @param {*} key\n      @return {Boolean} true if an item was removed, false otherwise\n      @private\n    */\n\n    Map.prototype.delete = function _delete(key) {\n      if (this.size === 0) {\n        return false;\n      }\n      // don't use ES6 \"delete\" because it will be annoying\n      // to use in browsers that are not ES6 friendly;\n      var keys = this._keys;\n      var values = this._values;\n      var guid = emberUtils.guidFor(key);\n\n      if (keys.delete(key, guid)) {\n        delete values[guid];\n        this.size = keys.size;\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    /**\n      Check whether a key is present.\n       @method has\n      @param {*} key\n      @return {Boolean} true if the item was present, false otherwise\n      @private\n    */\n\n    Map.prototype.has = function has(key) {\n      return this._keys.has(key);\n    };\n\n    /**\n      Iterate over all the keys and values. Calls the function once\n      for each key, passing in value, key, and the map being iterated over,\n      in that order.\n       The keys are guaranteed to be iterated over in insertion order.\n       @method forEach\n      @param {Function} callback\n      @param {*} self if passed, the `this` value inside the\n        callback. By default, `this` is the map.\n      @private\n    */\n\n    Map.prototype.forEach = function forEach(callback /*, ...thisArg*/) {\n      true && !(typeof callback === 'function') && emberDebug.assert(Object.prototype.toString.call(callback) + ' is not a function', typeof callback === 'function');\n\n      if (this.size === 0) {\n        return;\n      }\n\n      var map = this;\n      var cb = void 0,\n          thisArg = void 0;\n\n      if (arguments.length === 2) {\n        thisArg = arguments[1];\n        cb = function (key) {\n          return callback.call(thisArg, map.get(key), key, map);\n        };\n      } else {\n        cb = function (key) {\n          return callback(map.get(key), key, map);\n        };\n      }\n\n      this._keys.forEach(cb);\n    };\n\n    /**\n      @method clear\n      @private\n    */\n\n    Map.prototype.clear = function clear() {\n      this._keys.clear();\n      this._values = Object.create(null);\n      this.size = 0;\n    };\n\n    /**\n      @method copy\n      @return {Map}\n      @private\n    */\n\n    Map.prototype.copy = function copy() {\n      return copyMap(this, new Map());\n    };\n\n    return Map;\n  }();\n\n  /**\n    @class MapWithDefault\n    @extends Map\n    @private\n    @constructor\n    @param [options]\n      @param {*} [options.defaultValue]\n  */\n\n  var MapWithDefault = function (_Map) {\n    emberBabel.inherits(MapWithDefault, _Map);\n\n    function MapWithDefault(options) {\n      emberBabel.classCallCheck(this, MapWithDefault);\n\n      var _this = emberBabel.possibleConstructorReturn(this, _Map.call(this));\n\n      _this.defaultValue = options.defaultValue;\n      return _this;\n    }\n\n    /**\n      @method create\n      @static\n      @param [options]\n        @param {*} [options.defaultValue]\n      @return {MapWithDefault|Map} If options are passed, returns\n        `MapWithDefault` otherwise returns `EmberMap`\n      @private\n    */\n\n    MapWithDefault.create = function create(options) {\n      if (options) {\n        return new MapWithDefault(options);\n      } else {\n        return new Map();\n      }\n    };\n\n    /**\n      Retrieve the value associated with a given key.\n       @method get\n      @param {*} key\n      @return {*} the value associated with the key, or the default value\n      @private\n    */\n\n    MapWithDefault.prototype.get = function get(key) {\n      var hasValue = this.has(key);\n\n      if (hasValue) {\n        return _Map.prototype.get.call(this, key);\n      } else {\n        var defaultValue = this.defaultValue(key);\n        this.set(key, defaultValue);\n        return defaultValue;\n      }\n    };\n\n    /**\n      @method copy\n      @return {MapWithDefault}\n      @private\n    */\n\n    MapWithDefault.prototype.copy = function copy() {\n      var Constructor = this.constructor;\n      return copyMap(this, new Constructor({\n        defaultValue: this.defaultValue\n      }));\n    };\n\n    return MapWithDefault;\n  }(Map);\n\n  /**\n   @module @ember/object\n  */\n\n  /**\n    To get multiple properties at once, call `getProperties`\n    with an object followed by a list of strings or an array:\n  \n    ```javascript\n    import { getProperties } from '@ember/object';\n  \n    getProperties(record, 'firstName', 'lastName', 'zipCode');\n    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n    ```\n  \n    is equivalent to:\n  \n    ```javascript\n    import { getProperties } from '@ember/object';\n  \n    getProperties(record, ['firstName', 'lastName', 'zipCode']);\n    // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n    ```\n  \n    @method getProperties\n    @static\n    @for @ember/object\n    @param {Object} obj\n    @param {String...|Array} list of keys to get\n    @return {Object}\n    @public\n  */\n  function getProperties(obj) {\n    var ret = {};\n    var propertyNames = arguments;\n    var i = 1;\n\n    if (arguments.length === 2 && Array.isArray(arguments[1])) {\n      i = 0;\n      propertyNames = arguments[1];\n    }\n    for (; i < propertyNames.length; i++) {\n      ret[propertyNames[i]] = get(obj, propertyNames[i]);\n    }\n    return ret;\n  }\n\n  /**\n   @module @ember/object\n  */\n  /**\n    Set a list of properties on an object. These properties are set inside\n    a single `beginPropertyChanges` and `endPropertyChanges` batch, so\n    observers will be buffered.\n  \n    ```javascript\n    import EmberObject from '@ember/object';\n    let anObject = EmberObject.create();\n  \n    anObject.setProperties({\n      firstName: 'Stanley',\n      lastName: 'Stuart',\n      age: 21\n    });\n    ```\n  \n    @method setProperties\n    @static\n    @for @ember/object\n    @param obj\n    @param {Object} properties\n    @return properties\n    @public\n  */\n  function setProperties(obj, properties) {\n    if (properties === null || typeof properties !== 'object') {\n      return properties;\n    }\n    changeProperties(function () {\n      var props = Object.keys(properties);\n      var propertyName = void 0;\n\n      for (var i = 0; i < props.length; i++) {\n        propertyName = props[i];\n\n        set(obj, propertyName, properties[propertyName]);\n      }\n    });\n    return properties;\n  }\n\n  /**\n  @module @ember/object\n  */\n  var a_concat = Array.prototype.concat;\n  var isArray = Array.isArray;\n\n  function isMethod(obj) {\n    return 'function' === typeof obj && obj.isMethod !== false && obj !== Boolean && obj !== Object && obj !== Number && obj !== Array && obj !== Date && obj !== String;\n  }\n\n  var CONTINUE = {};\n\n  function mixinProperties(mixinsMeta, mixin) {\n    var guid = void 0;\n\n    if (mixin instanceof Mixin) {\n      guid = emberUtils.guidFor(mixin);\n      if (mixinsMeta.peekMixins(guid)) {\n        return CONTINUE;\n      }\n      mixinsMeta.writeMixins(guid, mixin);\n      return mixin.properties;\n    } else {\n      return mixin; // apply anonymous mixin properties\n    }\n  }\n\n  function concatenatedMixinProperties(concatProp, props, values, base) {\n    // reset before adding each new mixin to pickup concats from previous\n    var concats = values[concatProp] || base[concatProp];\n    if (props[concatProp]) {\n      concats = concats ? a_concat.call(concats, props[concatProp]) : props[concatProp];\n    }\n    return concats;\n  }\n\n  function giveDescriptorSuper(meta$$1, key, property, values, descs, base) {\n    var superProperty = void 0;\n\n    // Computed properties override methods, and do not call super to them\n    if (values[key] === undefined) {\n      // Find the original descriptor in a parent mixin\n      superProperty = descs[key];\n    }\n\n    // If we didn't find the original descriptor in a parent mixin, find\n    // it on the original object.\n    if (!superProperty) {\n      superProperty = descriptorFor(base, key, meta$$1);\n    }\n\n    if (superProperty === undefined || !(superProperty instanceof ComputedProperty)) {\n      return property;\n    }\n\n    // Since multiple mixins may inherit from the same parent, we need\n    // to clone the computed property so that other mixins do not receive\n    // the wrapped version.\n    property = Object.create(property);\n    property._getter = emberUtils.wrap(property._getter, superProperty._getter);\n    if (superProperty._setter) {\n      if (property._setter) {\n        property._setter = emberUtils.wrap(property._setter, superProperty._setter);\n      } else {\n        property._setter = superProperty._setter;\n      }\n    }\n\n    return property;\n  }\n\n  function giveMethodSuper(obj, key, method, values, descs) {\n    // Methods overwrite computed properties, and do not call super to them.\n    if (descs[key] !== undefined) {\n      return method;\n    }\n\n    // Find the original method in a parent mixin\n    var superMethod = values[key];\n\n    // If we didn't find the original value in a parent mixin, find it in\n    // the original object\n    if (superMethod === undefined && (!features.EMBER_METAL_ES5_GETTERS || descriptorFor(obj, key) === undefined)) {\n      superMethod = obj[key];\n    }\n\n    // Only wrap the new method if the original method was a function\n    if (typeof superMethod === 'function') {\n      return emberUtils.wrap(method, superMethod);\n    }\n\n    return method;\n  }\n\n  function applyConcatenatedProperties(obj, key, value, values) {\n    var baseValue = values[key] || obj[key];\n    var ret = void 0;\n\n    if (baseValue === null || baseValue === undefined) {\n      ret = emberUtils.makeArray(value);\n    } else if (isArray(baseValue)) {\n      if (value === null || value === undefined) {\n        ret = baseValue;\n      } else {\n        ret = a_concat.call(baseValue, value);\n      }\n    } else {\n      ret = a_concat.call(emberUtils.makeArray(baseValue), value);\n    }\n\n    {\n      // it is possible to use concatenatedProperties with strings (which cannot be frozen)\n      // only freeze objects...\n      if (typeof ret === 'object' && ret !== null) {\n        // prevent mutating `concatenatedProperties` array after it is applied\n        Object.freeze(ret);\n      }\n    }\n\n    return ret;\n  }\n\n  function applyMergedProperties(obj, key, value, values) {\n    var baseValue = values[key] || obj[key];\n\n    true && !!isArray(value) && emberDebug.assert('You passed in `' + JSON.stringify(value) + '` as the value for `' + key + '` but `' + key + '` cannot be an Array', !isArray(value));\n\n    if (!baseValue) {\n      return value;\n    }\n\n    var newBase = emberUtils.assign({}, baseValue);\n    var hasFunction = false;\n\n    for (var prop in value) {\n      if (!value.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      var propValue = value[prop];\n      if (isMethod(propValue)) {\n        // TODO: support for Computed Properties, etc?\n        hasFunction = true;\n        newBase[prop] = giveMethodSuper(obj, prop, propValue, baseValue, {});\n      } else {\n        newBase[prop] = propValue;\n      }\n    }\n\n    if (hasFunction) {\n      newBase._super = emberUtils.ROOT;\n    }\n\n    return newBase;\n  }\n\n  function addNormalizedProperty(base, key, value, meta$$1, descs, values, concats, mergings) {\n    if (value instanceof Descriptor) {\n      if (emberEnvironment.ENV._ENABLE_PROPERTY_REQUIRED_SUPPORT && value === REQUIRED && descs[key]) {\n        return CONTINUE;\n      }\n\n      // Wrap descriptor function to implement\n      // _super() if needed\n      if (value._getter) {\n        value = giveDescriptorSuper(meta$$1, key, value, values, descs, base);\n      }\n\n      descs[key] = value;\n      values[key] = undefined;\n    } else {\n      if (concats && concats.indexOf(key) >= 0 || key === 'concatenatedProperties' || key === 'mergedProperties') {\n        value = applyConcatenatedProperties(base, key, value, values);\n      } else if (mergings && mergings.indexOf(key) > -1) {\n        value = applyMergedProperties(base, key, value, values);\n      } else if (isMethod(value)) {\n        value = giveMethodSuper(base, key, value, values, descs);\n      }\n\n      descs[key] = undefined;\n      values[key] = value;\n    }\n  }\n\n  function mergeMixins(mixins, meta$$1, descs, values, base, keys) {\n    var currentMixin = void 0,\n        props = void 0,\n        key = void 0,\n        concats = void 0,\n        mergings = void 0;\n\n    function removeKeys(keyName) {\n      delete descs[keyName];\n      delete values[keyName];\n    }\n\n    for (var i = 0; i < mixins.length; i++) {\n      currentMixin = mixins[i];\n      true && !(typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]') && emberDebug.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(currentMixin), typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]');\n\n      props = mixinProperties(meta$$1, currentMixin);\n      if (props === CONTINUE) {\n        continue;\n      }\n\n      if (props) {\n        // remove willMergeMixin after 3.4 as it was used for _actions\n        if (base.willMergeMixin) {\n          base.willMergeMixin(props);\n        }\n        concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);\n        mergings = concatenatedMixinProperties('mergedProperties', props, values, base);\n\n        for (key in props) {\n          if (!props.hasOwnProperty(key)) {\n            continue;\n          }\n          keys.push(key);\n          addNormalizedProperty(base, key, props[key], meta$$1, descs, values, concats, mergings);\n        }\n\n        // manually copy toString() because some JS engines do not enumerate it\n        if (props.hasOwnProperty('toString')) {\n          base.toString = props.toString;\n        }\n      } else if (currentMixin.mixins) {\n        mergeMixins(currentMixin.mixins, meta$$1, descs, values, base, keys);\n        if (currentMixin._without) {\n          currentMixin._without.forEach(removeKeys);\n        }\n      }\n    }\n  }\n\n  function followAlias(obj, desc, descs, values) {\n    var altKey = desc.methodName;\n    var value = void 0;\n    var possibleDesc = void 0;\n    if (descs[altKey] || values[altKey]) {\n      value = values[altKey];\n      desc = descs[altKey];\n    } else if ((possibleDesc = descriptorFor(obj, altKey)) !== undefined) {\n      desc = possibleDesc;\n      value = undefined;\n    } else {\n      desc = undefined;\n      value = obj[altKey];\n    }\n\n    return { desc: desc, value: value };\n  }\n\n  function updateObserversAndListeners(obj, key, paths, updateMethod) {\n    if (paths) {\n      for (var i = 0; i < paths.length; i++) {\n        updateMethod(obj, paths[i], null, key);\n      }\n    }\n  }\n\n  function replaceObserversAndListeners(obj, key, prev, next) {\n    if (typeof prev === 'function') {\n      updateObserversAndListeners(obj, key, prev.__ember_observesBefore__, _removeBeforeObserver);\n      updateObserversAndListeners(obj, key, prev.__ember_observes__, removeObserver);\n      updateObserversAndListeners(obj, key, prev.__ember_listens__, removeListener);\n    }\n\n    if (typeof next === 'function') {\n      updateObserversAndListeners(obj, key, next.__ember_observesBefore__, _addBeforeObserver);\n      updateObserversAndListeners(obj, key, next.__ember_observes__, addObserver);\n      updateObserversAndListeners(obj, key, next.__ember_listens__, addListener);\n    }\n  }\n\n  function applyMixin(obj, mixins, partial) {\n    var descs = {};\n    var values = {};\n    var meta$$1 = meta(obj);\n    var keys = [];\n    var key = void 0,\n        value = void 0,\n        desc = void 0;\n\n    obj._super = emberUtils.ROOT;\n\n    // Go through all mixins and hashes passed in, and:\n    //\n    // * Handle concatenated properties\n    // * Handle merged properties\n    // * Set up _super wrapping if necessary\n    // * Set up computed property descriptors\n    // * Copying `toString` in broken browsers\n    mergeMixins(mixins, meta$$1, descs, values, obj, keys);\n\n    for (var i = 0; i < keys.length; i++) {\n      key = keys[i];\n      if (key === 'constructor' || !values.hasOwnProperty(key)) {\n        continue;\n      }\n\n      desc = descs[key];\n      value = values[key];\n\n      if (emberEnvironment.ENV._ENABLE_PROPERTY_REQUIRED_SUPPORT && desc === REQUIRED) {\n        continue;\n      }\n\n      while (desc && desc instanceof Alias) {\n        var followed = followAlias(obj, desc, descs, values);\n        desc = followed.desc;\n        value = followed.value;\n      }\n\n      if (desc === undefined && value === undefined) {\n        continue;\n      }\n\n      if (features.EMBER_METAL_ES5_GETTERS && descriptorFor(obj, key) !== undefined) {\n        replaceObserversAndListeners(obj, key, null, value);\n      } else {\n        replaceObserversAndListeners(obj, key, obj[key], value);\n      }\n\n      if (emberEnvironment.ENV._ENABLE_BINDING_SUPPORT && typeof Mixin.detectBinding === 'function' && Mixin.detectBinding(key)) {\n        meta$$1.writeBindings(key, value);\n      }\n\n      defineProperty(obj, key, desc, value, meta$$1);\n    }\n\n    if (emberEnvironment.ENV._ENABLE_BINDING_SUPPORT && !partial && typeof Mixin.finishProtype === 'function') {\n      Mixin.finishPartial(obj, meta$$1);\n    }\n\n    return obj;\n  }\n\n  /**\n    @method mixin\n    @param obj\n    @param mixins*\n    @return obj\n    @private\n  */\n  function mixin(obj) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    applyMixin(obj, args, false);\n    return obj;\n  }\n\n  /**\n    The `Mixin` class allows you to create mixins, whose properties can be\n    added to other classes. For instance,\n  \n    ```javascript\n    import Mixin from '@ember/object/mixin';\n  \n    const EditableMixin = Mixin.create({\n      edit() {\n        console.log('starting to edit');\n        this.set('isEditing', true);\n      },\n      isEditing: false\n    });\n    ```\n  \n    ```javascript\n    import EmberObject from '@ember/object';\n    import EditableMixin from '../mixins/editable';\n  \n    // Mix mixins into classes by passing them as the first arguments to\n    // `.extend.`\n    const Comment = EmberObject.extend(EditableMixin, {\n      post: null\n    });\n  \n    let comment = Comment.create({\n      post: somePost\n    });\n  \n    comment.edit(); // outputs 'starting to edit'\n    ```\n  \n    Note that Mixins are created with `Mixin.create`, not\n    `Mixin.extend`.\n  \n    Note that mixins extend a constructor's prototype so arrays and object literals\n    defined as properties will be shared amongst objects that implement the mixin.\n    If you want to define a property in a mixin that is not shared, you can define\n    it either as a computed property or have it be created on initialization of the object.\n  \n    ```javascript\n    // filters array will be shared amongst any object implementing mixin\n    import Mixin from '@ember/object/mixin';\n    import { A } from '@ember/array';\n  \n    const FilterableMixin = Mixin.create({\n      filters: A()\n    });\n    ```\n  \n    ```javascript\n    import Mixin from '@ember/object/mixin';\n    import { A } from '@ember/array';\n    import { computed } from '@ember/object';\n  \n    // filters will be a separate array for every object implementing the mixin\n    const FilterableMixin = Mixin.create({\n      filters: computed(function() {\n        return A();\n      })\n    });\n    ```\n  \n    ```javascript\n    import Mixin from '@ember/object/mixin';\n    import { A } from '@ember/array';\n  \n    // filters will be created as a separate array during the object's initialization\n    const Filterable = Mixin.create({\n      filters: null,\n  \n      init() {\n        this._super(...arguments);\n        this.set(\"filters\", A());\n      }\n    });\n    ```\n  \n    @class Mixin\n    @public\n  */\n\n  var Mixin = function () {\n    function Mixin(mixins, properties) {\n      emberBabel.classCallCheck(this, Mixin);\n\n      this.properties = properties;\n\n      var length = mixins && mixins.length;\n\n      if (length > 0) {\n        var m = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          var x = mixins[i];\n          if (x instanceof Mixin) {\n            m[i] = x;\n          } else {\n            m[i] = new Mixin(undefined, x);\n          }\n        }\n\n        this.mixins = m;\n      } else {\n        this.mixins = undefined;\n      }\n      this.ownerConstructor = undefined;\n      this._without = undefined;\n      this[emberUtils.GUID_KEY] = null;\n      this[emberUtils.NAME_KEY] = null;\n      emberDebug.debugSeal(this);\n    }\n\n    Mixin.applyPartial = function applyPartial(obj) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return applyMixin(obj, args, true);\n    };\n\n    /**\n      @method create\n      @for @ember/object/mixin\n      @static\n      @param arguments*\n      @public\n    */\n\n    Mixin.create = function create() {\n      // ES6TODO: this relies on a global state?\n      unprocessedFlag = true;\n      var M = this;\n\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return new M(args, undefined);\n    };\n\n    // returns the mixins currently applied to the specified object\n    // TODO: Make `mixin`\n\n\n    Mixin.mixins = function mixins(obj) {\n      var meta$$1 = peekMeta(obj);\n      var ret = [];\n      if (meta$$1 === undefined) {\n        return ret;\n      }\n\n      meta$$1.forEachMixins(function (key, currentMixin) {\n        // skip primitive mixins since these are always anonymous\n        if (!currentMixin.properties) {\n          ret.push(currentMixin);\n        }\n      });\n\n      return ret;\n    };\n\n    /**\n      @method reopen\n      @param arguments*\n      @private\n    */\n\n    Mixin.prototype.reopen = function reopen() {\n      var currentMixin = void 0;\n\n      if (this.properties) {\n        currentMixin = new Mixin(undefined, this.properties);\n        this.properties = undefined;\n        this.mixins = [currentMixin];\n      } else if (!this.mixins) {\n        this.mixins = [];\n      }\n\n      var mixins = this.mixins;\n      var idx = void 0;\n\n      for (idx = 0; idx < arguments.length; idx++) {\n        currentMixin = arguments[idx];\n        true && !(typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]') && emberDebug.assert('Expected hash or Mixin instance, got ' + Object.prototype.toString.call(currentMixin), typeof currentMixin === 'object' && currentMixin !== null && Object.prototype.toString.call(currentMixin) !== '[object Array]');\n\n        if (currentMixin instanceof Mixin) {\n          mixins.push(currentMixin);\n        } else {\n          mixins.push(new Mixin(undefined, currentMixin));\n        }\n      }\n\n      return this;\n    };\n\n    /**\n      @method apply\n      @param obj\n      @return applied object\n      @private\n    */\n\n    Mixin.prototype.apply = function apply(obj) {\n      return applyMixin(obj, [this], false);\n    };\n\n    Mixin.prototype.applyPartial = function applyPartial(obj) {\n      return applyMixin(obj, [this], true);\n    };\n\n    /**\n      @method detect\n      @param obj\n      @return {Boolean}\n      @private\n    */\n\n    Mixin.prototype.detect = function detect(obj) {\n      if (typeof obj !== 'object' || obj === null) {\n        return false;\n      }\n      if (obj instanceof Mixin) {\n        return _detect(obj, this, {});\n      }\n      var meta$$1 = peekMeta(obj);\n      if (meta$$1 === undefined) {\n        return false;\n      }\n      return !!meta$$1.peekMixins(emberUtils.guidFor(this));\n    };\n\n    Mixin.prototype.without = function without() {\n      var ret = new Mixin([this]);\n\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      ret._without = args;\n      return ret;\n    };\n\n    Mixin.prototype.keys = function keys() {\n      var keys = {};\n      var seen = {};\n\n      _keys(keys, this, seen);\n      var ret = Object.keys(keys);\n      return ret;\n    };\n\n    return Mixin;\n  }();\n\n  Mixin._apply = applyMixin;\n  if (emberEnvironment.ENV._ENABLE_BINDING_SUPPORT) {\n    // slotting this so that the legacy addon can add the function here\n    // without triggering an error due to the Object.seal done below\n    Mixin.finishPartial = null;\n    Mixin.detectBinding = null;\n  }\n\n  var MixinPrototype = Mixin.prototype;\n  MixinPrototype.toString = Object.toString;\n\n  emberDebug.debugSeal(MixinPrototype);\n\n  var unprocessedFlag = false;\n\n  function hasUnprocessedMixins() {\n    return unprocessedFlag;\n  }\n\n  function clearUnprocessedMixins() {\n    unprocessedFlag = false;\n  }\n\n  function _detect(curMixin, targetMixin, seen) {\n    var guid = emberUtils.guidFor(curMixin);\n\n    if (seen[guid]) {\n      return false;\n    }\n    seen[guid] = true;\n\n    if (curMixin === targetMixin) {\n      return true;\n    }\n    var mixins = curMixin.mixins;\n    var loc = mixins ? mixins.length : 0;\n    while (--loc >= 0) {\n      if (_detect(mixins[loc], targetMixin, seen)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function _keys(ret, mixin, seen) {\n    if (seen[emberUtils.guidFor(mixin)]) {\n      return;\n    }\n    seen[emberUtils.guidFor(mixin)] = true;\n\n    if (mixin.properties) {\n      var props = Object.keys(mixin.properties);\n      for (var i = 0; i < props.length; i++) {\n        var key = props[i];\n        ret[key] = true;\n      }\n    } else if (mixin.mixins) {\n      mixin.mixins.forEach(function (x) {\n        return _keys(ret, x, seen);\n      });\n    }\n  }\n\n  var REQUIRED = new Descriptor();\n  REQUIRED.toString = function () {\n    return '(Required Property)';\n  };\n\n  /**\n    Denotes a required property for a mixin\n  \n    @method required\n    @for Ember\n    @private\n  */\n  function required() {\n    true && !false && emberDebug.deprecate('Ember.required is deprecated as its behavior is inconsistent and unreliable.', false, { id: 'ember-metal.required', until: '3.0.0' });\n\n    return REQUIRED;\n  }\n\n  function Alias(methodName) {\n    this.isDescriptor = true;\n    this.methodName = methodName;\n  }\n\n  Alias.prototype = new Descriptor();\n\n  /**\n    Makes a method available via an additional name.\n  \n    ```app/utils/person.js\n    import EmberObject, {\n      aliasMethod\n    } from '@ember/object';\n  \n    export default EmberObject.extend({\n      name() {\n        return 'Tomhuda Katzdale';\n      },\n      moniker: aliasMethod('name')\n    });\n    ```\n  \n    ```javascript\n    let goodGuy = Person.create();\n  \n    goodGuy.name();    // 'Tomhuda Katzdale'\n    goodGuy.moniker(); // 'Tomhuda Katzdale'\n    ```\n  \n    @method aliasMethod\n    @static\n    @for @ember/object\n    @param {String} methodName name of the method to alias\n    @public\n  */\n  function aliasMethod(methodName) {\n    return new Alias(methodName);\n  }\n\n  // ..........................................................\n  // OBSERVER HELPER\n  //\n\n  /**\n    Specify a method that observes property changes.\n  \n    ```javascript\n    import EmberObject from '@ember/object';\n    import { observer } from '@ember/object';\n  \n    export default EmberObject.extend({\n      valueObserver: observer('value', function() {\n        // Executes whenever the \"value\" property changes\n      })\n    });\n    ```\n  \n    Also available as `Function.prototype.observes` if prototype extensions are\n    enabled.\n  \n    @method observer\n    @for @ember/object\n    @param {String} propertyNames*\n    @param {Function} func\n    @return func\n    @public\n    @static\n  */\n  function observer() {\n    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    var func = args.pop();\n    var _paths = args;\n\n    true && !(typeof func === 'function') && emberDebug.assert('observer called without a function', typeof func === 'function');\n    true && !(_paths.length > 0 && _paths.every(function (p) {\n      return typeof p === 'string' && p.length;\n    })) && emberDebug.assert('observer called without valid path', _paths.length > 0 && _paths.every(function (p) {\n      return typeof p === 'string' && p.length;\n    }));\n\n    var paths = [];\n    var addWatchedProperty = function (path) {\n      return paths.push(path);\n    };\n\n    for (var i = 0; i < _paths.length; ++i) {\n      expandProperties(_paths[i], addWatchedProperty);\n    }\n\n    func.__ember_observes__ = paths;\n    return func;\n  }\n\n  /**\n    When observers fire, they are called with the arguments `obj`, `keyName`.\n  \n    Note, `@each.property` observer is called per each add or replace of an element\n    and it's not called with a specific enumeration item.\n  \n    A `_beforeObserver` fires before a property changes.\n  \n    @method beforeObserver\n    @for Ember\n    @param {String} propertyNames*\n    @param {Function} func\n    @return func\n    @deprecated\n    @private\n  */\n  function _beforeObserver() {\n    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    var func = args.pop();\n    var _paths = args;\n\n    true && !(typeof func === 'function') && emberDebug.assert('_beforeObserver called without a function', typeof func === 'function');\n\n    var paths = [];\n    var addWatchedProperty = function (path) {\n      paths.push(path);\n    };\n\n    for (var i = 0; i < _paths.length; ++i) {\n      expandProperties(_paths[i], addWatchedProperty);\n    }\n\n    func.__ember_observesBefore__ = paths;\n    return func;\n  }\n\n  /**\n   @module ember\n   @private\n   */\n\n  /**\n    Read-only property that returns the result of a container lookup.\n  \n    @class InjectedProperty\n    @namespace Ember\n    @constructor\n    @param {String} type The container type the property will lookup\n    @param {String} name (optional) The name the property will lookup, defaults\n           to the property's name\n    @private\n  */\n  function InjectedProperty(type, name) {\n    this.type = type;\n    this.name = name;\n\n    this._super$Constructor(injectedPropertyGet);\n    AliasedPropertyPrototype.oneWay.call(this);\n  }\n\n  function injectedPropertyGet(keyName) {\n    var desc = descriptorFor(this, keyName);\n    var owner = emberUtils.getOwner(this) || this.container; // fallback to `container` for backwards compat\n\n    true && !(desc && desc.type) && emberDebug.assert('InjectedProperties should be defined with the inject computed property macros.', desc && desc.type);\n    true && !owner && emberDebug.assert('Attempting to lookup an injected property on an object without a container, ensure that the object was instantiated via a container.', owner);\n\n    return owner.lookup(desc.type + ':' + (desc.name || keyName));\n  }\n\n  InjectedProperty.prototype = Object.create(Descriptor.prototype);\n\n  var InjectedPropertyPrototype = InjectedProperty.prototype;\n  var ComputedPropertyPrototype$1 = ComputedProperty.prototype;\n  var AliasedPropertyPrototype = AliasedProperty.prototype;\n\n  InjectedPropertyPrototype._super$Constructor = ComputedProperty;\n\n  InjectedPropertyPrototype.get = ComputedPropertyPrototype$1.get;\n  InjectedPropertyPrototype.readOnly = ComputedPropertyPrototype$1.readOnly;\n  InjectedPropertyPrototype.teardown = ComputedPropertyPrototype$1.teardown;\n\n  var splice = Array.prototype.splice;\n\n  function replace(array, idx, amt, objects) {\n    var args = [].concat(objects);\n    var ret = [];\n    // https://code.google.com/p/chromium/issues/detail?id=56588\n    var size = 60000;\n    var start = idx;\n    var ends = amt;\n    var count = void 0,\n        chunk = void 0;\n\n    while (args.length) {\n      count = ends > size ? size : ends;\n      if (count <= 0) {\n        count = 0;\n      }\n\n      chunk = args.splice(0, size);\n      chunk = [start, count].concat(chunk);\n\n      start += size;\n      ends -= count;\n\n      ret = ret.concat(splice.apply(array, chunk));\n    }\n    return ret;\n  }\n\n  function isProxy(value) {\n    if (typeof value === 'object' && value !== null) {\n      var meta$$1 = peekMeta(value);\n      return meta$$1 === undefined ? false : meta$$1.isProxy();\n    }\n\n    return false;\n  }\n\n  function descriptor(desc) {\n    return new Descriptor$1(desc);\n  }\n\n  /**\n    A wrapper for a native ES5 descriptor. In an ideal world, we wouldn't need\n    this at all, however, the way we currently flatten/merge our mixins require\n    a special value to denote a descriptor.\n  \n    @class Descriptor\n    @private\n  */\n\n  var Descriptor$1 = function (_EmberDescriptor) {\n    emberBabel.inherits(Descriptor$$1, _EmberDescriptor);\n\n    function Descriptor$$1(desc) {\n      emberBabel.classCallCheck(this, Descriptor$$1);\n\n      var _this = emberBabel.possibleConstructorReturn(this, _EmberDescriptor.call(this));\n\n      _this.desc = desc;\n      return _this;\n    }\n\n    Descriptor$$1.prototype.setup = function setup(obj, key) {\n      Object.defineProperty(obj, key, this.desc);\n    };\n\n    Descriptor$$1.prototype.get = function get(obj, key) {\n      return obj[key];\n    };\n\n    Descriptor$$1.prototype.set = function set(obj, key, value) {\n      return obj[key] = value;\n    };\n\n    Descriptor$$1.prototype.teardown = function teardown() {};\n\n    return Descriptor$$1;\n  }(Descriptor);\n\n  exports['default'] = Ember;\n  exports.computed = computed;\n  exports.cacheFor = cacheFor;\n  exports.ComputedProperty = ComputedProperty;\n  exports.alias = alias;\n  exports.merge = merge;\n  exports.deprecateProperty = deprecateProperty;\n  exports.instrument = instrument;\n  exports._instrumentStart = _instrumentStart;\n  exports.instrumentationReset = reset;\n  exports.instrumentationSubscribe = subscribe;\n  exports.instrumentationUnsubscribe = unsubscribe;\n  exports.getOnerror = getOnerror;\n  exports.setOnerror = setOnerror;\n  exports.setDispatchOverride = setDispatchOverride;\n  exports.getDispatchOverride = getDispatchOverride;\n  exports.descriptorFor = descriptorFor;\n  exports.meta = meta;\n  exports.peekMeta = peekMeta;\n  exports.deleteMeta = deleteMeta;\n  exports.Cache = Cache;\n  exports._getPath = _getPath;\n  exports.get = get;\n  exports.getWithDefault = getWithDefault;\n  exports.set = set;\n  exports.trySet = trySet;\n  exports.addListener = addListener;\n  exports.hasListeners = hasListeners;\n  exports.on = on;\n  exports.removeListener = removeListener;\n  exports.sendEvent = sendEvent;\n  exports.isNone = isNone;\n  exports.isEmpty = isEmpty;\n  exports.isBlank = isBlank;\n  exports.isPresent = isPresent;\n  exports.run = run;\n  exports.ObserverSet = ObserverSet;\n  exports.beginPropertyChanges = beginPropertyChanges;\n  exports.changeProperties = changeProperties;\n  exports.endPropertyChanges = endPropertyChanges;\n  exports.overrideChains = overrideChains;\n  exports.propertyDidChange = propertyDidChange;\n  exports.propertyWillChange = propertyWillChange;\n  exports.PROPERTY_DID_CHANGE = PROPERTY_DID_CHANGE;\n  exports.defineProperty = defineProperty;\n  exports.Descriptor = Descriptor;\n  exports._hasCachedComputedProperties = _hasCachedComputedProperties;\n  exports.watchKey = watchKey;\n  exports.unwatchKey = unwatchKey;\n  exports.ChainNode = ChainNode;\n  exports.finishChains = finishChains;\n  exports.removeChainWatcher = removeChainWatcher;\n  exports.watchPath = watchPath;\n  exports.unwatchPath = unwatchPath;\n  exports.isWatching = isWatching;\n  exports.unwatch = unwatch;\n  exports.watch = watch;\n  exports.watcherCount = watcherCount;\n  exports.libraries = libraries;\n  exports.Libraries = Libraries;\n  exports.Map = Map;\n  exports.MapWithDefault = MapWithDefault;\n  exports.OrderedSet = OrderedSet;\n  exports.getProperties = getProperties;\n  exports.setProperties = setProperties;\n  exports.expandProperties = expandProperties;\n  exports.addObserver = addObserver;\n  exports.removeObserver = removeObserver;\n  exports._addBeforeObserver = _addBeforeObserver;\n  exports._removeBeforeObserver = _removeBeforeObserver;\n  exports.Mixin = Mixin;\n  exports.aliasMethod = aliasMethod;\n  exports._beforeObserver = _beforeObserver;\n  exports.mixin = mixin;\n  exports.observer = observer;\n  exports.required = required;\n  exports.REQUIRED = REQUIRED;\n  exports.hasUnprocessedMixins = hasUnprocessedMixins;\n  exports.clearUnprocessedMixins = clearUnprocessedMixins;\n  exports.InjectedProperty = InjectedProperty;\n  exports.setHasViews = setHasViews;\n  exports.tagForProperty = tagForProperty;\n  exports.tagFor = tagFor;\n  exports.markObjectAsDirty = markObjectAsDirty;\n  exports.replace = replace;\n  exports.isProxy = isProxy;\n  exports.descriptor = descriptor;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});","enifed('ember-routing/ext/controller', ['exports', 'ember-metal', 'ember-runtime', 'ember-routing/utils'], function (exports, _emberMetal, _emberRuntime, _utils) {\n  'use strict';\n\n  /**\n  @module ember\n  */\n\n  _emberRuntime.ControllerMixin.reopen({\n    concatenatedProperties: ['queryParams'],\n\n    /**\n      Defines which query parameters the controller accepts.\n      If you give the names `['category','page']` it will bind\n      the values of these query parameters to the variables\n      `this.category` and `this.page`.\n      By default, Ember coerces query parameter values using `toggleProperty`.\n      This behavior may lead to unexpected results.\n      To explicitly configure a query parameter property so it coerces as expected, you must define a type property:\n      ```javascript\n        queryParams: [{\n          category: {\n            type: 'boolean'\n          }\n        }]\n      ```\n      @property queryParams\n      @public\n    */\n    queryParams: null,\n\n    /**\n     This property is updated to various different callback functions depending on\n     the current \"state\" of the backing route. It is used by\n     `Controller.prototype._qpChanged`.\n      The methods backing each state can be found in the `Route.prototype._qp` computed\n     property return value (the `.states` property). The current values are listed here for\n     the sanity of future travelers:\n      * `inactive` - This state is used when this controller instance is not part of the active\n       route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and\n       `Route.prototype.actions.finalizeQueryParamChange`.\n     * `active` - This state is used when this controller instance is part of the active\n       route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.\n     * `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).\n       @method _qpDelegate\n      @private\n    */\n    _qpDelegate: null, _qpChanged: function (controller, _prop) {\n      var prop = _prop.substr(0, _prop.length - 3);\n\n      var delegate = controller._qpDelegate;\n      var value = (0, _emberMetal.get)(controller, prop);\n      delegate(prop, value);\n    },\n    transitionToRoute: function () {\n      // target may be either another controller or a router\n      var target = (0, _emberMetal.get)(this, 'target');\n      var method = target.transitionToRoute || target.transitionTo;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return method.apply(target, (0, _utils.prefixRouteNameArg)(this, args));\n    },\n    replaceRoute: function () {\n      // target may be either another controller or a router\n      var target = (0, _emberMetal.get)(this, 'target');\n      var method = target.replaceRoute || target.replaceWith;\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return method.apply(target, (0, _utils.prefixRouteNameArg)(this, args));\n    }\n  });\n\n  exports.default = _emberRuntime.ControllerMixin;\n});","enifed('ember-routing/ext/run_loop', ['ember-metal'], function (_emberMetal) {\n  'use strict';\n\n  // Add a new named queue after the 'actions' queue (where RSVP promises\n  // resolve), which is used in router transitions to prevent unnecessary\n  // loading state entry if all context promises resolve on the\n  // 'actions' queue first.\n  _emberMetal.run._addQueue('routerTransitions', 'actions');\n});","enifed('ember-routing/index', ['exports', 'ember-routing/location/api', 'ember-routing/location/none_location', 'ember-routing/location/hash_location', 'ember-routing/location/history_location', 'ember-routing/location/auto_location', 'ember-routing/system/generate_controller', 'ember-routing/system/controller_for', 'ember-routing/system/dsl', 'ember-routing/system/router', 'ember-routing/system/route', 'ember-routing/system/query_params', 'ember-routing/services/routing', 'ember-routing/services/router', 'ember-routing/system/cache', 'ember-routing/ext/run_loop', 'ember-routing/ext/controller'], function (exports, _api, _none_location, _hash_location, _history_location, _auto_location, _generate_controller, _controller_for, _dsl, _router, _route, _query_params, _routing, _router2, _cache) {\n  'use strict';\n\n  exports.BucketCache = exports.RouterService = exports.RoutingService = exports.QueryParams = exports.Route = exports.Router = exports.RouterDSL = exports.controllerFor = exports.generateControllerFactory = exports.generateController = exports.AutoLocation = exports.HistoryLocation = exports.HashLocation = exports.NoneLocation = exports.Location = undefined;\n  Object.defineProperty(exports, 'Location', {\n    enumerable: true,\n    get: function () {\n      return _api.default;\n    }\n  });\n  Object.defineProperty(exports, 'NoneLocation', {\n    enumerable: true,\n    get: function () {\n      return _none_location.default;\n    }\n  });\n  Object.defineProperty(exports, 'HashLocation', {\n    enumerable: true,\n    get: function () {\n      return _hash_location.default;\n    }\n  });\n  Object.defineProperty(exports, 'HistoryLocation', {\n    enumerable: true,\n    get: function () {\n      return _history_location.default;\n    }\n  });\n  Object.defineProperty(exports, 'AutoLocation', {\n    enumerable: true,\n    get: function () {\n      return _auto_location.default;\n    }\n  });\n  Object.defineProperty(exports, 'generateController', {\n    enumerable: true,\n    get: function () {\n      return _generate_controller.default;\n    }\n  });\n  Object.defineProperty(exports, 'generateControllerFactory', {\n    enumerable: true,\n    get: function () {\n      return _generate_controller.generateControllerFactory;\n    }\n  });\n  Object.defineProperty(exports, 'controllerFor', {\n    enumerable: true,\n    get: function () {\n      return _controller_for.default;\n    }\n  });\n  Object.defineProperty(exports, 'RouterDSL', {\n    enumerable: true,\n    get: function () {\n      return _dsl.default;\n    }\n  });\n  Object.defineProperty(exports, 'Router', {\n    enumerable: true,\n    get: function () {\n      return _router.default;\n    }\n  });\n  Object.defineProperty(exports, 'Route', {\n    enumerable: true,\n    get: function () {\n      return _route.default;\n    }\n  });\n  Object.defineProperty(exports, 'QueryParams', {\n    enumerable: true,\n    get: function () {\n      return _query_params.default;\n    }\n  });\n  Object.defineProperty(exports, 'RoutingService', {\n    enumerable: true,\n    get: function () {\n      return _routing.default;\n    }\n  });\n  Object.defineProperty(exports, 'RouterService', {\n    enumerable: true,\n    get: function () {\n      return _router2.default;\n    }\n  });\n  Object.defineProperty(exports, 'BucketCache', {\n    enumerable: true,\n    get: function () {\n      return _cache.default;\n    }\n  });\n});","enifed('ember-routing/location/api', ['exports', 'ember-debug', 'ember-environment', 'ember-routing/location/util'], function (exports, _emberDebug, _emberEnvironment, _util) {\n  'use strict';\n\n  exports.default = {\n    /**\n     This is deprecated in favor of using the container to lookup the location\n     implementation as desired.\n      For example:\n      ```javascript\n     // Given a location registered as follows:\n     container.register('location:history-test', HistoryTestLocation);\n      // You could create a new instance via:\n     container.lookup('location:history-test');\n     ```\n       @method create\n      @param {Object} options\n      @return {Object} an instance of an implementation of the `location` API\n      @deprecated Use the container to lookup the location implementation that you\n      need.\n      @private\n    */\n    create: function (options) {\n      var implementation = options && options.implementation;\n      (true && !(!!implementation) && (0, _emberDebug.assert)('Location.create: you must specify a \\'implementation\\' option', !!implementation));\n\n\n      var implementationClass = this.implementations[implementation];\n      (true && !(!!implementationClass) && (0, _emberDebug.assert)('Location.create: ' + implementation + ' is not a valid implementation', !!implementationClass));\n\n\n      return implementationClass.create.apply(implementationClass, arguments);\n    },\n\n\n    implementations: {},\n    _location: _emberEnvironment.environment.location,\n\n    /**\n      Returns the current `location.hash` by parsing location.href since browsers\n      inconsistently URL-decode `location.hash`.\n       https://bugzilla.mozilla.org/show_bug.cgi?id=483304\n       @private\n      @method getHash\n      @since 1.4.0\n    */\n    _getHash: function () {\n      return (0, _util.getHash)(this.location);\n    }\n  };\n});","enifed('ember-routing/location/auto_location', ['exports', 'ember-utils', 'ember-metal', 'ember-debug', 'ember-runtime', 'ember-environment', 'ember-routing/location/util'], function (exports, _emberUtils, _emberMetal, _emberDebug, _emberRuntime, _emberEnvironment, _util) {\n  'use strict';\n\n  exports.getHistoryPath = getHistoryPath;\n  exports.getHashPath = getHashPath;\n  exports.default = _emberRuntime.Object.extend({\n    /**\n      @private\n       The browser's `location` object. This is typically equivalent to\n      `window.location`, but may be overridden for testing.\n       @property location\n      @default environment.location\n    */\n    location: _emberEnvironment.environment.location,\n\n    /**\n      @private\n       The browser's `history` object. This is typically equivalent to\n      `window.history`, but may be overridden for testing.\n       @since 1.5.1\n      @property history\n      @default environment.history\n    */\n    history: _emberEnvironment.environment.history,\n\n    /**\n     @private\n      The user agent's global variable. In browsers, this will be `window`.\n      @since 1.11\n     @property global\n     @default window\n    */\n    global: _emberEnvironment.environment.window,\n\n    /**\n      @private\n       The browser's `userAgent`. This is typically equivalent to\n      `navigator.userAgent`, but may be overridden for testing.\n       @since 1.5.1\n      @property userAgent\n      @default environment.history\n    */\n    userAgent: _emberEnvironment.environment.userAgent,\n\n    /**\n      @private\n       This property is used by the router to know whether to cancel the routing\n      setup process, which is needed while we redirect the browser.\n       @since 1.5.1\n      @property cancelRouterSetup\n      @default false\n    */\n    cancelRouterSetup: false,\n\n    /**\n      @private\n       Will be pre-pended to path upon state change.\n       @since 1.5.1\n      @property rootURL\n      @default '/'\n    */\n    rootURL: '/',\n\n    /**\n     Called by the router to instruct the location to do any feature detection\n     necessary. In the case of AutoLocation, we detect whether to use history\n     or hash concrete implementations.\n      @private\n    */\n    detect: function () {\n      var rootURL = this.rootURL;\n\n      (true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _emberDebug.assert)('rootURL must end with a trailing forward slash e.g. \"/app/\"', rootURL.charAt(rootURL.length - 1) === '/'));\n\n\n      var implementation = detectImplementation({\n        location: this.location,\n        history: this.history,\n        userAgent: this.userAgent,\n        rootURL: rootURL,\n        documentMode: this.documentMode,\n        global: this.global\n      });\n\n      if (implementation === false) {\n        (0, _emberMetal.set)(this, 'cancelRouterSetup', true);\n        implementation = 'none';\n      }\n\n      var concrete = (0, _emberUtils.getOwner)(this).lookup('location:' + implementation);\n      (0, _emberMetal.set)(concrete, 'rootURL', rootURL);\n\n      (true && !(!!concrete) && (0, _emberDebug.assert)('Could not find location \\'' + implementation + '\\'.', !!concrete));\n\n\n      (0, _emberMetal.set)(this, 'concreteImplementation', concrete);\n    },\n\n\n    initState: delegateToConcreteImplementation('initState'),\n    getURL: delegateToConcreteImplementation('getURL'),\n    setURL: delegateToConcreteImplementation('setURL'),\n    replaceURL: delegateToConcreteImplementation('replaceURL'),\n    onUpdateURL: delegateToConcreteImplementation('onUpdateURL'),\n    formatURL: delegateToConcreteImplementation('formatURL'),\n\n    willDestroy: function () {\n      var concreteImplementation = (0, _emberMetal.get)(this, 'concreteImplementation');\n\n      if (concreteImplementation) {\n        concreteImplementation.destroy();\n      }\n    }\n  });\n\n\n  function delegateToConcreteImplementation(methodName) {\n    return function () {\n      var concreteImplementation = (0, _emberMetal.get)(this, 'concreteImplementation');\n      (true && !(!!concreteImplementation) && (0, _emberDebug.assert)('AutoLocation\\'s detect() method should be called before calling any other hooks.', !!concreteImplementation));\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (0, _emberUtils.tryInvoke)(concreteImplementation, methodName, args);\n    };\n  }\n\n  /*\n    Given the browser's `location`, `history` and `userAgent`, and a configured\n    root URL, this function detects whether the browser supports the [History\n    API](https://developer.mozilla.org/en-US/docs/Web/API/History) and returns a\n    string representing the Location object to use based on its determination.\n  \n    For example, if the page loads in an evergreen browser, this function would\n    return the string \"history\", meaning the history API and thus HistoryLocation\n    should be used. If the page is loaded in IE8, it will return the string\n    \"hash,\" indicating that the History API should be simulated by manipulating the\n    hash portion of the location.\n  \n  */\n\n  function detectImplementation(options) {\n    var location = options.location;\n    var userAgent = options.userAgent;\n    var history = options.history;\n    var documentMode = options.documentMode;\n    var global = options.global;\n    var rootURL = options.rootURL;\n\n    var implementation = 'none';\n    var cancelRouterSetup = false;\n    var currentPath = (0, _util.getFullPath)(location);\n\n    if ((0, _util.supportsHistory)(userAgent, history)) {\n      var historyPath = getHistoryPath(rootURL, location);\n\n      // If the browser supports history and we have a history path, we can use\n      // the history location with no redirects.\n      if (currentPath === historyPath) {\n        return 'history';\n      } else {\n        if (currentPath.substr(0, 2) === '/#') {\n          history.replaceState({ path: historyPath }, null, historyPath);\n          implementation = 'history';\n        } else {\n          cancelRouterSetup = true;\n          (0, _util.replacePath)(location, historyPath);\n        }\n      }\n    } else if ((0, _util.supportsHashChange)(documentMode, global)) {\n      var hashPath = getHashPath(rootURL, location);\n\n      // Be sure we're using a hashed path, otherwise let's switch over it to so\n      // we start off clean and consistent. We'll count an index path with no\n      // hash as \"good enough\" as well.\n      if (currentPath === hashPath || currentPath === '/' && hashPath === '/#/') {\n        implementation = 'hash';\n      } else {\n        // Our URL isn't in the expected hash-supported format, so we want to\n        // cancel the router setup and replace the URL to start off clean\n        cancelRouterSetup = true;\n        (0, _util.replacePath)(location, hashPath);\n      }\n    }\n\n    if (cancelRouterSetup) {\n      return false;\n    }\n\n    return implementation;\n  }\n\n  /**\n    @private\n  \n    Returns the current path as it should appear for HistoryLocation supported\n    browsers. This may very well differ from the real current path (e.g. if it\n    starts off as a hashed URL)\n  */\n  function getHistoryPath(rootURL, location) {\n    var path = (0, _util.getPath)(location);\n    var hash = (0, _util.getHash)(location);\n    var query = (0, _util.getQuery)(location);\n    var rootURLIndex = path.indexOf(rootURL);\n    var routeHash = void 0,\n        hashParts = void 0;\n\n    (true && !(rootURLIndex === 0) && (0, _emberDebug.assert)('Path ' + path + ' does not start with the provided rootURL ' + rootURL, rootURLIndex === 0));\n\n\n    // By convention, Ember.js routes using HashLocation are required to start\n    // with `#/`. Anything else should NOT be considered a route and should\n    // be passed straight through, without transformation.\n    if (hash.substr(0, 2) === '#/') {\n      // There could be extra hash segments after the route\n      hashParts = hash.substr(1).split('#');\n      // The first one is always the route url\n      routeHash = hashParts.shift();\n\n      // If the path already has a trailing slash, remove the one\n      // from the hashed route so we don't double up.\n      if (path.charAt(path.length - 1) === '/') {\n        routeHash = routeHash.substr(1);\n      }\n\n      // This is the \"expected\" final order\n      path += routeHash + query;\n\n      if (hashParts.length) {\n        path += '#' + hashParts.join('#');\n      }\n    } else {\n      path += query + hash;\n    }\n\n    return path;\n  }\n\n  /**\n    @private\n  \n    Returns the current path as it should appear for HashLocation supported\n    browsers. This may very well differ from the real current path.\n  \n    @method _getHashPath\n  */\n  function getHashPath(rootURL, location) {\n    var path = rootURL;\n    var historyPath = getHistoryPath(rootURL, location);\n    var routePath = historyPath.substr(rootURL.length);\n\n    if (routePath !== '') {\n      if (routePath[0] !== '/') {\n        routePath = '/' + routePath;\n      }\n\n      path += '#' + routePath;\n    }\n\n    return path;\n  }\n});","enifed('ember-routing/location/hash_location', ['exports', 'ember-metal', 'ember-runtime', 'ember-routing/location/api'], function (exports, _emberMetal, _emberRuntime, _api) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    implementation: 'hash',\n\n    init: function () {\n      (0, _emberMetal.set)(this, 'location', (0, _emberMetal.get)(this, '_location') || window.location);\n\n      this._hashchangeHandler = undefined;\n    },\n\n\n    /**\n      @private\n       Returns normalized location.hash\n       @since 1.5.1\n      @method getHash\n    */\n    getHash: _api.default._getHash,\n\n    /**\n      Returns the normalized URL, constructed from `location.hash`.\n       e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.\n       By convention, hashed paths must begin with a forward slash, otherwise they\n      are not treated as a path so we can distinguish intent.\n       @private\n      @method getURL\n    */\n    getURL: function () {\n      var originalPath = this.getHash().substr(1);\n      var outPath = originalPath;\n\n      if (outPath[0] !== '/') {\n        outPath = '/';\n\n        // Only add the # if the path isn't empty.\n        // We do NOT want `/#` since the ampersand\n        // is only included (conventionally) when\n        // the location.hash has a value\n        if (originalPath) {\n          outPath += '#' + originalPath;\n        }\n      }\n\n      return outPath;\n    },\n\n\n    /**\n      Set the `location.hash` and remembers what was set. This prevents\n      `onUpdateURL` callbacks from triggering when the hash was set by\n      `HashLocation`.\n       @private\n      @method setURL\n      @param path {String}\n    */\n    setURL: function (path) {\n      (0, _emberMetal.get)(this, 'location').hash = path;\n      (0, _emberMetal.set)(this, 'lastSetURL', path);\n    },\n\n\n    /**\n      Uses location.replace to update the url without a page reload\n      or history modification.\n       @private\n      @method replaceURL\n      @param path {String}\n    */\n    replaceURL: function (path) {\n      (0, _emberMetal.get)(this, 'location').replace('#' + path);\n      (0, _emberMetal.set)(this, 'lastSetURL', path);\n    },\n\n\n    /**\n      Register a callback to be invoked when the hash changes. These\n      callbacks will execute when the user presses the back or forward\n      button, but not after `setURL` is invoked.\n       @private\n      @method onUpdateURL\n      @param callback {Function}\n    */\n    onUpdateURL: function (callback) {\n      this._removeEventListener();\n\n      this._hashchangeHandler = _emberMetal.run.bind(this, function () {\n        var path = this.getURL();\n        if ((0, _emberMetal.get)(this, 'lastSetURL') === path) {\n          return;\n        }\n\n        (0, _emberMetal.set)(this, 'lastSetURL', null);\n\n        callback(path);\n      });\n\n      window.addEventListener('hashchange', this._hashchangeHandler);\n    },\n\n\n    /**\n      Given a URL, formats it to be placed into the page as part\n      of an element's `href` attribute.\n       This is used, for example, when using the {{action}} helper\n      to generate a URL based on an event.\n       @private\n      @method formatURL\n      @param url {String}\n    */\n    formatURL: function (url) {\n      return '#' + url;\n    },\n\n\n    /**\n      Cleans up the HashLocation event listener.\n       @private\n      @method willDestroy\n    */\n    willDestroy: function () {\n      this._removeEventListener();\n    },\n    _removeEventListener: function () {\n      if (this._hashchangeHandler) {\n        window.removeEventListener('hashchange', this._hashchangeHandler);\n      }\n    }\n  });\n});","enifed('ember-routing/location/history_location', ['exports', 'ember-metal', 'ember-runtime', 'ember-routing/location/api'], function (exports, _emberMetal, _emberRuntime, _api) {\n  'use strict';\n\n  /**\n  @module @ember/routing\n  */\n\n  var popstateFired = false;\n\n  function _uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r, v;\n      r = Math.random() * 16 | 0;\n      v = c === 'x' ? r : r & 3 | 8;\n      return v.toString(16);\n    });\n  }\n\n  /**\n    HistoryLocation implements the location API using the browser's\n    history.pushState API.\n  \n    Using `HistoryLocation` results in URLs that are indistinguishable from a\n    standard URL. This relies upon the browser's `history` API.\n  \n    Example:\n  \n    ```app/router.js\n    Router.map(function() {\n      this.route('posts', function() {\n        this.route('new');\n      });\n    });\n  \n    Router.reopen({\n      location: 'history'\n    });\n    ```\n  \n    This will result in a posts.new url of `/posts/new`.\n  \n    Keep in mind that your server must serve the Ember app at all the routes you\n    define.\n  \n    @class HistoryLocation\n    @extends EmberObject\n    @protected\n  */\n  exports.default = _emberRuntime.Object.extend({\n    implementation: 'history',\n\n    init: function () {\n      this._super.apply(this, arguments);\n\n      var base = document.querySelector('base');\n      var baseURL = '';\n      if (base) {\n        baseURL = base.getAttribute('href');\n      }\n\n      (0, _emberMetal.set)(this, 'baseURL', baseURL);\n      (0, _emberMetal.set)(this, 'location', (0, _emberMetal.get)(this, 'location') || window.location);\n\n      this._popstateHandler = undefined;\n    },\n\n\n    /**\n      Used to set state on first call to setURL\n       @private\n      @method initState\n    */\n    initState: function () {\n      var history = (0, _emberMetal.get)(this, 'history') || window.history;\n      (0, _emberMetal.set)(this, 'history', history);\n\n      if (history && 'state' in history) {\n        this.supportsHistory = true;\n      }\n\n      var state = this.getState();\n      var path = this.formatURL(this.getURL());\n      if (state && state.path === path) {\n        // preserve existing state\n        // used for webkit workaround, since there will be no initial popstate event\n        this._previousURL = this.getURL();\n      } else {\n        this.replaceState(path);\n      }\n    },\n\n\n    /**\n      Will be pre-pended to path upon state change\n       @property rootURL\n      @default '/'\n      @private\n    */\n    rootURL: '/',\n\n    /**\n      Returns the current `location.pathname` without `rootURL` or `baseURL`\n       @private\n      @method getURL\n      @return url {String}\n    */\n    getURL: function () {\n      var location = (0, _emberMetal.get)(this, 'location');\n      var path = location.pathname;\n\n      var rootURL = (0, _emberMetal.get)(this, 'rootURL');\n      var baseURL = (0, _emberMetal.get)(this, 'baseURL');\n\n      // remove trailing slashes if they exists\n      rootURL = rootURL.replace(/\\/$/, '');\n      baseURL = baseURL.replace(/\\/$/, '');\n\n      // remove baseURL and rootURL from start of path\n      var url = path.replace(new RegExp('^' + baseURL + '(?=/|$)'), '').replace(new RegExp('^' + rootURL + '(?=/|$)'), '').replace(/\\/\\/$/g, '/'); // remove extra slashes\n\n      var search = location.search || '';\n      url += search + this.getHash();\n\n      return url;\n    },\n\n\n    /**\n      Uses `history.pushState` to update the url without a page reload.\n       @private\n      @method setURL\n      @param path {String}\n    */\n    setURL: function (path) {\n      var state = this.getState();\n      path = this.formatURL(path);\n\n      if (!state || state.path !== path) {\n        this.pushState(path);\n      }\n    },\n\n\n    /**\n      Uses `history.replaceState` to update the url without a page reload\n      or history modification.\n       @private\n      @method replaceURL\n      @param path {String}\n    */\n    replaceURL: function (path) {\n      var state = this.getState();\n      path = this.formatURL(path);\n\n      if (!state || state.path !== path) {\n        this.replaceState(path);\n      }\n    },\n\n\n    /**\n      Get the current `history.state`. Checks for if a polyfill is\n      required and if so fetches this._historyState. The state returned\n      from getState may be null if an iframe has changed a window's\n      history.\n       The object returned will contain a `path` for the given state as well\n      as a unique state `id`. The state index will allow the app to distinguish\n      between two states with similar paths but should be unique from one another.\n       @private\n      @method getState\n      @return state {Object}\n    */\n    getState: function () {\n      if (this.supportsHistory) {\n        return (0, _emberMetal.get)(this, 'history').state;\n      }\n\n      return this._historyState;\n    },\n\n\n    /**\n     Pushes a new state.\n      @private\n     @method pushState\n     @param path {String}\n    */\n    pushState: function (path) {\n      var state = { path: path, uuid: _uuid() };\n\n      (0, _emberMetal.get)(this, 'history').pushState(state, null, path);\n\n      this._historyState = state;\n\n      // used for webkit workaround\n      this._previousURL = this.getURL();\n    },\n\n\n    /**\n     Replaces the current state.\n      @private\n     @method replaceState\n     @param path {String}\n    */\n    replaceState: function (path) {\n      var state = { path: path, uuid: _uuid() };\n\n      (0, _emberMetal.get)(this, 'history').replaceState(state, null, path);\n\n      this._historyState = state;\n\n      // used for webkit workaround\n      this._previousURL = this.getURL();\n    },\n\n\n    /**\n      Register a callback to be invoked whenever the browser\n      history changes, including using forward and back buttons.\n       @private\n      @method onUpdateURL\n      @param callback {Function}\n    */\n    onUpdateURL: function (callback) {\n      var _this = this;\n\n      this._removeEventListener();\n\n      this._popstateHandler = function () {\n        // Ignore initial page load popstate event in Chrome\n        if (!popstateFired) {\n          popstateFired = true;\n          if (_this.getURL() === _this._previousURL) {\n            return;\n          }\n        }\n        callback(_this.getURL());\n      };\n\n      window.addEventListener('popstate', this._popstateHandler);\n    },\n\n\n    /**\n      Used when using `{{action}}` helper.  The url is always appended to the rootURL.\n       @private\n      @method formatURL\n      @param url {String}\n      @return formatted url {String}\n    */\n    formatURL: function (url) {\n      var rootURL = (0, _emberMetal.get)(this, 'rootURL');\n      var baseURL = (0, _emberMetal.get)(this, 'baseURL');\n\n      if (url !== '') {\n        // remove trailing slashes if they exists\n        rootURL = rootURL.replace(/\\/$/, '');\n        baseURL = baseURL.replace(/\\/$/, '');\n      } else if (baseURL[0] === '/' && rootURL[0] === '/') {\n        // if baseURL and rootURL both start with a slash\n        // ... remove trailing slash from baseURL if it exists\n        baseURL = baseURL.replace(/\\/$/, '');\n      }\n\n      return baseURL + rootURL + url;\n    },\n\n\n    /**\n      Cleans up the HistoryLocation event listener.\n       @private\n      @method willDestroy\n    */\n    willDestroy: function () {\n      this._removeEventListener();\n    },\n\n\n    /**\n      @private\n       Returns normalized location.hash\n       @method getHash\n    */\n    getHash: _api.default._getHash,\n\n    _removeEventListener: function () {\n      if (this._popstateHandler) {\n        window.removeEventListener('popstate', this._popstateHandler);\n      }\n    }\n  });\n});","enifed('ember-routing/location/none_location', ['exports', 'ember-metal', 'ember-debug', 'ember-runtime'], function (exports, _emberMetal, _emberDebug, _emberRuntime) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    implementation: 'none',\n    path: '',\n\n    detect: function () {\n      var rootURL = this.rootURL;\n\n      (true && !(rootURL.charAt(rootURL.length - 1) === '/') && (0, _emberDebug.assert)('rootURL must end with a trailing forward slash e.g. \"/app/\"', rootURL.charAt(rootURL.length - 1) === '/'));\n    },\n\n\n    /**\n      Will be pre-pended to path.\n       @private\n      @property rootURL\n      @default '/'\n    */\n    rootURL: '/',\n\n    /**\n      Returns the current path without `rootURL`.\n       @private\n      @method getURL\n      @return {String} path\n    */\n    getURL: function () {\n      var path = (0, _emberMetal.get)(this, 'path');\n      var rootURL = (0, _emberMetal.get)(this, 'rootURL');\n\n      // remove trailing slashes if they exists\n      rootURL = rootURL.replace(/\\/$/, '');\n\n      // remove rootURL from url\n      return path.replace(new RegExp('^' + rootURL + '(?=/|$)'), '');\n    },\n\n\n    /**\n      Set the path and remembers what was set. Using this method\n      to change the path will not invoke the `updateURL` callback.\n       @private\n      @method setURL\n      @param path {String}\n    */\n    setURL: function (path) {\n      (0, _emberMetal.set)(this, 'path', path);\n    },\n\n\n    /**\n      Register a callback to be invoked when the path changes. These\n      callbacks will execute when the user presses the back or forward\n      button, but not after `setURL` is invoked.\n       @private\n      @method onUpdateURL\n      @param callback {Function}\n    */\n    onUpdateURL: function (callback) {\n      this.updateCallback = callback;\n    },\n\n\n    /**\n      Sets the path and calls the `updateURL` callback.\n       @private\n      @method handleURL\n      @param url {String}\n    */\n    handleURL: function (url) {\n      (0, _emberMetal.set)(this, 'path', url);\n      this.updateCallback(url);\n    },\n\n\n    /**\n      Given a URL, formats it to be placed into the page as part\n      of an element's `href` attribute.\n       This is used, for example, when using the {{action}} helper\n      to generate a URL based on an event.\n       @private\n      @method formatURL\n      @param url {String}\n      @return {String} url\n    */\n    formatURL: function (url) {\n      var rootURL = (0, _emberMetal.get)(this, 'rootURL');\n\n      if (url !== '') {\n        // remove trailing slashes if they exists\n        rootURL = rootURL.replace(/\\/$/, '');\n      }\n\n      return rootURL + url;\n    }\n  });\n});","enifed('ember-routing/location/util', ['exports'], function (exports) {\n  'use strict';\n\n  exports.getPath = getPath;\n  exports.getQuery = getQuery;\n  exports.getHash = getHash;\n  exports.getFullPath = getFullPath;\n  exports.getOrigin = getOrigin;\n  exports.supportsHashChange = supportsHashChange;\n  exports.supportsHistory = supportsHistory;\n  exports.replacePath = replacePath;\n  /**\n    @private\n  \n    Returns the current `location.pathname`, normalized for IE inconsistencies.\n  */\n  function getPath(location) {\n    var pathname = location.pathname;\n    // Various versions of IE/Opera don't always return a leading slash\n    if (pathname[0] !== '/') {\n      pathname = '/' + pathname;\n    }\n\n    return pathname;\n  }\n\n  /**\n    @private\n  \n    Returns the current `location.search`.\n  */\n  function getQuery(location) {\n    return location.search;\n  }\n\n  /**\n    @private\n  \n    Returns the current `location.hash` by parsing location.href since browsers\n    inconsistently URL-decode `location.hash`.\n  \n    Should be passed the browser's `location` object as the first argument.\n  \n    https://bugzilla.mozilla.org/show_bug.cgi?id=483304\n  */\n  function getHash(location) {\n    var href = location.href;\n    var hashIndex = href.indexOf('#');\n\n    if (hashIndex === -1) {\n      return '';\n    } else {\n      return href.substr(hashIndex);\n    }\n  }\n\n  function getFullPath(location) {\n    return getPath(location) + getQuery(location) + getHash(location);\n  }\n\n  function getOrigin(location) {\n    var origin = location.origin;\n\n    // Older browsers, especially IE, don't have origin\n    if (!origin) {\n      origin = location.protocol + '//' + location.hostname;\n\n      if (location.port) {\n        origin += ':' + location.port;\n      }\n    }\n\n    return origin;\n  }\n\n  /*\n    `documentMode` only exist in Internet Explorer, and it's tested because IE8 running in\n    IE7 compatibility mode claims to support `onhashchange` but actually does not.\n  \n    `global` is an object that may have an `onhashchange` property.\n  \n    @private\n    @function supportsHashChange\n  */\n  function supportsHashChange(documentMode, global) {\n    return 'onhashchange' in global && (documentMode === undefined || documentMode > 7);\n  }\n\n  /*\n    `userAgent` is a user agent string. We use user agent testing here, because\n    the stock Android browser is known to have buggy versions of the History API,\n    in some Android versions.\n  \n    @private\n    @function supportsHistory\n  */\n  function supportsHistory(userAgent, history) {\n    // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support\n    // Unfortunately support is really buggy and there is no clean way to detect\n    // these bugs, so we fall back to a user agent sniff :(\n\n    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies\n    // itself as 'Mobile Safari' as well, nor Windows Phone.\n    if ((userAgent.indexOf('Android 2.') !== -1 || userAgent.indexOf('Android 4.0') !== -1) && userAgent.indexOf('Mobile Safari') !== -1 && userAgent.indexOf('Chrome') === -1 && userAgent.indexOf('Windows Phone') === -1) {\n      return false;\n    }\n\n    return !!(history && 'pushState' in history);\n  }\n\n  /**\n    Replaces the current location, making sure we explicitly include the origin\n    to prevent redirecting to a different origin.\n  \n    @private\n  */\n  function replacePath(location, path) {\n    location.replace(getOrigin(location) + path);\n  }\n});","enifed('ember-routing/services/router', ['exports', 'ember-runtime', 'ember-routing/utils'], function (exports, _emberRuntime, _utils) {\n  'use strict';\n\n  /**\n     The Router service is the public API that provides component/view layer\n     access to the router.\n  \n     @public\n     @class RouterService\n     @category ember-routing-router-service\n   */\n  /**\n  @module ember\n  */\n\n  var RouterService = _emberRuntime.Service.extend({\n\n    /**\n       Name of the current route.\n        This property represent the logical name of the route,\n       which is comma separated.\n       For the following router:\n        ```app/router.js\n       Router.map(function() {\n         this.route('about);\n         this.route('blog', function () {\n           this.route('post', { path: ':post_id' });\n         });\n       });\n       ```\n        It will return:\n        * `index` when you visit `/`\n       * `about` when you visit `/about`\n       * `blog.index` when you visit `/blog`\n       * `blog.post` when you visit `/blog/some-post-id`\n        @property currentRouteName\n       @type String\n       @public\n     */\n    currentRouteName: (0, _emberRuntime.readOnly)('_router.currentRouteName'),\n\n    /**\n       Current URL for the application.\n       This property represent the URL path for this route.\n      For the following router:\n        ```app/router.js\n       Router.map(function() {\n         this.route('about);\n         this.route('blog', function () {\n           this.route('post', { path: ':post_id' });\n         });\n       });\n       ```\n        It will return:\n        * `/` when you visit `/`\n       * `/about` when you visit `/about`\n       * `/blog/index` when you visit `/blog`\n       * `/blog/post` when you visit `/blog/some-post-id`\n        @property currentURL\n       @type String\n       @public\n     */\n    currentURL: (0, _emberRuntime.readOnly)('_router.currentURL'),\n\n    /**\n      The `location` property determines the type of URL's that your\n      application will use.\n      The following location types are currently available:\n      * `auto`\n      * `hash`\n      * `history`\n      * `none`\n       @property location\n      @default 'hash'\n      @see {Location}\n      @public\n    */\n    location: (0, _emberRuntime.readOnly)('_router.location'),\n\n    /**\n      The `rootURL` property represents the URL of the root of\n      the application, '/' by default.\n      This prefix is assumed on all routes defined on this app.\n       IF you change the `rootURL` in your environment configuration\n      like so:\n       ```config/environment.js\n      'use strict';\n       module.exports = function(environment) {\n        let ENV = {\n          modulePrefix: 'router-service',\n          environment,\n          rootURL: '/my-root',\n        …\n        }\n      ]\n      ```\n       This property will return `/my-root`.\n       @property rootURL\n      @default '/'\n      @public\n    */\n    rootURL: (0, _emberRuntime.readOnly)('_router.rootURL'),\n    _router: null,\n\n    transitionTo: function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if ((0, _utils.resemblesURL)(args[0])) {\n        return this._router._doURLTransition('transitionTo', args[0]);\n      }\n\n      var _extractRouteArgs = (0, _utils.extractRouteArgs)(args),\n          routeName = _extractRouteArgs.routeName,\n          models = _extractRouteArgs.models,\n          queryParams = _extractRouteArgs.queryParams;\n\n      var transition = this._router._doTransition(routeName, models, queryParams, true);\n      transition._keepDefaultQueryParamValues = true;\n\n      return transition;\n    },\n    replaceWith: function () /* routeNameOrUrl, ...models, options */{\n      return this.transitionTo.apply(this, arguments).method('replace');\n    },\n    urlFor: function () /* routeName, ...models, options */{\n      var _router;\n\n      return (_router = this._router).generate.apply(_router, arguments);\n    },\n    isActive: function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var _extractRouteArgs2 = (0, _utils.extractRouteArgs)(args),\n          routeName = _extractRouteArgs2.routeName,\n          models = _extractRouteArgs2.models,\n          queryParams = _extractRouteArgs2.queryParams;\n\n      var routerMicrolib = this._router._routerMicrolib;\n\n      if (!routerMicrolib.isActiveIntent(routeName, models, null)) {\n        return false;\n      }\n      var hasQueryParams = Object.keys(queryParams).length > 0;\n\n      if (hasQueryParams) {\n        this._router._prepareQueryParams(routeName, models, queryParams, true /* fromRouterService */);\n        return (0, _utils.shallowEqual)(queryParams, routerMicrolib.state.queryParams);\n      }\n\n      return true;\n    }\n  });\n\n  exports.default = RouterService;\n});","enifed('ember-routing/services/routing', ['exports', 'ember-utils', 'ember-runtime', 'ember-metal'], function (exports, _emberUtils, _emberRuntime, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberRuntime.Service.extend({\n    router: null,\n\n    targetState: (0, _emberRuntime.readOnly)('router.targetState'),\n    currentState: (0, _emberRuntime.readOnly)('router.currentState'),\n    currentRouteName: (0, _emberRuntime.readOnly)('router.currentRouteName'),\n    currentPath: (0, _emberRuntime.readOnly)('router.currentPath'),\n\n    hasRoute: function (routeName) {\n      return (0, _emberMetal.get)(this, 'router').hasRoute(routeName);\n    },\n    transitionTo: function (routeName, models, queryParams, shouldReplace) {\n      var router = (0, _emberMetal.get)(this, 'router');\n\n      var transition = router._doTransition(routeName, models, queryParams);\n\n      if (shouldReplace) {\n        transition.method('replace');\n      }\n\n      return transition;\n    },\n    normalizeQueryParams: function (routeName, models, queryParams) {\n      (0, _emberMetal.get)(this, 'router')._prepareQueryParams(routeName, models, queryParams);\n    },\n    generateURL: function (routeName, models, queryParams) {\n      var router = (0, _emberMetal.get)(this, 'router');\n      // return early when the router microlib is not present, which is the case for {{link-to}} in integration tests\n      if (!router._routerMicrolib) {\n        return;\n      }\n\n      var visibleQueryParams = {};\n      if (queryParams) {\n        (0, _emberUtils.assign)(visibleQueryParams, queryParams);\n        this.normalizeQueryParams(routeName, models, visibleQueryParams);\n      }\n\n      return router.generate.apply(router, [routeName].concat(models, [{ queryParams: visibleQueryParams }]));\n    },\n    isActiveForRoute: function (contexts, queryParams, routeName, routerState, isCurrentWhenSpecified) {\n      var router = (0, _emberMetal.get)(this, 'router');\n\n      var handlers = router._routerMicrolib.recognizer.handlersFor(routeName);\n      var leafName = handlers[handlers.length - 1].handler;\n      var maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);\n\n      // NOTE: any ugliness in the calculation of activeness is largely\n      // due to the fact that we support automatic normalizing of\n      // `resource` -> `resource.index`, even though there might be\n      // dynamic segments / query params defined on `resource.index`\n      // which complicates (and makes somewhat ambiguous) the calculation\n      // of activeness for links that link to `resource` instead of\n      // directly to `resource.index`.\n\n      // if we don't have enough contexts revert back to full route name\n      // this is because the leaf route will use one of the contexts\n      if (contexts.length > maximumContexts) {\n        routeName = leafName;\n      }\n\n      return routerState.isActiveIntent(routeName, contexts, queryParams, !isCurrentWhenSpecified);\n    }\n  });\n\n\n  function numberOfContextsAcceptedByHandler(handler, handlerInfos) {\n    var req = 0;\n    for (var i = 0; i < handlerInfos.length; i++) {\n      req += handlerInfos[i].names.length;\n      if (handlerInfos[i].handler === handler) {\n        break;\n      }\n    }\n\n    return req;\n  }\n});","enifed('ember-routing/system/cache', ['exports', 'ember-runtime'], function (exports, _emberRuntime) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    init: function () {\n      this.cache = Object.create(null);\n    },\n    has: function (bucketKey) {\n      return !!this.cache[bucketKey];\n    },\n    stash: function (bucketKey, key, value) {\n      var bucket = this.cache[bucketKey];\n\n      if (!bucket) {\n        bucket = this.cache[bucketKey] = Object.create(null);\n      }\n\n      bucket[key] = value;\n    },\n    lookup: function (bucketKey, prop, defaultValue) {\n      var cache = this.cache;\n      if (!this.has(bucketKey)) {\n        return defaultValue;\n      }\n\n      var bucket = cache[bucketKey];\n      if (prop in bucket && bucket[prop] !== undefined) {\n        return bucket[prop];\n      } else {\n        return defaultValue;\n      }\n    }\n  });\n});","enifed(\"ember-routing/system/controller_for\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.default = controllerFor;\n  /**\n  @module ember\n  */\n\n  /**\n    Finds a controller instance.\n  \n    @for Ember\n    @method controllerFor\n    @private\n  */\n  function controllerFor(container, controllerName, lookupOptions) {\n    return container.lookup(\"controller:\" + controllerName, lookupOptions);\n  }\n});","enifed('ember-routing/system/dsl', ['exports', 'ember-babel', 'ember-utils', 'ember-debug'], function (exports, _emberBabel, _emberUtils, _emberDebug) {\n  'use strict';\n\n  var uuid = 0;\n\n  var DSL = function () {\n    function DSL(name, options) {\n      (0, _emberBabel.classCallCheck)(this, DSL);\n\n      this.parent = name;\n      this.enableLoadingSubstates = options && options.enableLoadingSubstates;\n      this.matches = [];\n      this.explicitIndex = undefined;\n      this.options = options;\n    }\n\n    DSL.prototype.route = function route(name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments[2];\n\n      var dummyErrorRoute = '/_unused_dummy_error_path_route_' + name + '/:error';\n      if (arguments.length === 2 && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      (true && !(function () {\n        if (options.overrideNameAssertion === true) {\n          return true;\n        }\n\n        return ['array', 'basic', 'object', 'application'].indexOf(name) === -1;\n      }()) && (0, _emberDebug.assert)('\\'' + name + '\\' cannot be used as a route name.', function () {\n        if (options.overrideNameAssertion === true) {\n          return true;\n        }return ['array', 'basic', 'object', 'application'].indexOf(name) === -1;\n      }()));\n\n\n      if (this.enableLoadingSubstates) {\n        createRoute(this, name + '_loading', { resetNamespace: options.resetNamespace });\n        createRoute(this, name + '_error', { resetNamespace: options.resetNamespace, path: dummyErrorRoute });\n      }\n\n      if (callback) {\n        var fullName = getFullName(this, name, options.resetNamespace);\n        var dsl = new DSL(fullName, this.options);\n\n        createRoute(dsl, 'loading');\n        createRoute(dsl, 'error', { path: dummyErrorRoute });\n\n        callback.call(dsl);\n\n        createRoute(this, name, options, dsl.generate());\n      } else {\n        createRoute(this, name, options);\n      }\n    };\n\n    DSL.prototype.push = function push(url, name, callback, serialize) {\n      var parts = name.split('.');\n\n      if (this.options.engineInfo) {\n        var localFullName = name.slice(this.options.engineInfo.fullName.length + 1);\n        var routeInfo = (0, _emberUtils.assign)({ localFullName: localFullName }, this.options.engineInfo);\n\n        if (serialize) {\n          routeInfo.serializeMethod = serialize;\n        }\n\n        this.options.addRouteForEngine(name, routeInfo);\n      } else if (serialize) {\n        throw new Error('Defining a route serializer on route \\'' + name + '\\' outside an Engine is not allowed.');\n      }\n\n      if (url === '' || url === '/' || parts[parts.length - 1] === 'index') {\n        this.explicitIndex = true;\n      }\n\n      this.matches.push(url, name, callback);\n    };\n\n    DSL.prototype.generate = function generate() {\n      var dslMatches = this.matches;\n\n      if (!this.explicitIndex) {\n        this.route('index', { path: '/' });\n      }\n\n      return function (match) {\n        for (var i = 0; i < dslMatches.length; i += 3) {\n          match(dslMatches[i]).to(dslMatches[i + 1], dslMatches[i + 2]);\n        }\n      };\n    };\n\n    DSL.prototype.mount = function mount(_name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var engineRouteMap = this.options.resolveRouteMap(_name);\n      var name = _name;\n\n      if (options.as) {\n        name = options.as;\n      }\n\n      var fullName = getFullName(this, name, options.resetNamespace);\n\n      var engineInfo = {\n        name: _name,\n        instanceId: uuid++,\n        mountPoint: fullName,\n        fullName: fullName\n      };\n\n      var path = options.path;\n\n      if (typeof path !== 'string') {\n        path = '/' + name;\n      }\n\n      var callback = void 0;\n      var dummyErrorRoute = '/_unused_dummy_error_path_route_' + name + '/:error';\n      if (engineRouteMap) {\n        var shouldResetEngineInfo = false;\n        var oldEngineInfo = this.options.engineInfo;\n        if (oldEngineInfo) {\n          shouldResetEngineInfo = true;\n          this.options.engineInfo = engineInfo;\n        }\n\n        var optionsForChild = (0, _emberUtils.assign)({ engineInfo: engineInfo }, this.options);\n        var childDSL = new DSL(fullName, optionsForChild);\n\n        createRoute(childDSL, 'loading');\n        createRoute(childDSL, 'error', { path: dummyErrorRoute });\n\n        engineRouteMap.class.call(childDSL);\n\n        callback = childDSL.generate();\n\n        if (shouldResetEngineInfo) {\n          this.options.engineInfo = oldEngineInfo;\n        }\n      }\n\n      var localFullName = 'application';\n      var routeInfo = (0, _emberUtils.assign)({ localFullName: localFullName }, engineInfo);\n\n      if (this.enableLoadingSubstates) {\n        // These values are important to register the loading routes under their\n        // proper names for the Router and within the Engine's registry.\n        var substateName = name + '_loading';\n        var _localFullName = 'application_loading';\n        var _routeInfo = (0, _emberUtils.assign)({ localFullName: _localFullName }, engineInfo);\n        createRoute(this, substateName, { resetNamespace: options.resetNamespace });\n        this.options.addRouteForEngine(substateName, _routeInfo);\n\n        substateName = name + '_error';\n        _localFullName = 'application_error';\n        _routeInfo = (0, _emberUtils.assign)({ localFullName: _localFullName }, engineInfo);\n        createRoute(this, substateName, { resetNamespace: options.resetNamespace, path: dummyErrorRoute });\n        this.options.addRouteForEngine(substateName, _routeInfo);\n      }\n\n      this.options.addRouteForEngine(fullName, routeInfo);\n\n      this.push(path, fullName, callback);\n    };\n\n    return DSL;\n  }();\n\n  exports.default = DSL;\n\n\n  function canNest(dsl) {\n    return dsl.parent !== 'application';\n  }\n\n  function getFullName(dsl, name, resetNamespace) {\n    if (canNest(dsl) && resetNamespace !== true) {\n      return dsl.parent + '.' + name;\n    } else {\n      return name;\n    }\n  }\n\n  function createRoute(dsl, name) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments[3];\n\n    var fullName = getFullName(dsl, name, options.resetNamespace);\n\n    if (typeof options.path !== 'string') {\n      options.path = '/' + name;\n    }\n\n    dsl.push(options.path, fullName, callback, options.serialize);\n  }\n\n  DSL.map = function (callback) {\n    var dsl = new DSL();\n    callback.call(dsl);\n    return dsl;\n  };\n});","enifed('ember-routing/system/generate_controller', ['exports', 'ember-metal', 'ember-debug'], function (exports, _emberMetal, _emberDebug) {\n  'use strict';\n\n  exports.generateControllerFactory = generateControllerFactory;\n  exports.default = generateController;\n\n  /**\n  @module ember\n  */\n\n  /**\n    Generates a controller factory\n  \n    @for Ember\n    @method generateControllerFactory\n    @private\n  */\n\n  function generateControllerFactory(owner, controllerName) {\n    var Factory = owner.factoryFor('controller:basic').class;\n\n    Factory = Factory.extend({\n      toString: function () {\n        return '(generated ' + controllerName + ' controller)';\n      }\n    });\n\n    var fullName = 'controller:' + controllerName;\n\n    owner.register(fullName, Factory);\n\n    return Factory;\n  }\n\n  /**\n    Generates and instantiates a controller extending from `controller:basic`\n    if present, or `Controller` if not.\n  \n    @for Ember\n    @method generateController\n    @private\n    @since 1.3.0\n  */\n  function generateController(owner, controllerName) {\n    generateControllerFactory(owner, controllerName);\n\n    var fullName = 'controller:' + controllerName;\n    var instance = owner.lookup(fullName);\n\n    if (true) {\n      if ((0, _emberMetal.get)(instance, 'namespace.LOG_ACTIVE_GENERATION')) {\n        (0, _emberDebug.info)('generated -> ' + fullName, { fullName: fullName });\n      }\n    }\n\n    return instance;\n  }\n});","enifed('ember-routing/system/query_params', ['exports', 'ember-runtime'], function (exports, _emberRuntime) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    isQueryParams: true,\n    values: null\n  });\n});","enifed('ember-routing/system/route', ['exports', 'ember-utils', 'ember-metal', 'ember-debug', 'ember-runtime', 'ember-routing/system/generate_controller', 'ember-routing/utils'], function (exports, _emberUtils, _emberMetal, _emberDebug, _emberRuntime, _generate_controller, _utils) {\n  'use strict';\n\n  exports.defaultSerialize = defaultSerialize;\n  exports.hasDefaultSerialize = hasDefaultSerialize;\n\n\n  function K() {\n    return this;\n  }\n\n  function defaultSerialize(model, params) {\n    if (params.length < 1 || !model) {\n      return;\n    }\n\n    var object = {};\n\n    if (params.length === 1) {\n      var name = params[0];\n      if (name in model) {\n        object[name] = (0, _emberMetal.get)(model, name);\n      } else if (/_id$/.test(name)) {\n        object[name] = (0, _emberMetal.get)(model, 'id');\n      }\n    } else {\n      object = (0, _emberMetal.getProperties)(model, params);\n    }\n\n    return object;\n  }\n\n  var DEFAULT_SERIALIZE = (0, _emberUtils.symbol)('DEFAULT_SERIALIZE');\n\n  defaultSerialize[DEFAULT_SERIALIZE] = true;\n\n  function hasDefaultSerialize(route) {\n    return !!route.serialize[DEFAULT_SERIALIZE];\n  }\n\n  /**\n  @module @ember/routing\n  */\n\n  /**\n    The `Route` class is used to define individual routes. Refer to\n    the [routing guide](https://emberjs.com/guides/routing/) for documentation.\n  \n    @class Route\n    @extends EmberObject\n    @uses ActionHandler\n    @uses Evented\n    @since 1.0.0\n    @public\n  */\n  var Route = _emberRuntime.Object.extend(_emberRuntime.ActionHandler, _emberRuntime.Evented, {\n    /**\n      Configuration hash for this route's queryParams. The possible\n      configuration options and their defaults are as follows\n      (assuming a query param whose controller property is `page`):\n       ```javascript\n      queryParams: {\n        page: {\n          // By default, controller query param properties don't\n          // cause a full transition when they are changed, but\n          // rather only cause the URL to update. Setting\n          // `refreshModel` to true will cause an \"in-place\"\n          // transition to occur, whereby the model hooks for\n          // this route (and any child routes) will re-fire, allowing\n          // you to reload models (e.g., from the server) using the\n          // updated query param values.\n          refreshModel: false,\n           // By default, changes to controller query param properties\n          // cause the URL to update via `pushState`, which means an\n          // item will be added to the browser's history, allowing\n          // you to use the back button to restore the app to the\n          // previous state before the query param property was changed.\n          // Setting `replace` to true will use `replaceState` (or its\n          // hash location equivalent), which causes no browser history\n          // item to be added. This options name and default value are\n          // the same as the `link-to` helper's `replace` option.\n          replace: false,\n           // By default, the query param URL key is the same name as\n          // the controller property name. Use `as` to specify a\n          // different URL key.\n          as: 'page'\n        }\n      }\n      ```\n       @property queryParams\n      @for Route\n      @type Object\n      @since 1.6.0\n      @public\n    */\n    queryParams: {},\n\n    _setRouteName: function (name) {\n      this.routeName = name;\n      this.fullRouteName = getEngineRouteName((0, _emberUtils.getOwner)(this), name);\n    },\n\n\n    /**\n      @private\n       @property _qp\n    */\n    _qp: (0, _emberMetal.computed)(function () {\n      var _this = this;\n\n      var combinedQueryParameterConfiguration = void 0;\n\n      var controllerName = this.controllerName || this.routeName;\n      var owner = (0, _emberUtils.getOwner)(this);\n      var controller = owner.lookup('controller:' + controllerName);\n      var queryParameterConfiguraton = (0, _emberMetal.get)(this, 'queryParams');\n      var hasRouterDefinedQueryParams = Object.keys(queryParameterConfiguraton).length > 0;\n\n      if (controller) {\n        // the developer has authored a controller class in their application for\n        // this route find its query params and normalize their object shape them\n        // merge in the query params for the route. As a mergedProperty,\n        // Route#queryParams is always at least `{}`\n\n        var controllerDefinedQueryParameterConfiguration = (0, _emberMetal.get)(controller, 'queryParams') || {};\n        var normalizedControllerQueryParameterConfiguration = (0, _utils.normalizeControllerQueryParams)(controllerDefinedQueryParameterConfiguration);\n        combinedQueryParameterConfiguration = mergeEachQueryParams(normalizedControllerQueryParameterConfiguration, queryParameterConfiguraton);\n      } else if (hasRouterDefinedQueryParams) {\n        // the developer has not defined a controller but *has* supplied route query params.\n        // Generate a class for them so we can later insert default values\n        controller = (0, _generate_controller.default)(owner, controllerName);\n        combinedQueryParameterConfiguration = queryParameterConfiguraton;\n      }\n\n      var qps = [];\n      var map = {};\n      var propertyNames = [];\n\n      for (var propName in combinedQueryParameterConfiguration) {\n        if (!combinedQueryParameterConfiguration.hasOwnProperty(propName)) {\n          continue;\n        }\n\n        // to support the dubious feature of using unknownProperty\n        // on queryParams configuration\n        if (propName === 'unknownProperty' || propName === '_super') {\n          // possible todo: issue deprecation warning?\n          continue;\n        }\n\n        var desc = combinedQueryParameterConfiguration[propName];\n        var scope = desc.scope || 'model';\n        var parts = void 0;\n\n        if (scope === 'controller') {\n          parts = [];\n        }\n\n        var urlKey = desc.as || this.serializeQueryParamKey(propName);\n        var defaultValue = (0, _emberMetal.get)(controller, propName);\n\n        if (Array.isArray(defaultValue)) {\n          defaultValue = (0, _emberRuntime.A)(defaultValue.slice());\n        }\n\n        var type = desc.type || (0, _emberRuntime.typeOf)(defaultValue);\n\n        var defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);\n        var scopedPropertyName = controllerName + ':' + propName;\n        var qp = {\n          undecoratedDefaultValue: (0, _emberMetal.get)(controller, propName),\n          defaultValue: defaultValue,\n          serializedDefaultValue: defaultValueSerialized,\n          serializedValue: defaultValueSerialized,\n\n          type: type,\n          urlKey: urlKey,\n          prop: propName,\n          scopedPropertyName: scopedPropertyName,\n          controllerName: controllerName,\n          route: this,\n          parts: parts, // provided later when stashNames is called if 'model' scope\n          values: null, // provided later when setup is called. no idea why.\n          scope: scope\n        };\n\n        map[propName] = map[urlKey] = map[scopedPropertyName] = qp;\n        qps.push(qp);\n        propertyNames.push(propName);\n      }\n\n      return {\n        qps: qps,\n        map: map,\n        propertyNames: propertyNames,\n        states: {\n          /*\n            Called when a query parameter changes in the URL, this route cares\n            about that query parameter, but the route is not currently\n            in the active route hierarchy.\n          */\n          inactive: function (prop, value) {\n            var qp = map[prop];\n            _this._qpChanged(prop, value, qp);\n          },\n          /*\n            Called when a query parameter changes in the URL, this route cares\n            about that query parameter, and the route is currently\n            in the active route hierarchy.\n          */\n          active: function (prop, value) {\n            var qp = map[prop];\n            _this._qpChanged(prop, value, qp);\n            return _this._activeQPChanged(qp, value);\n          },\n          /*\n            Called when a value of a query parameter this route handles changes in a controller\n            and the route is currently in the active route hierarchy.\n          */\n          allowOverrides: function (prop, value) {\n            var qp = map[prop];\n            _this._qpChanged(prop, value, qp);\n            return _this._updatingQPChanged(qp);\n          }\n        }\n      };\n    }),\n\n    /**\n      @private\n       @property _names\n    */\n    _names: null,\n\n    _stashNames: function (handlerInfo, dynamicParent) {\n      if (this._names) {\n        return;\n      }\n      var names = this._names = handlerInfo._names;\n\n      if (!names.length) {\n        handlerInfo = dynamicParent;\n        names = handlerInfo && handlerInfo._names || [];\n      }\n\n      var qps = (0, _emberMetal.get)(this, '_qp.qps');\n\n      var namePaths = new Array(names.length);\n      for (var a = 0; a < names.length; ++a) {\n        namePaths[a] = handlerInfo.name + '.' + names[a];\n      }\n\n      for (var i = 0; i < qps.length; ++i) {\n        var qp = qps[i];\n        if (qp.scope === 'model') {\n          qp.parts = namePaths;\n        }\n      }\n    },\n    _activeQPChanged: function (qp, value) {\n      this.router._activeQPChanged(qp.scopedPropertyName, value);\n    },\n    _updatingQPChanged: function (qp) {\n      this.router._updatingQPChanged(qp.urlKey);\n    },\n\n\n    mergedProperties: ['queryParams'],\n\n    paramsFor: function (name) {\n      var _this2 = this;\n\n      var route = (0, _emberUtils.getOwner)(this).lookup('route:' + name);\n\n      if (!route) {\n        return {};\n      }\n\n      var transition = this.router._routerMicrolib.activeTransition;\n      var state = transition ? transition.state : this.router._routerMicrolib.state;\n\n      var fullName = route.fullRouteName;\n      var params = (0, _emberUtils.assign)({}, state.params[fullName]);\n      var queryParams = getQueryParamsFor(route, state);\n\n      return Object.keys(queryParams).reduce(function (params, key) {\n        (true && !(!params[key]) && (0, _emberDebug.assert)('The route \\'' + _this2.routeName + '\\' has both a dynamic segment and query param with name \\'' + key + '\\'. Please rename one to avoid collisions.', !params[key]));\n\n        params[key] = queryParams[key];\n        return params;\n      }, params);\n    },\n    serializeQueryParamKey: function (controllerPropertyName) {\n      return controllerPropertyName;\n    },\n    serializeQueryParam: function (value, urlKey, defaultValueType) {\n      // urlKey isn't used here, but anyone overriding\n      // can use it to provide serialization specific\n      // to a certain query param.\n      return this.router._serializeQueryParam(value, defaultValueType);\n    },\n    deserializeQueryParam: function (value, urlKey, defaultValueType) {\n      // urlKey isn't used here, but anyone overriding\n      // can use it to provide deserialization specific\n      // to a certain query param.\n      return this.router._deserializeQueryParam(value, defaultValueType);\n    },\n    _optionsForQueryParam: function (qp) {\n      return (0, _emberMetal.get)(this, 'queryParams.' + qp.urlKey) || (0, _emberMetal.get)(this, 'queryParams.' + qp.prop) || {};\n    },\n\n\n    /**\n      A hook you can use to reset controller values either when the model\n      changes or the route is exiting.\n       ```app/routes/articles.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        resetController(controller, isExiting, transition) {\n          if (isExiting && transition.targetName !== 'error') {\n            controller.set('page', 1);\n          }\n        }\n      });\n      ```\n       @method resetController\n      @param {Controller} controller instance\n      @param {Boolean} isExiting\n      @param {Object} transition\n      @since 1.7.0\n      @public\n    */\n    resetController: K,\n\n    exit: function () {\n      this.deactivate();\n      this.trigger('deactivate');\n      this.teardownViews();\n    },\n    _reset: function (isExiting, transition) {\n      var controller = this.controller;\n      controller._qpDelegate = (0, _emberMetal.get)(this, '_qp.states.inactive');\n\n      this.resetController(controller, isExiting, transition);\n    },\n    enter: function () {\n      this.connections = [];\n      this.activate();\n      this.trigger('activate');\n    },\n\n\n    /**\n      The name of the template to use by default when rendering this routes\n      template.\n       ```app/routes/posts/list.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        templateName: 'posts/list'\n      });\n      ```\n       ```app/routes/posts/index.js\n      import PostsList from '../posts/list';\n       export default PostsList.extend();\n      ```\n       ```app/routes/posts/archived.js\n      import PostsList from '../posts/list';\n       export default PostsList.extend();\n      ```\n       @property templateName\n      @type String\n      @default null\n      @since 1.4.0\n      @public\n    */\n    templateName: null,\n\n    /**\n      The name of the controller to associate with this route.\n       By default, Ember will lookup a route's controller that matches the name\n      of the route (i.e. `App.PostController` for `App.PostRoute`). However,\n      if you would like to define a specific controller to use, you can do so\n      using this property.\n       This is useful in many ways, as the controller specified will be:\n       * passed to the `setupController` method.\n      * used as the controller for the template being rendered by the route.\n      * returned from a call to `controllerFor` for the route.\n       @property controllerName\n      @type String\n      @default null\n      @since 1.4.0\n      @public\n    */\n    controllerName: null,\n\n    /**\n      The `willTransition` action is fired at the beginning of any\n      attempted transition with a `Transition` object as the sole\n      argument. This action can be used for aborting, redirecting,\n      or decorating the transition from the currently active routes.\n       A good example is preventing navigation when a form is\n      half-filled out:\n       ```app/routes/contact-form.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        actions: {\n          willTransition(transition) {\n            if (this.controller.get('userHasEnteredData')) {\n              this.controller.displayNavigationConfirm();\n              transition.abort();\n            }\n          }\n        }\n      });\n      ```\n       You can also redirect elsewhere by calling\n      `this.transitionTo('elsewhere')` from within `willTransition`.\n      Note that `willTransition` will not be fired for the\n      redirecting `transitionTo`, since `willTransition` doesn't\n      fire when there is already a transition underway. If you want\n      subsequent `willTransition` actions to fire for the redirecting\n      transition, you must first explicitly call\n      `transition.abort()`.\n       To allow the `willTransition` event to continue bubbling to the parent\n      route, use `return true;`. When the `willTransition` method has a\n      return value of `true` then the parent route's `willTransition` method\n      will be fired, enabling \"bubbling\" behavior for the event.\n       @event willTransition\n      @param {Transition} transition\n      @since 1.0.0\n      @public\n    */\n\n    /**\n      The `didTransition` action is fired after a transition has\n      successfully been completed. This occurs after the normal model\n      hooks (`beforeModel`, `model`, `afterModel`, `setupController`)\n      have resolved. The `didTransition` action has no arguments,\n      however, it can be useful for tracking page views or resetting\n      state on the controller.\n       ```app/routes/login.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        actions: {\n          didTransition() {\n            this.controller.get('errors.base').clear();\n            return true; // Bubble the didTransition event\n          }\n        }\n      });\n      ```\n       @event didTransition\n      @since 1.2.0\n      @public\n    */\n\n    /**\n      The `loading` action is fired on the route when a route's `model`\n      hook returns a promise that is not already resolved. The current\n      `Transition` object is the first parameter and the route that\n      triggered the loading event is the second parameter.\n       ```app/routes/application.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        actions: {\n          loading(transition, route) {\n            let controller = this.controllerFor('foo');\n            controller.set('currentlyLoading', true);\n             transition.finally(function() {\n              controller.set('currentlyLoading', false);\n            });\n          }\n        }\n      });\n      ```\n       @event loading\n      @param {Transition} transition\n      @param {Route} route The route that triggered the loading event\n      @since 1.2.0\n      @public\n    */\n\n    /**\n      When attempting to transition into a route, any of the hooks\n      may return a promise that rejects, at which point an `error`\n      action will be fired on the partially-entered routes, allowing\n      for per-route error handling logic, or shared error handling\n      logic defined on a parent route.\n       Here is an example of an error handler that will be invoked\n      for rejected promises from the various hooks on the route,\n      as well as any unhandled errors from child routes:\n       ```app/routes/admin.js\n      import { reject } from 'rsvp';\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        beforeModel() {\n          return reject('bad things!');\n        },\n         actions: {\n          error(error, transition) {\n            // Assuming we got here due to the error in `beforeModel`,\n            // we can expect that error === \"bad things!\",\n            // but a promise model rejecting would also\n            // call this hook, as would any errors encountered\n            // in `afterModel`.\n             // The `error` hook is also provided the failed\n            // `transition`, which can be stored and later\n            // `.retry()`d if desired.\n             this.transitionTo('login');\n          }\n        }\n      });\n      ```\n       `error` actions that bubble up all the way to `ApplicationRoute`\n      will fire a default error handler that logs the error. You can\n      specify your own global default error handler by overriding the\n      `error` handler on `ApplicationRoute`:\n       ```app/routes/application.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        actions: {\n          error(error, transition) {\n            this.controllerFor('banner').displayError(error.message);\n          }\n        }\n      });\n      ```\n      @event error\n      @param {Error} error\n      @param {Transition} transition\n      @since 1.0.0\n      @public\n    */\n\n    /**\n      This event is triggered when the router enters the route. It is\n      not executed when the model for the route changes.\n       ```app/routes/application.js\n      import { on } from '@ember/object/evented';\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        collectAnalytics: on('activate', function(){\n          collectAnalytics();\n        })\n      });\n      ```\n       @event activate\n      @since 1.9.0\n      @public\n    */\n\n    /**\n      This event is triggered when the router completely exits this\n      route. It is not executed when the model for the route changes.\n       ```app/routes/index.js\n      import { on } from '@ember/object/evented';\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        trackPageLeaveAnalytics: on('deactivate', function(){\n          trackPageLeaveAnalytics();\n        })\n      });\n      ```\n       @event deactivate\n      @since 1.9.0\n      @public\n    */\n\n    /**\n      The controller associated with this route.\n       Example\n       ```app/routes/form.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        actions: {\n          willTransition(transition) {\n            if (this.controller.get('userHasEnteredData') &&\n                !confirm('Are you sure you want to abandon progress?')) {\n              transition.abort();\n            } else {\n              // Bubble the `willTransition` action so that\n              // parent routes can decide whether or not to abort.\n              return true;\n            }\n          }\n        }\n      });\n      ```\n       @property controller\n      @type Controller\n      @since 1.6.0\n      @public\n    */\n\n    actions: {\n      queryParamsDidChange: function (changed, totalPresent, removed) {\n        var qpMap = (0, _emberMetal.get)(this, '_qp').map;\n\n        var totalChanged = Object.keys(changed).concat(Object.keys(removed));\n        for (var i = 0; i < totalChanged.length; ++i) {\n          var qp = qpMap[totalChanged[i]];\n          if (qp && (0, _emberMetal.get)(this._optionsForQueryParam(qp), 'refreshModel') && this.router.currentState) {\n            this.refresh();\n            break;\n          }\n        }\n\n        return true;\n      },\n      finalizeQueryParamChange: function (params, finalParams, transition) {\n        if (this.fullRouteName !== 'application') {\n          return true;\n        }\n\n        // Transition object is absent for intermediate transitions.\n        if (!transition) {\n          return;\n        }\n\n        var handlerInfos = transition.state.handlerInfos;\n        var router = this.router;\n        var qpMeta = router._queryParamsFor(handlerInfos);\n        var changes = router._qpUpdates;\n        var replaceUrl = void 0;\n\n        (0, _utils.stashParamNames)(router, handlerInfos);\n\n        for (var i = 0; i < qpMeta.qps.length; ++i) {\n          var qp = qpMeta.qps[i];\n          var route = qp.route;\n          var controller = route.controller;\n          var presentKey = qp.urlKey in params && qp.urlKey;\n\n          // Do a reverse lookup to see if the changed query\n          // param URL key corresponds to a QP property on\n          // this controller.\n          var value = void 0,\n              svalue = void 0;\n          if (changes && qp.urlKey in changes) {\n            // Value updated in/before setupController\n            value = (0, _emberMetal.get)(controller, qp.prop);\n            svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);\n          } else {\n            if (presentKey) {\n              svalue = params[presentKey];\n\n              if (svalue !== undefined) {\n                value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);\n              }\n            } else {\n              // No QP provided; use default value.\n              svalue = qp.serializedDefaultValue;\n              value = copyDefaultValue(qp.defaultValue);\n            }\n          }\n\n          controller._qpDelegate = (0, _emberMetal.get)(route, '_qp.states.inactive');\n\n          var thisQueryParamChanged = svalue !== qp.serializedValue;\n          if (thisQueryParamChanged) {\n            if (transition.queryParamsOnly && replaceUrl !== false) {\n              var options = route._optionsForQueryParam(qp);\n              var replaceConfigValue = (0, _emberMetal.get)(options, 'replace');\n              if (replaceConfigValue) {\n                replaceUrl = true;\n              } else if (replaceConfigValue === false) {\n                // Explicit pushState wins over any other replaceStates.\n                replaceUrl = false;\n              }\n            }\n\n            (0, _emberMetal.set)(controller, qp.prop, value);\n          }\n\n          // Stash current serialized value of controller.\n          qp.serializedValue = svalue;\n\n          var thisQueryParamHasDefaultValue = qp.serializedDefaultValue === svalue;\n          if (!thisQueryParamHasDefaultValue || transition._keepDefaultQueryParamValues) {\n            finalParams.push({\n              value: svalue,\n              visible: true,\n              key: presentKey || qp.urlKey\n            });\n          }\n        }\n\n        if (replaceUrl) {\n          transition.method('replace');\n        }\n\n        qpMeta.qps.forEach(function (qp) {\n          var routeQpMeta = (0, _emberMetal.get)(qp.route, '_qp');\n          var finalizedController = qp.route.controller;\n          finalizedController._qpDelegate = (0, _emberMetal.get)(routeQpMeta, 'states.active');\n        });\n\n        router._qpUpdates = null;\n      }\n    },\n\n    /**\n      This hook is executed when the router completely exits this route. It is\n      not executed when the model for the route changes.\n       @method deactivate\n      @since 1.0.0\n      @public\n    */\n    deactivate: K,\n\n    /**\n      This hook is executed when the router enters the route. It is not executed\n      when the model for the route changes.\n       @method activate\n      @since 1.0.0\n      @public\n    */\n    activate: K,\n\n    transitionTo: function (name, context) {\n      var _router;\n\n      // eslint-disable-line no-unused-vars\n      return (_router = this.router).transitionTo.apply(_router, (0, _utils.prefixRouteNameArg)(this, arguments));\n    },\n    intermediateTransitionTo: function () {\n      var _router2;\n\n      (_router2 = this.router).intermediateTransitionTo.apply(_router2, (0, _utils.prefixRouteNameArg)(this, arguments));\n    },\n    refresh: function () {\n      return this.router._routerMicrolib.refresh(this);\n    },\n    replaceWith: function () {\n      var _router3;\n\n      return (_router3 = this.router).replaceWith.apply(_router3, (0, _utils.prefixRouteNameArg)(this, arguments));\n    },\n    send: function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (this.router && this.router._routerMicrolib || !(0, _emberDebug.isTesting)()) {\n        var _router4;\n\n        (_router4 = this.router).send.apply(_router4, args);\n      } else {\n        var name = args.shift();\n        var action = this.actions[name];\n        if (action) {\n          return action.apply(this, args);\n        }\n      }\n    },\n    setup: function (context, transition) {\n      var controller = void 0;\n\n      var controllerName = this.controllerName || this.routeName;\n      var definedController = this.controllerFor(controllerName, true);\n\n      if (definedController) {\n        controller = definedController;\n      } else {\n        controller = this.generateController(controllerName);\n      }\n\n      // Assign the route's controller so that it can more easily be\n      // referenced in action handlers. Side effects. Side effects everywhere.\n      if (!this.controller) {\n        var propNames = (0, _emberMetal.get)(this, '_qp.propertyNames');\n        addQueryParamsObservers(controller, propNames);\n        this.controller = controller;\n      }\n\n      var queryParams = (0, _emberMetal.get)(this, '_qp');\n\n      var states = queryParams.states;\n\n      controller._qpDelegate = states.allowOverrides;\n\n      if (transition) {\n        // Update the model dep values used to calculate cache keys.\n        (0, _utils.stashParamNames)(this.router, transition.state.handlerInfos);\n\n        var cache = this._bucketCache;\n        var params = transition.params;\n        var allParams = queryParams.propertyNames;\n\n        allParams.forEach(function (prop) {\n          var aQp = queryParams.map[prop];\n          aQp.values = params;\n\n          var cacheKey = (0, _utils.calculateCacheKey)(aQp.route.fullRouteName, aQp.parts, aQp.values);\n          var value = cache.lookup(cacheKey, prop, aQp.undecoratedDefaultValue);\n          (0, _emberMetal.set)(controller, prop, value);\n        });\n\n        var qpValues = getQueryParamsFor(this, transition.state);\n        (0, _emberMetal.setProperties)(controller, qpValues);\n      }\n\n      this.setupController(controller, context, transition);\n\n      if (this._environment.options.shouldRender) {\n        this.renderTemplate(controller, context);\n      }\n    },\n    _qpChanged: function (prop, value, qp) {\n      if (!qp) {\n        return;\n      }\n\n      // Update model-dep cache\n      var cache = this._bucketCache;\n      var cacheKey = (0, _utils.calculateCacheKey)(qp.route.fullRouteName, qp.parts, qp.values);\n      cache.stash(cacheKey, prop, value);\n    },\n\n\n    /**\n      This hook is the first of the route entry validation hooks\n      called when an attempt is made to transition into a route\n      or one of its children. It is called before `model` and\n      `afterModel`, and is appropriate for cases when:\n       1) A decision can be made to redirect elsewhere without\n         needing to resolve the model first.\n      2) Any async operations need to occur first before the\n         model is attempted to be resolved.\n       This hook is provided the current `transition` attempt\n      as a parameter, which can be used to `.abort()` the transition,\n      save it for a later `.retry()`, or retrieve values set\n      on it from a previous hook. You can also just call\n      `this.transitionTo` to another route to implicitly\n      abort the `transition`.\n       You can return a promise from this hook to pause the\n      transition until the promise resolves (or rejects). This could\n      be useful, for instance, for retrieving async code from\n      the server that is required to enter a route.\n       @method beforeModel\n      @param {Transition} transition\n      @return {any | Promise<any>} if the value returned from this hook is\n        a promise, the transition will pause until the transition\n        resolves. Otherwise, non-promise return values are not\n        utilized in any way.\n      @since 1.0.0\n      @public\n    */\n    beforeModel: K,\n\n    /**\n      This hook is called after this route's model has resolved.\n      It follows identical async/promise semantics to `beforeModel`\n      but is provided the route's resolved model in addition to\n      the `transition`, and is therefore suited to performing\n      logic that can only take place after the model has already\n      resolved.\n       ```app/routes/posts.js\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        afterModel(posts, transition) {\n          if (posts.get('length') === 1) {\n            this.transitionTo('post.show', posts.get('firstObject'));\n          }\n        }\n      });\n      ```\n       Refer to documentation for `beforeModel` for a description\n      of transition-pausing semantics when a promise is returned\n      from this hook.\n       @method afterModel\n      @param {Object} resolvedModel the value returned from `model`,\n        or its resolved value if it was a promise\n      @param {Transition} transition\n      @return {any | Promise<any>} if the value returned from this hook is\n        a promise, the transition will pause until the transition\n        resolves. Otherwise, non-promise return values are not\n        utilized in any way.\n      @since 1.0.0\n      @public\n     */\n    afterModel: K,\n\n    /**\n      A hook you can implement to optionally redirect to another route.\n       If you call `this.transitionTo` from inside of this hook, this route\n      will not be entered in favor of the other hook.\n       `redirect` and `afterModel` behave very similarly and are\n      called almost at the same time, but they have an important\n      distinction in the case that, from one of these hooks, a\n      redirect into a child route of this route occurs: redirects\n      from `afterModel` essentially invalidate the current attempt\n      to enter this route, and will result in this route's `beforeModel`,\n      `model`, and `afterModel` hooks being fired again within\n      the new, redirecting transition. Redirects that occur within\n      the `redirect` hook, on the other hand, will _not_ cause\n      these hooks to be fired again the second time around; in\n      other words, by the time the `redirect` hook has been called,\n      both the resolved model and attempted entry into this route\n      are considered to be fully validated.\n       @method redirect\n      @param {Object} model the model for this route\n      @param {Transition} transition the transition object associated with the current transition\n      @since 1.0.0\n      @public\n    */\n    redirect: K,\n\n    contextDidChange: function () {\n      this.currentModel = this.context;\n    },\n    model: function (params, transition) {\n      var name = void 0,\n          sawParams = void 0,\n          value = void 0;\n      var queryParams = (0, _emberMetal.get)(this, '_qp.map');\n\n      for (var prop in params) {\n        if (prop === 'queryParams' || queryParams && prop in queryParams) {\n          continue;\n        }\n\n        var match = prop.match(/^(.*)_id$/);\n        if (match !== null) {\n          name = match[1];\n          value = params[prop];\n        }\n        sawParams = true;\n      }\n\n      if (!name) {\n        if (sawParams) {\n          return (0, _emberRuntime.copy)(params);\n        } else {\n          if (transition.resolveIndex < 1) {\n            return;\n          }\n          return transition.state.handlerInfos[transition.resolveIndex - 1].context;\n        }\n      }\n\n      return this.findModel(name, value);\n    },\n    deserialize: function (params, transition) {\n      return this.model(this.paramsFor(this.routeName), transition);\n    },\n    findModel: function () {\n      var _get;\n\n      return (_get = (0, _emberMetal.get)(this, 'store')).find.apply(_get, arguments);\n    },\n\n\n    /**\n      Store property provides a hook for data persistence libraries to inject themselves.\n       By default, this store property provides the exact same functionality previously\n      in the model hook.\n       Currently, the required interface is:\n       `store.find(modelName, findArguments)`\n       @method store\n      @param {Object} store\n      @private\n    */\n    store: (0, _emberMetal.computed)(function () {\n      var owner = (0, _emberUtils.getOwner)(this);\n      var routeName = this.routeName;\n      var namespace = (0, _emberMetal.get)(this, 'router.namespace');\n\n      return {\n        find: function (name, value) {\n          var modelClass = owner.factoryFor('model:' + name);\n\n          (true && !(!!modelClass) && (0, _emberDebug.assert)('You used the dynamic segment ' + name + '_id in your route ' + routeName + ', but ' + namespace + '.' + _emberRuntime.String.classify(name) + ' did not exist and you did not override your route\\'s `model` hook.', !!modelClass));\n\n\n          if (!modelClass) {\n            return;\n          }\n\n          modelClass = modelClass.class;\n\n          (true && !(typeof modelClass.find === 'function') && (0, _emberDebug.assert)(_emberRuntime.String.classify(name) + ' has no method `find`.', typeof modelClass.find === 'function'));\n\n\n          return modelClass.find(value);\n        }\n      };\n    }),\n\n    /**\n      A hook you can implement to convert the route's model into parameters\n      for the URL.\n       ```app/router.js\n      // ...\n       Router.map(function() {\n        this.route('post', { path: '/posts/:post_id' });\n      });\n       ```\n       ```app/routes/post.js\n      import $ from 'jquery';\n      import Route from '@ember/routing/route';\n       export default Route.extend({\n        model(params) {\n          // the server returns `{ id: 12 }`\n          return $.getJSON('/posts/' + params.post_id);\n        },\n         serialize(model) {\n          // this will make the URL `/posts/12`\n          return { post_id: model.id };\n        }\n      });\n      ```\n       The default `serialize` method will insert the model's `id` into the\n      route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\n      If the route has multiple dynamic segments or does not contain '_id', `serialize`\n      will return `getProperties(model, params)`\n       This method is called when `transitionTo` is called with a context\n      in order to populate the URL.\n       @method serialize\n      @param {Object} model the routes model\n      @param {Array} params an Array of parameter names for the current\n        route (in the example, `['post_id']`.\n      @return {Object} the serialized parameters\n      @since 1.0.0\n      @public\n    */\n    serialize: defaultSerialize,\n\n    setupController: function (controller, context, transition) {\n      // eslint-disable-line no-unused-vars\n      if (controller && context !== undefined) {\n        (0, _emberMetal.set)(controller, 'model', context);\n      }\n    },\n    controllerFor: function (name, _skipAssert) {\n      var owner = (0, _emberUtils.getOwner)(this);\n      var route = owner.lookup('route:' + name);\n      var controller = void 0;\n\n      if (route && route.controllerName) {\n        name = route.controllerName;\n      }\n\n      controller = owner.lookup('controller:' + name);\n\n      // NOTE: We're specifically checking that skipAssert is true, because according\n      //   to the old API the second parameter was model. We do not want people who\n      //   passed a model to skip the assertion.\n      (true && !(controller || _skipAssert === true) && (0, _emberDebug.assert)('The controller named \\'' + name + '\\' could not be found. Make sure that this route exists and has already been entered at least once. If you are accessing a controller not associated with a route, make sure the controller class is explicitly defined.', controller || _skipAssert === true));\n\n\n      return controller;\n    },\n    generateController: function (name) {\n      var owner = (0, _emberUtils.getOwner)(this);\n\n      return (0, _generate_controller.default)(owner, name);\n    },\n    modelFor: function (_name) {\n      var name = void 0;\n      var owner = (0, _emberUtils.getOwner)(this);\n      var transition = this.router ? this.router._routerMicrolib.activeTransition : null;\n\n      // Only change the route name when there is an active transition.\n      // Otherwise, use the passed in route name.\n      if (owner.routable && transition !== null) {\n        name = getEngineRouteName(owner, _name);\n      } else {\n        name = _name;\n      }\n\n      var route = owner.lookup('route:' + name);\n      // If we are mid-transition, we want to try and look up\n      // resolved parent contexts on the current transitionEvent.\n      if (transition !== null) {\n        var modelLookupName = route && route.routeName || name;\n        if (transition.resolvedModels.hasOwnProperty(modelLookupName)) {\n          return transition.resolvedModels[modelLookupName];\n        }\n      }\n\n      return route && route.currentModel;\n    },\n    renderTemplate: function (controller, model) {\n      // eslint-disable-line no-unused-vars\n      this.render();\n    },\n    render: function (_name, options) {\n      var name = void 0;\n      var isDefaultRender = arguments.length === 0;\n      if (!isDefaultRender) {\n        if (typeof _name === 'object' && !options) {\n          name = this.templateName || this.routeName;\n          options = _name;\n        } else {\n          (true && !(!(0, _emberMetal.isEmpty)(_name)) && (0, _emberDebug.assert)('The name in the given arguments is undefined or empty string', !(0, _emberMetal.isEmpty)(_name)));\n\n          name = _name;\n        }\n      }\n\n      var renderOptions = buildRenderOptions(this, isDefaultRender, name, options);\n      this.connections.push(renderOptions);\n      _emberMetal.run.once(this.router, '_setOutlets');\n    },\n    disconnectOutlet: function (options) {\n      var outletName = void 0;\n      var parentView = void 0;\n      if (options) {\n        if (typeof options === 'string') {\n          outletName = options;\n        } else {\n          outletName = options.outlet;\n          parentView = options.parentView ? options.parentView.replace(/\\//g, '.') : undefined;\n\n          (true && !(!('outlet' in options && options.outlet === undefined)) && (0, _emberDebug.assert)('You passed undefined as the outlet name.', !('outlet' in options && options.outlet === undefined)));\n        }\n      }\n\n      outletName = outletName || 'main';\n      this._disconnectOutlet(outletName, parentView);\n      var handlerInfos = this.router._routerMicrolib.currentHandlerInfos;\n      for (var i = 0; i < handlerInfos.length; i++) {\n        // This non-local state munging is sadly necessary to maintain\n        // backward compatibility with our existing semantics, which allow\n        // any route to disconnectOutlet things originally rendered by any\n        // other route. This should all get cut in 2.0.\n        handlerInfos[i].handler._disconnectOutlet(outletName, parentView);\n      }\n    },\n    _disconnectOutlet: function (outletName, parentView) {\n      var parent = parentRoute(this);\n      if (parent && parentView === parent.routeName) {\n        parentView = undefined;\n      }\n      for (var i = 0; i < this.connections.length; i++) {\n        var connection = this.connections[i];\n        if (connection.outlet === outletName && connection.into === parentView) {\n          // This neuters the disconnected outlet such that it doesn't\n          // render anything, but it leaves an entry in the outlet\n          // hierarchy so that any existing other renders that target it\n          // don't suddenly blow up. They will still stick themselves\n          // into its outlets, which won't render anywhere. All of this\n          // statefulness should get the machete in 2.0.\n          this.connections[i] = {\n            owner: connection.owner,\n            into: connection.into,\n            outlet: connection.outlet,\n            name: connection.name,\n            controller: undefined,\n            template: undefined\n          };\n          _emberMetal.run.once(this.router, '_setOutlets');\n        }\n      }\n    },\n    willDestroy: function () {\n      this.teardownViews();\n    },\n    teardownViews: function () {\n      if (this.connections && this.connections.length > 0) {\n        this.connections = [];\n        _emberMetal.run.once(this.router, '_setOutlets');\n      }\n    }\n  });\n\n  Route.reopenClass({\n    isRouteFactory: true\n  });\n\n  function parentRoute(route) {\n    var handlerInfo = handlerInfoFor(route, route.router._routerMicrolib.state.handlerInfos, -1);\n    return handlerInfo && handlerInfo.handler;\n  }\n\n  function handlerInfoFor(route, handlerInfos) {\n    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    if (!handlerInfos) {\n      return;\n    }\n\n    var current = void 0;\n    for (var i = 0; i < handlerInfos.length; i++) {\n      current = handlerInfos[i].handler;\n      if (current === route) {\n        return handlerInfos[i + offset];\n      }\n    }\n  }\n\n  function buildRenderOptions(route, isDefaultRender, _name, options) {\n    (true && !(isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined)) && (0, _emberDebug.assert)('You passed undefined as the outlet name.', isDefaultRender || !(options && 'outlet' in options && options.outlet === undefined)));\n\n\n    var owner = (0, _emberUtils.getOwner)(route);\n    var name = void 0,\n        templateName = void 0,\n        into = void 0,\n        outlet = void 0,\n        controller = void 0,\n        model = void 0;\n    if (options) {\n      into = options.into && options.into.replace(/\\//g, '.');\n      outlet = options.outlet;\n      controller = options.controller;\n      model = options.model;\n    }\n    outlet = outlet || 'main';\n\n    if (isDefaultRender) {\n      name = route.routeName;\n      templateName = route.templateName || name;\n    } else {\n      name = _name.replace(/\\//g, '.');\n      templateName = name;\n    }\n\n    if (!controller) {\n      if (isDefaultRender) {\n        controller = route.controllerName || owner.lookup('controller:' + name);\n      } else {\n        controller = owner.lookup('controller:' + name) || route.controllerName || route.routeName;\n      }\n    }\n\n    if (typeof controller === 'string') {\n      var controllerName = controller;\n      controller = owner.lookup('controller:' + controllerName);\n      (true && !(isDefaultRender || controller) && (0, _emberDebug.assert)('You passed `controller: \\'' + controllerName + '\\'` into the `render` method, but no such controller could be found.', isDefaultRender || controller));\n    }\n\n    if (model) {\n      controller.set('model', model);\n    }\n\n    var template = owner.lookup('template:' + templateName);\n    (true && !(isDefaultRender || template) && (0, _emberDebug.assert)('Could not find \"' + templateName + '\" template, view, or component.', isDefaultRender || template));\n\n\n    var parent = void 0;\n    if (into && (parent = parentRoute(route)) && into === parent.routeName) {\n      into = undefined;\n    }\n\n    var renderOptions = {\n      owner: owner,\n      into: into,\n      outlet: outlet,\n      name: name,\n      controller: controller,\n      template: template || route._topLevelViewTemplate\n    };\n\n    if (true) {\n      var LOG_VIEW_LOOKUPS = (0, _emberMetal.get)(route.router, 'namespace.LOG_VIEW_LOOKUPS');\n      if (LOG_VIEW_LOOKUPS && !template) {\n        (0, _emberDebug.info)('Could not find \"' + name + '\" template. Nothing will be rendered', { fullName: 'template:' + name });\n      }\n    }\n\n    return renderOptions;\n  }\n\n  function getFullQueryParams(router, state) {\n    if (state.fullQueryParams) {\n      return state.fullQueryParams;\n    }\n\n    state.fullQueryParams = {};\n    (0, _emberUtils.assign)(state.fullQueryParams, state.queryParams);\n\n    router._deserializeQueryParams(state.handlerInfos, state.fullQueryParams);\n    return state.fullQueryParams;\n  }\n\n  function getQueryParamsFor(route, state) {\n    state.queryParamsFor = state.queryParamsFor || {};\n    var name = route.fullRouteName;\n\n    if (state.queryParamsFor[name]) {\n      return state.queryParamsFor[name];\n    }\n\n    var fullQueryParams = getFullQueryParams(route.router, state);\n\n    var params = state.queryParamsFor[name] = {};\n\n    // Copy over all the query params for this route/controller into params hash.\n    var qpMeta = (0, _emberMetal.get)(route, '_qp');\n    var qps = qpMeta.qps;\n    for (var i = 0; i < qps.length; ++i) {\n      // Put deserialized qp on params hash.\n      var qp = qps[i];\n\n      var qpValueWasPassedIn = qp.prop in fullQueryParams;\n      params[qp.prop] = qpValueWasPassedIn ? fullQueryParams[qp.prop] : copyDefaultValue(qp.defaultValue);\n    }\n\n    return params;\n  }\n\n  function copyDefaultValue(value) {\n    if (Array.isArray(value)) {\n      return (0, _emberRuntime.A)(value.slice());\n    }\n    return value;\n  }\n\n  /*\n    Merges all query parameters from a controller with those from\n    a route, returning a new object and avoiding any mutations to\n    the existing objects.\n  */\n  function mergeEachQueryParams(controllerQP, routeQP) {\n    var qps = {};\n    var keysAlreadyMergedOrSkippable = {\n      defaultValue: true,\n      type: true,\n      scope: true,\n      as: true\n    };\n\n    // first loop over all controller qps, merging them with any matching route qps\n    // into a new empty object to avoid mutating.\n    for (var cqpName in controllerQP) {\n      if (!controllerQP.hasOwnProperty(cqpName)) {\n        continue;\n      }\n\n      var newControllerParameterConfiguration = {};\n      (0, _emberUtils.assign)(newControllerParameterConfiguration, controllerQP[cqpName], routeQP[cqpName]);\n\n      qps[cqpName] = newControllerParameterConfiguration;\n\n      // allows us to skip this QP when we check route QPs.\n      keysAlreadyMergedOrSkippable[cqpName] = true;\n    }\n\n    // loop over all route qps, skipping those that were merged in the first pass\n    // because they also appear in controller qps\n    for (var rqpName in routeQP) {\n      if (!routeQP.hasOwnProperty(rqpName) || keysAlreadyMergedOrSkippable[rqpName]) {\n        continue;\n      }\n\n      var newRouteParameterConfiguration = {};\n      (0, _emberUtils.assign)(newRouteParameterConfiguration, routeQP[rqpName], controllerQP[rqpName]);\n      qps[rqpName] = newRouteParameterConfiguration;\n    }\n\n    return qps;\n  }\n\n  function addQueryParamsObservers(controller, propNames) {\n    propNames.forEach(function (prop) {\n      controller.addObserver(prop + '.[]', controller, controller._qpChanged);\n    });\n  }\n\n  function getEngineRouteName(engine, routeName) {\n    if (engine.routable) {\n      var prefix = engine.mountPoint;\n\n      if (routeName === 'application') {\n        return prefix;\n      } else {\n        return prefix + '.' + routeName;\n      }\n    }\n\n    return routeName;\n  }\n\n  exports.default = Route;\n});","enifed('ember-routing/system/router', ['exports', 'ember-utils', 'ember-console', 'ember-metal', 'ember-debug', 'ember-runtime', 'ember-routing/system/route', 'ember-routing/system/dsl', 'ember-routing/location/api', 'ember-routing/utils', 'ember-routing/system/router_state', 'router'], function (exports, _emberUtils, _emberConsole, _emberMetal, _emberDebug, _emberRuntime, _route, _dsl, _api, _utils, _router_state, _router) {\n  'use strict';\n\n  exports.triggerEvent = triggerEvent;\n\n\n  function K() {\n    return this;\n  }\n\n  /**\n  @module @ember/routing\n  */\n\n  var slice = Array.prototype.slice;\n\n\n  /**\n    The `EmberRouter` class manages the application state and URLs. Refer to\n    the [routing guide](https://emberjs.com/guides/routing/) for documentation.\n  \n    @class EmberRouter\n    @extends EmberObject\n    @uses Evented\n    @public\n  */\n  var EmberRouter = _emberRuntime.Object.extend(_emberRuntime.Evented, {\n    /**\n      The `location` property determines the type of URL's that your\n      application will use.\n       The following location types are currently available:\n       * `history` - use the browser's history API to make the URLs look just like any standard URL\n      * `hash` - use `#` to separate the server part of the URL from the Ember part: `/blog/#/posts/new`\n      * `none` - do not store the Ember URL in the actual browser URL (mainly used for testing)\n      * `auto` - use the best option based on browser capabilities: `history` if possible, then `hash` if possible, otherwise `none`\n       This value is defaulted to `auto` by the `locationType` setting of `/config/environment.js`\n       @property location\n      @default 'hash'\n      @see {Location}\n      @public\n    */\n    location: 'hash',\n\n    /**\n     Represents the URL of the root of the application, often '/'. This prefix is\n     assumed on all routes defined on this router.\n      @property rootURL\n     @default '/'\n     @public\n    */\n    rootURL: '/',\n\n    _initRouterJs: function () {\n      var routerMicrolib = this._routerMicrolib = new _router.default();\n      routerMicrolib.triggerEvent = triggerEvent.bind(this);\n\n      routerMicrolib._triggerWillChangeContext = K;\n      routerMicrolib._triggerWillLeave = K;\n\n      var dslCallbacks = this.constructor.dslCallbacks || [K];\n      var dsl = this._buildDSL();\n\n      dsl.route('application', { path: '/', resetNamespace: true, overrideNameAssertion: true }, function () {\n        for (var i = 0; i < dslCallbacks.length; i++) {\n          dslCallbacks[i].call(this);\n        }\n      });\n\n      if (true) {\n        if ((0, _emberMetal.get)(this, 'namespace.LOG_TRANSITIONS_INTERNAL')) {\n          routerMicrolib.log = _emberConsole.default.debug;\n        }\n      }\n\n      routerMicrolib.map(dsl.generate());\n    },\n    _buildDSL: function () {\n      var enableLoadingSubstates = this._hasModuleBasedResolver();\n      var options = { enableLoadingSubstates: enableLoadingSubstates };\n\n      var owner = (0, _emberUtils.getOwner)(this);\n      var router = this;\n\n      options.resolveRouteMap = function (name) {\n        return owner.factoryFor('route-map:' + name);\n      };\n\n      options.addRouteForEngine = function (name, engineInfo) {\n        if (!router._engineInfoByRoute[name]) {\n          router._engineInfoByRoute[name] = engineInfo;\n        }\n      };\n\n      return new _dsl.default(null, options);\n    },\n    init: function () {\n      this._super.apply(this, arguments);\n\n      this.currentURL = null;\n      this.currentRouteName = null;\n      this.currentPath = null;\n\n      this._qpCache = Object.create(null);\n      this._resetQueuedQueryParameterChanges();\n      this._handledErrors = new Set();\n      this._engineInstances = Object.create(null);\n      this._engineInfoByRoute = Object.create(null);\n    },\n    _resetQueuedQueryParameterChanges: function () {\n      this._queuedQPChanges = {};\n    },\n\n\n    /**\n      Represents the current URL.\n       @method url\n      @return {String} The current URL.\n      @private\n    */\n    url: (0, _emberMetal.computed)(function () {\n      return (0, _emberMetal.get)(this, 'location').getURL();\n    }),\n\n    _hasModuleBasedResolver: function () {\n      var owner = (0, _emberUtils.getOwner)(this);\n      if (!owner) {\n        return false;\n      }\n\n      var resolver = (0, _emberMetal.get)(owner, 'application.__registry__.resolver.moduleBasedResolver');\n      return !!resolver;\n    },\n    startRouting: function () {\n      var initialURL = (0, _emberMetal.get)(this, 'initialURL');\n\n      if (this.setupRouter()) {\n        if (initialURL === undefined) {\n          initialURL = (0, _emberMetal.get)(this, 'location').getURL();\n        }\n        var initialTransition = this.handleURL(initialURL);\n        if (initialTransition && initialTransition.error) {\n          throw initialTransition.error;\n        }\n      }\n    },\n    setupRouter: function () {\n      var _this = this;\n\n      this._initRouterJs();\n      this._setupLocation();\n\n      var location = (0, _emberMetal.get)(this, 'location');\n\n      // Allow the Location class to cancel the router setup while it refreshes\n      // the page\n      if ((0, _emberMetal.get)(location, 'cancelRouterSetup')) {\n        return false;\n      }\n\n      this._setupRouter(location);\n\n      location.onUpdateURL(function (url) {\n        _this.handleURL(url);\n      });\n\n      return true;\n    },\n    didTransition: function (infos) {\n      updatePaths(this);\n\n      this._cancelSlowTransitionTimer();\n\n      this.notifyPropertyChange('url');\n      this.set('currentState', this.targetState);\n\n      // Put this in the runloop so url will be accurate. Seems\n      // less surprising than didTransition being out of sync.\n      _emberMetal.run.once(this, this.trigger, 'didTransition');\n\n      if (true) {\n        if ((0, _emberMetal.get)(this, 'namespace').LOG_TRANSITIONS) {\n          _emberConsole.default.log('Transitioned into \\'' + EmberRouter._routePath(infos) + '\\'');\n        }\n      }\n    },\n    _setOutlets: function () {\n      // This is triggered async during Route#willDestroy.\n      // If the router is also being destroyed we do not want to\n      // to create another this._toplevelView (and leak the renderer)\n      if (this.isDestroying || this.isDestroyed) {\n        return;\n      }\n\n      var handlerInfos = this._routerMicrolib.currentHandlerInfos;\n      var route = void 0;\n      var defaultParentState = void 0;\n      var liveRoutes = null;\n\n      if (!handlerInfos) {\n        return;\n      }\n\n      for (var i = 0; i < handlerInfos.length; i++) {\n        route = handlerInfos[i].handler;\n        var connections = route.connections;\n        var ownState = void 0;\n        for (var j = 0; j < connections.length; j++) {\n          var appended = appendLiveRoute(liveRoutes, defaultParentState, connections[j]);\n          liveRoutes = appended.liveRoutes;\n          if (appended.ownState.render.name === route.routeName || appended.ownState.render.outlet === 'main') {\n            ownState = appended.ownState;\n          }\n        }\n        if (connections.length === 0) {\n          ownState = representEmptyRoute(liveRoutes, defaultParentState, route);\n        }\n        defaultParentState = ownState;\n      }\n\n      // when a transitionTo happens after the validation phase\n      // during the initial transition _setOutlets is called\n      // when no routes are active. However, it will get called\n      // again with the correct values during the next turn of\n      // the runloop\n      if (!liveRoutes) {\n        return;\n      }\n\n      if (!this._toplevelView) {\n        var owner = (0, _emberUtils.getOwner)(this);\n        var OutletView = owner.factoryFor('view:-outlet');\n        this._toplevelView = OutletView.create();\n        this._toplevelView.setOutletState(liveRoutes);\n        var instance = owner.lookup('-application-instance:main');\n        instance.didCreateRootView(this._toplevelView);\n      } else {\n        this._toplevelView.setOutletState(liveRoutes);\n      }\n    },\n    willTransition: function (oldInfos, newInfos, transition) {\n      _emberMetal.run.once(this, this.trigger, 'willTransition', transition);\n\n      if (true) {\n        if ((0, _emberMetal.get)(this, 'namespace').LOG_TRANSITIONS) {\n          _emberConsole.default.log('Preparing to transition from \\'' + EmberRouter._routePath(oldInfos) + '\\' to \\'' + EmberRouter._routePath(newInfos) + '\\'');\n        }\n      }\n    },\n    handleURL: function (url) {\n      // Until we have an ember-idiomatic way of accessing #hashes, we need to\n      // remove it because router.js doesn't know how to handle it.\n      var _url = url.split(/#(.+)?/)[0];\n      return this._doURLTransition('handleURL', _url);\n    },\n    _doURLTransition: function (routerJsMethod, url) {\n      var transition = this._routerMicrolib[routerJsMethod](url || '/');\n      didBeginTransition(transition, this);\n      return transition;\n    },\n    transitionTo: function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if ((0, _utils.resemblesURL)(args[0])) {\n        return this._doURLTransition('transitionTo', args[0]);\n      }\n\n      var _extractRouteArgs = (0, _utils.extractRouteArgs)(args),\n          routeName = _extractRouteArgs.routeName,\n          models = _extractRouteArgs.models,\n          queryParams = _extractRouteArgs.queryParams;\n\n      return this._doTransition(routeName, models, queryParams);\n    },\n    intermediateTransitionTo: function () {\n      var _routerMicrolib;\n\n      (_routerMicrolib = this._routerMicrolib).intermediateTransitionTo.apply(_routerMicrolib, arguments);\n\n      updatePaths(this);\n\n      if (true) {\n        var infos = this._routerMicrolib.currentHandlerInfos;\n        if ((0, _emberMetal.get)(this, 'namespace').LOG_TRANSITIONS) {\n          _emberConsole.default.log('Intermediate-transitioned into \\'' + EmberRouter._routePath(infos) + '\\'');\n        }\n      }\n    },\n    replaceWith: function () {\n      return this.transitionTo.apply(this, arguments).method('replace');\n    },\n    generate: function () {\n      var _routerMicrolib2;\n\n      var url = (_routerMicrolib2 = this._routerMicrolib).generate.apply(_routerMicrolib2, arguments);\n      return this.location.formatURL(url);\n    },\n    isActive: function () {\n      var _routerMicrolib3;\n\n      return (_routerMicrolib3 = this._routerMicrolib).isActive.apply(_routerMicrolib3, arguments);\n    },\n    isActiveIntent: function (routeName, models, queryParams) {\n      return this.currentState.isActiveIntent(routeName, models, queryParams);\n    },\n    send: function () {\n      var _routerMicrolib4;\n\n      /*name, context*/\n      (_routerMicrolib4 = this._routerMicrolib).trigger.apply(_routerMicrolib4, arguments);\n    },\n    hasRoute: function (route) {\n      return this._routerMicrolib.hasRoute(route);\n    },\n    reset: function () {\n      if (this._routerMicrolib) {\n        this._routerMicrolib.reset();\n      }\n    },\n    willDestroy: function () {\n      if (this._toplevelView) {\n        this._toplevelView.destroy();\n        this._toplevelView = null;\n      }\n\n      this._super.apply(this, arguments);\n\n      this.reset();\n\n      var instances = this._engineInstances;\n      for (var name in instances) {\n        for (var id in instances[name]) {\n          (0, _emberMetal.run)(instances[name][id], 'destroy');\n        }\n      }\n    },\n    _activeQPChanged: function (queryParameterName, newValue) {\n      this._queuedQPChanges[queryParameterName] = newValue;\n      _emberMetal.run.once(this, this._fireQueryParamTransition);\n    },\n    _updatingQPChanged: function (queryParameterName) {\n      if (!this._qpUpdates) {\n        this._qpUpdates = {};\n      }\n      this._qpUpdates[queryParameterName] = true;\n    },\n    _fireQueryParamTransition: function () {\n      this.transitionTo({ queryParams: this._queuedQPChanges });\n      this._resetQueuedQueryParameterChanges();\n    },\n    _setupLocation: function () {\n      var location = (0, _emberMetal.get)(this, 'location');\n      var rootURL = (0, _emberMetal.get)(this, 'rootURL');\n      var owner = (0, _emberUtils.getOwner)(this);\n\n      if ('string' === typeof location && owner) {\n        var resolvedLocation = owner.lookup('location:' + location);\n\n        if (resolvedLocation !== undefined) {\n          location = (0, _emberMetal.set)(this, 'location', resolvedLocation);\n        } else {\n          // Allow for deprecated registration of custom location API's\n          var options = {\n            implementation: location\n          };\n\n          location = (0, _emberMetal.set)(this, 'location', _api.default.create(options));\n        }\n      }\n\n      if (location !== null && typeof location === 'object') {\n        if (rootURL) {\n          (0, _emberMetal.set)(location, 'rootURL', rootURL);\n        }\n\n        // Allow the location to do any feature detection, such as AutoLocation\n        // detecting history support. This gives it a chance to set its\n        // `cancelRouterSetup` property which aborts routing.\n        if (typeof location.detect === 'function') {\n          location.detect();\n        }\n\n        // ensure that initState is called AFTER the rootURL is set on\n        // the location instance\n        if (typeof location.initState === 'function') {\n          location.initState();\n        }\n      }\n    },\n    _getHandlerFunction: function () {\n      var _this2 = this;\n\n      var seen = Object.create(null);\n      var owner = (0, _emberUtils.getOwner)(this);\n\n      return function (name) {\n        var routeName = name;\n        var routeOwner = owner;\n        var engineInfo = _this2._engineInfoByRoute[routeName];\n\n        if (engineInfo) {\n          var engineInstance = _this2._getEngineInstance(engineInfo);\n\n          routeOwner = engineInstance;\n          routeName = engineInfo.localFullName;\n        }\n\n        var fullRouteName = 'route:' + routeName;\n\n        var handler = routeOwner.lookup(fullRouteName);\n\n        if (seen[name]) {\n          return handler;\n        }\n\n        seen[name] = true;\n\n        if (!handler) {\n          var DefaultRoute = routeOwner.factoryFor('route:basic').class;\n          routeOwner.register(fullRouteName, DefaultRoute.extend());\n          handler = routeOwner.lookup(fullRouteName);\n\n          if (true) {\n            if ((0, _emberMetal.get)(_this2, 'namespace.LOG_ACTIVE_GENERATION')) {\n              (0, _emberDebug.info)('generated -> ' + fullRouteName, { fullName: fullRouteName });\n            }\n          }\n        }\n\n        handler._setRouteName(routeName);\n\n        if (engineInfo && !(0, _route.hasDefaultSerialize)(handler)) {\n          throw new Error('Defining a custom serialize method on an Engine route is not supported.');\n        }\n\n        return handler;\n      };\n    },\n    _getSerializerFunction: function () {\n      var _this3 = this;\n\n      return function (name) {\n        var engineInfo = _this3._engineInfoByRoute[name];\n\n        // If this is not an Engine route, we fall back to the handler for serialization\n        if (!engineInfo) {\n          return;\n        }\n\n        return engineInfo.serializeMethod || _route.defaultSerialize;\n      };\n    },\n    _setupRouter: function (location) {\n      var _this4 = this;\n\n      var lastURL = void 0;\n      var routerMicrolib = this._routerMicrolib;\n\n      routerMicrolib.getHandler = this._getHandlerFunction();\n      routerMicrolib.getSerializer = this._getSerializerFunction();\n\n      var doUpdateURL = function () {\n        location.setURL(lastURL);\n        (0, _emberMetal.set)(_this4, 'currentURL', lastURL);\n      };\n\n      routerMicrolib.updateURL = function (path) {\n        lastURL = path;\n        _emberMetal.run.once(doUpdateURL);\n      };\n\n      if (location.replaceURL) {\n        var doReplaceURL = function () {\n          location.replaceURL(lastURL);\n          (0, _emberMetal.set)(_this4, 'currentURL', lastURL);\n        };\n\n        routerMicrolib.replaceURL = function (path) {\n          lastURL = path;\n          _emberMetal.run.once(doReplaceURL);\n        };\n      }\n\n      routerMicrolib.didTransition = function (infos) {\n        _this4.didTransition(infos);\n      };\n\n      routerMicrolib.willTransition = function (oldInfos, newInfos, transition) {\n        _this4.willTransition(oldInfos, newInfos, transition);\n      };\n    },\n    _serializeQueryParams: function (handlerInfos, queryParams) {\n      var _this5 = this;\n\n      forEachQueryParam(this, handlerInfos, queryParams, function (key, value, qp) {\n        if (qp) {\n          delete queryParams[key];\n          queryParams[qp.urlKey] = qp.route.serializeQueryParam(value, qp.urlKey, qp.type);\n        } else if (value === undefined) {\n          return; // We don't serialize undefined values\n        } else {\n          queryParams[key] = _this5._serializeQueryParam(value, (0, _emberRuntime.typeOf)(value));\n        }\n      });\n    },\n    _serializeQueryParam: function (value, type) {\n      if (value === null || value === undefined) {\n        return value;\n      } else if (type === 'array') {\n        return JSON.stringify(value);\n      }\n\n      return '' + value;\n    },\n    _deserializeQueryParams: function (handlerInfos, queryParams) {\n      forEachQueryParam(this, handlerInfos, queryParams, function (key, value, qp) {\n        // If we don't have QP meta info for a given key, then we do nothing\n        // because all values will be treated as strings\n        if (qp) {\n          delete queryParams[key];\n          queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);\n        }\n      });\n    },\n    _deserializeQueryParam: function (value, defaultType) {\n      if (value === null || value === undefined) {\n        return value;\n      } else if (defaultType === 'boolean') {\n        return value === 'true';\n      } else if (defaultType === 'number') {\n        return Number(value).valueOf();\n      } else if (defaultType === 'array') {\n        return (0, _emberRuntime.A)(JSON.parse(value));\n      }\n      return value;\n    },\n    _pruneDefaultQueryParamValues: function (handlerInfos, queryParams) {\n      var qps = this._queryParamsFor(handlerInfos);\n      for (var key in queryParams) {\n        var qp = qps.map[key];\n        if (qp && qp.serializedDefaultValue === queryParams[key]) {\n          delete queryParams[key];\n        }\n      }\n    },\n    _doTransition: function (_targetRouteName, models, _queryParams, _keepDefaultQueryParamValues) {\n      var _routerMicrolib5;\n\n      var targetRouteName = _targetRouteName || (0, _utils.getActiveTargetName)(this._routerMicrolib);\n      (true && !(targetRouteName && this._routerMicrolib.hasRoute(targetRouteName)) && (0, _emberDebug.assert)('The route ' + targetRouteName + ' was not found', targetRouteName && this._routerMicrolib.hasRoute(targetRouteName)));\n\n\n      var queryParams = {};\n\n      this._processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams);\n\n      (0, _emberUtils.assign)(queryParams, _queryParams);\n      this._prepareQueryParams(targetRouteName, models, queryParams, _keepDefaultQueryParamValues);\n\n      var transition = (_routerMicrolib5 = this._routerMicrolib).transitionTo.apply(_routerMicrolib5, [targetRouteName].concat(models, [{ queryParams: queryParams }]));\n\n      didBeginTransition(transition, this);\n\n      return transition;\n    },\n    _processActiveTransitionQueryParams: function (targetRouteName, models, queryParams, _queryParams) {\n      // merge in any queryParams from the active transition which could include\n      // queryParams from the url on initial load.\n      if (!this._routerMicrolib.activeTransition) {\n        return;\n      }\n\n      var unchangedQPs = {};\n      var qpUpdates = this._qpUpdates || {};\n      var params = this._routerMicrolib.activeTransition.queryParams;\n      for (var key in params) {\n        if (!qpUpdates[key]) {\n          unchangedQPs[key] = params[key];\n        }\n      }\n\n      // We need to fully scope queryParams so that we can create one object\n      // that represents both passed-in queryParams and ones that aren't changed\n      // from the active transition.\n      this._fullyScopeQueryParams(targetRouteName, models, _queryParams);\n      this._fullyScopeQueryParams(targetRouteName, models, unchangedQPs);\n      (0, _emberUtils.assign)(queryParams, unchangedQPs);\n    },\n    _prepareQueryParams: function (targetRouteName, models, queryParams, _fromRouterService) {\n      var state = calculatePostTransitionState(this, targetRouteName, models);\n      this._hydrateUnsuppliedQueryParams(state, queryParams, _fromRouterService);\n      this._serializeQueryParams(state.handlerInfos, queryParams);\n\n      if (!_fromRouterService) {\n        this._pruneDefaultQueryParamValues(state.handlerInfos, queryParams);\n      }\n    },\n    _getQPMeta: function (handlerInfo) {\n      var route = handlerInfo.handler;\n      return route && (0, _emberMetal.get)(route, '_qp');\n    },\n    _queryParamsFor: function (handlerInfos) {\n      var handlerInfoLength = handlerInfos.length;\n      var leafRouteName = handlerInfos[handlerInfoLength - 1].name;\n      var cached = this._qpCache[leafRouteName];\n      if (cached) {\n        return cached;\n      }\n\n      var shouldCache = true;\n      var qpsByUrlKey = {};\n      var map = {};\n      var qps = [];\n\n      for (var i = 0; i < handlerInfoLength; ++i) {\n        var qpMeta = this._getQPMeta(handlerInfos[i]);\n\n        if (!qpMeta) {\n          shouldCache = false;\n          continue;\n        }\n\n        // Loop over each QP to make sure we don't have any collisions by urlKey\n        for (var _i = 0; _i < qpMeta.qps.length; _i++) {\n          var qp = qpMeta.qps[_i];\n          var urlKey = qp.urlKey;\n          var qpOther = qpsByUrlKey[urlKey];\n\n          if (qpOther && qpOther.controllerName !== qp.controllerName) {\n            var otherQP = qpsByUrlKey[urlKey];\n            (true && !(false) && (0, _emberDebug.assert)('You\\'re not allowed to have more than one controller property map to the same query param key, but both `' + otherQP.scopedPropertyName + '` and `' + qp.scopedPropertyName + '` map to `' + urlKey + '`. You can fix this by mapping one of the controller properties to a different query param key via the `as` config option, e.g. `' + otherQP.prop + ': { as: \\'other-' + otherQP.prop + '\\' }`', false));\n          }\n\n          qpsByUrlKey[urlKey] = qp;\n          qps.push(qp);\n        }\n\n        (0, _emberUtils.assign)(map, qpMeta.map);\n      }\n\n      var finalQPMeta = { qps: qps, map: map };\n\n      if (shouldCache) {\n        this._qpCache[leafRouteName] = finalQPMeta;\n      }\n\n      return finalQPMeta;\n    },\n    _fullyScopeQueryParams: function (leafRouteName, contexts, queryParams) {\n      var state = calculatePostTransitionState(this, leafRouteName, contexts);\n      var handlerInfos = state.handlerInfos;\n\n      for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n        var qpMeta = this._getQPMeta(handlerInfos[i]);\n\n        if (!qpMeta) {\n          continue;\n        }\n\n        for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {\n          var qp = qpMeta.qps[j];\n\n          var presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;\n\n          if (presentProp) {\n            if (presentProp !== qp.scopedPropertyName) {\n              queryParams[qp.scopedPropertyName] = queryParams[presentProp];\n              delete queryParams[presentProp];\n            }\n          }\n        }\n      }\n    },\n    _hydrateUnsuppliedQueryParams: function (state, queryParams, _fromRouterService) {\n      var handlerInfos = state.handlerInfos;\n      var appCache = this._bucketCache;\n\n      for (var i = 0; i < handlerInfos.length; ++i) {\n        var qpMeta = this._getQPMeta(handlerInfos[i]);\n\n        if (!qpMeta) {\n          continue;\n        }\n\n        for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {\n          var qp = qpMeta.qps[j];\n\n          var presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;\n\n          (true && !(function () {\n            if (qp.urlKey === presentProp) {\n              return true;\n            }\n\n            if (_fromRouterService && presentProp !== false) {\n              return false;\n            }\n\n            return true;\n          }()) && (0, _emberDebug.assert)('You passed the `' + presentProp + '` query parameter during a transition into ' + qp.route.routeName + ', please update to ' + qp.urlKey, function () {\n            if (qp.urlKey === presentProp) {\n              return true;\n            }if (_fromRouterService && presentProp !== false) {\n              return false;\n            }return true;\n          }()));\n\n\n          if (presentProp) {\n            if (presentProp !== qp.scopedPropertyName) {\n              queryParams[qp.scopedPropertyName] = queryParams[presentProp];\n              delete queryParams[presentProp];\n            }\n          } else {\n            var cacheKey = (0, _utils.calculateCacheKey)(qp.route.fullRouteName, qp.parts, state.params);\n            queryParams[qp.scopedPropertyName] = appCache.lookup(cacheKey, qp.prop, qp.defaultValue);\n          }\n        }\n      }\n    },\n    _scheduleLoadingEvent: function (transition, originRoute) {\n      this._cancelSlowTransitionTimer();\n      this._slowTransitionTimer = _emberMetal.run.scheduleOnce('routerTransitions', this, '_handleSlowTransition', transition, originRoute);\n    },\n\n\n    currentState: null,\n    targetState: null,\n\n    _handleSlowTransition: function (transition, originRoute) {\n      if (!this._routerMicrolib.activeTransition) {\n        // Don't fire an event if we've since moved on from\n        // the transition that put us in a loading state.\n        return;\n      }\n\n      this.set('targetState', _router_state.default.create({\n        emberRouter: this,\n        routerJs: this._routerMicrolib,\n        routerJsState: this._routerMicrolib.activeTransition.state\n      }));\n\n      transition.trigger(true, 'loading', transition, originRoute);\n    },\n    _cancelSlowTransitionTimer: function () {\n      if (this._slowTransitionTimer) {\n        _emberMetal.run.cancel(this._slowTransitionTimer);\n      }\n      this._slowTransitionTimer = null;\n    },\n    _markErrorAsHandled: function (error) {\n      this._handledErrors.add(error);\n    },\n    _isErrorHandled: function (error) {\n      return this._handledErrors.has(error);\n    },\n    _clearHandledError: function (error) {\n      this._handledErrors.delete(error);\n    },\n    _getEngineInstance: function (_ref) {\n      var name = _ref.name,\n          instanceId = _ref.instanceId,\n          mountPoint = _ref.mountPoint;\n\n      var engineInstances = this._engineInstances;\n\n      if (!engineInstances[name]) {\n        engineInstances[name] = Object.create(null);\n      }\n\n      var engineInstance = engineInstances[name][instanceId];\n\n      if (!engineInstance) {\n        var owner = (0, _emberUtils.getOwner)(this);\n\n        (true && !(owner.hasRegistration('engine:' + name)) && (0, _emberDebug.assert)('You attempted to mount the engine \\'' + name + '\\' in your router map, but the engine can not be found.', owner.hasRegistration('engine:' + name)));\n\n\n        engineInstance = owner.buildChildEngineInstance(name, {\n          routable: true,\n          mountPoint: mountPoint\n        });\n\n        engineInstance.boot();\n\n        engineInstances[name][instanceId] = engineInstance;\n      }\n\n      return engineInstance;\n    }\n  });\n\n  /*\n    Helper function for iterating over routes in a set of handlerInfos that are\n    at or above the given origin route. Example: if `originRoute` === 'foo.bar'\n    and the handlerInfos given were for 'foo.bar.baz', then the given callback\n    will be invoked with the routes for 'foo.bar', 'foo', and 'application'\n    individually.\n  \n    If the callback returns anything other than `true`, then iteration will stop.\n  \n    @private\n    @param {Route} originRoute\n    @param {Array<HandlerInfo>} handlerInfos\n    @param {Function} callback\n    @return {Void}\n   */\n  function forEachRouteAbove(handlerInfos, callback) {\n\n    for (var i = handlerInfos.length - 1; i >= 0; --i) {\n      var handlerInfo = handlerInfos[i];\n      var route = handlerInfo.handler;\n\n      // handlerInfo.handler being `undefined` generally means either:\n      //\n      // 1. an error occurred during creation of the route in question\n      // 2. the route is across an async boundary (e.g. within an engine)\n      //\n      // In both of these cases, we cannot invoke the callback on that specific\n      // route, because it just doesn't exist...\n      if (route === undefined) {\n        continue;\n      }\n\n      if (callback(route, handlerInfo) !== true) {\n        return;\n      }\n    }\n  }\n\n  // These get invoked when an action bubbles above ApplicationRoute\n  // and are not meant to be overridable.\n  var defaultActionHandlers = {\n    willResolveModel: function (handlerInfos, transition, originRoute) {\n      this._scheduleLoadingEvent(transition, originRoute);\n    },\n    error: function (handlerInfos, error, transition) {\n      var router = this;\n\n      var handlerInfoWithError = handlerInfos[handlerInfos.length - 1];\n\n      forEachRouteAbove(handlerInfos, function (route, handlerInfo) {\n        // We don't check the leaf most handlerInfo since that would\n        // technically be below where we're at in the route hierarchy.\n        if (handlerInfo !== handlerInfoWithError) {\n          // Check for the existence of an 'error' route.\n          var errorRouteName = findRouteStateName(route, 'error');\n          if (errorRouteName) {\n            router._markErrorAsHandled(error);\n            router.intermediateTransitionTo(errorRouteName, error);\n            return false;\n          }\n        }\n\n        // Check for an 'error' substate route\n        var errorSubstateName = findRouteSubstateName(route, 'error');\n        if (errorSubstateName) {\n          router._markErrorAsHandled(error);\n          router.intermediateTransitionTo(errorSubstateName, error);\n          return false;\n        }\n\n        return true;\n      });\n\n      logError(error, 'Error while processing route: ' + transition.targetName);\n    },\n    loading: function (handlerInfos, transition) {\n      var router = this;\n\n      var handlerInfoWithSlowLoading = handlerInfos[handlerInfos.length - 1];\n\n      forEachRouteAbove(handlerInfos, function (route, handlerInfo) {\n        // We don't check the leaf most handlerInfo since that would\n        // technically be below where we're at in the route hierarchy.\n        if (handlerInfo !== handlerInfoWithSlowLoading) {\n          // Check for the existence of a 'loading' route.\n          var loadingRouteName = findRouteStateName(route, 'loading');\n          if (loadingRouteName) {\n            router.intermediateTransitionTo(loadingRouteName);\n            return false;\n          }\n        }\n\n        // Check for loading substate\n        var loadingSubstateName = findRouteSubstateName(route, 'loading');\n        if (loadingSubstateName) {\n          router.intermediateTransitionTo(loadingSubstateName);\n          return false;\n        }\n\n        // Don't bubble above pivot route.\n        return transition.pivotHandler !== route;\n      });\n    }\n  };\n\n  function logError(_error, initialMessage) {\n    var errorArgs = [];\n    var error = void 0;\n    if (_error && typeof _error === 'object' && typeof _error.errorThrown === 'object') {\n      error = _error.errorThrown;\n    } else {\n      error = _error;\n    }\n\n    if (initialMessage) {\n      errorArgs.push(initialMessage);\n    }\n\n    if (error) {\n      if (error.message) {\n        errorArgs.push(error.message);\n      }\n      if (error.stack) {\n        errorArgs.push(error.stack);\n      }\n\n      if (typeof error === 'string') {\n        errorArgs.push(error);\n      }\n    }\n\n    _emberConsole.default.error.apply(this, errorArgs);\n  }\n\n  /**\n    Finds the name of the substate route if it exists for the given route. A\n    substate route is of the form `route_state`, such as `foo_loading`.\n  \n    @private\n    @param {Route} route\n    @param {String} state\n    @return {String}\n  */\n  function findRouteSubstateName(route, state) {\n    var owner = (0, _emberUtils.getOwner)(route);\n    var routeName = route.routeName,\n        fullRouteName = route.fullRouteName,\n        router = route.router;\n\n\n    var substateName = routeName + '_' + state;\n    var substateNameFull = fullRouteName + '_' + state;\n\n    return routeHasBeenDefined(owner, router, substateName, substateNameFull) ? substateNameFull : '';\n  }\n\n  /**\n    Finds the name of the state route if it exists for the given route. A state\n    route is of the form `route.state`, such as `foo.loading`. Properly Handles\n    `application` named routes.\n  \n    @private\n    @param {Route} route\n    @param {String} state\n    @return {String}\n  */\n  function findRouteStateName(route, state) {\n    var owner = (0, _emberUtils.getOwner)(route);\n    var routeName = route.routeName,\n        fullRouteName = route.fullRouteName,\n        router = route.router;\n\n\n    var stateName = routeName === 'application' ? state : routeName + '.' + state;\n    var stateNameFull = fullRouteName === 'application' ? state : fullRouteName + '.' + state;\n\n    return routeHasBeenDefined(owner, router, stateName, stateNameFull) ? stateNameFull : '';\n  }\n\n  /**\n    Determines whether or not a route has been defined by checking that the route\n    is in the Router's map and the owner has a registration for that route.\n  \n    @private\n    @param {Owner} owner\n    @param {Router} router\n    @param {String} localName\n    @param {String} fullName\n    @return {Boolean}\n  */\n  function routeHasBeenDefined(owner, router, localName, fullName) {\n    var routerHasRoute = router.hasRoute(fullName);\n    var ownerHasRoute = owner.hasRegistration('template:' + localName) || owner.hasRegistration('route:' + localName);\n    return routerHasRoute && ownerHasRoute;\n  }\n\n  function triggerEvent(handlerInfos, ignoreFailure, args) {\n    var name = args.shift();\n\n    if (!handlerInfos) {\n      if (ignoreFailure) {\n        return;\n      }\n      throw new _emberDebug.Error('Can\\'t trigger action \\'' + name + '\\' because your app hasn\\'t finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call `.send()` on the `Transition` object passed to the `model/beforeModel/afterModel` hooks.');\n    }\n\n    var eventWasHandled = false;\n    var handlerInfo = void 0,\n        handler = void 0,\n        actionHandler = void 0;\n\n    for (var i = handlerInfos.length - 1; i >= 0; i--) {\n      handlerInfo = handlerInfos[i];\n      handler = handlerInfo.handler;\n      actionHandler = handler && handler.actions && handler.actions[name];\n      if (actionHandler) {\n        if (actionHandler.apply(handler, args) === true) {\n          eventWasHandled = true;\n        } else {\n          // Should only hit here if a non-bubbling error action is triggered on a route.\n          if (name === 'error') {\n            handler.router._markErrorAsHandled(args[0]);\n          }\n          return;\n        }\n      }\n    }\n\n    var defaultHandler = defaultActionHandlers[name];\n    if (defaultHandler) {\n      defaultHandler.apply(this, [handlerInfos].concat(args));\n      return;\n    }\n\n    if (!eventWasHandled && !ignoreFailure) {\n      throw new _emberDebug.Error('Nothing handled the action \\'' + name + '\\'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.');\n    }\n  }\n\n  function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {\n    var state = emberRouter._routerMicrolib.applyIntent(leafRouteName, contexts);\n    var handlerInfos = state.handlerInfos,\n        params = state.params;\n\n\n    for (var i = 0; i < handlerInfos.length; ++i) {\n      var handlerInfo = handlerInfos[i];\n\n      // If the handlerInfo is not resolved, we serialize the context into params\n      if (!handlerInfo.isResolved) {\n        params[handlerInfo.name] = handlerInfo.serialize(handlerInfo.context);\n      } else {\n        params[handlerInfo.name] = handlerInfo.params;\n      }\n    }\n    return state;\n  }\n\n  function updatePaths(router) {\n    var infos = router._routerMicrolib.currentHandlerInfos;\n    if (infos.length === 0) {\n      return;\n    }\n\n    var path = EmberRouter._routePath(infos);\n    var currentRouteName = infos[infos.length - 1].name;\n    var currentURL = router.get('location').getURL();\n\n    (0, _emberMetal.set)(router, 'currentPath', path);\n    (0, _emberMetal.set)(router, 'currentRouteName', currentRouteName);\n    (0, _emberMetal.set)(router, 'currentURL', currentURL);\n\n    var appController = (0, _emberUtils.getOwner)(router).lookup('controller:application');\n\n    if (!appController) {\n      // appController might not exist when top-level loading/error\n      // substates have been entered since ApplicationRoute hasn't\n      // actually been entered at that point.\n      return;\n    }\n\n    if (!('currentPath' in appController)) {\n      (0, _emberMetal.defineProperty)(appController, 'currentPath');\n    }\n\n    (0, _emberMetal.set)(appController, 'currentPath', path);\n\n    if (!('currentRouteName' in appController)) {\n      (0, _emberMetal.defineProperty)(appController, 'currentRouteName');\n    }\n\n    (0, _emberMetal.set)(appController, 'currentRouteName', currentRouteName);\n  }\n\n  EmberRouter.reopenClass({\n    map: function (callback) {\n      if (!this.dslCallbacks) {\n        this.dslCallbacks = [];\n        this.reopenClass({ dslCallbacks: this.dslCallbacks });\n      }\n\n      this.dslCallbacks.push(callback);\n\n      return this;\n    },\n    _routePath: function (handlerInfos) {\n      var path = [];\n\n      // We have to handle coalescing resource names that\n      // are prefixed with their parent's names, e.g.\n      // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'\n\n      function intersectionMatches(a1, a2) {\n        for (var i = 0; i < a1.length; ++i) {\n          if (a1[i] !== a2[i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      var name = void 0,\n          nameParts = void 0,\n          oldNameParts = void 0;\n      for (var i = 1; i < handlerInfos.length; i++) {\n        name = handlerInfos[i].name;\n        nameParts = name.split('.');\n        oldNameParts = slice.call(path);\n\n        while (oldNameParts.length) {\n          if (intersectionMatches(oldNameParts, nameParts)) {\n            break;\n          }\n          oldNameParts.shift();\n        }\n\n        path.push.apply(path, nameParts.slice(oldNameParts.length));\n      }\n\n      return path.join('.');\n    }\n  });\n\n  function didBeginTransition(transition, router) {\n    var routerState = _router_state.default.create({\n      emberRouter: router,\n      routerJs: router._routerMicrolib,\n      routerJsState: transition.state\n    });\n\n    if (!router.currentState) {\n      router.set('currentState', routerState);\n    }\n    router.set('targetState', routerState);\n\n    transition.promise = transition.catch(function (error) {\n      if (router._isErrorHandled(error)) {\n        router._clearHandledError(error);\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  function forEachQueryParam(router, handlerInfos, queryParams, callback) {\n    var qpCache = router._queryParamsFor(handlerInfos);\n\n    for (var key in queryParams) {\n      if (!queryParams.hasOwnProperty(key)) {\n        continue;\n      }\n      var value = queryParams[key];\n      var qp = qpCache.map[key];\n\n      callback(key, value, qp);\n    }\n  }\n\n  function findLiveRoute(liveRoutes, name) {\n    if (!liveRoutes) {\n      return;\n    }\n    var stack = [liveRoutes];\n    while (stack.length > 0) {\n      var test = stack.shift();\n      if (test.render.name === name) {\n        return test;\n      }\n      var outlets = test.outlets;\n      for (var outletName in outlets) {\n        stack.push(outlets[outletName]);\n      }\n    }\n  }\n\n  function appendLiveRoute(liveRoutes, defaultParentState, renderOptions) {\n    var target = void 0;\n    var myState = {\n      render: renderOptions,\n      outlets: Object.create(null),\n      wasUsed: false\n    };\n    if (renderOptions.into) {\n      target = findLiveRoute(liveRoutes, renderOptions.into);\n    } else {\n      target = defaultParentState;\n    }\n    if (target) {\n      (0, _emberMetal.set)(target.outlets, renderOptions.outlet, myState);\n    } else {\n      if (renderOptions.into) {\n        (true && !(false) && (0, _emberDebug.deprecate)('Rendering into a {{render}} helper that resolves to an {{outlet}} is deprecated.', false, {\n          id: 'ember-routing.top-level-render-helper',\n          until: '3.0.0',\n          url: 'https://emberjs.com/deprecations/v2.x/#toc_rendering-into-a-render-helper-that-resolves-to-an-outlet'\n        }));\n\n\n        // Megahax time. Post-3.0-breaking-changes, we will just assert\n        // right here that the user tried to target a nonexistent\n        // thing. But for now we still need to support the `render`\n        // helper, and people are allowed to target templates rendered\n        // by the render helper. So instead we defer doing anyting with\n        // these orphan renders until afterRender.\n        appendOrphan(liveRoutes, renderOptions.into, myState);\n      } else {\n        liveRoutes = myState;\n      }\n    }\n    return {\n      liveRoutes: liveRoutes,\n      ownState: myState\n    };\n  }\n\n  function appendOrphan(liveRoutes, into, myState) {\n    if (!liveRoutes.outlets.__ember_orphans__) {\n      liveRoutes.outlets.__ember_orphans__ = {\n        render: {\n          name: '__ember_orphans__'\n        },\n        outlets: Object.create(null)\n      };\n    }\n    liveRoutes.outlets.__ember_orphans__.outlets[into] = myState;\n    _emberMetal.run.schedule('afterRender', function () {\n      (true && !(liveRoutes.outlets.__ember_orphans__.outlets[into].wasUsed) && (0, _emberDebug.assert)('You attempted to render into \\'' + into + '\\' but it was not found', liveRoutes.outlets.__ember_orphans__.outlets[into].wasUsed));\n    });\n  }\n\n  function representEmptyRoute(liveRoutes, defaultParentState, route) {\n    // the route didn't render anything\n    var alreadyAppended = findLiveRoute(liveRoutes, route.routeName);\n    if (alreadyAppended) {\n      // But some other route has already rendered our default\n      // template, so that becomes the default target for any\n      // children we may have.\n      return alreadyAppended;\n    } else {\n      // Create an entry to represent our default template name,\n      // just so other routes can target it and inherit its place\n      // in the outlet hierarchy.\n      defaultParentState.outlets.main = {\n        render: {\n          name: route.routeName,\n          outlet: 'main'\n        },\n        outlets: {}\n      };\n      return defaultParentState;\n    }\n  }\n\n  exports.default = EmberRouter;\n});","enifed('ember-routing/system/router_state', ['exports', 'ember-utils', 'ember-routing/utils', 'ember-runtime'], function (exports, _emberUtils, _utils, _emberRuntime) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    emberRouter: null,\n    routerJs: null,\n    routerJsState: null,\n\n    isActiveIntent: function (routeName, models, queryParams, queryParamsMustMatch) {\n      var state = this.routerJsState;\n      if (!this.routerJs.isActiveIntent(routeName, models, null, state)) {\n        return false;\n      }\n\n      if (queryParamsMustMatch && Object.keys(queryParams).length > 0) {\n        var visibleQueryParams = (0, _emberUtils.assign)({}, queryParams);\n\n        this.emberRouter._prepareQueryParams(routeName, models, visibleQueryParams);\n        return (0, _utils.shallowEqual)(visibleQueryParams, state.queryParams);\n      }\n\n      return true;\n    }\n  });\n});","enifed('ember-routing/utils', ['exports', 'ember-utils', 'ember-metal', 'ember-debug'], function (exports, _emberUtils, _emberMetal, _emberDebug) {\n  'use strict';\n\n  exports.extractRouteArgs = extractRouteArgs;\n  exports.getActiveTargetName = getActiveTargetName;\n  exports.stashParamNames = stashParamNames;\n  exports.calculateCacheKey = calculateCacheKey;\n  exports.normalizeControllerQueryParams = normalizeControllerQueryParams;\n  exports.resemblesURL = resemblesURL;\n  exports.prefixRouteNameArg = prefixRouteNameArg;\n  exports.shallowEqual = shallowEqual;\n\n\n  var ALL_PERIODS_REGEX = /\\./g;\n\n  function extractRouteArgs(args) {\n    args = args.slice();\n    var possibleQueryParams = args[args.length - 1];\n\n    var queryParams = void 0;\n    if (possibleQueryParams && possibleQueryParams.hasOwnProperty('queryParams')) {\n      queryParams = args.pop().queryParams;\n    } else {\n      queryParams = {};\n    }\n\n    var routeName = args.shift();\n\n    return { routeName: routeName, models: args, queryParams: queryParams };\n  }\n\n  function getActiveTargetName(router) {\n    var handlerInfos = router.activeTransition ? router.activeTransition.state.handlerInfos : router.state.handlerInfos;\n    return handlerInfos[handlerInfos.length - 1].name;\n  }\n\n  function stashParamNames(router, handlerInfos) {\n    if (handlerInfos._namesStashed) {\n      return;\n    }\n\n    // This helper exists because router.js/route-recognizer.js awkwardly\n    // keeps separate a handlerInfo's list of parameter names depending\n    // on whether a URL transition or named transition is happening.\n    // Hopefully we can remove this in the future.\n    var targetRouteName = handlerInfos[handlerInfos.length - 1].name;\n    var recogHandlers = router._routerMicrolib.recognizer.handlersFor(targetRouteName);\n    var dynamicParent = null;\n\n    for (var i = 0; i < handlerInfos.length; ++i) {\n      var handlerInfo = handlerInfos[i];\n      var names = recogHandlers[i].names;\n\n      if (names.length) {\n        dynamicParent = handlerInfo;\n      }\n\n      handlerInfo._names = names;\n\n      var route = handlerInfo.handler;\n      route._stashNames(handlerInfo, dynamicParent);\n    }\n\n    handlerInfos._namesStashed = true;\n  }\n\n  function _calculateCacheValuePrefix(prefix, part) {\n    // calculates the dot separated sections from prefix that are also\n    // at the start of part - which gives us the route name\n\n    // given : prefix = site.article.comments, part = site.article.id\n    //      - returns: site.article (use get(values[site.article], 'id') to get the dynamic part - used below)\n\n    // given : prefix = site.article, part = site.article.id\n    //      - returns: site.article. (use get(values[site.article], 'id') to get the dynamic part - used below)\n\n    var prefixParts = prefix.split('.');\n    var currPrefix = '';\n\n    for (var i = 0; i < prefixParts.length; i++) {\n      var currPart = prefixParts.slice(0, i + 1).join('.');\n      if (part.indexOf(currPart) !== 0) {\n        break;\n      }\n      currPrefix = currPart;\n    }\n\n    return currPrefix;\n  }\n\n  /*\n    Stolen from Controller\n  */\n  function calculateCacheKey(prefix) {\n    var parts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var values = arguments[2];\n\n    var suffixes = '';\n    for (var i = 0; i < parts.length; ++i) {\n      var part = parts[i];\n      var cacheValuePrefix = _calculateCacheValuePrefix(prefix, part);\n      var value = void 0;\n      if (values) {\n        if (cacheValuePrefix && cacheValuePrefix in values) {\n          var partRemovedPrefix = part.indexOf(cacheValuePrefix) === 0 ? part.substr(cacheValuePrefix.length + 1) : part;\n          value = (0, _emberMetal.get)(values[cacheValuePrefix], partRemovedPrefix);\n        } else {\n          value = (0, _emberMetal.get)(values, part);\n        }\n      }\n      suffixes += '::' + part + ':' + value;\n    }\n    return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');\n  }\n\n  /*\n    Controller-defined query parameters can come in three shapes:\n  \n    Array\n      queryParams: ['foo', 'bar']\n    Array of simple objects where value is an alias\n      queryParams: [\n        {\n          'foo': 'rename_foo_to_this'\n        },\n        {\n          'bar': 'call_bar_this_instead'\n        }\n      ]\n    Array of fully defined objects\n      queryParams: [\n        {\n          'foo': {\n            as: 'rename_foo_to_this'\n          },\n        }\n        {\n          'bar': {\n            as: 'call_bar_this_instead',\n            scope: 'controller'\n          }\n        }\n      ]\n  \n    This helper normalizes all three possible styles into the\n    'Array of fully defined objects' style.\n  */\n  function normalizeControllerQueryParams(queryParams) {\n    var qpMap = {};\n\n    for (var i = 0; i < queryParams.length; ++i) {\n      accumulateQueryParamDescriptors(queryParams[i], qpMap);\n    }\n\n    return qpMap;\n  }\n\n  function accumulateQueryParamDescriptors(_desc, accum) {\n    var desc = _desc;\n    var tmp = void 0;\n    if (typeof desc === 'string') {\n      tmp = {};\n      tmp[desc] = { as: null };\n      desc = tmp;\n    }\n\n    for (var key in desc) {\n      if (!desc.hasOwnProperty(key)) {\n        return;\n      }\n\n      var singleDesc = desc[key];\n      if (typeof singleDesc === 'string') {\n        singleDesc = { as: singleDesc };\n      }\n\n      tmp = accum[key] || { as: null, scope: 'model' };\n      (0, _emberUtils.assign)(tmp, singleDesc);\n\n      accum[key] = tmp;\n    }\n  }\n\n  /*\n    Check if a routeName resembles a url instead\n  \n    @private\n  */\n  function resemblesURL(str) {\n    return typeof str === 'string' && (str === '' || str[0] === '/');\n  }\n\n  /*\n    Returns an arguments array where the route name arg is prefixed based on the mount point\n  \n    @private\n  */\n  function prefixRouteNameArg(route, args) {\n    var routeName = args[0];\n    var owner = (0, _emberUtils.getOwner)(route);\n    var prefix = owner.mountPoint;\n\n    // only alter the routeName if it's actually referencing a route.\n    if (owner.routable && typeof routeName === 'string') {\n      if (resemblesURL(routeName)) {\n        throw new _emberDebug.Error('Programmatic transitions by URL cannot be used within an Engine. Please use the route name instead.');\n      } else {\n        routeName = prefix + '.' + routeName;\n        args[0] = routeName;\n      }\n    }\n\n    return args;\n  }\n\n  function shallowEqual(a, b) {\n    var k = void 0;\n    var aCount = 0;\n    var bCount = 0;\n    for (k in a) {\n      if (a.hasOwnProperty(k)) {\n        if (a[k] !== b[k]) {\n          return false;\n        }\n        aCount++;\n      }\n    }\n\n    for (k in b) {\n      if (b.hasOwnProperty(k)) {\n        bCount++;\n      }\n    }\n\n    return aCount === bCount;\n  }\n});","enifed('ember-runtime/compare', ['exports', 'ember-runtime/utils', 'ember-runtime/mixins/comparable'], function (exports, _utils, _comparable) {\n  'use strict';\n\n  exports.default = compare;\n\n\n  var TYPE_ORDER = {\n    'undefined': 0,\n    'null': 1,\n    'boolean': 2,\n    'number': 3,\n    'string': 4,\n    'array': 5,\n    'object': 6,\n    'instance': 7,\n    'function': 8,\n    'class': 9,\n    'date': 10\n  };\n\n  //\n  // the spaceship operator\n  //\n  //                      `. ___\n  //                     __,' __`.                _..----....____\n  //         __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'\n  //   _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'\n  // ,'________________                          \\`-._`-','\n  //  `._              ```````````------...___   '-.._'-:\n  //     ```--.._      ,.                     ````--...__\\-.\n  //             `.--. `-` \"INFINITY IS LESS     ____    |  |`\n  //               `. `.   THAN BEYOND\"        ,'`````.  ;  ;`\n  //                 `._`.        __________   `.      \\'__/`\n  //                    `-:._____/______/___/____`.     \\  `\n  //                                |       `._    `.    \\\n  //                                `._________`-.   `.   `.___\n  //                                              SSt  `------'`\n  function spaceship(a, b) {\n    var diff = a - b;\n    return (diff > 0) - (diff < 0);\n  }\n\n  /**\n   @module @ember/utils\n  */\n\n  /**\n   Compares two javascript values and returns:\n  \n    - -1 if the first is smaller than the second,\n    - 0 if both are equal,\n    - 1 if the first is greater than the second.\n  \n    ```javascript\n    import { compare } from '@ember/utils';\n  \n    compare('hello', 'hello');  // 0\n    compare('abc', 'dfg');      // -1\n    compare(2, 1);              // 1\n    ```\n  \n   If the types of the two objects are different precedence occurs in the\n   following order, with types earlier in the list considered `<` types\n   later in the list:\n  \n    - undefined\n    - null\n    - boolean\n    - number\n    - string\n    - array\n    - object\n    - instance\n    - function\n    - class\n    - date\n  \n    ```javascript\n    import { compare } from '@ember/utils';\n  \n    compare('hello', 50);       // 1\n    compare(50, 'hello');       // -1\n    ```\n  \n   @method compare\n   @for @ember/utils\n   @static\n   @param {Object} v First value to compare\n   @param {Object} w Second value to compare\n   @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.\n   @public\n  */\n  function compare(v, w) {\n    if (v === w) {\n      return 0;\n    }\n\n    var type1 = (0, _utils.typeOf)(v);\n    var type2 = (0, _utils.typeOf)(w);\n\n    if (_comparable.default) {\n      if (type1 === 'instance' && _comparable.default.detect(v) && v.constructor.compare) {\n        return v.constructor.compare(v, w);\n      }\n\n      if (type2 === 'instance' && _comparable.default.detect(w) && w.constructor.compare) {\n        return w.constructor.compare(w, v) * -1;\n      }\n    }\n\n    var res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);\n\n    if (res !== 0) {\n      return res;\n    }\n\n    // types are equal - so we have to check values now\n    switch (type1) {\n      case 'boolean':\n      case 'number':\n        return spaceship(v, w);\n\n      case 'string':\n        return spaceship(v.localeCompare(w), 0);\n\n      case 'array':\n        {\n          var vLen = v.length;\n          var wLen = w.length;\n          var len = Math.min(vLen, wLen);\n\n          for (var i = 0; i < len; i++) {\n            var r = compare(v[i], w[i]);\n            if (r !== 0) {\n              return r;\n            }\n          }\n\n          // all elements are equal now\n          // shorter array should be ordered first\n          return spaceship(vLen, wLen);\n        }\n      case 'instance':\n        if (_comparable.default && _comparable.default.detect(v)) {\n          return v.compare(v, w);\n        }\n        return 0;\n\n      case 'date':\n        return spaceship(v.getTime(), w.getTime());\n\n      default:\n        return 0;\n    }\n  }\n});","enifed('ember-runtime/computed/computed_macros', ['exports', 'ember-metal', 'ember-debug'], function (exports, _emberMetal, _emberDebug) {\n  'use strict';\n\n  exports.or = exports.and = undefined;\n  exports.empty = empty;\n  exports.notEmpty = notEmpty;\n  exports.none = none;\n  exports.not = not;\n  exports.bool = bool;\n  exports.match = match;\n  exports.equal = equal;\n  exports.gt = gt;\n  exports.gte = gte;\n  exports.lt = lt;\n  exports.lte = lte;\n  exports.oneWay = oneWay;\n  exports.readOnly = readOnly;\n  exports.deprecatingAlias = deprecatingAlias;\n\n\n  /**\n  @module @ember/object\n  */\n\n  function expandPropertiesToArray(predicateName, properties) {\n    var expandedProperties = [];\n\n    function extractProperty(entry) {\n      expandedProperties.push(entry);\n    }\n\n    for (var i = 0; i < properties.length; i++) {\n      var property = properties[i];\n      (true && !(property.indexOf(' ') < 0) && (0, _emberDebug.assert)('Dependent keys passed to computed.' + predicateName + '() can\\'t have spaces.', property.indexOf(' ') < 0));\n\n\n      (0, _emberMetal.expandProperties)(property, extractProperty);\n    }\n\n    return expandedProperties;\n  }\n\n  function generateComputedWithPredicate(name, predicate) {\n    return function () {\n      for (var _len = arguments.length, properties = Array(_len), _key = 0; _key < _len; _key++) {\n        properties[_key] = arguments[_key];\n      }\n\n      var dependentKeys = expandPropertiesToArray(name, properties);\n\n      var computedFunc = new _emberMetal.ComputedProperty(function () {\n        var lastIdx = dependentKeys.length - 1;\n\n        for (var i = 0; i < lastIdx; i++) {\n          var value = (0, _emberMetal.get)(this, dependentKeys[i]);\n          if (!predicate(value)) {\n            return value;\n          }\n        }\n\n        return (0, _emberMetal.get)(this, dependentKeys[lastIdx]);\n      }, { dependentKeys: dependentKeys });\n\n      return computedFunc;\n    };\n  }\n\n  /**\n    A computed property that returns true if the value of the dependent\n    property is null, an empty string, empty array, or empty function.\n  \n    Example\n  \n    ```javascript\n    import { empty } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let ToDoList = EmberObject.extend({\n      isDone: empty('todos')\n    });\n  \n    let todoList = ToDoList.create({\n      todos: ['Unit Test', 'Documentation', 'Release']\n    });\n  \n    todoList.get('isDone'); // false\n    todoList.get('todos').clear();\n    todoList.get('isDone'); // true\n    ```\n  \n    @since 1.6.0\n    @method empty\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which returns true if\n    the value of the dependent property is null, an empty string, empty array,\n    or empty function and false if the underlying value is not empty.\n  \n    @public\n  */\n  function empty(dependentKey) {\n    return (0, _emberMetal.computed)(dependentKey + '.length', function () {\n      return (0, _emberMetal.isEmpty)((0, _emberMetal.get)(this, dependentKey));\n    });\n  }\n\n  /**\n    A computed property that returns true if the value of the dependent\n    property is NOT null, an empty string, empty array, or empty function.\n  \n    Example\n  \n    ```javascript\n    import { notEmpty } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      hasStuff: notEmpty('backpack')\n    });\n  \n    let hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });\n  \n    hamster.get('hasStuff');         // true\n    hamster.get('backpack').clear(); // []\n    hamster.get('hasStuff');         // false\n    ```\n  \n    @method notEmpty\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which returns true if\n    original value for property is not empty.\n    @public\n  */\n  function notEmpty(dependentKey) {\n    return (0, _emberMetal.computed)(dependentKey + '.length', function () {\n      return !(0, _emberMetal.isEmpty)((0, _emberMetal.get)(this, dependentKey));\n    });\n  }\n\n  /**\n    A computed property that returns true if the value of the dependent\n    property is null or undefined. This avoids errors from JSLint complaining\n    about use of ==, which can be technically confusing.\n  \n    Example\n  \n    ```javascript\n    import { none } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      isHungry: none('food')\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('isHungry'); // true\n    hamster.set('food', 'Banana');\n    hamster.get('isHungry'); // false\n    hamster.set('food', null);\n    hamster.get('isHungry'); // true\n    ```\n  \n    @method none\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which\n    returns true if original value for property is null or undefined.\n    @public\n  */\n  function none(dependentKey) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return (0, _emberMetal.isNone)((0, _emberMetal.get)(this, dependentKey));\n    });\n  }\n\n  /**\n    A computed property that returns the inverse boolean value\n    of the original value for the dependent property.\n  \n    Example\n  \n    ```javascript\n    import { not } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let User = EmberObject.extend({\n      isAnonymous: not('loggedIn')\n    });\n  \n    let user = User.create({loggedIn: false});\n  \n    user.get('isAnonymous'); // true\n    user.set('loggedIn', true);\n    user.get('isAnonymous'); // false\n    ```\n  \n    @method not\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which returns\n    inverse of the original value for property\n    @public\n  */\n  function not(dependentKey) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return !(0, _emberMetal.get)(this, dependentKey);\n    });\n  }\n\n  /**\n    A computed property that converts the provided dependent property\n    into a boolean value.\n  \n    ```javascript\n    import { bool } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      hasBananas: bool('numBananas')\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('hasBananas'); // false\n    hamster.set('numBananas', 0);\n    hamster.get('hasBananas'); // false\n    hamster.set('numBananas', 1);\n    hamster.get('hasBananas'); // true\n    hamster.set('numBananas', null);\n    hamster.get('hasBananas'); // false\n    ```\n  \n    @method bool\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which converts\n    to boolean the original value for property\n    @public\n  */\n  function bool(dependentKey) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return !!(0, _emberMetal.get)(this, dependentKey);\n    });\n  }\n\n  /**\n    A computed property which matches the original value for the\n    dependent property against a given RegExp, returning `true`\n    if the value matches the RegExp and `false` if it does not.\n  \n    Example\n  \n    ```javascript\n    import { match } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let User = EmberObject.extend({\n      hasValidEmail: match('email', /^.+@.+\\..+$/)\n    });\n  \n    let user = User.create({loggedIn: false});\n  \n    user.get('hasValidEmail'); // false\n    user.set('email', '');\n    user.get('hasValidEmail'); // false\n    user.set('email', 'ember_hamster@example.com');\n    user.get('hasValidEmail'); // true\n    ```\n  \n    @method match\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @param {RegExp} regexp\n    @return {ComputedProperty} computed property which match\n    the original value for property against a given RegExp\n    @public\n  */\n  function match(dependentKey, regexp) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      var value = (0, _emberMetal.get)(this, dependentKey);\n      return regexp.test(value);\n    });\n  }\n\n  /**\n    A computed property that returns true if the provided dependent property\n    is equal to the given value.\n  \n    Example\n  \n    ```javascript\n    import { equal } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      satisfied: equal('percentCarrotsEaten', 100)\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('satisfied'); // false\n    hamster.set('percentCarrotsEaten', 100);\n    hamster.get('satisfied'); // true\n    hamster.set('percentCarrotsEaten', 50);\n    hamster.get('satisfied'); // false\n    ```\n  \n    @method equal\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @param {String|Number|Object} value\n    @return {ComputedProperty} computed property which returns true if\n    the original value for property is equal to the given value.\n    @public\n  */\n  function equal(dependentKey, value) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return (0, _emberMetal.get)(this, dependentKey) === value;\n    });\n  }\n\n  /**\n    A computed property that returns true if the provided dependent property\n    is greater than the provided value.\n  \n    Example\n  \n    ```javascript\n    import { gt } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      hasTooManyBananas: gt('numBananas', 10)\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('hasTooManyBananas'); // false\n    hamster.set('numBananas', 3);\n    hamster.get('hasTooManyBananas'); // false\n    hamster.set('numBananas', 11);\n    hamster.get('hasTooManyBananas'); // true\n    ```\n  \n    @method gt\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @param {Number} value\n    @return {ComputedProperty} computed property which returns true if\n    the original value for property is greater than given value.\n    @public\n  */\n  function gt(dependentKey, value) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return (0, _emberMetal.get)(this, dependentKey) > value;\n    });\n  }\n\n  /**\n    A computed property that returns true if the provided dependent property\n    is greater than or equal to the provided value.\n  \n    Example\n  \n    ```javascript\n    import { gte } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      hasTooManyBananas: gte('numBananas', 10)\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('hasTooManyBananas'); // false\n    hamster.set('numBananas', 3);\n    hamster.get('hasTooManyBananas'); // false\n    hamster.set('numBananas', 10);\n    hamster.get('hasTooManyBananas'); // true\n    ```\n  \n    @method gte\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @param {Number} value\n    @return {ComputedProperty} computed property which returns true if\n    the original value for property is greater or equal then given value.\n    @public\n  */\n  function gte(dependentKey, value) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return (0, _emberMetal.get)(this, dependentKey) >= value;\n    });\n  }\n\n  /**\n    A computed property that returns true if the provided dependent property\n    is less than the provided value.\n  \n    Example\n  \n    ```javascript\n    import { lt } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      needsMoreBananas: lt('numBananas', 3)\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('needsMoreBananas'); // true\n    hamster.set('numBananas', 3);\n    hamster.get('needsMoreBananas'); // false\n    hamster.set('numBananas', 2);\n    hamster.get('needsMoreBananas'); // true\n    ```\n  \n    @method lt\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @param {Number} value\n    @return {ComputedProperty} computed property which returns true if\n    the original value for property is less then given value.\n    @public\n  */\n  function lt(dependentKey, value) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return (0, _emberMetal.get)(this, dependentKey) < value;\n    });\n  }\n\n  /**\n    A computed property that returns true if the provided dependent property\n    is less than or equal to the provided value.\n  \n    Example\n  \n    ```javascript\n    import { lte } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      needsMoreBananas: lte('numBananas', 3)\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('needsMoreBananas'); // true\n    hamster.set('numBananas', 5);\n    hamster.get('needsMoreBananas'); // false\n    hamster.set('numBananas', 3);\n    hamster.get('needsMoreBananas'); // true\n    ```\n  \n    @method lte\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @param {Number} value\n    @return {ComputedProperty} computed property which returns true if\n    the original value for property is less or equal than given value.\n    @public\n  */\n  function lte(dependentKey, value) {\n    return (0, _emberMetal.computed)(dependentKey, function () {\n      return (0, _emberMetal.get)(this, dependentKey) <= value;\n    });\n  }\n\n  /**\n    A computed property that performs a logical `and` on the\n    original values for the provided dependent properties.\n  \n    You may pass in more than two properties and even use\n    property brace expansion.  The computed property will\n    return the first falsy value or last truthy value\n    just like JavaScript's `&&` operator.\n  \n    Example\n  \n    ```javascript\n    import { and } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      readyForCamp: and('hasTent', 'hasBackpack'),\n      readyForHike: and('hasWalkingStick', 'hasBackpack')\n    });\n  \n    let tomster = Hamster.create();\n  \n    tomster.get('readyForCamp'); // false\n    tomster.set('hasTent', true);\n    tomster.get('readyForCamp'); // false\n    tomster.set('hasBackpack', true);\n    tomster.get('readyForCamp'); // true\n    tomster.set('hasBackpack', 'Yes');\n    tomster.get('readyForCamp'); // 'Yes'\n    tomster.set('hasWalkingStick', null);\n    tomster.get('readyForHike'); // null\n    ```\n  \n    @method and\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey*\n    @return {ComputedProperty} computed property which performs\n    a logical `and` on the values of all the original values for properties.\n    @public\n  */\n  var and = exports.and = generateComputedWithPredicate('and', function (value) {\n    return value;\n  });\n\n  /**\n    A computed property which performs a logical `or` on the\n    original values for the provided dependent properties.\n  \n    You may pass in more than two properties and even use\n    property brace expansion.  The computed property will\n    return the first truthy value or last falsy value just\n    like JavaScript's `||` operator.\n  \n    Example\n  \n    ```javascript\n    import { or } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      readyForRain: or('hasJacket', 'hasUmbrella'),\n      readyForBeach: or('{hasSunscreen,hasUmbrella}')\n    });\n  \n    let tomster = Hamster.create();\n  \n    tomster.get('readyForRain'); // undefined\n    tomster.set('hasUmbrella', true);\n    tomster.get('readyForRain'); // true\n    tomster.set('hasJacket', 'Yes');\n    tomster.get('readyForRain'); // 'Yes'\n    tomster.set('hasSunscreen', 'Check');\n    tomster.get('readyForBeach'); // 'Check'\n    ```\n  \n    @method or\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey*\n    @return {ComputedProperty} computed property which performs\n    a logical `or` on the values of all the original values for properties.\n    @public\n  */\n  var or = exports.or = generateComputedWithPredicate('or', function (value) {\n    return !value;\n  });\n\n  /**\n    Creates a new property that is an alias for another property\n    on an object. Calls to `get` or `set` this property behave as\n    though they were called on the original property.\n  \n    ```javascript\n    import { alias } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      name: 'Alex Matchneer',\n      nomen: alias('name')\n    });\n  \n    let alex = Person.create();\n  \n    alex.get('nomen'); // 'Alex Matchneer'\n    alex.get('name');  // 'Alex Matchneer'\n  \n    alex.set('nomen', '@machty');\n    alex.get('name');  // '@machty'\n    ```\n  \n    @method alias\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which creates an\n    alias to the original value for property.\n    @public\n  */\n\n  /**\n    Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n    data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n    not mutate the upstream property, rather causes the current property to\n    become the value set. This causes the downstream property to permanently\n    diverge from the upstream property.\n  \n    Example\n  \n    ```javascript\n    import { oneWay } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let User = EmberObject.extend({\n      firstName: null,\n      lastName: null,\n      nickName: oneWay('firstName')\n    });\n  \n    let teddy = User.create({\n      firstName: 'Teddy',\n      lastName: 'Zeenny'\n    });\n  \n    teddy.get('nickName');              // 'Teddy'\n    teddy.set('nickName', 'TeddyBear'); // 'TeddyBear'\n    teddy.get('firstName');             // 'Teddy'\n    ```\n  \n    @method oneWay\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which creates a\n    one way computed property to the original value for property.\n    @public\n  */\n  function oneWay(dependentKey) {\n    return (0, _emberMetal.alias)(dependentKey).oneWay();\n  }\n\n  /**\n    This is a more semantically meaningful alias of `computed.oneWay`,\n    whose name is somewhat ambiguous as to which direction the data flows.\n  \n    @method reads\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which creates a\n      one way computed property to the original value for property.\n    @public\n   */\n\n  /**\n    Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides\n    a readOnly one way binding. Very often when using `computed.oneWay` one does\n    not also want changes to propagate back up, as they will replace the value.\n  \n    This prevents the reverse flow, and also throws an exception when it occurs.\n  \n    Example\n  \n    ```javascript\n    import { readOnly } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let User = EmberObject.extend({\n      firstName: null,\n      lastName: null,\n      nickName: readOnly('firstName')\n    });\n  \n    let teddy = User.create({\n      firstName: 'Teddy',\n      lastName:  'Zeenny'\n    });\n  \n    teddy.get('nickName');              // 'Teddy'\n    teddy.set('nickName', 'TeddyBear'); // throws Exception\n    // throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`\n    teddy.get('firstName');             // 'Teddy'\n    ```\n  \n    @method readOnly\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @return {ComputedProperty} computed property which creates a\n    one way computed property to the original value for property.\n    @since 1.5.0\n    @public\n  */\n  function readOnly(dependentKey) {\n    return (0, _emberMetal.alias)(dependentKey).readOnly();\n  }\n\n  /**\n    Creates a new property that is an alias for another property\n    on an object. Calls to `get` or `set` this property behave as\n    though they were called on the original property, but also\n    print a deprecation warning.\n  \n    ```javascript\n    import { deprecatingAlias } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      bananaCount: deprecatingAlias('cavendishCount', {\n        id: 'hamster.deprecate-banana',\n        until: '3.0.0'\n      })\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.set('bananaCount', 5); // Prints a deprecation warning.\n    hamster.get('cavendishCount'); // 5\n    ```\n  \n    @method deprecatingAlias\n    @static\n    @for @ember/object/computed\n    @param {String} dependentKey\n    @param {Object} options Options for `deprecate`.\n    @return {ComputedProperty} computed property which creates an\n    alias with a deprecation to the original value for property.\n    @since 1.7.0\n    @public\n  */\n  function deprecatingAlias(dependentKey, options) {\n    return (0, _emberMetal.computed)(dependentKey, {\n      get: function (key) {\n        (true && !(false) && (0, _emberDebug.deprecate)('Usage of `' + key + '` is deprecated, use `' + dependentKey + '` instead.', false, options));\n\n        return (0, _emberMetal.get)(this, dependentKey);\n      },\n      set: function (key, value) {\n        (true && !(false) && (0, _emberDebug.deprecate)('Usage of `' + key + '` is deprecated, use `' + dependentKey + '` instead.', false, options));\n\n        (0, _emberMetal.set)(this, dependentKey, value);\n        return value;\n      }\n    });\n  }\n});","enifed('ember-runtime/computed/reduce_computed_macros', ['exports', 'ember-debug', 'ember-metal', 'ember-runtime/compare', 'ember-runtime/utils', 'ember-runtime/system/native_array'], function (exports, _emberDebug, _emberMetal, _compare, _utils, _native_array) {\n  'use strict';\n\n  exports.union = undefined;\n  exports.sum = sum;\n  exports.max = max;\n  exports.min = min;\n  exports.map = map;\n  exports.mapBy = mapBy;\n  exports.filter = filter;\n  exports.filterBy = filterBy;\n  exports.uniq = uniq;\n  exports.uniqBy = uniqBy;\n  exports.intersect = intersect;\n  exports.setDiff = setDiff;\n  exports.collect = collect;\n  exports.sort = sort;\n\n\n  function reduceMacro(dependentKey, callback, initialValue, name) {\n    (true && !(!/[\\[\\]\\{\\}]/g.test(dependentKey)) && (0, _emberDebug.assert)('Dependent key passed to `computed.' + name + '` shouldn\\'t contain brace expanding pattern.', !/[\\[\\]\\{\\}]/g.test(dependentKey)));\n\n\n    var cp = new _emberMetal.ComputedProperty(function () {\n      var arr = (0, _emberMetal.get)(this, dependentKey);\n      if (arr === null || typeof arr !== 'object') {\n        return initialValue;\n      }\n      return arr.reduce(callback, initialValue, this);\n    }, { dependentKeys: [dependentKey + '.[]'], readOnly: true });\n\n    return cp;\n  } /**\n    @module @ember/object\n    */\n\n\n  function arrayMacro(dependentKey, callback) {\n    // This is a bit ugly\n    var propertyName = void 0;\n    if (/@each/.test(dependentKey)) {\n      propertyName = dependentKey.replace(/\\.@each.*$/, '');\n    } else {\n      propertyName = dependentKey;\n      dependentKey += '.[]';\n    }\n\n    var cp = new _emberMetal.ComputedProperty(function () {\n      var value = (0, _emberMetal.get)(this, propertyName);\n      if ((0, _utils.isArray)(value)) {\n        return (0, _native_array.A)(callback.call(this, value));\n      } else {\n        return (0, _native_array.A)();\n      }\n    }, { readOnly: true });\n\n    cp.property(dependentKey); // this forces to expand properties GH #15855\n\n    return cp;\n  }\n\n  function multiArrayMacro(_dependentKeys, callback, name) {\n    (true && !(_dependentKeys.every(function (dependentKey) {\n      return !/[\\[\\]\\{\\}]/g.test(dependentKey);\n    })) && (0, _emberDebug.assert)('Dependent keys passed to `computed.' + name + '` shouldn\\'t contain brace expanding pattern.', _dependentKeys.every(function (dependentKey) {\n      return !/[\\[\\]\\{\\}]/g.test(dependentKey);\n    })));\n\n    var dependentKeys = _dependentKeys.map(function (key) {\n      return key + '.[]';\n    });\n\n    var cp = new _emberMetal.ComputedProperty(function () {\n      return (0, _native_array.A)(callback.call(this, _dependentKeys));\n    }, { dependentKeys: dependentKeys, readOnly: true });\n\n    return cp;\n  }\n\n  /**\n    A computed property that returns the sum of the values\n    in the dependent array.\n  \n    @method sum\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @return {ComputedProperty} computes the sum of all values in the dependentKey's array\n    @since 1.4.0\n    @public\n  */\n  function sum(dependentKey) {\n    return reduceMacro(dependentKey, function (sum, item) {\n      return sum + item;\n    }, 0, 'sum');\n  }\n\n  /**\n    A computed property that calculates the maximum value in the\n    dependent array. This will return `-Infinity` when the dependent\n    array is empty.\n  \n    ```javascript\n    import { mapBy, max } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      childAges: mapBy('children', 'age'),\n      maxChildAge: max('childAges')\n    });\n  \n    let lordByron = Person.create({ children: [] });\n  \n    lordByron.get('maxChildAge'); // -Infinity\n    lordByron.get('children').pushObject({\n      name: 'Augusta Ada Byron', age: 7\n    });\n    lordByron.get('maxChildAge'); // 7\n    lordByron.get('children').pushObjects([{\n      name: 'Allegra Byron',\n      age: 5\n    }, {\n      name: 'Elizabeth Medora Leigh',\n      age: 8\n    }]);\n    lordByron.get('maxChildAge'); // 8\n    ```\n  \n    If the types of the arguments are not numbers,\n    they will be converted to numbers and the type\n    of the return value will always be `Number`.\n    For example, the max of a list of Date objects will be\n    the highest timestamp as a `Number`.\n    This behavior is consistent with `Math.max`.\n  \n    @method max\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @return {ComputedProperty} computes the largest value in the dependentKey's array\n    @public\n  */\n  function max(dependentKey) {\n    return reduceMacro(dependentKey, function (max, item) {\n      return Math.max(max, item);\n    }, -Infinity, 'max');\n  }\n\n  /**\n    A computed property that calculates the minimum value in the\n    dependent array. This will return `Infinity` when the dependent\n    array is empty.\n  \n    ```javascript\n    import { mapBy, min } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      childAges: mapBy('children', 'age'),\n      minChildAge: min('childAges')\n    });\n  \n    let lordByron = Person.create({ children: [] });\n  \n    lordByron.get('minChildAge'); // Infinity\n    lordByron.get('children').pushObject({\n      name: 'Augusta Ada Byron', age: 7\n    });\n    lordByron.get('minChildAge'); // 7\n    lordByron.get('children').pushObjects([{\n      name: 'Allegra Byron',\n      age: 5\n    }, {\n      name: 'Elizabeth Medora Leigh',\n      age: 8\n    }]);\n    lordByron.get('minChildAge'); // 5\n    ```\n  \n    If the types of the arguments are not numbers,\n    they will be converted to numbers and the type\n    of the return value will always be `Number`.\n    For example, the min of a list of Date objects will be\n    the lowest timestamp as a `Number`.\n    This behavior is consistent with `Math.min`.\n  \n    @method min\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @return {ComputedProperty} computes the smallest value in the dependentKey's array\n    @public\n  */\n  function min(dependentKey) {\n    return reduceMacro(dependentKey, function (min, item) {\n      return Math.min(min, item);\n    }, Infinity, 'min');\n  }\n\n  /**\n    Returns an array mapped via the callback\n  \n    The callback method you provide should have the following signature.\n    `item` is the current item in the iteration.\n    `index` is the integer index of the current item in the iteration.\n  \n    ```javascript\n    function(item, index);\n    ```\n  \n    Example\n  \n    ```javascript\n    import { map } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      excitingChores: map('chores', function(chore, index) {\n        return chore.toUpperCase() + '!';\n      })\n    });\n  \n    let hamster = Hamster.create({\n      chores: ['clean', 'write more unit tests']\n    });\n  \n    hamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n    ```\n  \n    @method map\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @param {Function} callback\n    @return {ComputedProperty} an array mapped via the callback\n    @public\n  */\n  function map(dependentKey, callback) {\n    return arrayMacro(dependentKey, function (value) {\n      return value.map(callback, this);\n    });\n  }\n\n  /**\n    Returns an array mapped to the specified key.\n  \n    ```javascript\n    import { mapBy } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      childAges: mapBy('children', 'age')\n    });\n  \n    let lordByron = Person.create({ children: [] });\n  \n    lordByron.get('childAges'); // []\n    lordByron.get('children').pushObject({ name: 'Augusta Ada Byron', age: 7 });\n    lordByron.get('childAges'); // [7]\n    lordByron.get('children').pushObjects([{\n      name: 'Allegra Byron',\n      age: 5\n    }, {\n      name: 'Elizabeth Medora Leigh',\n      age: 8\n    }]);\n    lordByron.get('childAges'); // [7, 5, 8]\n    ```\n  \n    @method mapBy\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @param {String} propertyKey\n    @return {ComputedProperty} an array mapped to the specified key\n    @public\n  */\n  function mapBy(dependentKey, propertyKey) {\n    (true && !(typeof propertyKey === 'string') && (0, _emberDebug.assert)('\\`computed.mapBy\\` expects a property string for its second argument, ' + 'perhaps you meant to use \"map\"', typeof propertyKey === 'string'));\n    (true && !(!/[\\[\\]\\{\\}]/g.test(dependentKey)) && (0, _emberDebug.assert)('Dependent key passed to `computed.mapBy` shouldn\\'t contain brace expanding pattern.', !/[\\[\\]\\{\\}]/g.test(dependentKey)));\n\n\n    return map(dependentKey + '.@each.' + propertyKey, function (item) {\n      return (0, _emberMetal.get)(item, propertyKey);\n    });\n  }\n\n  /**\n    Filters the array by the callback.\n  \n    The callback method you provide should have the following signature.\n    `item` is the current item in the iteration.\n    `index` is the integer index of the current item in the iteration.\n    `array` is the dependant array itself.\n  \n    ```javascript\n    function(item, index, array);\n    ```\n  \n    ```javascript\n    import { filter } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      remainingChores: filter('chores', function(chore, index, array) {\n        return !chore.done;\n      })\n    });\n  \n    let hamster = Hamster.create({\n      chores: [\n        { name: 'cook', done: true },\n        { name: 'clean', done: true },\n        { name: 'write more unit tests', done: false }\n      ]\n    });\n  \n    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]\n    ```\n  \n    You can also use `@each.property` in your dependent key, the callback will still use the underlying array:\n  \n    ```javascript\n    import { A } from '@ember/array';\n    import { filter } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      remainingChores: filter('chores.@each.done', function(chore, index, array) {\n        return !chore.get('done');\n      })\n    });\n  \n    let hamster = Hamster.create({\n      chores: A([\n        EmberObject.create({ name: 'cook', done: true }),\n        EmberObject.create({ name: 'clean', done: true }),\n        EmberObject.create({ name: 'write more unit tests', done: false })\n      ])\n    });\n    hamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]\n    hamster.get('chores').objectAt(2).set('done', true);\n    hamster.get('remainingChores'); // []\n    ```\n  \n  \n    @method filter\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @param {Function} callback\n    @return {ComputedProperty} the filtered array\n    @public\n  */\n  function filter(dependentKey, callback) {\n    return arrayMacro(dependentKey, function (value) {\n      return value.filter(callback, this);\n    });\n  }\n\n  /**\n    Filters the array by the property and value\n  \n    ```javascript\n    import { filterBy } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      remainingChores: filterBy('chores', 'done', false)\n    });\n  \n    let hamster = Hamster.create({\n      chores: [\n        { name: 'cook', done: true },\n        { name: 'clean', done: true },\n        { name: 'write more unit tests', done: false }\n      ]\n    });\n  \n    hamster.get('remainingChores'); // [{ name: 'write more unit tests', done: false }]\n    ```\n  \n    @method filterBy\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @param {String} propertyKey\n    @param {*} value\n    @return {ComputedProperty} the filtered array\n    @public\n  */\n  function filterBy(dependentKey, propertyKey, value) {\n    (true && !(!/[\\[\\]\\{\\}]/g.test(dependentKey)) && (0, _emberDebug.assert)('Dependent key passed to `computed.filterBy` shouldn\\'t contain brace expanding pattern.', !/[\\[\\]\\{\\}]/g.test(dependentKey)));\n\n\n    var callback = void 0;\n    if (arguments.length === 2) {\n      callback = function (item) {\n        return (0, _emberMetal.get)(item, propertyKey);\n      };\n    } else {\n      callback = function (item) {\n        return (0, _emberMetal.get)(item, propertyKey) === value;\n      };\n    }\n\n    return filter(dependentKey + '.@each.' + propertyKey, callback);\n  }\n\n  /**\n    A computed property which returns a new array with all the unique\n    elements from one or more dependent arrays.\n  \n    Example\n  \n    ```javascript\n    import { uniq } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      uniqueFruits: uniq('fruits')\n    });\n  \n    let hamster = Hamster.create({\n      fruits: [\n        'banana',\n        'grape',\n        'kale',\n        'banana'\n      ]\n    });\n  \n    hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']\n    ```\n  \n    @method uniq\n    @for @ember/object/computed\n    @static\n    @param {String} propertyKey*\n    @return {ComputedProperty} computes a new array with all the\n    unique elements from the dependent array\n    @public\n  */\n  function uniq() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return multiArrayMacro(args, function (dependentKeys) {\n      var _this = this;\n\n      var uniq = (0, _native_array.A)();\n      var seen = new Set();\n\n      dependentKeys.forEach(function (dependentKey) {\n        var value = (0, _emberMetal.get)(_this, dependentKey);\n        if ((0, _utils.isArray)(value)) {\n          value.forEach(function (item) {\n            if (!seen.has(item)) {\n              seen.add(item);\n              uniq.push(item);\n            }\n          });\n        }\n      });\n\n      return uniq;\n    }, 'uniq');\n  }\n\n  /**\n    A computed property which returns a new array with all the unique\n    elements from an array, with uniqueness determined by specific key.\n  \n    Example\n  \n    ```javascript\n    import { uniqBy } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      uniqueFruits: uniqBy('fruits', 'id')\n    });\n    let hamster = Hamster.create({\n      fruits: [\n        { id: 1, 'banana' },\n        { id: 2, 'grape' },\n        { id: 3, 'peach' },\n        { id: 1, 'banana' }\n      ]\n    });\n    hamster.get('uniqueFruits'); // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n    ```\n  \n    @method uniqBy\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey\n    @param {String} propertyKey\n    @return {ComputedProperty} computes a new array with all the\n    unique elements from the dependent array\n    @public\n  */\n  function uniqBy(dependentKey, propertyKey) {\n    (true && !(!/[\\[\\]\\{\\}]/g.test(dependentKey)) && (0, _emberDebug.assert)('Dependent key passed to `computed.uniqBy` shouldn\\'t contain brace expanding pattern.', !/[\\[\\]\\{\\}]/g.test(dependentKey)));\n\n\n    var cp = new _emberMetal.ComputedProperty(function () {\n      var uniq = (0, _native_array.A)();\n      var list = (0, _emberMetal.get)(this, dependentKey);\n      if ((0, _utils.isArray)(list)) {\n        var seen = new Set();\n        list.forEach(function (item) {\n          var val = (0, _emberMetal.get)(item, propertyKey);\n          if (!seen.has(val)) {\n            seen.add(val);\n            uniq.push(item);\n          }\n        });\n      }\n      return uniq;\n    }, { dependentKeys: [dependentKey + '.[]'], readOnly: true });\n\n    return cp;\n  }\n\n  /**\n    A computed property which returns a new array with all the unique\n    elements from one or more dependent arrays.\n  \n    Example\n  \n    ```javascript\n    import { union } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      uniqueFruits: union('fruits', 'vegetables')\n    });\n  \n    let hamster = Hamster.create({\n      fruits: [\n        'banana',\n        'grape',\n        'kale',\n        'banana',\n        'tomato'\n      ],\n      vegetables: [\n        'tomato',\n        'carrot',\n        'lettuce'\n      ]\n    });\n  \n    hamster.get('uniqueFruits'); // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']\n    ```\n  \n    @method union\n    @for @ember/object/computed\n    @static\n    @param {String} propertyKey*\n    @return {ComputedProperty} computes a new array with all the\n    unique elements from the dependent array\n    @public\n  */\n  var union = exports.union = uniq;\n\n  /**\n    A computed property which returns a new array with all the elements\n    two or more dependent arrays have in common.\n  \n    Example\n  \n    ```javascript\n    import { intersect } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let obj = EmberObject.extend({\n      friendsInCommon: intersect('adaFriends', 'charlesFriends')\n    }).create({\n      adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n      charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n    });\n  \n    obj.get('friendsInCommon'); // ['William King', 'Mary Somerville']\n    ```\n  \n    @method intersect\n    @for @ember/object/computed\n    @static\n    @param {String} propertyKey*\n    @return {ComputedProperty} computes a new array with all the\n    duplicated elements from the dependent arrays\n    @public\n  */\n  function intersect() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return multiArrayMacro(args, function (dependentKeys) {\n      var _this2 = this;\n\n      var arrays = dependentKeys.map(function (dependentKey) {\n        var array = (0, _emberMetal.get)(_this2, dependentKey);\n        return (0, _utils.isArray)(array) ? array : [];\n      });\n\n      var results = arrays.pop().filter(function (candidate) {\n        for (var i = 0; i < arrays.length; i++) {\n          var found = false;\n          var array = arrays[i];\n          for (var j = 0; j < array.length; j++) {\n            if (array[j] === candidate) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }, 'intersect');\n\n      return (0, _native_array.A)(results);\n    });\n  }\n\n  /**\n    A computed property which returns a new array with all the\n    properties from the first dependent array that are not in the second\n    dependent array.\n  \n    Example\n  \n    ```javascript\n    import { setDiff } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      likes: ['banana', 'grape', 'kale'],\n      wants: setDiff('likes', 'fruits')\n    });\n  \n    let hamster = Hamster.create({\n      fruits: [\n        'grape',\n        'kale',\n      ]\n    });\n  \n    hamster.get('wants'); // ['banana']\n    ```\n  \n    @method setDiff\n    @for @ember/object/computed\n    @static\n    @param {String} setAProperty\n    @param {String} setBProperty\n    @return {ComputedProperty} computes a new array with all the\n    items from the first dependent array that are not in the second\n    dependent array\n    @public\n  */\n  function setDiff(setAProperty, setBProperty) {\n    (true && !(arguments.length === 2) && (0, _emberDebug.assert)('\\`computed.setDiff\\` requires exactly two dependent arrays.', arguments.length === 2));\n    (true && !(!/[\\[\\]\\{\\}]/g.test(setAProperty) && !/[\\[\\]\\{\\}]/g.test(setBProperty)) && (0, _emberDebug.assert)('Dependent keys passed to `computed.setDiff` shouldn\\'t contain brace expanding pattern.', !/[\\[\\]\\{\\}]/g.test(setAProperty) && !/[\\[\\]\\{\\}]/g.test(setBProperty)));\n\n\n    var cp = new _emberMetal.ComputedProperty(function () {\n      var setA = this.get(setAProperty);\n      var setB = this.get(setBProperty);\n\n      if (!(0, _utils.isArray)(setA)) {\n        return (0, _native_array.A)();\n      }\n      if (!(0, _utils.isArray)(setB)) {\n        return (0, _native_array.A)(setA);\n      }\n\n      return setA.filter(function (x) {\n        return setB.indexOf(x) === -1;\n      });\n    }, {\n      dependentKeys: [setAProperty + '.[]', setBProperty + '.[]'],\n      readOnly: true\n    });\n\n    return cp;\n  }\n\n  /**\n    A computed property that returns the array of values\n    for the provided dependent properties.\n  \n    Example\n  \n    ```javascript\n    import { collect } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let Hamster = EmberObject.extend({\n      clothes: collect('hat', 'shirt')\n    });\n  \n    let hamster = Hamster.create();\n  \n    hamster.get('clothes'); // [null, null]\n    hamster.set('hat', 'Camp Hat');\n    hamster.set('shirt', 'Camp Shirt');\n    hamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']\n    ```\n  \n    @method collect\n    @for @ember/object/computed\n    @static\n    @param {String} dependentKey*\n    @return {ComputedProperty} computed property which maps\n    values of all passed in properties to an array.\n    @public\n  */\n  function collect() {\n    for (var _len3 = arguments.length, dependentKeys = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      dependentKeys[_key3] = arguments[_key3];\n    }\n\n    return multiArrayMacro(dependentKeys, function () {\n      var properties = (0, _emberMetal.getProperties)(this, dependentKeys);\n      var res = (0, _native_array.A)();\n      for (var key in properties) {\n        if (properties.hasOwnProperty(key)) {\n          if (properties[key] === undefined) {\n            res.push(null);\n          } else {\n            res.push(properties[key]);\n          }\n        }\n      }\n      return res;\n    }, 'collect');\n  }\n\n  /**\n    A computed property which returns a new array with all the\n    properties from the first dependent array sorted based on a property\n    or sort function.\n  \n    The callback method you provide should have the following signature:\n  \n    ```javascript\n    function(itemA, itemB);\n    ```\n  \n    - `itemA` the first item to compare.\n    - `itemB` the second item to compare.\n  \n    This function should return negative number (e.g. `-1`) when `itemA` should come before\n    `itemB`. It should return positive number (e.g. `1`) when `itemA` should come after\n    `itemB`. If the `itemA` and `itemB` are equal this function should return `0`.\n  \n    Therefore, if this function is comparing some numeric values, simple `itemA - itemB` or\n    `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of series of `if`.\n  \n    Example\n  \n    ```javascript\n    import { sort } from '@ember/object/computed';\n    import EmberObject from '@ember/object';\n  \n    let ToDoList = EmberObject.extend({\n      // using standard ascending sort\n      todosSorting: Object.freeze(['name']),\n      sortedTodos: sort('todos', 'todosSorting'),\n  \n      // using descending sort\n      todosSortingDesc: Object.freeze(['name:desc']),\n      sortedTodosDesc: sort('todos', 'todosSortingDesc'),\n  \n      // using a custom sort function\n      priorityTodos: sort('todos', function(a, b){\n        if (a.priority > b.priority) {\n          return 1;\n        } else if (a.priority < b.priority) {\n          return -1;\n        }\n  \n        return 0;\n      })\n    });\n  \n    let todoList = ToDoList.create({todos: [\n      { name: 'Unit Test', priority: 2 },\n      { name: 'Documentation', priority: 3 },\n      { name: 'Release', priority: 1 }\n    ]});\n  \n    todoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\n    todoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\n    todoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n    ```\n  \n    @method sort\n    @for @ember/object/computed\n    @static\n    @param {String} itemsKey\n    @param {String or Function} sortDefinition a dependent key to an\n    array of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting\n    @return {ComputedProperty} computes a new sorted array based\n    on the sort property array or callback function\n    @public\n  */\n  function sort(itemsKey, sortDefinition) {\n    (true && !(arguments.length === 2) && (0, _emberDebug.assert)('\\`computed.sort\\` requires two arguments: an array key to sort and ' + 'either a sort properties key or sort function', arguments.length === 2));\n\n\n    if (typeof sortDefinition === 'function') {\n      return customSort(itemsKey, sortDefinition);\n    } else {\n      return propertySort(itemsKey, sortDefinition);\n    }\n  }\n\n  function customSort(itemsKey, comparator) {\n    return arrayMacro(itemsKey, function (value) {\n      var _this3 = this;\n\n      return value.slice().sort(function (x, y) {\n        return comparator.call(_this3, x, y);\n      });\n    });\n  }\n\n  // This one needs to dynamically set up and tear down observers on the itemsKey\n  // depending on the sortProperties\n  function propertySort(itemsKey, sortPropertiesKey) {\n    var cp = new _emberMetal.ComputedProperty(function (key) {\n      var _this4 = this;\n\n      var sortProperties = (0, _emberMetal.get)(this, sortPropertiesKey);\n\n      (true && !((0, _utils.isArray)(sortProperties) && sortProperties.every(function (s) {\n        return typeof s === 'string';\n      })) && (0, _emberDebug.assert)('The sort definition for \\'' + key + '\\' on ' + this + ' must be a function or an array of strings', (0, _utils.isArray)(sortProperties) && sortProperties.every(function (s) {\n        return typeof s === 'string';\n      })));\n\n\n      // Add/remove property observers as required.\n      var activeObserversMap = cp._activeObserverMap || (cp._activeObserverMap = new WeakMap());\n      var activeObservers = activeObserversMap.get(this);\n\n      if (activeObservers !== undefined) {\n        activeObservers.forEach(function (args) {\n          return _emberMetal.removeObserver.apply(undefined, args);\n        });\n      }\n\n      function sortPropertyDidChange() {\n        this.notifyPropertyChange(key);\n      }\n\n      var itemsKeyIsAtThis = itemsKey === '@this';\n      var normalizedSortProperties = normalizeSortProperties(sortProperties);\n      activeObservers = normalizedSortProperties.map(function (_ref) {\n        var prop = _ref[0];\n\n        var path = itemsKeyIsAtThis ? '@each.' + prop : itemsKey + '.@each.' + prop;\n        (0, _emberMetal.addObserver)(_this4, path, sortPropertyDidChange);\n        return [_this4, path, sortPropertyDidChange];\n      });\n\n      activeObserversMap.set(this, activeObservers);\n\n      var items = itemsKeyIsAtThis ? this : (0, _emberMetal.get)(this, itemsKey);\n      if (!(0, _utils.isArray)(items)) {\n        return (0, _native_array.A)();\n      }\n\n      return sortByNormalizedSortProperties(items, normalizedSortProperties);\n    }, { dependentKeys: [sortPropertiesKey + '.[]'], readOnly: true });\n\n    cp._activeObserverMap = undefined;\n\n    return cp;\n  }\n\n  function normalizeSortProperties(sortProperties) {\n    return sortProperties.map(function (p) {\n      var _p$split = p.split(':'),\n          prop = _p$split[0],\n          direction = _p$split[1];\n\n      direction = direction || 'asc';\n\n      return [prop, direction];\n    });\n  }\n\n  function sortByNormalizedSortProperties(items, normalizedSortProperties) {\n    return (0, _native_array.A)(items.slice().sort(function (itemA, itemB) {\n      for (var i = 0; i < normalizedSortProperties.length; i++) {\n        var _normalizedSortProper = normalizedSortProperties[i],\n            prop = _normalizedSortProper[0],\n            direction = _normalizedSortProper[1];\n\n        var result = (0, _compare.default)((0, _emberMetal.get)(itemA, prop), (0, _emberMetal.get)(itemB, prop));\n        if (result !== 0) {\n          return direction === 'desc' ? -1 * result : result;\n        }\n      }\n      return 0;\n    }));\n  }\n});","enifed('ember-runtime/controllers/controller', ['exports', 'ember-debug', 'ember-runtime/system/object', 'ember-runtime/mixins/controller', 'ember-runtime/inject'], function (exports, _emberDebug, _object, _controller, _inject) {\n  'use strict';\n\n  /**\n  @module @ember/controller\n  */\n\n  /**\n    @class Controller\n    @extends EmberObject\n    @uses Ember.ControllerMixin\n    @public\n  */\n  var Controller = _object.default.extend(_controller.default);\n\n  function controllerInjectionHelper(factory) {\n    (true && !(_controller.default.detect(factory.PrototypeMixin)) && (0, _emberDebug.assert)('Defining an injected controller property on a ' + 'non-controller is not allowed.', _controller.default.detect(factory.PrototypeMixin)));\n  }\n\n  /**\n    Creates a property that lazily looks up another controller in the container.\n    Can only be used when defining another controller.\n  \n    Example:\n  \n    ```app/controllers/post.js\n    import Controller, {\n      inject as controller\n    } from '@ember/controller';\n  \n    export default Controller.extend({\n      posts: controller()\n    });\n    ```\n  \n    This example will create a `posts` property on the `post` controller that\n    looks up the `posts` controller in the container, making it easy to\n    reference other controllers.\n  \n    @method inject\n    @static\n    @for @ember/controller\n    @since 1.10.0\n    @param {String} name (optional) name of the controller to inject, defaults\n           to the property's name\n    @return {Ember.InjectedProperty} injection descriptor instance\n    @public\n  */\n  (0, _inject.createInjectionHelper)('controller', controllerInjectionHelper);\n\n  exports.default = Controller;\n});","enifed('ember-runtime/copy', ['exports', 'ember-debug', 'ember-runtime/system/object', 'ember-runtime/mixins/copyable'], function (exports, _emberDebug, _object, _copyable) {\n  'use strict';\n\n  exports.default = copy;\n\n  /**\n   @module @ember/object\n  */\n  function _copy(obj, deep, seen, copies) {\n    var ret = void 0,\n        loc = void 0,\n        key = void 0;\n\n    // primitive data types are immutable, just return them.\n    if (typeof obj !== 'object' || obj === null) {\n      return obj;\n    }\n\n    // avoid cyclical loops\n    if (deep && (loc = seen.indexOf(obj)) >= 0) {\n      return copies[loc];\n    }\n\n    (true && !(!(obj instanceof _object.default) || _copyable.default && _copyable.default.detect(obj)) && (0, _emberDebug.assert)('Cannot clone an EmberObject that does not implement Copyable', !(obj instanceof _object.default) || _copyable.default && _copyable.default.detect(obj)));\n\n\n    // IMPORTANT: this specific test will detect a native array only. Any other\n    // object will need to implement Copyable.\n    if (Array.isArray(obj)) {\n      ret = obj.slice();\n\n      if (deep) {\n        loc = ret.length;\n\n        while (--loc >= 0) {\n          ret[loc] = _copy(ret[loc], deep, seen, copies);\n        }\n      }\n    } else if (_copyable.default && _copyable.default.detect(obj)) {\n      ret = obj.copy(deep, seen, copies);\n    } else if (obj instanceof Date) {\n      ret = new Date(obj.getTime());\n    } else {\n      ret = {};\n\n      for (key in obj) {\n        // support Null prototype\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue;\n        }\n\n        // Prevents browsers that don't respect non-enumerability from\n        // copying internal Ember properties\n        if (key.substring(0, 2) === '__') {\n          continue;\n        }\n\n        ret[key] = deep ? _copy(obj[key], deep, seen, copies) : obj[key];\n      }\n    }\n\n    if (deep) {\n      seen.push(obj);\n      copies.push(ret);\n    }\n\n    return ret;\n  }\n\n  /**\n    Creates a shallow copy of the passed object. A deep copy of the object is\n    returned if the optional `deep` argument is `true`.\n  \n    If the passed object implements the `Copyable` interface, then this\n    function will delegate to the object's `copy()` method and return the\n    result. See `Copyable` for further details.\n  \n    For primitive values (which are immutable in JavaScript), the passed object\n    is simply returned.\n  \n    @method copy\n    @static\n    @for @ember/object/internals\n    @param {Object} obj The object to clone\n    @param {Boolean} [deep=false] If true, a deep copy of the object is made.\n    @return {Object} The copied object\n    @public\n  */\n  function copy(obj, deep) {\n    // fast paths\n    if ('object' !== typeof obj || obj === null) {\n      return obj; // can't copy primitives\n    }\n\n    if (_copyable.default && _copyable.default.detect(obj)) {\n      return obj.copy(deep);\n    }\n\n    return _copy(obj, deep, deep ? [] : null, deep ? [] : null);\n  }\n});","enifed('ember-runtime/ext/function', ['ember-environment', 'ember-metal', 'ember-debug'], function (_emberEnvironment, _emberMetal, _emberDebug) {\n  'use strict';\n\n  var FunctionPrototype = Function.prototype; /**\n                                              @module ember\n                                              */\n\n  if (_emberEnvironment.ENV.EXTEND_PROTOTYPES.Function) {\n    /**\n      The `property` extension of Javascript's Function prototype is available\n      when `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is\n      `true`, which is the default.\n       Computed properties allow you to treat a function like a property:\n       ```app/utils/president.js\n      import EmberObject from '@ember/object';\n       export default EmberObject.extend({\n        firstName: '',\n        lastName:  '',\n         fullName: function() {\n          return this.get('firstName') + ' ' + this.get('lastName');\n        }.property() // Call this flag to mark the function as a property\n      });\n      ```\n       ```javascript\n      let president = President.create({\n        firstName: 'Barack',\n        lastName: 'Obama'\n      });\n       president.get('fullName'); // 'Barack Obama'\n      ```\n       Treating a function like a property is useful because they can work with\n      bindings, just like any other property.\n       Many computed properties have dependencies on other properties. For\n      example, in the above example, the `fullName` property depends on\n      `firstName` and `lastName` to determine its value. You can tell Ember\n      about these dependencies like this:\n       ```app/utils/president.js\n      import EmberObject from '@ember/object';\n       export default EmberObject.extend({\n        firstName: '',\n        lastName:  '',\n         fullName: function() {\n          return this.get('firstName') + ' ' + this.get('lastName');\n           // Tell Ember.js that this computed property depends on firstName\n          // and lastName\n        }.property('firstName', 'lastName')\n      });\n      ```\n       Make sure you list these dependencies so Ember knows when to update\n      bindings that connect to a computed property. Changing a dependency\n      will not immediately trigger an update of the computed property, but\n      will instead clear the cache so that it is updated when the next `get`\n      is called on the property.\n       See [ComputedProperty](/api/ember/release/classes/ComputedProperty), [@ember/object/computed](/api/ember/release/classes/@ember%2Fobject%2Fcomputed).\n       @method property\n      @for Function\n      @public\n    */\n    Object.defineProperty(FunctionPrototype, 'property', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: function () {\n        return _emberMetal.computed.apply(undefined, Array.prototype.slice.call(arguments).concat([this]));\n      }\n    });\n\n    /**\n      The `observes` extension of Javascript's Function prototype is available\n      when `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is\n      true, which is the default.\n       You can observe property changes simply by adding the `observes`\n      call to the end of your method declarations in classes that you write.\n      For example:\n       ```javascript\n      import EmberObject from '@ember/object';\n       EmberObject.extend({\n        valueObserver: function() {\n          // Executes whenever the \"value\" property changes\n        }.observes('value')\n      });\n      ```\n       In the future this method may become asynchronous.\n       See `observer`.\n       @method observes\n      @for Function\n      @public\n    */\n    Object.defineProperty(FunctionPrototype, 'observes', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: function () {\n        return _emberMetal.observer.apply(undefined, Array.prototype.slice.call(arguments).concat([this]));\n      }\n    });\n\n    Object.defineProperty(FunctionPrototype, '_observesImmediately', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: function () {\n        (true && !(function checkIsInternalProperty() {\n          for (var i = 0; i < arguments.length; i++) {\n            if (arguments[i].indexOf('.') !== -1) {\n              return false;\n            }\n          }\n          return true;\n        }) && (0, _emberDebug.assert)('Immediate observers must observe internal properties only, ' + 'not properties on other objects.', function checkIsInternalProperty() {\n          for (var i = 0; i < arguments.length; i++) {\n            if (arguments[i].indexOf('.') !== -1) {\n              return false;\n            }\n          }return true;\n        }));\n\n\n        // observes handles property expansion\n        return this.observes.apply(this, arguments);\n      }\n    });\n\n    /**\n      The `on` extension of Javascript's Function prototype is available\n      when `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is\n      true, which is the default.\n       You can listen for events simply by adding the `on` call to the end of\n      your method declarations in classes or mixins that you write. For example:\n       ```javascript\n      import Mixin from '@ember/mixin';\n       Mixin.create({\n        doSomethingWithElement: function() {\n          // Executes whenever the \"didInsertElement\" event fires\n        }.on('didInsertElement')\n      });\n      ```\n       See `@ember/object/evented/on`.\n       @method on\n      @for Function\n      @public\n    */\n\n    Object.defineProperty(FunctionPrototype, 'on', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: function () {\n        return _emberMetal.on.apply(undefined, Array.prototype.slice.call(arguments).concat([this]));\n      }\n    });\n  }\n});","enifed('ember-runtime/ext/rsvp', ['exports', 'rsvp', 'ember-metal', 'ember-debug'], function (exports, _rsvp, _emberMetal, _emberDebug) {\n  'use strict';\n\n  exports.onerrorDefault = onerrorDefault;\n\n\n  var backburner = _emberMetal.run.backburner;\n  _emberMetal.run._addQueue('rsvpAfter', 'destroy');\n\n  _rsvp.configure('async', function (callback, promise) {\n    backburner.schedule('actions', null, callback, promise);\n  });\n\n  _rsvp.configure('after', function (cb) {\n    backburner.schedule('rsvpAfter', null, cb);\n  });\n\n  _rsvp.on('error', onerrorDefault);\n\n  function onerrorDefault(reason) {\n    var error = errorFor(reason);\n    if (error) {\n      var overrideDispatch = (0, _emberMetal.getDispatchOverride)();\n      if (overrideDispatch) {\n        overrideDispatch(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  function errorFor(reason) {\n    if (!reason) return;\n\n    if (reason.errorThrown) {\n      return unwrapErrorThrown(reason);\n    }\n\n    if (reason.name === 'UnrecognizedURLError') {\n      (true && !(false) && (0, _emberDebug.assert)('The URL \\'' + reason.message + '\\' did not match any routes in your application', false));\n\n      return;\n    }\n\n    if (reason.name === 'TransitionAborted') {\n      return;\n    }\n\n    return reason;\n  }\n\n  function unwrapErrorThrown(reason) {\n    var error = reason.errorThrown;\n    if (typeof error === 'string') {\n      error = new Error(error);\n    }\n    Object.defineProperty(error, '__reason_with_error_thrown__', {\n      value: reason,\n      enumerable: false\n    });\n    return error;\n  }\n\n  exports.default = _rsvp;\n});","enifed('ember-runtime/ext/string', ['ember-environment', 'ember-runtime/system/string'], function (_emberEnvironment, _string) {\n  'use strict';\n\n  /**\n  @module @ember/string\n  */\n\n  var StringPrototype = String.prototype;\n\n  if (_emberEnvironment.ENV.EXTEND_PROTOTYPES.String) {\n    /**\n      See [String.w](/api/ember/release/classes/String/methods/w?anchor=w).\n       @method w\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'w', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        return (0, _string.w)(this);\n      }\n    });\n\n    /**\n      See [String.loc](/api/ember/release/classes/String/methods/loc?anchor=loc).\n       @method loc\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'loc', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return (0, _string.loc)(this, args);\n      }\n    });\n\n    /**\n      See [String.camelize](/api/ember/release/classes/String/methods/camelize?anchor=camelize).\n       @method camelize\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'camelize', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        return (0, _string.camelize)(this);\n      }\n    });\n\n    /**\n      See [String.decamelize](/api/ember/release/classes/String/methods/decamelize?anchor=decamelize).\n       @method decamelize\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'decamelize', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        return (0, _string.decamelize)(this);\n      }\n    });\n\n    /**\n      See [String.dasherize](/api/ember/release/classes/String/methods/dasherize?anchor=dasherize).\n       @method dasherize\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'dasherize', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        return (0, _string.dasherize)(this);\n      }\n    });\n\n    /**\n      See [String.underscore](/api/ember/release/classes/String/methods/underscore?anchor=underscore).\n       @method underscore\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'underscore', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        return (0, _string.underscore)(this);\n      }\n    });\n\n    /**\n      See [String.classify](/api/ember/release/classes/String/methods/classify?anchor=classify).\n       @method classify\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'classify', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        return (0, _string.classify)(this);\n      }\n    });\n\n    /**\n      See [String.capitalize](/api/ember/release/classes/String/methods/capitalize?anchor=capitalize).\n       @method capitalize\n      @for @ember/string\n      @static\n      @private\n    */\n    Object.defineProperty(StringPrototype, 'capitalize', {\n      configurable: true,\n      enumerable: false,\n      writeable: true,\n      value: function () {\n        return (0, _string.capitalize)(this);\n      }\n    });\n  }\n});","enifed('ember-runtime/index', ['exports', 'ember-runtime/system/object', 'ember-runtime/system/string', 'ember-runtime/mixins/registry_proxy', 'ember-runtime/mixins/container_proxy', 'ember-runtime/copy', 'ember-runtime/inject', 'ember-runtime/compare', 'ember-runtime/is-equal', 'ember-runtime/mixins/array', 'ember-runtime/mixins/comparable', 'ember-runtime/system/namespace', 'ember-runtime/system/array_proxy', 'ember-runtime/system/object_proxy', 'ember-runtime/system/core_object', 'ember-runtime/system/native_array', 'ember-runtime/mixins/action_handler', 'ember-runtime/mixins/copyable', 'ember-runtime/mixins/enumerable', 'ember-runtime/mixins/-proxy', 'ember-runtime/system/lazy_load', 'ember-runtime/mixins/observable', 'ember-runtime/mixins/mutable_enumerable', 'ember-runtime/mixins/mutable_array', 'ember-runtime/mixins/target_action_support', 'ember-runtime/mixins/evented', 'ember-runtime/mixins/promise_proxy', 'ember-runtime/computed/computed_macros', 'ember-runtime/computed/reduce_computed_macros', 'ember-runtime/controllers/controller', 'ember-runtime/mixins/controller', 'ember-runtime/system/service', 'ember-runtime/ext/rsvp', 'ember-runtime/utils', 'ember-runtime/string_registry', 'ember-runtime/ext/string', 'ember-runtime/ext/function'], function (exports, _object, _string, _registry_proxy, _container_proxy, _copy, _inject, _compare, _isEqual, _array, _comparable, _namespace, _array_proxy, _object_proxy, _core_object, _native_array, _action_handler, _copyable, _enumerable, _proxy, _lazy_load, _observable, _mutable_enumerable, _mutable_array, _target_action_support, _evented, _promise_proxy, _computed_macros, _reduce_computed_macros, _controller, _controller2, _service, _rsvp, _utils, _string_registry) {\n  'use strict';\n\n  exports.setStrings = exports.getStrings = exports.typeOf = exports.isArray = exports.onerrorDefault = exports.RSVP = exports.Service = exports.ControllerMixin = exports.Controller = exports.collect = exports.intersect = exports.union = exports.uniqBy = exports.uniq = exports.filterBy = exports.filter = exports.mapBy = exports.setDiff = exports.sort = exports.map = exports.max = exports.min = exports.sum = exports.or = exports.and = exports.deprecatingAlias = exports.readOnly = exports.oneWay = exports.lte = exports.lt = exports.gte = exports.gt = exports.equal = exports.match = exports.bool = exports.not = exports.none = exports.notEmpty = exports.empty = exports.PromiseProxyMixin = exports.Evented = exports.TargetActionSupport = exports.removeAt = exports.MutableArray = exports.MutableEnumerable = exports.Observable = exports._loaded = exports.runLoadHooks = exports.onLoad = exports._ProxyMixin = exports.Enumerable = exports.Copyable = exports.ActionHandler = exports.A = exports.NativeArray = exports.CoreObject = exports.ObjectProxy = exports.ArrayProxy = exports.setNamespaceSearchDisabled = exports.isNamespaceSearchDisabled = exports.Namespace = exports.Comparable = exports.removeArrayObserver = exports.addArrayObserver = exports.isEmberArray = exports.objectAt = exports.Array = exports.isEqual = exports.compare = exports.inject = exports.copy = exports.ContainerProxyMixin = exports.RegistryProxyMixin = exports.String = exports.FrameworkObject = exports.Object = undefined;\n  Object.defineProperty(exports, 'Object', {\n    enumerable: true,\n    get: function () {\n      return _object.default;\n    }\n  });\n  Object.defineProperty(exports, 'FrameworkObject', {\n    enumerable: true,\n    get: function () {\n      return _object.FrameworkObject;\n    }\n  });\n  Object.defineProperty(exports, 'String', {\n    enumerable: true,\n    get: function () {\n      return _string.default;\n    }\n  });\n  Object.defineProperty(exports, 'RegistryProxyMixin', {\n    enumerable: true,\n    get: function () {\n      return _registry_proxy.default;\n    }\n  });\n  Object.defineProperty(exports, 'ContainerProxyMixin', {\n    enumerable: true,\n    get: function () {\n      return _container_proxy.default;\n    }\n  });\n  Object.defineProperty(exports, 'copy', {\n    enumerable: true,\n    get: function () {\n      return _copy.default;\n    }\n  });\n  Object.defineProperty(exports, 'inject', {\n    enumerable: true,\n    get: function () {\n      return _inject.default;\n    }\n  });\n  Object.defineProperty(exports, 'compare', {\n    enumerable: true,\n    get: function () {\n      return _compare.default;\n    }\n  });\n  Object.defineProperty(exports, 'isEqual', {\n    enumerable: true,\n    get: function () {\n      return _isEqual.default;\n    }\n  });\n  Object.defineProperty(exports, 'Array', {\n    enumerable: true,\n    get: function () {\n      return _array.default;\n    }\n  });\n  Object.defineProperty(exports, 'objectAt', {\n    enumerable: true,\n    get: function () {\n      return _array.objectAt;\n    }\n  });\n  Object.defineProperty(exports, 'isEmberArray', {\n    enumerable: true,\n    get: function () {\n      return _array.isEmberArray;\n    }\n  });\n  Object.defineProperty(exports, 'addArrayObserver', {\n    enumerable: true,\n    get: function () {\n      return _array.addArrayObserver;\n    }\n  });\n  Object.defineProperty(exports, 'removeArrayObserver', {\n    enumerable: true,\n    get: function () {\n      return _array.removeArrayObserver;\n    }\n  });\n  Object.defineProperty(exports, 'Comparable', {\n    enumerable: true,\n    get: function () {\n      return _comparable.default;\n    }\n  });\n  Object.defineProperty(exports, 'Namespace', {\n    enumerable: true,\n    get: function () {\n      return _namespace.default;\n    }\n  });\n  Object.defineProperty(exports, 'isNamespaceSearchDisabled', {\n    enumerable: true,\n    get: function () {\n      return _namespace.isSearchDisabled;\n    }\n  });\n  Object.defineProperty(exports, 'setNamespaceSearchDisabled', {\n    enumerable: true,\n    get: function () {\n      return _namespace.setSearchDisabled;\n    }\n  });\n  Object.defineProperty(exports, 'ArrayProxy', {\n    enumerable: true,\n    get: function () {\n      return _array_proxy.default;\n    }\n  });\n  Object.defineProperty(exports, 'ObjectProxy', {\n    enumerable: true,\n    get: function () {\n      return _object_proxy.default;\n    }\n  });\n  Object.defineProperty(exports, 'CoreObject', {\n    enumerable: true,\n    get: function () {\n      return _core_object.default;\n    }\n  });\n  Object.defineProperty(exports, 'NativeArray', {\n    enumerable: true,\n    get: function () {\n      return _native_array.default;\n    }\n  });\n  Object.defineProperty(exports, 'A', {\n    enumerable: true,\n    get: function () {\n      return _native_array.A;\n    }\n  });\n  Object.defineProperty(exports, 'ActionHandler', {\n    enumerable: true,\n    get: function () {\n      return _action_handler.default;\n    }\n  });\n  Object.defineProperty(exports, 'Copyable', {\n    enumerable: true,\n    get: function () {\n      return _copyable.default;\n    }\n  });\n  Object.defineProperty(exports, 'Enumerable', {\n    enumerable: true,\n    get: function () {\n      return _enumerable.default;\n    }\n  });\n  Object.defineProperty(exports, '_ProxyMixin', {\n    enumerable: true,\n    get: function () {\n      return _proxy.default;\n    }\n  });\n  Object.defineProperty(exports, 'onLoad', {\n    enumerable: true,\n    get: function () {\n      return _lazy_load.onLoad;\n    }\n  });\n  Object.defineProperty(exports, 'runLoadHooks', {\n    enumerable: true,\n    get: function () {\n      return _lazy_load.runLoadHooks;\n    }\n  });\n  Object.defineProperty(exports, '_loaded', {\n    enumerable: true,\n    get: function () {\n      return _lazy_load._loaded;\n    }\n  });\n  Object.defineProperty(exports, 'Observable', {\n    enumerable: true,\n    get: function () {\n      return _observable.default;\n    }\n  });\n  Object.defineProperty(exports, 'MutableEnumerable', {\n    enumerable: true,\n    get: function () {\n      return _mutable_enumerable.default;\n    }\n  });\n  Object.defineProperty(exports, 'MutableArray', {\n    enumerable: true,\n    get: function () {\n      return _mutable_array.default;\n    }\n  });\n  Object.defineProperty(exports, 'removeAt', {\n    enumerable: true,\n    get: function () {\n      return _mutable_array.removeAt;\n    }\n  });\n  Object.defineProperty(exports, 'TargetActionSupport', {\n    enumerable: true,\n    get: function () {\n      return _target_action_support.default;\n    }\n  });\n  Object.defineProperty(exports, 'Evented', {\n    enumerable: true,\n    get: function () {\n      return _evented.default;\n    }\n  });\n  Object.defineProperty(exports, 'PromiseProxyMixin', {\n    enumerable: true,\n    get: function () {\n      return _promise_proxy.default;\n    }\n  });\n  Object.defineProperty(exports, 'empty', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.empty;\n    }\n  });\n  Object.defineProperty(exports, 'notEmpty', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.notEmpty;\n    }\n  });\n  Object.defineProperty(exports, 'none', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.none;\n    }\n  });\n  Object.defineProperty(exports, 'not', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.not;\n    }\n  });\n  Object.defineProperty(exports, 'bool', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.bool;\n    }\n  });\n  Object.defineProperty(exports, 'match', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.match;\n    }\n  });\n  Object.defineProperty(exports, 'equal', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.equal;\n    }\n  });\n  Object.defineProperty(exports, 'gt', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.gt;\n    }\n  });\n  Object.defineProperty(exports, 'gte', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.gte;\n    }\n  });\n  Object.defineProperty(exports, 'lt', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.lt;\n    }\n  });\n  Object.defineProperty(exports, 'lte', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.lte;\n    }\n  });\n  Object.defineProperty(exports, 'oneWay', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.oneWay;\n    }\n  });\n  Object.defineProperty(exports, 'readOnly', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.readOnly;\n    }\n  });\n  Object.defineProperty(exports, 'deprecatingAlias', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.deprecatingAlias;\n    }\n  });\n  Object.defineProperty(exports, 'and', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.and;\n    }\n  });\n  Object.defineProperty(exports, 'or', {\n    enumerable: true,\n    get: function () {\n      return _computed_macros.or;\n    }\n  });\n  Object.defineProperty(exports, 'sum', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.sum;\n    }\n  });\n  Object.defineProperty(exports, 'min', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.min;\n    }\n  });\n  Object.defineProperty(exports, 'max', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.max;\n    }\n  });\n  Object.defineProperty(exports, 'map', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.map;\n    }\n  });\n  Object.defineProperty(exports, 'sort', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.sort;\n    }\n  });\n  Object.defineProperty(exports, 'setDiff', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.setDiff;\n    }\n  });\n  Object.defineProperty(exports, 'mapBy', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.mapBy;\n    }\n  });\n  Object.defineProperty(exports, 'filter', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.filter;\n    }\n  });\n  Object.defineProperty(exports, 'filterBy', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.filterBy;\n    }\n  });\n  Object.defineProperty(exports, 'uniq', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.uniq;\n    }\n  });\n  Object.defineProperty(exports, 'uniqBy', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.uniqBy;\n    }\n  });\n  Object.defineProperty(exports, 'union', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.union;\n    }\n  });\n  Object.defineProperty(exports, 'intersect', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.intersect;\n    }\n  });\n  Object.defineProperty(exports, 'collect', {\n    enumerable: true,\n    get: function () {\n      return _reduce_computed_macros.collect;\n    }\n  });\n  Object.defineProperty(exports, 'Controller', {\n    enumerable: true,\n    get: function () {\n      return _controller.default;\n    }\n  });\n  Object.defineProperty(exports, 'ControllerMixin', {\n    enumerable: true,\n    get: function () {\n      return _controller2.default;\n    }\n  });\n  Object.defineProperty(exports, 'Service', {\n    enumerable: true,\n    get: function () {\n      return _service.default;\n    }\n  });\n  Object.defineProperty(exports, 'RSVP', {\n    enumerable: true,\n    get: function () {\n      return _rsvp.default;\n    }\n  });\n  Object.defineProperty(exports, 'onerrorDefault', {\n    enumerable: true,\n    get: function () {\n      return _rsvp.onerrorDefault;\n    }\n  });\n  Object.defineProperty(exports, 'isArray', {\n    enumerable: true,\n    get: function () {\n      return _utils.isArray;\n    }\n  });\n  Object.defineProperty(exports, 'typeOf', {\n    enumerable: true,\n    get: function () {\n      return _utils.typeOf;\n    }\n  });\n  Object.defineProperty(exports, 'getStrings', {\n    enumerable: true,\n    get: function () {\n      return _string_registry.getStrings;\n    }\n  });\n  Object.defineProperty(exports, 'setStrings', {\n    enumerable: true,\n    get: function () {\n      return _string_registry.setStrings;\n    }\n  });\n});","enifed('ember-runtime/inject', ['exports', 'ember-metal', 'ember-debug'], function (exports, _emberMetal, _emberDebug) {\n  'use strict';\n\n  exports.default = inject;\n  exports.createInjectionHelper = createInjectionHelper;\n  exports.validatePropertyInjections = validatePropertyInjections;\n\n\n  /**\n    Namespace for injection helper methods.\n  \n    @class inject\n    @namespace Ember\n    @static\n    @public\n  */\n  function inject() {\n    (true && !(false) && (0, _emberDebug.assert)('Injected properties must be created through helpers, see \\'' + Object.keys(inject).map(function (k) {\n      return '\\'inject.' + k + '\\'';\n    }).join(' or ') + '\\''));\n  }\n\n  // Dictionary of injection validations by type, added to by `createInjectionHelper`\n  var typeValidators = {};\n\n  /**\n    This method allows other Ember modules to register injection helpers for a\n    given container type. Helpers are exported to the `inject` namespace as the\n    container type itself.\n  \n    @private\n    @method createInjectionHelper\n    @since 1.10.0\n    @for Ember\n    @param {String} type The container type the helper will inject\n    @param {Function} validator A validation callback that is executed at mixin-time\n  */\n  function createInjectionHelper(type, validator) {\n    typeValidators[type] = validator;\n\n    inject[type] = function (name) {\n      return new _emberMetal.InjectedProperty(type, name);\n    };\n  }\n\n  /**\n    Validation function that runs per-type validation functions once for each\n    injected type encountered.\n  \n    @private\n    @method validatePropertyInjections\n    @since 1.10.0\n    @for Ember\n    @param {Object} factory The factory object\n  */\n  function validatePropertyInjections(factory) {\n    var proto = factory.proto();\n    var types = [];\n\n    for (var key in proto) {\n      var desc = (0, _emberMetal.descriptorFor)(proto, key);\n      if (desc instanceof _emberMetal.InjectedProperty && types.indexOf(desc.type) === -1) {\n        types.push(desc.type);\n      }\n    }\n\n    if (types.length) {\n      for (var i = 0; i < types.length; i++) {\n        var validator = typeValidators[types[i]];\n\n        if (typeof validator === 'function') {\n          validator(factory);\n        }\n      }\n    }\n\n    return true;\n  }\n});","enifed('ember-runtime/is-equal', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = isEqual;\n  /**\n   @module @ember/utils\n  */\n  /**\n    Compares two objects, returning true if they are equal.\n  \n    ```javascript\n    import { isEqual } from '@ember/utils';\n  \n    isEqual('hello', 'hello');                   // true\n    isEqual(1, 2);                               // false\n    ```\n  \n    `isEqual` is a more specific comparison than a triple equal comparison.\n    It will call the `isEqual` instance method on the objects being\n    compared, allowing finer control over when objects should be considered\n    equal to each other.\n  \n    ```javascript\n    import { isEqual } from '@ember/utils';\n    import EmberObject from '@ember/object';\n  \n    let Person = EmberObject.extend({\n      isEqual(other) { return this.ssn == other.ssn; }\n    });\n  \n    let personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});\n    let personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});\n  \n    isEqual(personA, personB); // true\n    ```\n  \n    Due to the expense of array comparisons, collections will never be equal to\n    each other even if each of their items are equal to each other.\n  \n    ```javascript\n    import { isEqual } from '@ember/utils';\n  \n    isEqual([4, 2], [4, 2]);                     // false\n    ```\n  \n    @method isEqual\n    @for @ember/utils\n    @static\n    @param {Object} a first object to compare\n    @param {Object} b second object to compare\n    @return {Boolean}\n    @public\n  */\n  function isEqual(a, b) {\n    if (a && typeof a.isEqual === 'function') {\n      return a.isEqual(b);\n    }\n\n    if (a instanceof Date && b instanceof Date) {\n      return a.getTime() === b.getTime();\n    }\n\n    return a === b;\n  }\n});","enifed('ember-runtime/mixins/-proxy', ['exports', 'ember-babel', '@glimmer/reference', 'ember-metal', 'ember-debug', 'ember-runtime/computed/computed_macros'], function (exports, _emberBabel, _reference, _emberMetal, _emberDebug, _computed_macros) {\n  'use strict';\n\n  /**\n  @module ember\n  */\n\n  function contentPropertyWillChange(content, contentKey) {\n    var key = contentKey.slice(8); // remove \"content.\"\n    if (key in this) {\n      return;\n    } // if shadowed in proxy\n    (0, _emberMetal.propertyWillChange)(this, key);\n  }\n\n  function contentPropertyDidChange(content, contentKey) {\n    var key = contentKey.slice(8); // remove \"content.\"\n    if (key in this) {\n      return;\n    } // if shadowed in proxy\n    (0, _emberMetal.propertyDidChange)(this, key);\n  }\n\n  var ProxyTag = function (_CachedTag) {\n    (0, _emberBabel.inherits)(ProxyTag, _CachedTag);\n\n    function ProxyTag(proxy) {\n      (0, _emberBabel.classCallCheck)(this, ProxyTag);\n\n      var _this = (0, _emberBabel.possibleConstructorReturn)(this, _CachedTag.call(this));\n\n      var content = (0, _emberMetal.get)(proxy, 'content');\n\n      _this.proxy = proxy;\n      _this.proxyWrapperTag = new _reference.DirtyableTag();\n      _this.proxyContentTag = new _reference.UpdatableTag((0, _emberMetal.tagFor)(content));\n      return _this;\n    }\n\n    ProxyTag.prototype.compute = function compute() {\n      return Math.max(this.proxyWrapperTag.value(), this.proxyContentTag.value());\n    };\n\n    ProxyTag.prototype.dirty = function dirty() {\n      this.proxyWrapperTag.dirty();\n    };\n\n    ProxyTag.prototype.contentDidChange = function contentDidChange() {\n      var content = (0, _emberMetal.get)(this.proxy, 'content');\n      this.proxyContentTag.update((0, _emberMetal.tagFor)(content));\n    };\n\n    return ProxyTag;\n  }(_reference.CachedTag);\n\n  exports.default = _emberMetal.Mixin.create({\n    /**\n      The object whose properties will be forwarded.\n       @property content\n      @type EmberObject\n      @default null\n      @private\n    */\n    content: null,\n\n    init: function () {\n      this._super.apply(this, arguments);\n      var m = (0, _emberMetal.meta)(this);\n      m.setProxy();\n      m.writableTag(function (source) {\n        return new ProxyTag(source);\n      });\n    },\n\n\n    isTruthy: (0, _computed_macros.bool)('content'),\n\n    willWatchProperty: function (key) {\n      var contentKey = 'content.' + key;\n      (0, _emberMetal._addBeforeObserver)(this, contentKey, null, contentPropertyWillChange);\n      (0, _emberMetal.addObserver)(this, contentKey, null, contentPropertyDidChange);\n    },\n    didUnwatchProperty: function (key) {\n      var contentKey = 'content.' + key;\n      (0, _emberMetal._removeBeforeObserver)(this, contentKey, null, contentPropertyWillChange);\n      (0, _emberMetal.removeObserver)(this, contentKey, null, contentPropertyDidChange);\n    },\n    unknownProperty: function (key) {\n      var content = (0, _emberMetal.get)(this, 'content');\n      if (content) {\n        return (0, _emberMetal.get)(content, key);\n      }\n    },\n    setUnknownProperty: function (key, value) {\n      var m = (0, _emberMetal.meta)(this);\n\n      if (m.proto === this) {\n        // if marked as prototype then just defineProperty\n        // rather than delegate\n        (0, _emberMetal.defineProperty)(this, key, null, value);\n        return value;\n      }\n\n      var content = (0, _emberMetal.get)(this, 'content');\n      (true && !(content) && (0, _emberDebug.assert)('Cannot delegate set(\\'' + key + '\\', ' + value + ') to the \\'content\\' property of object proxy ' + this + ': its \\'content\\' is undefined.', content));\n\n\n      return (0, _emberMetal.set)(content, key, value);\n    }\n  });\n});","enifed('ember-runtime/mixins/action_handler', ['exports', 'ember-metal', 'ember-debug'], function (exports, _emberMetal, _emberDebug) {\n  'use strict';\n\n  /**\n    `Ember.ActionHandler` is available on some familiar classes including\n    `Route`, `Component`, and `Controller`.\n    (Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,\n    and `Route` and available to the above classes through\n    inheritance.)\n  \n    @class ActionHandler\n    @namespace Ember\n    @private\n  */\n  /**\n  @module ember\n  */\n\n  var ActionHandler = _emberMetal.Mixin.create({\n    mergedProperties: ['actions'],\n\n    send: function (actionName) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (this.actions && this.actions[actionName]) {\n        var shouldBubble = this.actions[actionName].apply(this, args) === true;\n        if (!shouldBubble) {\n          return;\n        }\n      }\n\n      var target = (0, _emberMetal.get)(this, 'target');\n      if (target) {\n        (true && !(typeof target.send === 'function') && (0, _emberDebug.assert)('The `target` for ' + this + ' (' + target + ') does not have a `send` method', typeof target.send === 'function'));\n\n        target.send.apply(target, arguments);\n      }\n    }\n  });\n\n  exports.default = ActionHandler;\n});","enifed('ember-runtime/mixins/array', ['exports', 'ember-utils', 'ember-metal', 'ember-debug', 'ember-runtime/mixins/enumerable', 'ember-runtime/compare', 'require'], function (exports, _emberUtils, _emberMetal, _emberDebug, _enumerable, _compare, _require2) {\n  'use strict';\n\n  exports.addArrayObserver = addArrayObserver;\n  exports.removeArrayObserver = removeArrayObserver;\n  exports.objectAt = objectAt;\n  exports.arrayContentWillChange = arrayContentWillChange;\n  exports.arrayContentDidChange = arrayContentDidChange;\n  exports.isEmberArray = isEmberArray;\n\n  var _Mixin$create;\n\n  // Required to break a module cycle\n  var _A = void 0;\n  function A() {\n    if (_A === undefined) {\n      _A = (0, _require2.default)('ember-runtime/system/native_array').A;\n    }\n    return _A();\n  }\n\n  function arrayObserversHelper(obj, target, opts, operation, notify) {\n    var willChange = opts && opts.willChange || 'arrayWillChange';\n    var didChange = opts && opts.didChange || 'arrayDidChange';\n    var hasObservers = (0, _emberMetal.get)(obj, 'hasArrayObservers');\n\n    if (hasObservers === notify) {\n      (0, _emberMetal.propertyWillChange)(obj, 'hasArrayObservers');\n    }\n\n    operation(obj, '@array:before', target, willChange);\n    operation(obj, '@array:change', target, didChange);\n\n    if (hasObservers === notify) {\n      (0, _emberMetal.propertyDidChange)(obj, 'hasArrayObservers');\n    }\n\n    return obj;\n  }\n\n  function addArrayObserver(array, target, opts) {\n    return arrayObserversHelper(array, target, opts, _emberMetal.addListener, false);\n  }\n\n  function removeArrayObserver(array, target, opts) {\n    return arrayObserversHelper(array, target, opts, _emberMetal.removeListener, true);\n  }\n\n  function objectAt(content, idx) {\n    return typeof content.objectAt === 'function' ? content.objectAt(idx) : content[idx];\n  }\n\n  function arrayContentWillChange(array, startIdx, removeAmt, addAmt) {\n    // if no args are passed assume everything changes\n    if (startIdx === undefined) {\n      startIdx = 0;\n      removeAmt = addAmt = -1;\n    } else {\n      if (removeAmt === undefined) {\n        removeAmt = -1;\n      }\n\n      if (addAmt === undefined) {\n        addAmt = -1;\n      }\n    }\n\n    if (array.__each) {\n      array.__each.arrayWillChange(array, startIdx, removeAmt, addAmt);\n    }\n\n    (0, _emberMetal.sendEvent)(array, '@array:before', [array, startIdx, removeAmt, addAmt]);\n\n    (0, _emberMetal.propertyWillChange)(array, '[]');\n\n    if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {\n      (0, _emberMetal.propertyWillChange)(array, 'length');\n    }\n\n    return array;\n  }\n\n  function arrayContentDidChange(array, startIdx, removeAmt, addAmt) {\n    // if no args are passed assume everything changes\n    if (startIdx === undefined) {\n      startIdx = 0;\n      removeAmt = addAmt = -1;\n    } else {\n      if (removeAmt === undefined) {\n        removeAmt = -1;\n      }\n\n      if (addAmt === undefined) {\n        addAmt = -1;\n      }\n    }\n\n    if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {\n      (0, _emberMetal.propertyDidChange)(array, 'length');\n    }\n\n    (0, _emberMetal.propertyDidChange)(array, '[]');\n\n    if (array.__each) {\n      array.__each.arrayDidChange(array, startIdx, removeAmt, addAmt);\n    }\n\n    (0, _emberMetal.sendEvent)(array, '@array:change', [array, startIdx, removeAmt, addAmt]);\n\n    var meta = (0, _emberMetal.peekMeta)(array);\n    var cache = meta !== undefined ? meta.readableCache() : undefined;\n    if (cache !== undefined) {\n      var length = (0, _emberMetal.get)(array, 'length');\n      var addedAmount = addAmt === -1 ? 0 : addAmt;\n      var removedAmount = removeAmt === -1 ? 0 : removeAmt;\n      var delta = addedAmount - removedAmount;\n      var previousLength = length - delta;\n\n      var normalStartIdx = startIdx < 0 ? previousLength + startIdx : startIdx;\n      if (cache.firstObject !== undefined && normalStartIdx === 0) {\n        (0, _emberMetal.propertyWillChange)(array, 'firstObject', meta);\n        (0, _emberMetal.propertyDidChange)(array, 'firstObject', meta);\n      }\n\n      if (cache.lastObject !== undefined) {\n        var previousLastIndex = previousLength - 1;\n        var lastAffectedIndex = normalStartIdx + removedAmount;\n        if (previousLastIndex < lastAffectedIndex) {\n          (0, _emberMetal.propertyWillChange)(array, 'lastObject', meta);\n          (0, _emberMetal.propertyDidChange)(array, 'lastObject', meta);\n        }\n      }\n    }\n\n    return array;\n  }\n\n  var EMBER_ARRAY = (0, _emberUtils.symbol)('EMBER_ARRAY');\n\n  function isEmberArray(obj) {\n    return obj && obj[EMBER_ARRAY];\n  }\n\n  function iter(key, value) {\n    var valueProvided = arguments.length === 2;\n\n    return valueProvided ? function (item) {\n      return value === (0, _emberMetal.get)(item, key);\n    } : function (item) {\n      return !!(0, _emberMetal.get)(item, key);\n    };\n  }\n\n  // ..........................................................\n  // ARRAY\n  //\n  /**\n    This mixin implements Observer-friendly Array-like behavior. It is not a\n    concrete implementation, but it can be used up by other classes that want\n    to appear like arrays.\n  \n    For example, ArrayProxy is a concrete classes that can\n    be instantiated to implement array-like behavior. Both of these classes use\n    the Array Mixin by way of the MutableArray mixin, which allows observable\n    changes to be made to the underlying array.\n  \n    This mixin defines methods specifically for collections that provide\n    index-ordered access to their contents. When you are designing code that\n    needs to accept any kind of Array-like object, you should use these methods\n    instead of Array primitives because these will properly notify observers of\n    changes to the array.\n  \n    Although these methods are efficient, they do add a layer of indirection to\n    your application so it is a good idea to use them only when you need the\n    flexibility of using both true JavaScript arrays and \"virtual\" arrays such\n    as controllers and collections.\n  \n    You can use the methods defined in this module to access and modify array\n    contents in a KVO-friendly way. You can also be notified whenever the\n    membership of an array changes by using `.observes('myArray.[]')`.\n  \n    To support `EmberArray` in your own class, you must override two\n    primitives to use it: `length()` and `objectAt()`.\n  \n    @class EmberArray\n    @uses Enumerable\n    @since Ember 0.9.0\n    @public\n  */\n  var ArrayMixin = _emberMetal.Mixin.create(_enumerable.default, (_Mixin$create = {}, _Mixin$create[EMBER_ARRAY] = true, _Mixin$create.length = null, _Mixin$create.objectAt = function (idx) {\n    if (idx < 0 || idx >= (0, _emberMetal.get)(this, 'length')) {\n      return undefined;\n    }\n\n    return (0, _emberMetal.get)(this, idx);\n  }, _Mixin$create.objectsAt = function (indexes) {\n    var _this = this;\n\n    return indexes.map(function (idx) {\n      return objectAt(_this, idx);\n    });\n  }, _Mixin$create['[]'] = (0, _emberMetal.computed)({\n    get: function (key) {\n      // eslint-disable-line no-unused-vars\n      return this;\n    },\n    set: function (key, value) {\n      this.replace(0, (0, _emberMetal.get)(this, 'length'), value);\n      return this;\n    }\n  }), _Mixin$create.firstObject = (0, _emberMetal.computed)(function () {\n    return objectAt(this, 0);\n  }).readOnly(), _Mixin$create.lastObject = (0, _emberMetal.computed)(function () {\n    return objectAt(this, (0, _emberMetal.get)(this, 'length') - 1);\n  }).readOnly(), _Mixin$create.slice = function (beginIndex, endIndex) {\n    var ret = A();\n    var length = (0, _emberMetal.get)(this, 'length');\n\n    if ((0, _emberMetal.isNone)(beginIndex)) {\n      beginIndex = 0;\n    } else if (beginIndex < 0) {\n      beginIndex = length + beginIndex;\n    }\n\n    if ((0, _emberMetal.isNone)(endIndex) || endIndex > length) {\n      endIndex = length;\n    } else if (endIndex < 0) {\n      endIndex = length + endIndex;\n    }\n\n    while (beginIndex < endIndex) {\n      ret[ret.length] = objectAt(this, beginIndex++);\n    }\n\n    return ret;\n  }, _Mixin$create.indexOf = function (object, startAt) {\n    var len = (0, _emberMetal.get)(this, 'length');\n\n    if (startAt === undefined) {\n      startAt = 0;\n    }\n\n    if (startAt < 0) {\n      startAt += len;\n    }\n\n    for (var idx = startAt; idx < len; idx++) {\n      if (objectAt(this, idx) === object) {\n        return idx;\n      }\n    }\n\n    return -1;\n  }, _Mixin$create.lastIndexOf = function (object, startAt) {\n    var len = (0, _emberMetal.get)(this, 'length');\n\n    if (startAt === undefined || startAt >= len) {\n      startAt = len - 1;\n    }\n\n    if (startAt < 0) {\n      startAt += len;\n    }\n\n    for (var idx = startAt; idx >= 0; idx--) {\n      if (objectAt(this, idx) === object) {\n        return idx;\n      }\n    }\n\n    return -1;\n  }, _Mixin$create.addArrayObserver = function (target, opts) {\n    return addArrayObserver(this, target, opts);\n  }, _Mixin$create.removeArrayObserver = function (target, opts) {\n    return removeArrayObserver(this, target, opts);\n  }, _Mixin$create.hasArrayObservers = (0, _emberMetal.computed)(function () {\n    return (0, _emberMetal.hasListeners)(this, '@array:change') || (0, _emberMetal.hasListeners)(this, '@array:before');\n  }), _Mixin$create.arrayContentWillChange = function (startIdx, removeAmt, addAmt) {\n    return arrayContentWillChange(this, startIdx, removeAmt, addAmt);\n  }, _Mixin$create.arrayContentDidChange = function (startIdx, removeAmt, addAmt) {\n    return arrayContentDidChange(this, startIdx, removeAmt, addAmt);\n  }, _Mixin$create.forEach = function (callback) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('forEach expects a function as first argument.', typeof callback === 'function'));\n\n\n    var length = (0, _emberMetal.get)(this, 'length');\n\n    for (var index = 0; index < length; index++) {\n      var item = this.objectAt(index);\n      callback.call(target, item, index, this);\n    }\n\n    return this;\n  }, _Mixin$create.getEach = (0, _emberMetal.aliasMethod)('mapBy'), _Mixin$create.setEach = function (key, value) {\n    return this.forEach(function (item) {\n      return (0, _emberMetal.set)(item, key, value);\n    });\n  }, _Mixin$create.map = function (callback, target) {\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('map expects a function as first argument.', typeof callback === 'function'));\n\n\n    var ret = A();\n\n    this.forEach(function (x, idx, i) {\n      return ret[idx] = callback.call(target, x, idx, i);\n    });\n\n    return ret;\n  }, _Mixin$create.mapBy = function (key) {\n    return this.map(function (next) {\n      return (0, _emberMetal.get)(next, key);\n    });\n  }, _Mixin$create.filter = function (callback, target) {\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('filter expects a function as first argument.', typeof callback === 'function'));\n\n\n    var ret = A();\n\n    this.forEach(function (x, idx, i) {\n      if (callback.call(target, x, idx, i)) {\n        ret.push(x);\n      }\n    });\n\n    return ret;\n  }, _Mixin$create.reject = function (callback, target) {\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('reject expects a function as first argument.', typeof callback === 'function'));\n\n\n    return this.filter(function () {\n      return !callback.apply(target, arguments);\n    });\n  }, _Mixin$create.filterBy = function (key, value) {\n    // eslint-disable-line no-unused-vars\n    return this.filter(iter.apply(this, arguments));\n  }, _Mixin$create.rejectBy = function (key, value) {\n    var exactValue = function (item) {\n      return (0, _emberMetal.get)(item, key) === value;\n    };\n    var hasValue = function (item) {\n      return !!(0, _emberMetal.get)(item, key);\n    };\n    var use = arguments.length === 2 ? exactValue : hasValue;\n\n    return this.reject(use);\n  }, _Mixin$create.find = function (callback) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('find expects a function as first argument.', typeof callback === 'function'));\n\n\n    var length = (0, _emberMetal.get)(this, 'length');\n\n    for (var index = 0; index < length; index++) {\n      var item = this.objectAt(index);\n\n      if (callback.call(target, item, index, this)) {\n        return item;\n      }\n    }\n  }, _Mixin$create.findBy = function (key, value) {\n    // eslint-disable-line no-unused-vars\n    return this.find(iter.apply(this, arguments));\n  }, _Mixin$create.every = function (callback, target) {\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('every expects a function as first argument.', typeof callback === 'function'));\n\n\n    return !this.find(function (x, idx, i) {\n      return !callback.call(target, x, idx, i);\n    });\n  }, _Mixin$create.isEvery = function (key, value) {\n    // eslint-disable-line no-unused-vars\n    return this.every(iter.apply(this, arguments));\n  }, _Mixin$create.any = function (callback) {\n    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('any expects a function as first argument.', typeof callback === 'function'));\n\n\n    var length = (0, _emberMetal.get)(this, 'length');\n\n    for (var index = 0; index < length; index++) {\n      var item = this.objectAt(index);\n\n      if (callback.call(target, item, index, this)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, _Mixin$create.isAny = function (key, value) {\n    // eslint-disable-line no-unused-vars\n    return this.any(iter.apply(this, arguments));\n  }, _Mixin$create.reduce = function (callback, initialValue, reducerProperty) {\n    (true && !(typeof callback === 'function') && (0, _emberDebug.assert)('reduce expects a function as first argument.', typeof callback === 'function'));\n\n\n    var ret = initialValue;\n\n    this.forEach(function (item, i) {\n      ret = callback(ret, item, i, this, reducerProperty);\n    }, this);\n\n    return ret;\n  }, _Mixin$create.invoke = function (methodName) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var ret = A();\n\n    this.forEach(function (x, idx) {\n      var method = x && x[methodName];\n\n      if ('function' === typeof method) {\n        ret[idx] = args.length ? method.apply(x, args) : x[methodName]();\n      }\n    }, this);\n\n    return ret;\n  }, _Mixin$create.toArray = function () {\n    var ret = A();\n\n    this.forEach(function (o, idx) {\n      return ret[idx] = o;\n    });\n\n    return ret;\n  }, _Mixin$create.compact = function () {\n    return this.filter(function (value) {\n      return value != null;\n    });\n  }, _Mixin$create.includes = function (obj, startAt) {\n    var len = (0, _emberMetal.get)(this, 'length');\n\n    if (startAt === undefined) {\n      startAt = 0;\n    }\n\n    if (startAt < 0) {\n      startAt += len;\n    }\n\n    for (var idx = startAt; idx < len; idx++) {\n      var currentObj = objectAt(this, idx);\n\n      // SameValueZero comparison (NaN !== NaN)\n      if (obj === currentObj || obj !== obj && currentObj !== currentObj) {\n        return true;\n      }\n    }\n\n    return false;\n  }, _Mixin$create.sortBy = function () {\n    var sortKeys = arguments;\n\n    return this.toArray().sort(function (a, b) {\n      for (var i = 0; i < sortKeys.length; i++) {\n        var key = sortKeys[i];\n        var propA = (0, _emberMetal.get)(a, key);\n        var propB = (0, _emberMetal.get)(b, key);\n        // return 1 or -1 else continue to the next sortKey\n        var compareValue = (0, _compare.default)(propA, propB);\n\n        if (compareValue) {\n          return compareValue;\n        }\n      }\n      return 0;\n    });\n  }, _Mixin$create.uniq = function () {\n    var ret = A();\n\n    var seen = new Set();\n    this.forEach(function (item) {\n      if (!seen.has(item)) {\n        seen.add(item);\n        ret.push(item);\n      }\n    });\n\n    return ret;\n  }, _Mixin$create.uniqBy = function (key) {\n    var ret = A();\n    var seen = new Set();\n\n    this.forEach(function (item) {\n      var val = (0, _emberMetal.get)(item, key);\n      if (!seen.has(val)) {\n        seen.add(val);\n        ret.push(item);\n      }\n    });\n\n    return ret;\n  }, _Mixin$create.without = function (value) {\n    if (!this.includes(value)) {\n      return this; // nothing to do\n    }\n\n    var ret = A();\n\n    this.forEach(function (k) {\n      // SameValueZero comparison (NaN !== NaN)\n      if (!(k === value || k !== k && value !== value)) {\n        ret[ret.length] = k;\n      }\n    });\n\n    return ret;\n  }, _Mixin$create['@each'] = (0, _emberMetal.computed)(function () {\n    // TODO use Symbol or add to meta\n    if (!this.__each) {\n      this.__each = new EachProxy(this);\n    }\n\n    return this.__each;\n  }).volatile().readOnly(), _Mixin$create));\n\n  /**\n    This is the object instance returned when you get the `@each` property on an\n    array. It uses the unknownProperty handler to automatically create\n    EachArray instances for property names.\n    @class EachProxy\n    @private\n  */\n  function EachProxy(content) {\n    this._content = content;\n    this._keys = undefined;\n    (0, _emberMetal.meta)(this);\n  }\n\n  EachProxy.prototype = {\n    __defineNonEnumerable: function (property) {\n      this[property.name] = property.descriptor.value;\n    },\n    arrayWillChange: function (content, idx, removedCnt, addedCnt) {\n      // eslint-disable-line no-unused-vars\n      var keys = this._keys;\n      var lim = removedCnt > 0 ? idx + removedCnt : -1;\n      var meta = (0, _emberMetal.peekMeta)(this);\n      for (var key in keys) {\n        if (lim > 0) {\n          removeObserverForContentKey(content, key, this, idx, lim);\n        }\n        (0, _emberMetal.propertyWillChange)(this, key, meta);\n      }\n    },\n    arrayDidChange: function (content, idx, removedCnt, addedCnt) {\n      var keys = this._keys;\n      var lim = addedCnt > 0 ? idx + addedCnt : -1;\n      var meta = (0, _emberMetal.peekMeta)(this);\n      for (var key in keys) {\n        if (lim > 0) {\n          addObserverForContentKey(content, key, this, idx, lim);\n        }\n        (0, _emberMetal.propertyDidChange)(this, key, meta);\n      }\n    },\n    willWatchProperty: function (property) {\n      this.beginObservingContentKey(property);\n    },\n    didUnwatchProperty: function (property) {\n      this.stopObservingContentKey(property);\n    },\n    beginObservingContentKey: function (keyName) {\n      var keys = this._keys;\n      if (!keys) {\n        keys = this._keys = Object.create(null);\n      }\n\n      if (!keys[keyName]) {\n        keys[keyName] = 1;\n        var content = this._content;\n        var len = (0, _emberMetal.get)(content, 'length');\n\n        addObserverForContentKey(content, keyName, this, 0, len);\n      } else {\n        keys[keyName]++;\n      }\n    },\n    stopObservingContentKey: function (keyName) {\n      var keys = this._keys;\n      if (keys && keys[keyName] > 0 && --keys[keyName] <= 0) {\n        var content = this._content;\n        var len = (0, _emberMetal.get)(content, 'length');\n\n        removeObserverForContentKey(content, keyName, this, 0, len);\n      }\n    },\n    contentKeyWillChange: function (obj, keyName) {\n      (0, _emberMetal.propertyWillChange)(this, keyName);\n    },\n    contentKeyDidChange: function (obj, keyName) {\n      (0, _emberMetal.propertyDidChange)(this, keyName);\n    }\n  };\n\n  function addObserverForContentKey(content, keyName, proxy, idx, loc) {\n    while (--loc >= idx) {\n      var item = objectAt(content, loc);\n      if (item) {\n        (true && !(typeof item === 'object') && (0, _emberDebug.assert)('When using @each to observe the array `' + (0, _emberUtils.toString)(content) + '`, the array must return an object', typeof item === 'object'));\n\n        (0, _emberMetal._addBeforeObserver)(item, keyName, proxy, 'contentKeyWillChange');\n        (0, _emberMetal.addObserver)(item, keyName, proxy, 'contentKeyDidChange');\n      }\n    }\n  }\n\n  function removeObserverForContentKey(content, keyName, proxy, idx, loc) {\n    while (--loc >= idx) {\n      var item = objectAt(content, loc);\n      if (item) {\n        (0, _emberMetal._removeBeforeObserver)(item, keyName, proxy, 'contentKeyWillChange');\n        (0, _emberMetal.removeObserver)(item, keyName, proxy, 'contentKeyDidChange');\n      }\n    }\n  }\n\n  exports.default = ArrayMixin;\n});","enifed('ember-runtime/mixins/comparable', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n\n    /**\n      __Required.__ You must implement this method to apply this mixin.\n       Override to return the result of the comparison of the two parameters. The\n      compare method should return:\n       - `-1` if `a < b`\n      - `0` if `a == b`\n      - `1` if `a > b`\n       Default implementation raises an exception.\n       @method compare\n      @param a {Object} the first object to compare\n      @param b {Object} the second object to compare\n      @return {Number} the result of the comparison\n      @private\n    */\n    compare: null\n  });\n});","enifed('ember-runtime/mixins/container_proxy', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  /**\n    ContainerProxyMixin is used to provide public access to specific\n    container functionality.\n  \n    @class ContainerProxyMixin\n    @private\n  */\n  var containerProxyMixin = {\n    /**\n     The container stores state.\n      @private\n     @property {Ember.Container} __container__\n     */\n    __container__: null,\n\n    ownerInjection: function () {\n      return this.__container__.ownerInjection();\n    },\n    lookup: function (fullName, options) {\n      return this.__container__.lookup(fullName, options);\n    },\n    _resolveLocalLookupName: function (name, source) {\n      return this.__container__.registry.expandLocalLookup('component:' + name, {\n        source: source\n      });\n    },\n    willDestroy: function () {\n      this._super.apply(this, arguments);\n\n      if (this.__container__) {\n        (0, _emberMetal.run)(this.__container__, 'destroy');\n      }\n    },\n    factoryFor: function (fullName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return this.__container__.factoryFor(fullName, options);\n    }\n  }; /**\n     @module ember\n     */\n  exports.default = _emberMetal.Mixin.create(containerProxyMixin);\n});","enifed('ember-runtime/mixins/controller', ['exports', 'ember-metal', 'ember-runtime/computed/computed_macros', 'ember-runtime/mixins/action_handler'], function (exports, _emberMetal, _computed_macros, _action_handler) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create(_action_handler.default, {\n    /* ducktype as a controller */\n    isController: true,\n\n    /**\n      The object to which actions from the view should be sent.\n       For example, when a Handlebars template uses the `{{action}}` helper,\n      it will attempt to send the action to the view's controller's `target`.\n       By default, the value of the target property is set to the router, and\n      is injected when a controller is instantiated. This injection is applied\n      as part of the application's initialization process. In most cases the\n      `target` property will automatically be set to the logical consumer of\n      actions for the controller.\n       @property target\n      @default null\n      @public\n    */\n    target: null,\n\n    store: null,\n\n    /**\n      The controller's current model. When retrieving or modifying a controller's\n      model, this property should be used instead of the `content` property.\n       @property model\n      @public\n    */\n    model: null,\n\n    /**\n      @private\n    */\n    content: (0, _computed_macros.deprecatingAlias)('model', {\n      id: 'ember-runtime.controller.content-alias',\n      until: '2.17.0',\n      url: 'https://emberjs.com/deprecations/v2.x/#toc_controller-content-alias'\n    })\n  });\n});","enifed('ember-runtime/mixins/copyable', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n    /**\n      __Required.__ You must implement this method to apply this mixin.\n       Override to return a copy of the receiver. Default implementation raises\n      an exception.\n       @method copy\n      @param {Boolean} deep if `true`, a deep copy of the object should be made\n      @return {Object} copy of receiver\n      @private\n    */\n    copy: null\n  });\n});","enifed('ember-runtime/mixins/enumerable', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create();\n});","enifed('ember-runtime/mixins/evented', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n\n    /**\n      Subscribes to a named event with given function.\n       ```javascript\n      person.on('didLoad', function() {\n        // fired once the person has loaded\n      });\n      ```\n       An optional target can be passed in as the 2nd argument that will\n      be set as the \"this\" for the callback. This is a good way to give your\n      function access to the object triggering the event. When the target\n      parameter is used the callback becomes the third argument.\n       @method on\n      @param {String} name The name of the event\n      @param {Object} [target] The \"this\" binding for the callback\n      @param {Function} method The callback to execute\n      @return this\n      @public\n    */\n    on: function (name, target, method) {\n      (0, _emberMetal.addListener)(this, name, target, method);\n      return this;\n    },\n\n\n    /**\n      Subscribes a function to a named event and then cancels the subscription\n      after the first time the event is triggered. It is good to use ``one`` when\n      you only care about the first time an event has taken place.\n       This function takes an optional 2nd argument that will become the \"this\"\n      value for the callback. If this argument is passed then the 3rd argument\n      becomes the function.\n       @method one\n      @param {String} name The name of the event\n      @param {Object} [target] The \"this\" binding for the callback\n      @param {Function} method The callback to execute\n      @return this\n      @public\n    */\n    one: function (name, target, method) {\n      if (!method) {\n        method = target;\n        target = null;\n      }\n\n      (0, _emberMetal.addListener)(this, name, target, method, true);\n      return this;\n    },\n\n\n    /**\n      Triggers a named event for the object. Any additional arguments\n      will be passed as parameters to the functions that are subscribed to the\n      event.\n       ```javascript\n      person.on('didEat', function(food) {\n        console.log('person ate some ' + food);\n      });\n       person.trigger('didEat', 'broccoli');\n       // outputs: person ate some broccoli\n      ```\n      @method trigger\n      @param {String} name The name of the event\n      @param {Object...} args Optional arguments to pass on\n      @public\n    */\n    trigger: function (name) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (0, _emberMetal.sendEvent)(this, name, args);\n    },\n\n\n    /**\n      Cancels subscription for given name, target, and method.\n       @method off\n      @param {String} name The name of the event\n      @param {Object} target The target of the subscription\n      @param {Function} method The function of the subscription\n      @return this\n      @public\n    */\n    off: function (name, target, method) {\n      (0, _emberMetal.removeListener)(this, name, target, method);\n      return this;\n    },\n\n\n    /**\n      Checks to see if object has any subscriptions for named event.\n       @method has\n      @param {String} name The name of the event\n      @return {Boolean} does the object have a subscription for event\n      @public\n     */\n    has: function (name) {\n      return (0, _emberMetal.hasListeners)(this, name);\n    }\n  });\n});","enifed('ember-runtime/mixins/mutable_array', ['exports', 'ember-metal', 'ember-runtime/mixins/mutable_enumerable', 'ember-runtime/mixins/array', 'ember-debug'], function (exports, _emberMetal, _mutable_enumerable, _array, _emberDebug) {\n  'use strict';\n\n  exports.removeAt = removeAt;\n  /**\n  @module @ember/array\n  */\n\n  var OUT_OF_RANGE_EXCEPTION = 'Index out of range';\n  var EMPTY = [];\n\n  function removeAt(array, start, len) {\n    if ('number' === typeof start) {\n      if (start < 0 || start >= (0, _emberMetal.get)(array, 'length')) {\n        throw new _emberDebug.Error(OUT_OF_RANGE_EXCEPTION);\n      }\n\n      // fast case\n      if (len === undefined) {\n        len = 1;\n      }\n\n      array.replace(start, len, EMPTY);\n    }\n\n    return array;\n  }\n\n  /**\n    This mixin defines the API for modifying array-like objects. These methods\n    can be applied only to a collection that keeps its items in an ordered set.\n    It builds upon the Array mixin and adds methods to modify the array.\n    One concrete implementations of this class include ArrayProxy.\n  \n    It is important to use the methods in this class to modify arrays so that\n    changes are observable. This allows the binding system in Ember to function\n    correctly.\n  \n  \n    Note that an Array can change even if it does not implement this mixin.\n    For example, one might implement a SparseArray that cannot be directly\n    modified, but if its underlying enumerable changes, it will change also.\n  \n    @class MutableArray\n    @uses EmberArray\n    @uses MutableEnumerable\n    @public\n  */\n  exports.default = _emberMetal.Mixin.create(_array.default, _mutable_enumerable.default, {\n\n    /**\n      __Required.__ You must implement this method to apply this mixin.\n       This is one of the primitives you must implement to support `Array`.\n      You should replace amt objects started at idx with the objects in the\n      passed array. You should also call `this.arrayContentDidChange()`\n       @method replace\n      @param {Number} idx Starting index in the array to replace. If\n        idx >= length, then append to the end of the array.\n      @param {Number} amt Number of elements that should be removed from\n        the array, starting at *idx*.\n      @param {EmberArray} objects An array of zero or more objects that should be\n        inserted into the array at *idx*\n      @public\n    */\n    replace: null,\n\n    /**\n      Remove all elements from the array. This is useful if you\n      want to reuse an existing array without having to recreate it.\n       ```javascript\n      let colors = ['red', 'green', 'blue'];\n       colors.length;  // 3\n      colors.clear(); // []\n      colors.length;  // 0\n      ```\n       @method clear\n      @return {Array} An empty Array.\n      @public\n    */\n    clear: function () {\n      var len = (0, _emberMetal.get)(this, 'length');\n      if (len === 0) {\n        return this;\n      }\n\n      this.replace(0, len, EMPTY);\n      return this;\n    },\n\n\n    /**\n      This will use the primitive `replace()` method to insert an object at the\n      specified index.\n       ```javascript\n      let colors = ['red', 'green', 'blue'];\n       colors.insertAt(2, 'yellow');  // ['red', 'green', 'yellow', 'blue']\n      colors.insertAt(5, 'orange');  // Error: Index out of range\n      ```\n       @method insertAt\n      @param {Number} idx index of insert the object at.\n      @param {Object} object object to insert\n      @return {EmberArray} receiver\n      @public\n    */\n    insertAt: function (idx, object) {\n      if (idx > (0, _emberMetal.get)(this, 'length')) {\n        throw new _emberDebug.Error(OUT_OF_RANGE_EXCEPTION);\n      }\n\n      this.replace(idx, 0, [object]);\n      return this;\n    },\n\n\n    /**\n      Remove an object at the specified index using the `replace()` primitive\n      method. You can pass either a single index, or a start and a length.\n       If you pass a start and length that is beyond the\n      length this method will throw an `OUT_OF_RANGE_EXCEPTION`.\n       ```javascript\n      let colors = ['red', 'green', 'blue', 'yellow', 'orange'];\n       colors.removeAt(0);     // ['green', 'blue', 'yellow', 'orange']\n      colors.removeAt(2, 2);  // ['green', 'blue']\n      colors.removeAt(4, 2);  // Error: Index out of range\n      ```\n       @method removeAt\n      @param {Number} start index, start of range\n      @param {Number} len length of passing range\n      @return {EmberArray} receiver\n      @public\n    */\n    removeAt: function (start, len) {\n      return removeAt(this, start, len);\n    },\n\n\n    /**\n      Push the object onto the end of the array. Works just like `push()` but it\n      is KVO-compliant.\n       ```javascript\n      let colors = ['red', 'green'];\n       colors.pushObject('black');     // ['red', 'green', 'black']\n      colors.pushObject(['yellow']);  // ['red', 'green', ['yellow']]\n      ```\n       @method pushObject\n      @param {*} obj object to push\n      @return object same object passed as a param\n      @public\n    */\n    pushObject: function (obj) {\n      this.insertAt((0, _emberMetal.get)(this, 'length'), obj);\n      return obj;\n    },\n\n\n    /**\n      Add the objects in the passed array to the end of the array. Defers\n      notifying observers of the change until all objects are added.\n       ```javascript\n      let colors = ['red'];\n       colors.pushObjects(['yellow', 'orange']);  // ['red', 'yellow', 'orange']\n      ```\n       @method pushObjects\n      @param {EmberArray} objects the objects to add\n      @return {EmberArray} receiver\n      @public\n    */\n    pushObjects: function (objects) {\n      if (!Array.isArray(objects)) {\n        throw new TypeError('Must pass Enumerable to MutableArray#pushObjects');\n      }\n      this.replace((0, _emberMetal.get)(this, 'length'), 0, objects);\n      return this;\n    },\n\n\n    /**\n      Pop object from array or nil if none are left. Works just like `pop()` but\n      it is KVO-compliant.\n       ```javascript\n      let colors = ['red', 'green', 'blue'];\n       colors.popObject();   // 'blue'\n      console.log(colors);  // ['red', 'green']\n      ```\n       @method popObject\n      @return object\n      @public\n    */\n    popObject: function () {\n      var len = (0, _emberMetal.get)(this, 'length');\n      if (len === 0) {\n        return null;\n      }\n\n      var ret = (0, _array.objectAt)(this, len - 1);\n      this.removeAt(len - 1, 1);\n      return ret;\n    },\n\n\n    /**\n      Shift an object from start of array or nil if none are left. Works just\n      like `shift()` but it is KVO-compliant.\n       ```javascript\n      let colors = ['red', 'green', 'blue'];\n       colors.shiftObject();  // 'red'\n      console.log(colors);   // ['green', 'blue']\n      ```\n       @method shiftObject\n      @return object\n      @public\n    */\n    shiftObject: function () {\n      if ((0, _emberMetal.get)(this, 'length') === 0) {\n        return null;\n      }\n\n      var ret = (0, _array.objectAt)(this, 0);\n      this.removeAt(0);\n      return ret;\n    },\n\n\n    /**\n      Unshift an object to start of array. Works just like `unshift()` but it is\n      KVO-compliant.\n       ```javascript\n      let colors = ['red'];\n       colors.unshiftObject('yellow');    // ['yellow', 'red']\n      colors.unshiftObject(['black']);   // [['black'], 'yellow', 'red']\n      ```\n       @method unshiftObject\n      @param {*} obj object to unshift\n      @return object same object passed as a param\n      @public\n    */\n    unshiftObject: function (obj) {\n      this.insertAt(0, obj);\n      return obj;\n    },\n\n\n    /**\n      Adds the named objects to the beginning of the array. Defers notifying\n      observers until all objects have been added.\n       ```javascript\n      let colors = ['red'];\n       colors.unshiftObjects(['black', 'white']);   // ['black', 'white', 'red']\n      colors.unshiftObjects('yellow'); // Type Error: 'undefined' is not a function\n      ```\n       @method unshiftObjects\n      @param {Enumberable} objects the objects to add\n      @return {EmberArray} receiver\n      @public\n    */\n    unshiftObjects: function (objects) {\n      this.replace(0, 0, objects);\n      return this;\n    },\n\n\n    /**\n      Reverse objects in the array. Works just like `reverse()` but it is\n      KVO-compliant.\n       @method reverseObjects\n      @return {EmberArray} receiver\n       @public\n    */\n    reverseObjects: function () {\n      var len = (0, _emberMetal.get)(this, 'length');\n      if (len === 0) {\n        return this;\n      }\n\n      var objects = this.toArray().reverse();\n      this.replace(0, len, objects);\n      return this;\n    },\n\n\n    /**\n      Replace all the receiver's content with content of the argument.\n      If argument is an empty array receiver will be cleared.\n       ```javascript\n      let colors = ['red', 'green', 'blue'];\n       colors.setObjects(['black', 'white']);  // ['black', 'white']\n      colors.setObjects([]);                  // []\n      ```\n       @method setObjects\n      @param {EmberArray} objects array whose content will be used for replacing\n          the content of the receiver\n      @return {EmberArray} receiver with the new content\n      @public\n    */\n    setObjects: function (objects) {\n      if (objects.length === 0) {\n        return this.clear();\n      }\n\n      var len = (0, _emberMetal.get)(this, 'length');\n      this.replace(0, len, objects);\n      return this;\n    },\n\n\n    /**\n      Remove all occurrences of an object in the array.\n       ```javascript\n      let cities = ['Chicago', 'Berlin', 'Lima', 'Chicago'];\n       cities.removeObject('Chicago');  // ['Berlin', 'Lima']\n      cities.removeObject('Lima');     // ['Berlin']\n      cities.removeObject('Tokyo')     // ['Berlin']\n      ```\n       @method removeObject\n      @param {*} obj object to remove\n      @return {EmberArray} receiver\n      @public\n    */\n    removeObject: function (obj) {\n      var loc = (0, _emberMetal.get)(this, 'length') || 0;\n      while (--loc >= 0) {\n        var curObject = (0, _array.objectAt)(this, loc);\n\n        if (curObject === obj) {\n          this.removeAt(loc);\n        }\n      }\n      return this;\n    },\n\n\n    /**\n      Removes each object in the passed array from the receiver.\n       @method removeObjects\n      @param {EmberArray} objects the objects to remove\n      @return {EmberArray} receiver\n      @public\n    */\n    removeObjects: function (objects) {\n      (0, _emberMetal.beginPropertyChanges)(this);\n      for (var i = objects.length - 1; i >= 0; i--) {\n        this.removeObject(objects[i]);\n      }\n      (0, _emberMetal.endPropertyChanges)(this);\n      return this;\n    },\n\n\n    /**\n      Push the object onto the end of the array if it is not already\n      present in the array.\n       ```javascript\n      let cities = ['Chicago', 'Berlin'];\n       cities.addObject('Lima');    // ['Chicago', 'Berlin', 'Lima']\n      cities.addObject('Berlin');  // ['Chicago', 'Berlin', 'Lima']\n      ```\n       @method addObject\n      @param {*} obj object to add, if not already present\n      @return {EmberArray} receiver\n      @public\n    */\n    addObject: function (obj) {\n      var included = this.includes(obj);\n\n      if (!included) {\n        this.pushObject(obj);\n      }\n\n      return this;\n    },\n\n\n    /**\n      Adds each object in the passed array to the receiver.\n       @method addObjects\n      @param {EmberArray} objects the objects to add.\n      @return {EmberArray} receiver\n      @public\n    */\n    addObjects: function (objects) {\n      var _this = this;\n\n      (0, _emberMetal.beginPropertyChanges)(this);\n      objects.forEach(function (obj) {\n        return _this.addObject(obj);\n      });\n      (0, _emberMetal.endPropertyChanges)(this);\n      return this;\n    }\n  });\n});","enifed('ember-runtime/mixins/mutable_enumerable', ['exports', 'ember-runtime/mixins/enumerable', 'ember-metal'], function (exports, _enumerable, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create(_enumerable.default);\n});","enifed('ember-runtime/mixins/observable', ['exports', 'ember-metal', 'ember-debug'], function (exports, _emberMetal, _emberDebug) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n\n    /**\n      Retrieves the value of a property from the object.\n       This method is usually similar to using `object[keyName]` or `object.keyName`,\n      however it supports both computed properties and the unknownProperty\n      handler.\n       Because `get` unifies the syntax for accessing all these kinds\n      of properties, it can make many refactorings easier, such as replacing a\n      simple property with a computed property, or vice versa.\n       ### Computed Properties\n       Computed properties are methods defined with the `property` modifier\n      declared at the end, such as:\n       ```javascript\n      import { computed } from '@ember/object';\n       fullName: computed('firstName', 'lastName', function() {\n        return this.get('firstName') + ' ' + this.get('lastName');\n      })\n      ```\n       When you call `get` on a computed property, the function will be\n      called and the return value will be returned instead of the function\n      itself.\n       ### Unknown Properties\n       Likewise, if you try to call `get` on a property whose value is\n      `undefined`, the `unknownProperty()` method will be called on the object.\n      If this method returns any value other than `undefined`, it will be returned\n      instead. This allows you to implement \"virtual\" properties that are\n      not defined upfront.\n       @method get\n      @param {String} keyName The property to retrieve\n      @return {Object} The property value or undefined.\n      @public\n    */\n    get: function (keyName) {\n      return (0, _emberMetal.get)(this, keyName);\n    },\n\n\n    /**\n      To get the values of multiple properties at once, call `getProperties`\n      with a list of strings or an array:\n       ```javascript\n      record.getProperties('firstName', 'lastName', 'zipCode');\n      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n      ```\n       is equivalent to:\n       ```javascript\n      record.getProperties(['firstName', 'lastName', 'zipCode']);\n      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n      ```\n       @method getProperties\n      @param {String...|Array} list of keys to get\n      @return {Object}\n      @public\n    */\n    getProperties: function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _emberMetal.getProperties.apply(undefined, [this].concat(args));\n    },\n\n\n    /**\n      Sets the provided key or path to the value.\n       ```javascript\n      record.set(\"key\", value);\n      ```\n       This method is generally very similar to calling `object[\"key\"] = value` or\n      `object.key = value`, except that it provides support for computed\n      properties, the `setUnknownProperty()` method and property observers.\n       ### Computed Properties\n       If you try to set a value on a key that has a computed property handler\n      defined (see the `get()` method for an example), then `set()` will call\n      that method, passing both the value and key instead of simply changing\n      the value itself. This is useful for those times when you need to\n      implement a property that is composed of one or more member\n      properties.\n       ### Unknown Properties\n       If you try to set a value on a key that is undefined in the target\n      object, then the `setUnknownProperty()` handler will be called instead. This\n      gives you an opportunity to implement complex \"virtual\" properties that\n      are not predefined on the object. If `setUnknownProperty()` returns\n      undefined, then `set()` will simply set the value on the object.\n       ### Property Observers\n       In addition to changing the property, `set()` will also register a property\n      change with the object. Unless you have placed this call inside of a\n      `beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n      (i.e. observer methods declared on the same object), will be called\n      immediately. Any \"remote\" observers (i.e. observer methods declared on\n      another object) will be placed in a queue and called at a later time in a\n      coalesced manner.\n       @method set\n      @param {String} keyName The property to set\n      @param {Object} value The value to set or `null`.\n      @return {Object} The passed value\n      @public\n    */\n    set: function (keyName, value) {\n      return (0, _emberMetal.set)(this, keyName, value);\n    },\n\n\n    /**\n      Sets a list of properties at once. These properties are set inside\n      a single `beginPropertyChanges` and `endPropertyChanges` batch, so\n      observers will be buffered.\n       ```javascript\n      record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n      ```\n       @method setProperties\n      @param {Object} hash the hash of keys and values to set\n      @return {Object} The passed in hash\n      @public\n    */\n    setProperties: function (hash) {\n      return (0, _emberMetal.setProperties)(this, hash);\n    },\n\n\n    /**\n      Begins a grouping of property changes.\n       You can use this method to group property changes so that notifications\n      will not be sent until the changes are finished. If you plan to make a\n      large number of changes to an object at one time, you should call this\n      method at the beginning of the changes to begin deferring change\n      notifications. When you are done making changes, call\n      `endPropertyChanges()` to deliver the deferred change notifications and end\n      deferring.\n       @method beginPropertyChanges\n      @return {Observable}\n      @private\n    */\n    beginPropertyChanges: function () {\n      (0, _emberMetal.beginPropertyChanges)();\n      return this;\n    },\n\n\n    /**\n      Ends a grouping of property changes.\n       You can use this method to group property changes so that notifications\n      will not be sent until the changes are finished. If you plan to make a\n      large number of changes to an object at one time, you should call\n      `beginPropertyChanges()` at the beginning of the changes to defer change\n      notifications. When you are done making changes, call this method to\n      deliver the deferred change notifications and end deferring.\n       @method endPropertyChanges\n      @return {Observable}\n      @private\n    */\n    endPropertyChanges: function () {\n      (0, _emberMetal.endPropertyChanges)();\n      return this;\n    },\n\n\n    /**\n      Notify the observer system that a property is about to change.\n       Sometimes you need to change a value directly or indirectly without\n      actually calling `get()` or `set()` on it. In this case, you can use this\n      method and `propertyDidChange()` instead. Calling these two methods\n      together will notify all observers that the property has potentially\n      changed value.\n       Note that you must always call `propertyWillChange` and `propertyDidChange`\n      as a pair. If you do not, it may get the property change groups out of\n      order and cause notifications to be delivered more often than you would\n      like.\n       @method propertyWillChange\n      @param {String} keyName The property key that is about to change.\n      @return {Observable}\n      @private\n    */\n    propertyWillChange: function (keyName) {\n      (0, _emberMetal.propertyWillChange)(this, keyName);\n      return this;\n    },\n\n\n    /**\n      Notify the observer system that a property has just changed.\n       Sometimes you need to change a value directly or indirectly without\n      actually calling `get()` or `set()` on it. In this case, you can use this\n      method and `propertyWillChange()` instead. Calling these two methods\n      together will notify all observers that the property has potentially\n      changed value.\n       Note that you must always call `propertyWillChange` and `propertyDidChange`\n      as a pair. If you do not, it may get the property change groups out of\n      order and cause notifications to be delivered more often than you would\n      like.\n       @method propertyDidChange\n      @param {String} keyName The property key that has just changed.\n      @return {Observable}\n      @private\n    */\n    propertyDidChange: function (keyName) {\n      (0, _emberMetal.propertyDidChange)(this, keyName);\n      return this;\n    },\n\n\n    /**\n      Convenience method to call `propertyWillChange` and `propertyDidChange` in\n      succession.\n       @method notifyPropertyChange\n      @param {String} keyName The property key to be notified about.\n      @return {Observable}\n      @public\n    */\n    notifyPropertyChange: function (keyName) {\n      this.propertyWillChange(keyName);\n      this.propertyDidChange(keyName);\n      return this;\n    },\n\n\n    /**\n      Adds an observer on a property.\n       This is the core method used to register an observer for a property.\n       Once you call this method, any time the key's value is set, your observer\n      will be notified. Note that the observers are triggered any time the\n      value is set, regardless of whether it has actually changed. Your\n      observer should be prepared to handle that.\n       ### Observer Methods\n       Observer methods have the following signature:\n       ```app/components/my-component.js\n      import Component from '@ember/component';\n       export default Component.extend({\n        init() {\n          this._super(...arguments);\n          this.addObserver('foo', this, 'fooDidChange');\n        },\n         fooDidChange(sender, key, value, rev) {\n          // your code\n        }\n      });\n      ```\n       The `sender` is the object that changed. The `key` is the property that\n      changes. The `value` property is currently reserved and unused. The `rev`\n      is the last property revision of the object when it changed, which you can\n      use to detect if the key value has really changed or not.\n       Usually you will not need the value or revision parameters at\n      the end. In this case, it is common to write observer methods that take\n      only a sender and key value as parameters or, if you aren't interested in\n      any of these values, to write an observer that has no parameters at all.\n       @method addObserver\n      @param {String} key The key to observe\n      @param {Object} target The target object to invoke\n      @param {String|Function} method The method to invoke\n      @return {Observable}\n      @public\n    */\n    addObserver: function (key, target, method) {\n      (0, _emberMetal.addObserver)(this, key, target, method);\n      return this;\n    },\n\n\n    /**\n      Remove an observer you have previously registered on this object. Pass\n      the same key, target, and method you passed to `addObserver()` and your\n      target will no longer receive notifications.\n       @method removeObserver\n      @param {String} key The key to observe\n      @param {Object} target The target object to invoke\n      @param {String|Function} method The method to invoke\n      @return {Observable}\n      @public\n    */\n    removeObserver: function (key, target, method) {\n      (0, _emberMetal.removeObserver)(this, key, target, method);\n      return this;\n    },\n\n\n    /**\n      Returns `true` if the object currently has observers registered for a\n      particular key. You can use this method to potentially defer performing\n      an expensive action until someone begins observing a particular property\n      on the object.\n       @method hasObserverFor\n      @param {String} key Key to check\n      @return {Boolean}\n      @private\n    */\n    hasObserverFor: function (key) {\n      return (0, _emberMetal.hasListeners)(this, key + ':change');\n    },\n\n\n    /**\n      Retrieves the value of a property, or a default value in the case that the\n      property returns `undefined`.\n       ```javascript\n      person.getWithDefault('lastName', 'Doe');\n      ```\n       @method getWithDefault\n      @param {String} keyName The name of the property to retrieve\n      @param {Object} defaultValue The value to return if the property value is undefined\n      @return {Object} The property value or the defaultValue.\n      @public\n    */\n    getWithDefault: function (keyName, defaultValue) {\n      return (0, _emberMetal.getWithDefault)(this, keyName, defaultValue);\n    },\n\n\n    /**\n      Set the value of a property to the current value plus some amount.\n       ```javascript\n      person.incrementProperty('age');\n      team.incrementProperty('score', 2);\n      ```\n       @method incrementProperty\n      @param {String} keyName The name of the property to increment\n      @param {Number} increment The amount to increment by. Defaults to 1\n      @return {Number} The new property value\n      @public\n    */\n    incrementProperty: function (keyName, increment) {\n      if ((0, _emberMetal.isNone)(increment)) {\n        increment = 1;\n      }\n      (true && !(!isNaN(parseFloat(increment)) && isFinite(increment)) && (0, _emberDebug.assert)('Must pass a numeric value to incrementProperty', !isNaN(parseFloat(increment)) && isFinite(increment)));\n\n      return (0, _emberMetal.set)(this, keyName, (parseFloat((0, _emberMetal.get)(this, keyName)) || 0) + increment);\n    },\n\n\n    /**\n      Set the value of a property to the current value minus some amount.\n       ```javascript\n      player.decrementProperty('lives');\n      orc.decrementProperty('health', 5);\n      ```\n       @method decrementProperty\n      @param {String} keyName The name of the property to decrement\n      @param {Number} decrement The amount to decrement by. Defaults to 1\n      @return {Number} The new property value\n      @public\n    */\n    decrementProperty: function (keyName, decrement) {\n      if ((0, _emberMetal.isNone)(decrement)) {\n        decrement = 1;\n      }\n      (true && !(!isNaN(parseFloat(decrement)) && isFinite(decrement)) && (0, _emberDebug.assert)('Must pass a numeric value to decrementProperty', !isNaN(parseFloat(decrement)) && isFinite(decrement)));\n\n      return (0, _emberMetal.set)(this, keyName, ((0, _emberMetal.get)(this, keyName) || 0) - decrement);\n    },\n\n\n    /**\n      Set the value of a boolean property to the opposite of its\n      current value.\n       ```javascript\n      starship.toggleProperty('warpDriveEngaged');\n      ```\n       @method toggleProperty\n      @param {String} keyName The name of the property to toggle\n      @return {Boolean} The new property value\n      @public\n    */\n    toggleProperty: function (keyName) {\n      return (0, _emberMetal.set)(this, keyName, !(0, _emberMetal.get)(this, keyName));\n    },\n\n\n    /**\n      Returns the cached value of a computed property, if it exists.\n      This allows you to inspect the value of a computed property\n      without accidentally invoking it if it is intended to be\n      generated lazily.\n       @method cacheFor\n      @param {String} keyName\n      @return {Object} The cached value of the computed property, if any\n      @public\n    */\n    cacheFor: function (keyName) {\n      return (0, _emberMetal.cacheFor)(this, keyName);\n    }\n  });\n});","enifed('ember-runtime/mixins/promise_proxy', ['exports', 'ember-metal', 'ember-debug', 'ember-runtime/computed/computed_macros'], function (exports, _emberMetal, _emberDebug, _computed_macros) {\n  'use strict';\n\n  /**\n    @module @ember/object\n  */\n\n  function tap(proxy, promise) {\n    (0, _emberMetal.setProperties)(proxy, {\n      isFulfilled: false,\n      isRejected: false\n    });\n\n    return promise.then(function (value) {\n      if (!proxy.isDestroyed && !proxy.isDestroying) {\n        (0, _emberMetal.setProperties)(proxy, {\n          content: value,\n          isFulfilled: true\n        });\n      }\n      return value;\n    }, function (reason) {\n      if (!proxy.isDestroyed && !proxy.isDestroying) {\n        (0, _emberMetal.setProperties)(proxy, {\n          reason: reason,\n          isRejected: true\n        });\n      }\n      throw reason;\n    }, 'Ember: PromiseProxy');\n  }\n\n  /**\n    A low level mixin making ObjectProxy promise-aware.\n  \n    ```javascript\n    import { resolve } from 'rsvp';\n    import $ from 'jquery';\n    import ObjectProxy from '@ember/object/proxy';\n    import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';\n  \n    let ObjectPromiseProxy = ObjectProxy.extend(PromiseProxyMixin);\n  \n    let proxy = ObjectPromiseProxy.create({\n      promise: resolve($.getJSON('/some/remote/data.json'))\n    });\n  \n    proxy.then(function(json){\n       // the json\n    }, function(reason) {\n       // the reason why you have no json\n    });\n    ```\n  \n    the proxy has bindable attributes which\n    track the promises life cycle\n  \n    ```javascript\n    proxy.get('isPending')   //=> true\n    proxy.get('isSettled')  //=> false\n    proxy.get('isRejected')  //=> false\n    proxy.get('isFulfilled') //=> false\n    ```\n  \n    When the $.getJSON completes, and the promise is fulfilled\n    with json, the life cycle attributes will update accordingly.\n    Note that $.getJSON doesn't return an ECMA specified promise,\n    it is useful to wrap this with an `RSVP.resolve` so that it behaves\n    as a spec compliant promise.\n  \n    ```javascript\n    proxy.get('isPending')   //=> false\n    proxy.get('isSettled')   //=> true\n    proxy.get('isRejected')  //=> false\n    proxy.get('isFulfilled') //=> true\n    ```\n  \n    As the proxy is an ObjectProxy, and the json now its content,\n    all the json properties will be available directly from the proxy.\n  \n    ```javascript\n    // Assuming the following json:\n    {\n      firstName: 'Stefan',\n      lastName: 'Penner'\n    }\n  \n    // both properties will accessible on the proxy\n    proxy.get('firstName') //=> 'Stefan'\n    proxy.get('lastName')  //=> 'Penner'\n    ```\n  \n    @class PromiseProxyMixin\n    @public\n  */\n  exports.default = _emberMetal.Mixin.create({\n    /**\n      If the proxied promise is rejected this will contain the reason\n      provided.\n       @property reason\n      @default null\n      @public\n    */\n    reason: null,\n\n    /**\n      Once the proxied promise has settled this will become `false`.\n       @property isPending\n      @default true\n      @public\n    */\n    isPending: (0, _computed_macros.not)('isSettled').readOnly(),\n\n    /**\n      Once the proxied promise has settled this will become `true`.\n       @property isSettled\n      @default false\n      @public\n    */\n    isSettled: (0, _computed_macros.or)('isRejected', 'isFulfilled').readOnly(),\n\n    /**\n      Will become `true` if the proxied promise is rejected.\n       @property isRejected\n      @default false\n      @public\n    */\n    isRejected: false,\n\n    /**\n      Will become `true` if the proxied promise is fulfilled.\n       @property isFulfilled\n      @default false\n      @public\n    */\n    isFulfilled: false,\n\n    /**\n      The promise whose fulfillment value is being proxied by this object.\n       This property must be specified upon creation, and should not be\n      changed once created.\n       Example:\n       ```javascript\n      import ObjectProxy from '@ember/object/proxy';\n      import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';\n       ObjectProxy.extend(PromiseProxyMixin).create({\n        promise: <thenable>\n      });\n      ```\n       @property promise\n      @public\n    */\n    promise: (0, _emberMetal.computed)({\n      get: function () {\n        throw new _emberDebug.Error('PromiseProxy\\'s promise must be set');\n      },\n      set: function (key, promise) {\n        return tap(this, promise);\n      }\n    }),\n\n    /**\n      An alias to the proxied promise's `then`.\n       See RSVP.Promise.then.\n       @method then\n      @param {Function} callback\n      @return {RSVP.Promise}\n      @public\n    */\n    then: promiseAlias('then'),\n\n    /**\n      An alias to the proxied promise's `catch`.\n       See RSVP.Promise.catch.\n       @method catch\n      @param {Function} callback\n      @return {RSVP.Promise}\n      @since 1.3.0\n      @public\n    */\n    'catch': promiseAlias('catch'),\n\n    /**\n      An alias to the proxied promise's `finally`.\n       See RSVP.Promise.finally.\n       @method finally\n      @param {Function} callback\n      @return {RSVP.Promise}\n      @since 1.3.0\n      @public\n    */\n    'finally': promiseAlias('finally')\n\n  });\n\n\n  function promiseAlias(name) {\n    return function () {\n      var promise = (0, _emberMetal.get)(this, 'promise');\n      return promise[name].apply(promise, arguments);\n    };\n  }\n});","enifed('ember-runtime/mixins/registry_proxy', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n    __registry__: null,\n\n    /**\n     Given a fullName return the corresponding factory.\n      @public\n     @method resolveRegistration\n     @param {String} fullName\n     @return {Function} fullName's factory\n     */\n    resolveRegistration: registryAlias('resolve'),\n\n    /**\n      Registers a factory that can be used for dependency injection (with\n      `inject`) or for service lookup. Each factory is registered with\n      a full name including two parts: `type:name`.\n       A simple example:\n       ```javascript\n      import Application from '@ember/application';\n      import EmberObject from '@ember/object';\n       let App = Application.create();\n       App.Orange = EmberObject.extend();\n      App.register('fruit:favorite', App.Orange);\n      ```\n       Ember will resolve factories from the `App` namespace automatically.\n      For example `App.CarsController` will be discovered and returned if\n      an application requests `controller:cars`.\n       An example of registering a controller with a non-standard name:\n       ```javascript\n      import Application from '@ember/application';\n      import Controller from '@ember/controller';\n       let App = Application.create();\n      let Session = Controller.extend();\n       App.register('controller:session', Session);\n       // The Session controller can now be treated like a normal controller,\n      // despite its non-standard name.\n      App.ApplicationController = Controller.extend({\n        needs: ['session']\n      });\n      ```\n       Registered factories are **instantiated** by having `create`\n      called on them. Additionally they are **singletons**, each time\n      they are looked up they return the same instance.\n       Some examples modifying that default behavior:\n       ```javascript\n      import Application from '@ember/application';\n      import EmberObject from '@ember/object';\n       let App = Application.create();\n       App.Person = EmberObject.extend();\n      App.Orange = EmberObject.extend();\n      App.Email = EmberObject.extend();\n      App.session = EmberObject.create();\n       App.register('model:user', App.Person, { singleton: false });\n      App.register('fruit:favorite', App.Orange);\n      App.register('communication:main', App.Email, { singleton: false });\n      App.register('session', App.session, { instantiate: false });\n      ```\n       @method register\n      @param  fullName {String} type:name (e.g., 'model:user')\n      @param  factory {Function} (e.g., App.Person)\n      @param  options {Object} (optional) disable instantiation or singleton usage\n      @public\n     */\n    register: registryAlias('register'),\n\n    /**\n     Unregister a factory.\n      ```javascript\n     import Application from '@ember/application';\n     import EmberObject from '@ember/object';\n      let App = Application.create();\n     let User = EmberObject.extend();\n     App.register('model:user', User);\n      App.resolveRegistration('model:user').create() instanceof User //=> true\n      App.unregister('model:user')\n     App.resolveRegistration('model:user') === undefined //=> true\n     ```\n      @public\n     @method unregister\n     @param {String} fullName\n     */\n    unregister: registryAlias('unregister'),\n\n    /**\n     Check if a factory is registered.\n      @public\n     @method hasRegistration\n     @param {String} fullName\n     @return {Boolean}\n     */\n    hasRegistration: registryAlias('has'),\n\n    /**\n     Return a specific registered option for a particular factory.\n      @public\n     @method registeredOption\n     @param  {String} fullName\n     @param  {String} optionName\n     @return {Object} options\n     */\n    registeredOption: registryAlias('getOption'),\n\n    /**\n     Register options for a particular factory.\n      @public\n     @method registerOptions\n     @param {String} fullName\n     @param {Object} options\n     */\n    registerOptions: registryAlias('options'),\n\n    /**\n     Return registered options for a particular factory.\n      @public\n     @method registeredOptions\n     @param  {String} fullName\n     @return {Object} options\n     */\n    registeredOptions: registryAlias('getOptions'),\n\n    /**\n     Allow registering options for all factories of a type.\n      ```javascript\n     import Application from '@ember/application';\n      let App = Application.create();\n     let appInstance = App.buildInstance();\n      // if all of type `connection` must not be singletons\n     appInstance.registerOptionsForType('connection', { singleton: false });\n      appInstance.register('connection:twitter', TwitterConnection);\n     appInstance.register('connection:facebook', FacebookConnection);\n      let twitter = appInstance.lookup('connection:twitter');\n     let twitter2 = appInstance.lookup('connection:twitter');\n      twitter === twitter2; // => false\n      let facebook = appInstance.lookup('connection:facebook');\n     let facebook2 = appInstance.lookup('connection:facebook');\n      facebook === facebook2; // => false\n     ```\n      @public\n     @method registerOptionsForType\n     @param {String} type\n     @param {Object} options\n     */\n    registerOptionsForType: registryAlias('optionsForType'),\n\n    /**\n     Return the registered options for all factories of a type.\n      @public\n     @method registeredOptionsForType\n     @param {String} type\n     @return {Object} options\n     */\n    registeredOptionsForType: registryAlias('getOptionsForType'),\n\n    /**\n      Define a dependency injection onto a specific factory or all factories\n      of a type.\n       When Ember instantiates a controller, view, or other framework component\n      it can attach a dependency to that component. This is often used to\n      provide services to a set of framework components.\n       An example of providing a session object to all controllers:\n       ```javascript\n      import { alias } from '@ember/object/computed';\n      import Application from '@ember/application';\n      import Controller from '@ember/controller';\n      import EmberObject from '@ember/object';\n       let App = Application.create();\n      let Session = EmberObject.extend({ isAuthenticated: false });\n       // A factory must be registered before it can be injected\n      App.register('session:main', Session);\n       // Inject 'session:main' onto all factories of the type 'controller'\n      // with the name 'session'\n      App.inject('controller', 'session', 'session:main');\n       App.IndexController = Controller.extend({\n        isLoggedIn: alias('session.isAuthenticated')\n      });\n      ```\n       Injections can also be performed on specific factories.\n       ```javascript\n      App.inject(<full_name or type>, <property name>, <full_name>)\n      App.inject('route', 'source', 'source:main')\n      App.inject('route:application', 'email', 'model:email')\n      ```\n       It is important to note that injections can only be performed on\n      classes that are instantiated by Ember itself. Instantiating a class\n      directly (via `create` or `new`) bypasses the dependency injection\n      system.\n       @public\n      @method inject\n      @param  factoryNameOrType {String}\n      @param  property {String}\n      @param  injectionName {String}\n    **/\n    inject: registryAlias('injection')\n  });\n\n\n  function registryAlias(name) {\n    return function () {\n      var _registry__;\n\n      return (_registry__ = this.__registry__)[name].apply(_registry__, arguments);\n    };\n  }\n});","enifed('ember-runtime/mixins/target_action_support', ['exports', 'ember-environment', 'ember-metal', 'ember-debug'], function (exports, _emberEnvironment, _emberMetal, _emberDebug) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n    target: null,\n    targetObject: (0, _emberMetal.descriptor)({\n      configurable: true,\n      enumerable: false,\n      get: function () {\n        var message = this + ' Usage of `targetObject` is deprecated. Please use `target` instead.';\n        var options = { id: 'ember-runtime.using-targetObject', until: '3.5.0' };\n        (true && !(false) && (0, _emberDebug.deprecate)(message, false, options));\n\n        return this._targetObject;\n      },\n      set: function (value) {\n        var message = this + ' Usage of `targetObject` is deprecated. Please use `target` instead.';\n        var options = { id: 'ember-runtime.using-targetObject', until: '3.5.0' };\n        (true && !(false) && (0, _emberDebug.deprecate)(message, false, options));\n\n        this._targetObject = value;\n      }\n    }),\n    action: null,\n    actionContext: null,\n\n    actionContextObject: (0, _emberMetal.computed)('actionContext', function () {\n      var actionContext = (0, _emberMetal.get)(this, 'actionContext');\n\n      if (typeof actionContext === 'string') {\n        var value = (0, _emberMetal.get)(this, actionContext);\n        if (value === undefined) {\n          value = (0, _emberMetal.get)(_emberEnvironment.context.lookup, actionContext);\n        }\n        return value;\n      } else {\n        return actionContext;\n      }\n    }),\n\n    /**\n    Send an `action` with an `actionContext` to a `target`. The action, actionContext\n    and target will be retrieved from properties of the object. For example:\n     ```javascript\n    import { alias } from '@ember/object/computed';\n     App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n      target: alias('controller'),\n      action: 'save',\n      actionContext: alias('context'),\n      click() {\n        this.triggerAction(); // Sends the `save` action, along with the current context\n                              // to the current controller\n      }\n    });\n    ```\n     The `target`, `action`, and `actionContext` can be provided as properties of\n    an optional object argument to `triggerAction` as well.\n     ```javascript\n    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n      click() {\n        this.triggerAction({\n          action: 'save',\n          target: this.get('controller'),\n          actionContext: this.get('context')\n        }); // Sends the `save` action, along with the current context\n            // to the current controller\n      }\n    });\n    ```\n     The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\n    But `target` and `action` must be specified either as properties or with the argument\n    to `triggerAction`, or a combination:\n     ```javascript\n    import { alias } from '@ember/object/computed';\n     App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n      target: alias('controller'),\n      click() {\n        this.triggerAction({\n          action: 'save'\n        }); // Sends the `save` action, along with a reference to `this`,\n            // to the current controller\n      }\n    });\n    ```\n     @method triggerAction\n    @param opts {Object} (optional, with the optional keys action, target and/or actionContext)\n    @return {Boolean} true if the action was sent successfully and did not return false\n    @private\n    */\n    triggerAction: function () {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var action = opts.action,\n          target = opts.target,\n          actionContext = opts.actionContext;\n\n      action = action || (0, _emberMetal.get)(this, 'action');\n      target = target || getTarget(this);\n\n      if (actionContext === undefined) {\n        actionContext = (0, _emberMetal.get)(this, 'actionContextObject') || this;\n      }\n\n      if (target && action) {\n        var ret = void 0;\n\n        if (target.send) {\n          var _target;\n\n          ret = (_target = target).send.apply(_target, [action].concat(actionContext));\n        } else {\n          var _target2;\n\n          (true && !(typeof target[action] === 'function') && (0, _emberDebug.assert)('The action \\'' + action + '\\' did not exist on ' + target, typeof target[action] === 'function'));\n\n          ret = (_target2 = target)[action].apply(_target2, [].concat(actionContext));\n        }\n\n        if (ret !== false) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n\n\n  function getTarget(instance) {\n    var target = (0, _emberMetal.get)(instance, 'target');\n    if (target) {\n      if (typeof target === 'string') {\n        var value = (0, _emberMetal.get)(instance, target);\n        if (value === undefined) {\n          value = (0, _emberMetal.get)(_emberEnvironment.context.lookup, target);\n        }\n\n        return value;\n      } else {\n        return target;\n      }\n    }\n\n    // if a `targetObject` CP was provided, use it\n    if (target) {\n      return target;\n    }\n\n    // if _targetObject use it\n    if (instance._targetObject) {\n      return instance._targetObject;\n    }\n\n    return null;\n  }\n});","enifed(\"ember-runtime/string_registry\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.setStrings = setStrings;\n  exports.getStrings = getStrings;\n  exports.get = get;\n  // STATE within a module is frowned upon, this exists\n  // to support Ember.STRINGS but shield ember internals from this legacy global\n  // API.\n  var STRINGS = {};\n\n  function setStrings(strings) {\n    STRINGS = strings;\n  }\n\n  function getStrings() {\n    return STRINGS;\n  }\n\n  function get(name) {\n    return STRINGS[name];\n  }\n});","enifed('ember-runtime/system/application', ['exports', 'ember-runtime/system/namespace'], function (exports, _namespace) {\n  'use strict';\n\n  exports.default = _namespace.default.extend();\n});","enifed('ember-runtime/system/array_proxy', ['exports', 'ember-metal', 'ember-runtime/utils', 'ember-runtime/system/object', 'ember-runtime/mixins/mutable_array', 'ember-runtime/mixins/array', 'ember-debug'], function (exports, _emberMetal, _utils, _object, _mutable_array, _array, _emberDebug) {\n  'use strict';\n\n  var _EmberObject$extend;\n\n  var ARRAY_OBSERVER_MAPPING = {\n    willChange: '_arrangedContentArrayWillChange',\n    didChange: '_arrangedContentArrayDidChange'\n  };\n\n  /**\n    An ArrayProxy wraps any other object that implements `Array` and/or\n    `MutableArray,` forwarding all requests. This makes it very useful for\n    a number of binding use cases or other cases where being able to swap\n    out the underlying array is useful.\n  \n    A simple example of usage:\n  \n    ```javascript\n    import { A } from '@ember/array';\n    import ArrayProxy from '@ember/array/proxy';\n  \n    let pets = ['dog', 'cat', 'fish'];\n    let ap = ArrayProxy.create({ content: A(pets) });\n  \n    ap.get('firstObject');                        // 'dog'\n    ap.set('content', ['amoeba', 'paramecium']);\n    ap.get('firstObject');                        // 'amoeba'\n    ```\n  \n    This class can also be useful as a layer to transform the contents of\n    an array, as they are accessed. This can be done by overriding\n    `objectAtContent`:\n  \n    ```javascript\n    import { A } from '@ember/array';\n    import ArrayProxy from '@ember/array/proxy';\n  \n    let pets = ['dog', 'cat', 'fish'];\n    let ap = ArrayProxy.create({\n        content: A(pets),\n        objectAtContent: function(idx) {\n            return this.get('content').objectAt(idx).toUpperCase();\n        }\n    });\n  \n    ap.get('firstObject'); // . 'DOG'\n    ```\n  \n    @class ArrayProxy\n    @extends EmberObject\n    @uses MutableArray\n    @public\n  */\n  exports.default = _object.default.extend(_mutable_array.default, (_EmberObject$extend = {\n    init: function () {\n      this._super.apply(this, arguments);\n\n      /*\n        `this._objectsDirtyIndex` determines which indexes in the `this._objects`\n        cache are dirty.\n         If `this._objectsDirtyIndex === -1` then no indexes are dirty.\n        Otherwise, an index `i` is dirty if `i >= this._objectsDirtyIndex`.\n         Calling `objectAt` with a dirty index will cause the `this._objects`\n        cache to be recomputed.\n      */\n      this._objectsDirtyIndex = 0;\n      this._objects = null;\n\n      this._lengthDirty = true;\n      this._length = 0;\n\n      this._arrangedContent = null;\n      this._addArrangedContentArrayObsever();\n    },\n    willDestroy: function () {\n      this._removeArrangedContentArrayObsever();\n    },\n\n\n    /**\n      The content array. Must be an object that implements `Array` and/or\n      `MutableArray.`\n       @property content\n      @type EmberArray\n      @public\n    */\n    content: null,\n\n    /**\n     The array that the proxy pretends to be. In the default `ArrayProxy`\n     implementation, this and `content` are the same. Subclasses of `ArrayProxy`\n     can override this property to provide things like sorting and filtering.\n      @property arrangedContent\n     @public\n    */\n    arrangedContent: (0, _emberMetal.alias)('content'),\n\n    /**\n      Should actually retrieve the object at the specified index from the\n      content. You can override this method in subclasses to transform the\n      content item to something new.\n       This method will only be called if content is non-`null`.\n       @method objectAtContent\n      @param {Number} idx The index to retrieve.\n      @return {Object} the value or undefined if none found\n      @public\n    */\n    objectAtContent: function (idx) {\n      return (0, _array.objectAt)((0, _emberMetal.get)(this, 'arrangedContent'), idx);\n    },\n    replace: function (idx, amt, objects) {\n      (true && !((0, _emberMetal.get)(this, 'arrangedContent') === (0, _emberMetal.get)(this, 'content')) && (0, _emberDebug.assert)('Mutating an arranged ArrayProxy is not allowed', (0, _emberMetal.get)(this, 'arrangedContent') === (0, _emberMetal.get)(this, 'content')));\n\n      this.replaceContent(idx, amt, objects);\n    },\n\n\n    /**\n      Should actually replace the specified objects on the content array.\n      You can override this method in subclasses to transform the content item\n      into something new.\n       This method will only be called if content is non-`null`.\n       @method replaceContent\n      @param {Number} idx The starting index\n      @param {Number} amt The number of items to remove from the content.\n      @param {EmberArray} objects Optional array of objects to insert or null if no\n        objects.\n      @return {void}\n      @public\n    */\n    replaceContent: function (idx, amt, objects) {\n      (0, _emberMetal.get)(this, 'content').replace(idx, amt, objects);\n    },\n\n\n    // Overriding objectAt is not supported.\n    objectAt: function (idx) {\n      if (this._objects === null) {\n        this._objects = [];\n      }\n\n      if (this._objectsDirtyIndex !== -1 && idx >= this._objectsDirtyIndex) {\n        var arrangedContent = (0, _emberMetal.get)(this, 'arrangedContent');\n        if (arrangedContent) {\n          var length = this._objects.length = (0, _emberMetal.get)(arrangedContent, 'length');\n\n          for (var i = this._objectsDirtyIndex; i < length; i++) {\n            this._objects[i] = this.objectAtContent(i);\n          }\n        } else {\n          this._objects.length = 0;\n        }\n        this._objectsDirtyIndex = -1;\n      }\n\n      return this._objects[idx];\n    },\n\n\n    // Overriding length is not supported.\n    length: (0, _emberMetal.computed)(function () {\n      if (this._lengthDirty) {\n        var arrangedContent = (0, _emberMetal.get)(this, 'arrangedContent');\n        this._length = arrangedContent ? (0, _emberMetal.get)(arrangedContent, 'length') : 0;\n        this._lengthDirty = false;\n      }\n\n      return this._length;\n    }).volatile()\n\n  }, _EmberObject$extend[_emberMetal.PROPERTY_DID_CHANGE] = function (key) {\n    if (key === 'arrangedContent') {\n      var oldLength = this._objects === null ? 0 : this._objects.length;\n      var arrangedContent = (0, _emberMetal.get)(this, 'arrangedContent');\n      var newLength = arrangedContent ? (0, _emberMetal.get)(arrangedContent, 'length') : 0;\n\n      this._removeArrangedContentArrayObsever();\n      this.arrayContentWillChange(0, oldLength, newLength);\n\n      this._objectsDirtyIndex = 0;\n      this._lengthDirty = true;\n\n      this.arrayContentDidChange(0, oldLength, newLength);\n      this._addArrangedContentArrayObsever();\n    }\n  }, _EmberObject$extend._addArrangedContentArrayObsever = function () {\n    var arrangedContent = (0, _emberMetal.get)(this, 'arrangedContent');\n    if (arrangedContent) {\n      (true && !(arrangedContent !== this) && (0, _emberDebug.assert)('Can\\'t set ArrayProxy\\'s content to itself', arrangedContent !== this));\n      (true && !((0, _utils.isArray)(arrangedContent) || arrangedContent.isDestroyed) && (0, _emberDebug.assert)('ArrayProxy expects an Array or ArrayProxy, but you passed ' + typeof arrangedContent, (0, _utils.isArray)(arrangedContent) || arrangedContent.isDestroyed));\n\n\n      (0, _array.addArrayObserver)(arrangedContent, this, ARRAY_OBSERVER_MAPPING);\n\n      this._arrangedContent = arrangedContent;\n    }\n  }, _EmberObject$extend._removeArrangedContentArrayObsever = function () {\n    if (this._arrangedContent) {\n      (0, _array.removeArrayObserver)(this._arrangedContent, this, ARRAY_OBSERVER_MAPPING);\n    }\n  }, _EmberObject$extend._arrangedContentArrayWillChange = function () {}, _EmberObject$extend._arrangedContentArrayDidChange = function (proxy, idx, removedCnt, addedCnt) {\n    this.arrayContentWillChange(idx, removedCnt, addedCnt);\n\n    var dirtyIndex = idx;\n    if (dirtyIndex < 0) {\n      var length = (0, _emberMetal.get)(this._arrangedContent, 'length');\n      dirtyIndex += length + removedCnt - addedCnt;\n    }\n\n    if (this._objectsDirtyIndex === -1) {\n      this._objectsDirtyIndex = dirtyIndex;\n    } else {\n      if (this._objectsDirtyIndex > dirtyIndex) {\n        this._objectsDirtyIndex = dirtyIndex;\n      }\n    }\n\n    this._lengthDirty = true;\n\n    this.arrayContentDidChange(idx, removedCnt, addedCnt);\n  }, _EmberObject$extend));\n});","enifed('ember-runtime/system/core_object', ['exports', 'ember-babel', 'ember-utils', 'ember-metal', 'ember-runtime/mixins/action_handler', 'ember-runtime/inject', 'ember-debug', 'ember-environment', 'ember/features'], function (exports, _emberBabel, _emberUtils, _emberMetal, _action_handler, _inject, _emberDebug, _emberEnvironment, _features) {\n  'use strict';\n\n  exports.POST_INIT = undefined;\n\n  var _Mixin$create, _ClassMixinProps;\n\n  var schedule = _emberMetal.run.schedule;\n  var applyMixin = _emberMetal.Mixin._apply;\n  var reopen = _emberMetal.Mixin.prototype.reopen;\n\n  var POST_INIT = exports.POST_INIT = (0, _emberUtils.symbol)('POST_INIT');\n\n  function makeCtor() {\n    // Note: avoid accessing any properties on the object since it makes the\n    // method a lot faster. This is glue code so we want it to be as fast as\n    // possible.\n\n    var wasApplied = false;\n    var initProperties = void 0,\n        initFactory = void 0;\n\n    var Class = function () {\n      function Class() {\n        (0, _emberBabel.classCallCheck)(this, Class);\n\n        if (!wasApplied) {\n          Class.proto(); // prepare prototype...\n        }\n\n        if (arguments.length > 0) {\n          initProperties = [arguments[0]];\n        }\n\n        this.__defineNonEnumerable(_emberUtils.GUID_KEY_PROPERTY);\n        var m = (0, _emberMetal.meta)(this);\n        var proto = m.proto;\n        m.proto = this;\n\n        if (initFactory) {\n          m.factory = initFactory;\n          initFactory = null;\n        }\n        if (initProperties) {\n          // capture locally so we can clear the closed over variable\n          var props = initProperties;\n          initProperties = null;\n\n          var concatenatedProperties = this.concatenatedProperties;\n          var mergedProperties = this.mergedProperties;\n          var hasConcatenatedProps = concatenatedProperties && concatenatedProperties.length > 0;\n          var hasMergedProps = mergedProperties && mergedProperties.length > 0;\n\n          for (var i = 0; i < props.length; i++) {\n            var properties = props[i];\n\n            (true && !(typeof properties === 'object' || properties === undefined) && (0, _emberDebug.assert)('EmberObject.create only accepts objects.', typeof properties === 'object' || properties === undefined));\n            (true && !(!(properties instanceof _emberMetal.Mixin)) && (0, _emberDebug.assert)('EmberObject.create no longer supports mixing in other ' + 'definitions, use .extend & .create separately instead.', !(properties instanceof _emberMetal.Mixin)));\n\n\n            if (!properties) {\n              continue;\n            }\n\n            var keyNames = Object.keys(properties);\n\n            for (var j = 0; j < keyNames.length; j++) {\n              var keyName = keyNames[j];\n              var value = properties[keyName];\n\n              if (_emberEnvironment.ENV._ENABLE_BINDING_SUPPORT && _emberMetal.Mixin.detectBinding(keyName)) {\n                m.writeBindings(keyName, value);\n              }\n\n              (true && !(!(value instanceof _emberMetal.ComputedProperty)) && (0, _emberDebug.assert)('EmberObject.create no longer supports defining computed ' + 'properties. Define computed properties using extend() or reopen() ' + 'before calling create().', !(value instanceof _emberMetal.ComputedProperty)));\n              (true && !(!(typeof value === 'function' && value.toString().indexOf('._super') !== -1)) && (0, _emberDebug.assert)('EmberObject.create no longer supports defining methods that call _super.', !(typeof value === 'function' && value.toString().indexOf('._super') !== -1)));\n              (true && !(!(keyName === 'actions' && _action_handler.default.detect(this))) && (0, _emberDebug.assert)('`actions` must be provided at extend time, not at create time, ' + 'when ActionHandler is used (i.e. views, controllers & routes).', !(keyName === 'actions' && _action_handler.default.detect(this))));\n\n\n              var possibleDesc = (0, _emberMetal.descriptorFor)(this, keyName, m);\n              var isDescriptor = possibleDesc !== undefined;\n\n              if (!isDescriptor) {\n                var baseValue = this[keyName];\n\n                if (hasConcatenatedProps && concatenatedProperties.indexOf(keyName) > -1) {\n                  if (baseValue) {\n                    value = (0, _emberUtils.makeArray)(baseValue).concat(value);\n                  } else {\n                    value = (0, _emberUtils.makeArray)(value);\n                  }\n                }\n\n                if (hasMergedProps && mergedProperties.indexOf(keyName) > -1) {\n                  value = (0, _emberUtils.assign)({}, baseValue, value);\n                }\n              }\n\n              if (isDescriptor) {\n                possibleDesc.set(this, keyName, value);\n              } else if (typeof this.setUnknownProperty === 'function' && !(keyName in this)) {\n                this.setUnknownProperty(keyName, value);\n              } else {\n                if (_features.MANDATORY_SETTER) {\n                  (0, _emberMetal.defineProperty)(this, keyName, null, value); // setup mandatory setter\n                } else {\n                  this[keyName] = value;\n                }\n              }\n            }\n          }\n        }\n\n        if (_emberEnvironment.ENV._ENABLE_BINDING_SUPPORT) {\n          _emberMetal.Mixin.finishPartial(this, m);\n        }\n\n        this.init.apply(this, arguments);\n\n        this[POST_INIT]();\n\n        m.proto = proto;\n        (0, _emberMetal.finishChains)(m);\n        (0, _emberMetal.sendEvent)(this, 'init', undefined, undefined, undefined, m);\n      }\n\n      Class.willReopen = function willReopen() {\n        if (wasApplied) {\n          Class.PrototypeMixin = _emberMetal.Mixin.create(Class.PrototypeMixin);\n        }\n\n        wasApplied = false;\n      };\n\n      Class._initProperties = function _initProperties(args) {\n        initProperties = args;\n      };\n\n      Class._initFactory = function _initFactory(factory) {\n        initFactory = factory;\n      };\n\n      Class.proto = function proto() {\n        var superclass = Class.superclass;\n        if (superclass) {\n          superclass.proto();\n        }\n\n        if (!wasApplied) {\n          wasApplied = true;\n          Class.PrototypeMixin.applyPartial(Class.prototype);\n        }\n\n        return this.prototype;\n      };\n\n      return Class;\n    }();\n\n    Class.toString = _emberMetal.Mixin.prototype.toString;\n\n    return Class;\n  }\n\n  var IS_DESTROYED = (0, _emberMetal.descriptor)({\n    configurable: true,\n    enumerable: false,\n\n    get: function () {\n      return (0, _emberMetal.peekMeta)(this).isSourceDestroyed();\n    },\n    set: function (value) {\n      (true && !(value === IS_DESTROYED) && (0, _emberDebug.assert)('You cannot set `' + this + '.isDestroyed` directly, please use `.destroy()`.', value === IS_DESTROYED));\n    }\n  });\n\n  var IS_DESTROYING = (0, _emberMetal.descriptor)({\n    configurable: true,\n    enumerable: false,\n\n    get: function () {\n      return (0, _emberMetal.peekMeta)(this).isSourceDestroying();\n    },\n    set: function (value) {\n      (true && !(value === IS_DESTROYING) && (0, _emberDebug.assert)('You cannot set `' + this + '.isDestroying` directly, please use `.destroy()`.', value === IS_DESTROYING));\n    }\n  });\n\n  /**\n    @class CoreObject\n    @public\n  */\n  var CoreObject = makeCtor();\n  CoreObject.toString = function () {\n    return 'Ember.CoreObject';\n  };\n  CoreObject.PrototypeMixin = _emberMetal.Mixin.create((_Mixin$create = {\n    reopen: function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      applyMixin(this, args, true);\n      return this;\n    },\n    init: function () {}\n  }, _Mixin$create[POST_INIT] = function () {}, _Mixin$create.__defineNonEnumerable = function (property) {\n    Object.defineProperty(this, property.name, property.descriptor);\n    //this[property.name] = property.descriptor.value;\n  }, _Mixin$create.concatenatedProperties = null, _Mixin$create.mergedProperties = null, _Mixin$create.isDestroyed = IS_DESTROYED, _Mixin$create.isDestroying = IS_DESTROYING, _Mixin$create.destroy = function () {\n    var m = (0, _emberMetal.peekMeta)(this);\n    if (m.isSourceDestroying()) {\n      return;\n    }\n\n    m.setSourceDestroying();\n\n    schedule('actions', this, this.willDestroy);\n    schedule('destroy', this, this._scheduledDestroy, m);\n\n    return this;\n  }, _Mixin$create.willDestroy = function () {}, _Mixin$create._scheduledDestroy = function (m) {\n    if (m.isSourceDestroyed()) {\n      return;\n    }\n    (0, _emberMetal.deleteMeta)(this);\n    m.setSourceDestroyed();\n  }, _Mixin$create.toString = function () {\n    var hasToStringExtension = typeof this.toStringExtension === 'function';\n    var extension = hasToStringExtension ? ':' + this.toStringExtension() : '';\n\n    var ret = '<' + (this[_emberUtils.NAME_KEY] || (0, _emberMetal.peekMeta)(this).factory || this.constructor.toString()) + ':' + (0, _emberUtils.guidFor)(this) + extension + '>';\n\n    return ret;\n  }, _Mixin$create));\n\n  CoreObject.PrototypeMixin.ownerConstructor = CoreObject;\n\n  CoreObject.__super__ = null;\n\n  var ClassMixinProps = (_ClassMixinProps = {\n\n    isClass: true,\n\n    isMethod: false\n  }, _ClassMixinProps[_emberUtils.NAME_KEY] = null, _ClassMixinProps[_emberUtils.GUID_KEY] = null, _ClassMixinProps.extend = function () {\n    var Class = makeCtor();\n    var proto = void 0;\n    Class.ClassMixin = _emberMetal.Mixin.create(this.ClassMixin);\n    Class.PrototypeMixin = _emberMetal.Mixin.create(this.PrototypeMixin);\n\n    Class.ClassMixin.ownerConstructor = Class;\n    Class.PrototypeMixin.ownerConstructor = Class;\n\n    reopen.apply(Class.PrototypeMixin, arguments);\n\n    Class.superclass = this;\n    Class.__super__ = this.prototype;\n\n    proto = Class.prototype = Object.create(this.prototype);\n    proto.constructor = Class;\n    (0, _emberUtils.generateGuid)(proto);\n    (0, _emberMetal.meta)(proto).proto = proto; // this will disable observers on prototype\n\n    Class.ClassMixin.apply(Class);\n    return Class;\n  }, _ClassMixinProps.create = function () {\n    var C = this;\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (args.length > 0) {\n      this._initProperties(args);\n    }\n    return new C();\n  }, _ClassMixinProps.reopen = function () {\n    this.willReopen();\n    reopen.apply(this.PrototypeMixin, arguments);\n    return this;\n  }, _ClassMixinProps.reopenClass = function () {\n    reopen.apply(this.ClassMixin, arguments);\n    applyMixin(this, arguments, false);\n    return this;\n  }, _ClassMixinProps.detect = function (obj) {\n    if ('function' !== typeof obj) {\n      return false;\n    }\n    while (obj) {\n      if (obj === this) {\n        return true;\n      }\n      obj = obj.superclass;\n    }\n    return false;\n  }, _ClassMixinProps.detectInstance = function (obj) {\n    return obj instanceof this;\n  }, _ClassMixinProps.metaForProperty = function (key) {\n    var proto = this.proto();\n    var possibleDesc = (0, _emberMetal.descriptorFor)(proto, key);\n\n    (true && !(possibleDesc !== undefined) && (0, _emberDebug.assert)('metaForProperty() could not find a computed property with key \\'' + key + '\\'.', possibleDesc !== undefined));\n\n    return possibleDesc._meta || {};\n  }, _ClassMixinProps._computedProperties = (0, _emberMetal.computed)(function () {\n    (0, _emberMetal._hasCachedComputedProperties)();\n    var proto = this.proto();\n    var possibleDesc = void 0;\n    var properties = [];\n\n    for (var name in proto) {\n      possibleDesc = (0, _emberMetal.descriptorFor)(proto, name);\n\n      if (possibleDesc !== undefined) {\n        properties.push({\n          name: name,\n          meta: possibleDesc._meta\n        });\n      }\n    }\n    return properties;\n  }).readOnly(), _ClassMixinProps.eachComputedProperty = function (callback, binding) {\n    var property = void 0;\n    var empty = {};\n\n    var properties = (0, _emberMetal.get)(this, '_computedProperties');\n\n    for (var i = 0; i < properties.length; i++) {\n      property = properties[i];\n      callback.call(binding || this, property.name, property.meta || empty);\n    }\n  }, _ClassMixinProps);\n\n  if (_emberEnvironment.ENV._ENABLE_PROPERTY_REQUIRED_SUPPORT) {\n    ClassMixinProps.ClassMixin = _emberMetal.REQUIRED;\n    ClassMixinProps.PrototypeMixin = _emberMetal.REQUIRED;\n  }\n\n  function injectedPropertyAssertion() {\n    (true && !((0, _inject.validatePropertyInjections)(this)) && (0, _emberDebug.assert)('Injected properties are invalid', (0, _inject.validatePropertyInjections)(this)));\n  }\n\n  if (true) {\n    /**\n      Provides lookup-time type validation for injected properties.\n       @private\n      @method _onLookup\n    */\n    ClassMixinProps._onLookup = injectedPropertyAssertion;\n    /**\n      Returns a hash of property names and container names that injected\n      properties will lookup on the container lazily.\n       @method _lazyInjections\n      @return {Object} Hash of all lazy injected property keys to container names\n      @private\n    */\n    ClassMixinProps._lazyInjections = function () {\n      var injections = {};\n      var proto = this.proto();\n      var key = void 0;\n      var desc = void 0;\n\n      for (key in proto) {\n        desc = (0, _emberMetal.descriptorFor)(proto, key);\n        if (desc instanceof _emberMetal.InjectedProperty) {\n          injections[key] = desc.type + ':' + (desc.name || key);\n        }\n      }\n\n      return injections;\n    };\n  }\n\n  var ClassMixin = _emberMetal.Mixin.create(ClassMixinProps);\n\n  ClassMixin.ownerConstructor = CoreObject;\n\n  CoreObject.ClassMixin = ClassMixin;\n\n  ClassMixin.apply(CoreObject);\n  exports.default = CoreObject;\n});","enifed('ember-runtime/system/lazy_load', ['exports', 'ember-environment'], function (exports, _emberEnvironment) {\n  'use strict';\n\n  exports._loaded = undefined;\n  exports.onLoad = onLoad;\n  exports.runLoadHooks = runLoadHooks;\n\n\n  /**\n    @module @ember/application\n  */\n\n  var loadHooks = _emberEnvironment.ENV.EMBER_LOAD_HOOKS || {}; /*globals CustomEvent */\n\n  var loaded = {};\n  var _loaded = exports._loaded = loaded;\n\n  /**\n    Detects when a specific package of Ember (e.g. 'Application')\n    has fully loaded and is available for extension.\n  \n    The provided `callback` will be called with the `name` passed\n    resolved from a string into the object:\n  \n    ``` javascript\n    import { onLoad } from '@ember/application';\n  \n    onLoad('Ember.Application' function(hbars) {\n      hbars.registerHelper(...);\n    });\n    ```\n  \n    @method onLoad\n    @static\n    @for @ember/application\n    @param name {String} name of hook\n    @param callback {Function} callback to be called\n    @private\n  */\n  function onLoad(name, callback) {\n    var object = loaded[name];\n\n    loadHooks[name] = loadHooks[name] || [];\n    loadHooks[name].push(callback);\n\n    if (object) {\n      callback(object);\n    }\n  }\n\n  /**\n    Called when an Ember.js package (e.g Application) has finished\n    loading. Triggers any callbacks registered for this event.\n  \n    @method runLoadHooks\n    @static\n    @for @ember/application\n    @param name {String} name of hook\n    @param object {Object} object to pass to callbacks\n    @private\n  */\n  function runLoadHooks(name, object) {\n    loaded[name] = object;\n    var window = _emberEnvironment.environment.window;\n\n    if (window && typeof CustomEvent === 'function') {\n      var event = new CustomEvent(name, { detail: object, name: name });\n      window.dispatchEvent(event);\n    }\n\n    if (loadHooks[name]) {\n      loadHooks[name].forEach(function (callback) {\n        return callback(object);\n      });\n    }\n  }\n});","enifed('ember-runtime/system/namespace', ['exports', 'ember-utils', 'ember-metal', 'ember-environment', 'ember-runtime/system/object'], function (exports, _emberUtils, _emberMetal, _emberEnvironment, _object) {\n  'use strict';\n\n  exports.isSearchDisabled = isSearchDisabled;\n  exports.setSearchDisabled = setSearchDisabled;\n\n\n  var searchDisabled = false; // Preloaded into namespaces\n  /**\n  @module ember\n  */\n  function isSearchDisabled() {\n    return searchDisabled;\n  }\n\n  function setSearchDisabled(flag) {\n    searchDisabled = !!flag;\n  }\n\n  /**\n    A Namespace is an object usually used to contain other objects or methods\n    such as an application or framework. Create a namespace anytime you want\n    to define one of these new containers.\n  \n    # Example Usage\n  \n    ```javascript\n    MyFramework = Ember.Namespace.create({\n      VERSION: '1.0.0'\n    });\n    ```\n  \n    @class Namespace\n    @namespace Ember\n    @extends EmberObject\n    @public\n  */\n  var Namespace = _object.default.extend({\n    isNamespace: true,\n\n    init: function () {\n      Namespace.NAMESPACES.push(this);\n      Namespace.PROCESSED = false;\n    },\n    toString: function () {\n      var name = (0, _emberMetal.get)(this, 'name') || (0, _emberMetal.get)(this, 'modulePrefix');\n      if (name) {\n        return name;\n      }\n\n      findNamespaces();\n      return this[_emberUtils.NAME_KEY];\n    },\n    nameClasses: function () {\n      processNamespace([this.toString()], this, {});\n    },\n    destroy: function () {\n      var namespaces = Namespace.NAMESPACES;\n      var toString = this.toString();\n\n      if (toString) {\n        _emberEnvironment.context.lookup[toString] = undefined;\n        delete Namespace.NAMESPACES_BY_ID[toString];\n      }\n      namespaces.splice(namespaces.indexOf(this), 1);\n      this._super.apply(this, arguments);\n    }\n  });\n\n  Namespace.reopenClass({\n    NAMESPACES: [_emberMetal.default],\n    NAMESPACES_BY_ID: {\n      Ember: _emberMetal.default\n    },\n    PROCESSED: false,\n    processAll: processAllNamespaces,\n    byName: function (name) {\n      if (!searchDisabled) {\n        processAllNamespaces();\n      }\n\n      return NAMESPACES_BY_ID[name];\n    }\n  });\n\n  var NAMESPACES_BY_ID = Namespace.NAMESPACES_BY_ID;\n\n  var hasOwnProp = {}.hasOwnProperty;\n\n  function processNamespace(paths, root, seen) {\n    var idx = paths.length;\n\n    NAMESPACES_BY_ID[paths.join('.')] = root;\n\n    // Loop over all of the keys in the namespace, looking for classes\n    for (var key in root) {\n      if (!hasOwnProp.call(root, key)) {\n        continue;\n      }\n      var obj = root[key];\n\n      // If we are processing the `Ember` namespace, for example, the\n      // `paths` will start with `[\"Ember\"]`. Every iteration through\n      // the loop will update the **second** element of this list with\n      // the key, so processing `Ember.View` will make the Array\n      // `['Ember', 'View']`.\n      paths[idx] = key;\n\n      // If we have found an unprocessed class\n      if (obj && obj.toString === classToString && !obj[_emberUtils.NAME_KEY]) {\n        // Replace the class' `toString` with the dot-separated path\n        // and set its `NAME_KEY`\n        obj[_emberUtils.NAME_KEY] = paths.join('.');\n\n        // Support nested namespaces\n      } else if (obj && obj.isNamespace) {\n        // Skip aliased namespaces\n        if (seen[(0, _emberUtils.guidFor)(obj)]) {\n          continue;\n        }\n        seen[(0, _emberUtils.guidFor)(obj)] = true;\n\n        // Process the child namespace\n        processNamespace(paths, obj, seen);\n      }\n    }\n\n    paths.length = idx; // cut out last item\n  }\n\n  function isUppercase(code) {\n    return code >= 65 && // A\n    code <= 90; // Z\n  }\n\n  function tryIsNamespace(lookup, prop) {\n    try {\n      var obj = lookup[prop];\n      return obj && obj.isNamespace && obj;\n    } catch (e) {\n      // continue\n    }\n  }\n\n  function findNamespaces() {\n    if (Namespace.PROCESSED) {\n      return;\n    }\n    var lookup = _emberEnvironment.context.lookup;\n    var keys = Object.keys(lookup);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // Only process entities that start with uppercase A-Z\n      if (!isUppercase(key.charCodeAt(0))) {\n        continue;\n      }\n      var obj = tryIsNamespace(lookup, key);\n      if (obj) {\n        obj[_emberUtils.NAME_KEY] = key;\n      }\n    }\n  }\n\n  function superClassString(mixin) {\n    var superclass = mixin.superclass;\n    if (superclass) {\n      if (superclass[_emberUtils.NAME_KEY]) {\n        return superclass[_emberUtils.NAME_KEY];\n      }\n      return superClassString(superclass);\n    }\n  }\n\n  function calculateToString(target) {\n    var str = void 0;\n\n    if (!searchDisabled) {\n      processAllNamespaces();\n      // can also be set by processAllNamespaces\n      str = target[_emberUtils.NAME_KEY];\n      if (str) {\n        return str;\n      } else {\n        str = superClassString(target);\n        str = str ? '(subclass of ' + str + ')' : str;\n      }\n    }\n    if (str) {\n      return str;\n    } else {\n      return '(unknown mixin)';\n    }\n  }\n\n  function classToString() {\n    var name = this[_emberUtils.NAME_KEY];\n    if (name) {\n      return name;\n    }\n\n    return this[_emberUtils.NAME_KEY] = calculateToString(this);\n  }\n\n  function processAllNamespaces() {\n    var unprocessedNamespaces = !Namespace.PROCESSED;\n    var unprocessedMixins = (0, _emberMetal.hasUnprocessedMixins)();\n\n    if (unprocessedNamespaces) {\n      findNamespaces();\n      Namespace.PROCESSED = true;\n    }\n\n    if (unprocessedNamespaces || unprocessedMixins) {\n      var namespaces = Namespace.NAMESPACES;\n      var namespace = void 0;\n\n      for (var i = 0; i < namespaces.length; i++) {\n        namespace = namespaces[i];\n        processNamespace([namespace.toString()], namespace, {});\n      }\n\n      (0, _emberMetal.clearUnprocessedMixins)();\n    }\n  }\n\n  _emberMetal.Mixin.prototype.toString = classToString; // ES6TODO: altering imported objects. SBB.\n\n  exports.default = Namespace;\n});","enifed('ember-runtime/system/native_array', ['exports', 'ember-metal', 'ember-environment', 'ember-runtime/mixins/array', 'ember-runtime/mixins/mutable_array', 'ember-runtime/mixins/observable', 'ember-runtime/mixins/copyable', 'ember-debug', 'ember-runtime/copy'], function (exports, _emberMetal, _emberEnvironment, _array, _mutable_array, _observable, _copyable, _emberDebug, _copy) {\n  'use strict';\n\n  exports.NativeArray = exports.A = undefined;\n\n  var _NativeArray;\n\n  // Add Ember.Array to Array.prototype. Remove methods with native\n  // implementations and supply some more optimized versions of generic methods\n  // because they are so common.\n\n  /**\n    The NativeArray mixin contains the properties needed to make the native\n    Array support MutableArray and all of its dependent APIs. Unless you\n    have `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Array` set to\n    false, this will be applied automatically. Otherwise you can apply the mixin\n    at anytime by calling `Ember.NativeArray.apply(Array.prototype)`.\n  \n    @class Ember.NativeArray\n    @uses MutableArray\n    @uses Observable\n    @uses Ember.Copyable\n    @public\n  */\n  var NativeArray = _emberMetal.Mixin.create(_mutable_array.default, _observable.default, _copyable.default, {\n    get: function (key) {\n      if ('number' === typeof key) {\n        return this[key];\n      } else {\n        return this._super(key);\n      }\n    },\n    objectAt: function (idx) {\n      return this[idx];\n    },\n    replace: function (idx, amt, objects) {\n      (true && !(objects === null || objects === undefined || Array.isArray(objects)) && (0, _emberDebug.assert)('The third argument to replace needs to be an array.', objects === null || objects === undefined || Array.isArray(objects)));\n\n\n      // if we replaced exactly the same number of items, then pass only the\n      // replaced range. Otherwise, pass the full remaining array length\n      // since everything has shifted\n      var len = objects ? (0, _emberMetal.get)(objects, 'length') : 0;\n      (0, _array.arrayContentWillChange)(this, idx, amt, len);\n\n      if (len === 0) {\n        this.splice(idx, amt);\n      } else {\n        (0, _emberMetal.replace)(this, idx, amt, objects);\n      }\n\n      (0, _array.arrayContentDidChange)(this, idx, amt, len);\n      return this;\n    },\n    unknownProperty: function (key, value) {\n      var ret = void 0; // = this.reducedProperty(key, value);\n      if (value !== undefined && ret === undefined) {\n        ret = this[key] = value;\n      }\n      return ret;\n    },\n\n\n    indexOf: Array.prototype.indexOf,\n    lastIndexOf: Array.prototype.lastIndexOf,\n\n    copy: function (deep) {\n      if (deep) {\n        return this.map(function (item) {\n          return (0, _copy.default)(item, true);\n        });\n      }\n\n      return this.slice();\n    }\n  });\n\n  // Remove any methods implemented natively so we don't override them\n  var ignore = ['length'];\n  NativeArray.keys().forEach(function (methodName) {\n    if (Array.prototype[methodName]) {\n      ignore.push(methodName);\n    }\n  });\n\n  exports.NativeArray = NativeArray = (_NativeArray = NativeArray).without.apply(_NativeArray, ignore);\n  /**\n    @module @ember/array\n  */\n  /**\n    Creates an `Ember.NativeArray` from an Array-like object.\n    Does not modify the original object's contents. `A()` is not needed if\n    `EmberENV.EXTEND_PROTOTYPES` is `true` (the default value). However,\n    it is recommended that you use `A()` when creating addons for\n    ember or when you can not guarantee that `EmberENV.EXTEND_PROTOTYPES`\n    will be `true`.\n  \n    Example\n  \n    ```app/components/my-component.js\n    import Component from '@ember/component';\n    import { A } from '@ember/array';\n  \n    export default Component.extend({\n      tagName: 'ul',\n      classNames: ['pagination'],\n  \n      init() {\n        this._super(...arguments);\n  \n        if (!this.get('content')) {\n          this.set('content', A());\n          this.set('otherContent', A([1,2,3]));\n        }\n      }\n    });\n    ```\n  \n    @method A\n    @static\n    @for @ember/array\n    @return {Ember.NativeArray}\n    @public\n  */\n  var A = void 0;\n\n  if (_emberEnvironment.ENV.EXTEND_PROTOTYPES.Array) {\n    NativeArray.apply(Array.prototype);\n    exports.A = A = function (arr) {\n      return arr || [];\n    };\n  } else {\n    exports.A = A = function (arr) {\n      if (!arr) {\n        arr = [];\n      }\n      return _array.default.detect(arr) ? arr : NativeArray.apply(arr);\n    };\n  }\n\n  _emberMetal.default.A = A;\n  exports.A = A;\n  exports.NativeArray = NativeArray;\n  exports.default = NativeArray;\n});","enifed('ember-runtime/system/object', ['exports', 'ember-utils', 'ember-metal', 'ember-runtime/system/core_object', 'ember-runtime/mixins/observable', 'ember-debug'], function (exports, _emberUtils, _emberMetal, _core_object, _observable, _emberDebug) {\n  'use strict';\n\n  exports.FrameworkObject = undefined;\n\n  var _CoreObject$extend;\n\n  var OVERRIDE_OWNER = (0, _emberUtils.symbol)('OVERRIDE_OWNER');\n\n  /**\n    `EmberObject` is the main base class for all Ember objects. It is a subclass\n    of `CoreObject` with the `Observable` mixin applied. For details,\n    see the documentation for each of these.\n  \n    @class EmberObject\n    @extends CoreObject\n    @uses Observable\n    @public\n  */\n  var EmberObject = _core_object.default.extend(_observable.default, (_CoreObject$extend = {\n    _debugContainerKey: (0, _emberMetal.descriptor)({\n      enumerable: false,\n      get: function () {\n        var meta = (0, _emberMetal.peekMeta)(this);\n        var factory = meta.factory;\n\n\n        return factory && factory.fullName;\n      }\n    })\n\n  }, _CoreObject$extend[_emberUtils.OWNER] = (0, _emberMetal.descriptor)({\n    enumerable: false,\n    get: function () {\n      if (this[OVERRIDE_OWNER]) {\n        return this[OVERRIDE_OWNER];\n      }\n\n      var meta = (0, _emberMetal.peekMeta)(this);\n      var factory = meta.factory;\n\n\n      return factory && factory.owner;\n    },\n    set: function (value) {\n      this[OVERRIDE_OWNER] = value;\n    }\n  }), _CoreObject$extend));\n\n  EmberObject.toString = function () {\n    return 'Ember.Object';\n  };\n\n  var FrameworkObject = exports.FrameworkObject = EmberObject;\n\n  if (true) {\n    var _EmberObject$extend;\n\n    var INIT_WAS_CALLED = (0, _emberUtils.symbol)('INIT_WAS_CALLED');\n    var ASSERT_INIT_WAS_CALLED = (0, _emberUtils.symbol)('ASSERT_INIT_WAS_CALLED');\n\n    exports.FrameworkObject = FrameworkObject = EmberObject.extend((_EmberObject$extend = {\n      init: function () {\n        this._super.apply(this, arguments);\n        this[INIT_WAS_CALLED] = true;\n      }\n    }, _EmberObject$extend[ASSERT_INIT_WAS_CALLED] = (0, _emberMetal.on)('init', function () {\n      (true && !(this[INIT_WAS_CALLED]) && (0, _emberDebug.assert)('You must call `this._super(...arguments);` when overriding `init` on a framework object. Please update ' + this + ' to call `this._super(...arguments);` from `init`.', this[INIT_WAS_CALLED]));\n    }), _EmberObject$extend));\n  }\n\n  exports.default = EmberObject;\n});","enifed('ember-runtime/system/object_proxy', ['exports', 'ember-runtime/system/object', 'ember-runtime/mixins/-proxy'], function (exports, _object, _proxy) {\n  'use strict';\n\n  exports.default = _object.default.extend(_proxy.default);\n});","enifed('ember-runtime/system/service', ['exports', 'ember-runtime/system/object', 'ember-runtime/inject'], function (exports, _object, _inject) {\n  'use strict';\n\n  /**\n   @module @ember/service\n   @public\n   */\n\n  /**\n    Creates a property that lazily looks up a service in the container. There\n    are no restrictions as to what objects a service can be injected into.\n  \n    Example:\n  \n    ```app/routes/application.js\n    import Route from '@ember/routing/route';\n    import { inject as service } from '@ember/service';\n  \n    export default Route.extend({\n      authManager: service('auth'),\n  \n      model() {\n        return this.get('authManager').findCurrentUser();\n      }\n    });\n    ```\n  \n    This example will create an `authManager` property on the application route\n    that looks up the `auth` service in the container, making it easily\n    accessible in the `model` hook.\n  \n    @method inject\n    @static\n    @since 1.10.0\n    @for @ember/service\n    @param {String} name (optional) name of the service to inject, defaults to\n           the property's name\n    @return {Ember.InjectedProperty} injection descriptor instance\n    @public\n  */\n  (0, _inject.createInjectionHelper)('service');\n\n  /**\n    @class Service\n    @extends EmberObject\n    @since 1.10.0\n    @public\n  */\n  var Service = _object.default.extend();\n\n  Service.reopenClass({\n    isServiceFactory: true\n  });\n\n  exports.default = Service;\n});","enifed('ember-runtime/system/string', ['exports', 'ember-metal', 'ember-utils', 'ember-runtime/utils', 'ember-runtime/string_registry'], function (exports, _emberMetal, _emberUtils, _utils, _string_registry) {\n  'use strict';\n\n  exports.capitalize = exports.underscore = exports.classify = exports.camelize = exports.dasherize = exports.decamelize = exports.w = exports.loc = undefined;\n  /**\n  @module @ember/string\n  */\n  var STRING_DASHERIZE_REGEXP = /[ _]/g;\n\n  var STRING_DASHERIZE_CACHE = new _emberMetal.Cache(1000, function (key) {\n    return decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-');\n  });\n\n  var STRING_CAMELIZE_REGEXP_1 = /(\\-|\\_|\\.|\\s)+(.)?/g;\n  var STRING_CAMELIZE_REGEXP_2 = /(^|\\/)([A-Z])/g;\n\n  var CAMELIZE_CACHE = new _emberMetal.Cache(1000, function (key) {\n    return key.replace(STRING_CAMELIZE_REGEXP_1, function (match, separator, chr) {\n      return chr ? chr.toUpperCase() : '';\n    }).replace(STRING_CAMELIZE_REGEXP_2, function (match /*, separator, chr */) {\n      return match.toLowerCase();\n    });\n  });\n\n  var STRING_CLASSIFY_REGEXP_1 = /^(\\-|_)+(.)?/;\n  var STRING_CLASSIFY_REGEXP_2 = /(.)(\\-|\\_|\\.|\\s)+(.)?/g;\n  var STRING_CLASSIFY_REGEXP_3 = /(^|\\/|\\.)([a-z])/g;\n\n  var CLASSIFY_CACHE = new _emberMetal.Cache(1000, function (str) {\n    var replace1 = function (match, separator, chr) {\n      return chr ? '_' + chr.toUpperCase() : '';\n    };\n    var replace2 = function (match, initialChar, separator, chr) {\n      return initialChar + (chr ? chr.toUpperCase() : '');\n    };\n    var parts = str.split('/');\n    for (var i = 0; i < parts.length; i++) {\n      parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);\n    }\n    return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, function (match /*, separator, chr */) {\n      return match.toUpperCase();\n    });\n  });\n\n  var STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\n  var STRING_UNDERSCORE_REGEXP_2 = /\\-|\\s+/g;\n\n  var UNDERSCORE_CACHE = new _emberMetal.Cache(1000, function (str) {\n    return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();\n  });\n\n  var STRING_CAPITALIZE_REGEXP = /(^|\\/)([a-z\\u00C0-\\u024F])/g;\n\n  var CAPITALIZE_CACHE = new _emberMetal.Cache(1000, function (str) {\n    return str.replace(STRING_CAPITALIZE_REGEXP, function (match /*, separator, chr */) {\n      return match.toUpperCase();\n    });\n  });\n\n  var STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\n\n  var DECAMELIZE_CACHE = new _emberMetal.Cache(1000, function (str) {\n    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n  });\n\n  function _fmt(str, formats) {\n    var cachedFormats = formats;\n\n    if (!(0, _utils.isArray)(cachedFormats) || arguments.length > 2) {\n      cachedFormats = new Array(arguments.length - 1);\n\n      for (var i = 1; i < arguments.length; i++) {\n        cachedFormats[i - 1] = arguments[i];\n      }\n    }\n\n    // first, replace any ORDERED replacements.\n    var idx = 0; // the current index for non-numerical replacements\n    return str.replace(/%@([0-9]+)?/g, function (s, argIndex) {\n      argIndex = argIndex ? parseInt(argIndex, 10) - 1 : idx++;\n      s = cachedFormats[argIndex];\n      return s === null ? '(null)' : s === undefined ? '' : (0, _emberUtils.inspect)(s);\n    });\n  }\n\n  function loc(str, formats) {\n    if (!(0, _utils.isArray)(formats) || arguments.length > 2) {\n      formats = Array.prototype.slice.call(arguments, 1);\n    }\n\n    str = (0, _string_registry.get)(str) || str;\n    return _fmt(str, formats);\n  }\n\n  function w(str) {\n    return str.split(/\\s+/);\n  }\n\n  function decamelize(str) {\n    return DECAMELIZE_CACHE.get(str);\n  }\n\n  function dasherize(str) {\n    return STRING_DASHERIZE_CACHE.get(str);\n  }\n\n  function camelize(str) {\n    return CAMELIZE_CACHE.get(str);\n  }\n\n  function classify(str) {\n    return CLASSIFY_CACHE.get(str);\n  }\n\n  function underscore(str) {\n    return UNDERSCORE_CACHE.get(str);\n  }\n\n  function capitalize(str) {\n    return CAPITALIZE_CACHE.get(str);\n  }\n\n  /**\n    Defines string helper methods including string formatting and localization.\n    Unless `EmberENV.EXTEND_PROTOTYPES.String` is `false` these methods will also be\n    added to the `String.prototype` as well.\n  \n    @class String\n    @public\n  */\n  exports.default = {\n    /**\n      Formats the passed string, but first looks up the string in the localized\n      strings hash. This is a convenient way to localize text.\n       Note that it is traditional but not required to prefix localized string\n      keys with an underscore or other character so you can easily identify\n      localized strings.\n       ```javascript\n      import { loc } from '@ember/string';\n       Ember.STRINGS = {\n        '_Hello World': 'Bonjour le monde',\n        '_Hello %@ %@': 'Bonjour %@ %@'\n      };\n       loc(\"_Hello World\");  // 'Bonjour le monde';\n      loc(\"_Hello %@ %@\", [\"John\", \"Smith\"]);  // \"Bonjour John Smith\";\n      ```\n       @method loc\n      @param {String} str The string to format\n      @param {Array} formats Optional array of parameters to interpolate into string.\n      @return {String} formatted string\n      @public\n    */\n    loc: loc,\n\n    /**\n      Splits a string into separate units separated by spaces, eliminating any\n      empty strings in the process. This is a convenience method for split that\n      is mostly useful when applied to the `String.prototype`.\n       ```javascript\n      import { w } from '@ember/string';\n       w(\"alpha beta gamma\").forEach(function(key) {\n        console.log(key);\n      });\n       // > alpha\n      // > beta\n      // > gamma\n      ```\n       @method w\n      @param {String} str The string to split\n      @return {Array} array containing the split strings\n      @public\n    */\n    w: w,\n\n    /**\n      Converts a camelized string into all lower case separated by underscores.\n       ```javascript\n      'innerHTML'.decamelize();           // 'inner_html'\n      'action_name'.decamelize();        // 'action_name'\n      'css-class-name'.decamelize();     // 'css-class-name'\n      'my favorite items'.decamelize();  // 'my favorite items'\n      ```\n       @method decamelize\n      @param {String} str The string to decamelize.\n      @return {String} the decamelized string.\n      @public\n    */\n    decamelize: decamelize,\n\n    /**\n      Replaces underscores, spaces, or camelCase with dashes.\n       ```javascript\n      'innerHTML'.dasherize();          // 'inner-html'\n      'action_name'.dasherize();        // 'action-name'\n      'css-class-name'.dasherize();     // 'css-class-name'\n      'my favorite items'.dasherize();  // 'my-favorite-items'\n      'privateDocs/ownerInvoice'.dasherize(); // 'private-docs/owner-invoice'\n      ```\n       @method dasherize\n      @param {String} str The string to dasherize.\n      @return {String} the dasherized string.\n      @public\n    */\n    dasherize: dasherize,\n\n    /**\n      Returns the lowerCamelCase form of a string.\n       ```javascript\n      'innerHTML'.camelize();          // 'innerHTML'\n      'action_name'.camelize();        // 'actionName'\n      'css-class-name'.camelize();     // 'cssClassName'\n      'my favorite items'.camelize();  // 'myFavoriteItems'\n      'My Favorite Items'.camelize();  // 'myFavoriteItems'\n      'private-docs/owner-invoice'.camelize(); // 'privateDocs/ownerInvoice'\n      ```\n       @method camelize\n      @param {String} str The string to camelize.\n      @return {String} the camelized string.\n      @public\n    */\n    camelize: camelize,\n\n    /**\n      Returns the UpperCamelCase form of a string.\n       ```javascript\n      'innerHTML'.classify();          // 'InnerHTML'\n      'action_name'.classify();        // 'ActionName'\n      'css-class-name'.classify();     // 'CssClassName'\n      'my favorite items'.classify();  // 'MyFavoriteItems'\n      'private-docs/owner-invoice'.classify(); // 'PrivateDocs/OwnerInvoice'\n      ```\n       @method classify\n      @param {String} str the string to classify\n      @return {String} the classified string\n      @public\n    */\n    classify: classify,\n\n    /**\n      More general than decamelize. Returns the lower\\_case\\_and\\_underscored\n      form of a string.\n       ```javascript\n      'innerHTML'.underscore();          // 'inner_html'\n      'action_name'.underscore();        // 'action_name'\n      'css-class-name'.underscore();     // 'css_class_name'\n      'my favorite items'.underscore();  // 'my_favorite_items'\n      'privateDocs/ownerInvoice'.underscore(); // 'private_docs/owner_invoice'\n      ```\n       @method underscore\n      @param {String} str The string to underscore.\n      @return {String} the underscored string.\n      @public\n    */\n    underscore: underscore,\n\n    /**\n      Returns the Capitalized form of a string\n       ```javascript\n      'innerHTML'.capitalize()         // 'InnerHTML'\n      'action_name'.capitalize()       // 'Action_name'\n      'css-class-name'.capitalize()    // 'Css-class-name'\n      'my favorite items'.capitalize() // 'My favorite items'\n      'privateDocs/ownerInvoice'.capitalize(); // 'PrivateDocs/ownerInvoice'\n      ```\n       @method capitalize\n      @param {String} str The string to capitalize.\n      @return {String} The capitalized string.\n      @public\n    */\n    capitalize: capitalize\n  };\n  exports.loc = loc;\n  exports.w = w;\n  exports.decamelize = decamelize;\n  exports.dasherize = dasherize;\n  exports.camelize = camelize;\n  exports.classify = classify;\n  exports.underscore = underscore;\n  exports.capitalize = capitalize;\n});","enifed('ember-runtime/utils', ['exports', 'ember-runtime/mixins/array', 'ember-runtime/system/object'], function (exports, _array, _object) {\n  'use strict';\n\n  exports.isArray = isArray;\n  exports.typeOf = typeOf;\n\n\n  // ........................................\n  // TYPING & ARRAY MESSAGING\n  //\n  var TYPE_MAP = {\n    '[object Boolean]': 'boolean',\n    '[object Number]': 'number',\n    '[object String]': 'string',\n    '[object Function]': 'function',\n    '[object Array]': 'array',\n    '[object Date]': 'date',\n    '[object RegExp]': 'regexp',\n    '[object Object]': 'object',\n    '[object FileList]': 'filelist'\n  };\n\n  var toString = Object.prototype.toString;\n\n  /**\n   @module @ember/array\n  */\n  /**\n    Returns true if the passed object is an array or Array-like.\n  \n    Objects are considered Array-like if any of the following are true:\n  \n      - the object is a native Array\n      - the object has an objectAt property\n      - the object is an Object, and has a length property\n  \n    Unlike `typeOf` this method returns true even if the passed object is\n    not formally an array but appears to be array-like (i.e. implements `Array`)\n  \n    ```javascript\n    import { isArray } from '@ember/array';\n    import ArrayProxy from '@ember/array/proxy';\n  \n    isArray();                                      // false\n    isArray([]);                                    // true\n    isArray(ArrayProxy.create({ content: [] }));    // true\n    ```\n  \n    @method isArray\n    @static\n    @for @ember/array\n    @param {Object} obj The object to test\n    @return {Boolean} true if the passed object is an array or Array-like\n    @public\n  */\n  function isArray(obj) {\n    if (!obj || obj.setInterval) {\n      return false;\n    }\n    if (Array.isArray(obj)) {\n      return true;\n    }\n    if (_array.default.detect(obj)) {\n      return true;\n    }\n\n    var type = typeOf(obj);\n    if ('array' === type) {\n      return true;\n    }\n    var length = obj.length;\n    if (typeof length === 'number' && length === length && 'object' === type) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   @module @ember/utils\n  */\n  /**\n    Returns a consistent type for the passed object.\n  \n    Use this instead of the built-in `typeof` to get the type of an item.\n    It will return the same result across all browsers and includes a bit\n    more detail. Here is what will be returned:\n  \n        | Return Value  | Meaning                                              |\n        |---------------|------------------------------------------------------|\n        | 'string'      | String primitive or String object.                   |\n        | 'number'      | Number primitive or Number object.                   |\n        | 'boolean'     | Boolean primitive or Boolean object.                 |\n        | 'null'        | Null value                                           |\n        | 'undefined'   | Undefined value                                      |\n        | 'function'    | A function                                           |\n        | 'array'       | An instance of Array                                 |\n        | 'regexp'      | An instance of RegExp                                |\n        | 'date'        | An instance of Date                                  |\n        | 'filelist'    | An instance of FileList                              |\n        | 'class'       | An Ember class (created using EmberObject.extend())  |\n        | 'instance'    | An Ember object instance                             |\n        | 'error'       | An instance of the Error object                      |\n        | 'object'      | A JavaScript object not inheriting from EmberObject  |\n  \n    Examples:\n  \n    ```javascript\n    import { A } from '@ember/array';\n    import { typeOf } from '@ember/utils';\n    import EmberObject from '@ember/object';\n  \n    typeOf();                       // 'undefined'\n    typeOf(null);                   // 'null'\n    typeOf(undefined);              // 'undefined'\n    typeOf('michael');              // 'string'\n    typeOf(new String('michael'));  // 'string'\n    typeOf(101);                    // 'number'\n    typeOf(new Number(101));        // 'number'\n    typeOf(true);                   // 'boolean'\n    typeOf(new Boolean(true));      // 'boolean'\n    typeOf(A);                      // 'function'\n    typeOf([1, 2, 90]);             // 'array'\n    typeOf(/abc/);                  // 'regexp'\n    typeOf(new Date());             // 'date'\n    typeOf(event.target.files);     // 'filelist'\n    typeOf(EmberObject.extend());   // 'class'\n    typeOf(EmberObject.create());   // 'instance'\n    typeOf(new Error('teamocil'));  // 'error'\n  \n    // 'normal' JavaScript object\n    typeOf({ a: 'b' });             // 'object'\n    ```\n  \n    @method typeOf\n    @for @ember/utils\n    @param {Object} item the item to check\n    @return {String} the type\n    @public\n    @static\n  */\n  function typeOf(item) {\n    if (item === null) {\n      return 'null';\n    }\n    if (item === undefined) {\n      return 'undefined';\n    }\n    var ret = TYPE_MAP[toString.call(item)] || 'object';\n\n    if (ret === 'function') {\n      if (_object.default.detect(item)) {\n        ret = 'class';\n      }\n    } else if (ret === 'object') {\n      if (item instanceof Error) {\n        ret = 'error';\n      } else if (item instanceof _object.default) {\n        ret = 'instance';\n      } else if (item instanceof Date) {\n        ret = 'date';\n      }\n    }\n\n    return ret;\n  }\n});","enifed('ember-template-compiler/compat', ['ember-metal', 'ember-template-compiler/system/precompile', 'ember-template-compiler/system/compile', 'ember-template-compiler/system/compile-options'], function (_emberMetal, _precompile, _compile, _compileOptions) {\n  'use strict';\n\n  var EmberHandlebars = _emberMetal.default.Handlebars = _emberMetal.default.Handlebars || {}; // reexports\n\n  var EmberHTMLBars = _emberMetal.default.HTMLBars = _emberMetal.default.HTMLBars || {};\n\n  EmberHTMLBars.precompile = EmberHandlebars.precompile = _precompile.default;\n  EmberHTMLBars.compile = EmberHandlebars.compile = _compile.default;\n  EmberHTMLBars.registerPlugin = _compileOptions.registerPlugin;\n});","enifed('ember-template-compiler/index', ['exports', 'ember-template-compiler/system/precompile', 'ember-template-compiler/system/compile', 'ember-template-compiler/system/compile-options', 'ember-template-compiler/plugins', 'ember-metal', 'ember/features', 'ember-environment', 'ember/version', 'ember-template-compiler/compat', 'ember-template-compiler/system/bootstrap'], function (exports, _precompile, _compile, _compileOptions, _plugins, _emberMetal, _features, _emberEnvironment, _version) {\n  'use strict';\n\n  exports.defaultPlugins = exports.unregisterPlugin = exports.registerPlugin = exports.compileOptions = exports.compile = exports.precompile = exports._Ember = undefined;\n  Object.defineProperty(exports, 'precompile', {\n    enumerable: true,\n    get: function () {\n      return _precompile.default;\n    }\n  });\n  Object.defineProperty(exports, 'compile', {\n    enumerable: true,\n    get: function () {\n      return _compile.default;\n    }\n  });\n  Object.defineProperty(exports, 'compileOptions', {\n    enumerable: true,\n    get: function () {\n      return _compileOptions.default;\n    }\n  });\n  Object.defineProperty(exports, 'registerPlugin', {\n    enumerable: true,\n    get: function () {\n      return _compileOptions.registerPlugin;\n    }\n  });\n  Object.defineProperty(exports, 'unregisterPlugin', {\n    enumerable: true,\n    get: function () {\n      return _compileOptions.unregisterPlugin;\n    }\n  });\n  Object.defineProperty(exports, 'defaultPlugins', {\n    enumerable: true,\n    get: function () {\n      return _plugins.default;\n    }\n  });\n\n\n  // private API used by ember-cli-htmlbars to setup ENV and FEATURES\n  if (!_emberMetal.default.ENV) {\n    _emberMetal.default.ENV = _emberEnvironment.ENV;\n  }\n  if (!_emberMetal.default.FEATURES) {\n    _emberMetal.default.FEATURES = _features.FEATURES;\n  }\n  if (!_emberMetal.default.VERSION) {\n    _emberMetal.default.VERSION = _version.default;\n  }\n\n  exports._Ember = _emberMetal.default;\n});","enifed('ember-template-compiler/plugins/assert-input-helper-without-block', ['exports', 'ember-debug', 'ember-template-compiler/system/calculate-location-display'], function (exports, _emberDebug, _calculateLocationDisplay) {\n  'use strict';\n\n  exports.default = errorOnInputWithContent;\n  function errorOnInputWithContent(env) {\n    var moduleName = env.meta.moduleName;\n\n\n    return {\n      name: 'assert-input-helper-without-block',\n\n      visitors: {\n        BlockStatement: function (node) {\n          if (node.path.original !== 'input') {\n            return;\n          }\n\n          (true && !(false) && (0, _emberDebug.assert)(assertMessage(moduleName, node)));\n        }\n      }\n    };\n  }\n\n  function assertMessage(moduleName, node) {\n    var sourceInformation = (0, _calculateLocationDisplay.default)(moduleName, node.loc);\n\n    return 'The {{input}} helper cannot be used in block form. ' + sourceInformation;\n  }\n});","enifed('ember-template-compiler/plugins/assert-reserved-named-arguments', ['exports', 'ember-debug', 'ember/features', 'ember-template-compiler/system/calculate-location-display'], function (exports, _emberDebug, _features, _calculateLocationDisplay) {\n  'use strict';\n\n  exports.default = assertReservedNamedArguments;\n\n\n  var RESERVED = ['@arguments', '@args'];\n\n  var isReserved = void 0,\n      assertMessage = void 0;\n\n  function assertReservedNamedArguments(env) {\n    var moduleName = env.meta.moduleName;\n\n\n    return {\n      name: 'assert-reserved-named-arguments',\n\n      visitors: {\n        PathExpression: function (_ref) {\n          var original = _ref.original,\n              loc = _ref.loc;\n\n          if (isReserved(original)) {\n            (true && !(false) && (0, _emberDebug.assert)(assertMessage(original) + ' ' + (0, _calculateLocationDisplay.default)(moduleName, loc)));\n          }\n        }\n      }\n    };\n  }\n\n  if (_features.EMBER_GLIMMER_NAMED_ARGUMENTS) {\n    isReserved = function (name) {\n      return RESERVED.indexOf(name) !== -1 || name.match(/^@[^a-z]/);\n    };\n    assertMessage = function (name) {\n      return '\\'' + name + '\\' is reserved.';\n    };\n  } else {\n    isReserved = function (name) {\n      return name[0] === '@';\n    };\n    assertMessage = function (name) {\n      return '\\'' + name + '\\' is not a valid path.';\n    };\n  }\n});","enifed('ember-template-compiler/plugins/deprecate-render-model', ['exports', 'ember-debug', 'ember-template-compiler/system/calculate-location-display'], function (exports, _emberDebug, _calculateLocationDisplay) {\n  'use strict';\n\n  exports.default = deprecateRenderModel;\n\n\n  /*\n   * Remove after 3.4 once _ENABLE_RENDER_SUPPORT flag is no\n   * longer needed.\n   */\n  function deprecateRenderModel(env) {\n    var moduleName = env.meta.moduleName;\n\n\n    return {\n      name: 'deprecate-render-model',\n\n      visitors: {\n        MustacheStatement: function (node) {\n          if (node.path.original === 'render' && node.params.length > 1) {\n            node.params.forEach(function (param) {\n              if (param.type !== 'PathExpression') {\n                return;\n              }\n\n              (true && !(false) && (0, _emberDebug.deprecate)(deprecationMessage(moduleName, node, param), false, {\n                id: 'ember-template-compiler.deprecate-render-model',\n                until: '3.0.0',\n                url: 'https://emberjs.com/deprecations/v2.x#toc_model-param-in-code-render-code-helper'\n              }));\n            });\n          }\n        }\n      }\n    };\n  }\n\n  function deprecationMessage(moduleName, node, param) {\n    var sourceInformation = (0, _calculateLocationDisplay.default)(moduleName, node.loc);\n    var componentName = node.params[0].original;\n    var modelName = param.original;\n    var original = '{{render \"' + componentName + '\" ' + modelName + '}}';\n    var preferred = '{{' + componentName + ' model=' + modelName + '}}';\n\n    return 'Please refactor `' + original + '` to a component and invoke via' + (' `' + preferred + '`. ' + sourceInformation);\n  }\n});","enifed('ember-template-compiler/plugins/deprecate-render', ['exports', 'ember-debug', 'ember-template-compiler/system/calculate-location-display'], function (exports, _emberDebug, _calculateLocationDisplay) {\n  'use strict';\n\n  exports.default = deprecateRender;\n\n\n  /*\n   * Remove after 3.4 once _ENABLE_RENDER_SUPPORT flag is no\n   * longer needed.\n   */\n  function deprecateRender(env) {\n    var moduleName = env.meta.moduleName;\n\n\n    return {\n      name: 'deprecate-render',\n\n      visitors: {\n        MustacheStatement: function (node) {\n          if (node.path.original !== 'render') {\n            return;\n          }\n          if (node.params.length !== 1) {\n            return;\n          }\n\n          each(node.params, function (param) {\n            if (param.type !== 'StringLiteral') {\n              return;\n            }\n\n            (true && !(false) && (0, _emberDebug.deprecate)(deprecationMessage(moduleName, node), false, {\n              id: 'ember-template-compiler.deprecate-render',\n              until: '3.0.0',\n              url: 'https://emberjs.com/deprecations/v2.x#toc_code-render-code-helper'\n            }));\n          });\n        }\n      }\n    };\n  }\n\n  function each(list, callback) {\n    for (var i = 0, l = list.length; i < l; i++) {\n      callback(list[i]);\n    }\n  }\n\n  function deprecationMessage(moduleName, node) {\n    var sourceInformation = (0, _calculateLocationDisplay.default)(moduleName, node.loc);\n    var componentName = node.params[0].original;\n    var original = '{{render \"' + componentName + '\"}}';\n    var preferred = '{{' + componentName + '}}';\n\n    return 'Please refactor `' + original + '` to a component and invoke via' + (' `' + preferred + '`. ' + sourceInformation);\n  }\n});","enifed('ember-template-compiler/plugins/extract-pragma-tag', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = extractPragmaTag;\n  var PRAGMA_TAG = 'use-component-manager';\n\n  function extractPragmaTag(env) {\n    var meta = env.meta;\n\n\n    return {\n      name: 'exract-pragma-tag',\n\n      visitors: {\n        MustacheStatement: {\n          enter: function (node) {\n            if (node.path.type === 'PathExpression' && node.path.original === PRAGMA_TAG) {\n              meta.managerId = node.params[0].value;\n              return null;\n            }\n          }\n        }\n      }\n    };\n  }\n});","enifed('ember-template-compiler/plugins/index', ['exports', 'ember-template-compiler/plugins/transform-old-binding-syntax', 'ember-template-compiler/plugins/transform-angle-bracket-components', 'ember-template-compiler/plugins/transform-top-level-components', 'ember-template-compiler/plugins/transform-inline-link-to', 'ember-template-compiler/plugins/transform-old-class-binding-syntax', 'ember-template-compiler/plugins/transform-quoted-bindings-into-just-bindings', 'ember-template-compiler/plugins/deprecate-render-model', 'ember-template-compiler/plugins/deprecate-render', 'ember-template-compiler/plugins/assert-reserved-named-arguments', 'ember-template-compiler/plugins/transform-action-syntax', 'ember-template-compiler/plugins/transform-input-type-syntax', 'ember-template-compiler/plugins/transform-attrs-into-args', 'ember-template-compiler/plugins/transform-each-in-into-each', 'ember-template-compiler/plugins/transform-has-block-syntax', 'ember-template-compiler/plugins/transform-dot-component-invocation', 'ember-template-compiler/plugins/extract-pragma-tag', 'ember-template-compiler/plugins/assert-input-helper-without-block', 'ember/features'], function (exports, _transformOldBindingSyntax, _transformAngleBracketComponents, _transformTopLevelComponents, _transformInlineLinkTo, _transformOldClassBindingSyntax, _transformQuotedBindingsIntoJustBindings, _deprecateRenderModel, _deprecateRender, _assertReservedNamedArguments, _transformActionSyntax, _transformInputTypeSyntax, _transformAttrsIntoArgs, _transformEachInIntoEach, _transformHasBlockSyntax, _transformDotComponentInvocation, _extractPragmaTag, _assertInputHelperWithoutBlock, _features) {\n  'use strict';\n\n  var transforms = [_transformDotComponentInvocation.default, _transformOldBindingSyntax.default, _transformAngleBracketComponents.default, _transformTopLevelComponents.default, _transformInlineLinkTo.default, _transformOldClassBindingSyntax.default, _transformQuotedBindingsIntoJustBindings.default, _deprecateRenderModel.default, _deprecateRender.default, _assertReservedNamedArguments.default, _transformActionSyntax.default, _transformInputTypeSyntax.default, _transformAttrsIntoArgs.default, _transformEachInIntoEach.default, _transformHasBlockSyntax.default, _assertInputHelperWithoutBlock.default];\n\n  if (_features.GLIMMER_CUSTOM_COMPONENT_MANAGER) {\n    transforms.push(_extractPragmaTag.default);\n  }\n\n  exports.default = Object.freeze(transforms);\n});","enifed('ember-template-compiler/plugins/transform-action-syntax', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformActionSyntax;\n  /**\n   @module ember\n  */\n\n  /**\n    A Glimmer2 AST transformation that replaces all instances of\n  \n    ```handlebars\n   <button {{action 'foo'}}>\n   <button onblur={{action 'foo'}}>\n   <button onblur={{action (action 'foo') 'bar'}}>\n    ```\n  \n    with\n  \n    ```handlebars\n   <button {{action this 'foo'}}>\n   <button onblur={{action this 'foo'}}>\n   <button onblur={{action this (action this 'foo') 'bar'}}>\n    ```\n  \n    @private\n    @class TransformActionSyntax\n  */\n\n  function transformActionSyntax(_ref) {\n    var syntax = _ref.syntax;\n    var b = syntax.builders;\n\n\n    return {\n      name: 'transform-action-syntax',\n\n      visitors: {\n        ElementModifierStatement: function (node) {\n          if (isAction(node)) {\n            insertThisAsFirstParam(node, b);\n          }\n        },\n        MustacheStatement: function (node) {\n          if (isAction(node)) {\n            insertThisAsFirstParam(node, b);\n          }\n        },\n        SubExpression: function (node) {\n          if (isAction(node)) {\n            insertThisAsFirstParam(node, b);\n          }\n        }\n      }\n    };\n  }\n\n  function isAction(node) {\n    return node.path.original === 'action';\n  }\n\n  function insertThisAsFirstParam(node, builders) {\n    node.params.unshift(builders.path('this'));\n  }\n});","enifed('ember-template-compiler/plugins/transform-angle-bracket-components', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformAngleBracketComponents;\n  function transformAngleBracketComponents() /* env */{\n    return {\n      name: 'transform-angle-bracket-components',\n\n      visitors: {\n        ComponentNode: function (node) {\n          node.tag = '<' + node.tag + '>';\n        }\n      }\n    };\n  }\n});","enifed('ember-template-compiler/plugins/transform-attrs-into-args', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformAttrsIntoArgs;\n  /**\n   @module ember\n  */\n\n  /**\n    A Glimmer2 AST transformation that replaces all instances of\n  \n    ```handlebars\n   {{attrs.foo.bar}}\n    ```\n  \n    to\n  \n    ```handlebars\n   {{@foo.bar}}\n    ```\n  \n    as well as `{{#if attrs.foo}}`, `{{deeply (nested attrs.foobar.baz)}}`,\n    `{{this.attrs.foo}}` etc\n  \n    @private\n    @class TransformAttrsToProps\n  */\n\n  function transformAttrsIntoArgs(env) {\n    var b = env.syntax.builders;\n\n\n    var stack = [[]];\n\n    return {\n      name: 'transform-attrs-into-args',\n\n      visitors: {\n        Program: {\n          enter: function (node) {\n            var parent = stack[stack.length - 1];\n            stack.push(parent.concat(node.blockParams));\n          },\n          exit: function () {\n            stack.pop();\n          }\n        },\n\n        PathExpression: function (node) {\n          if (isAttrs(node, stack[stack.length - 1])) {\n            var path = b.path(node.original.substr(6));\n            path.original = '@' + path.original;\n            path.data = true;\n            return path;\n          }\n        }\n      }\n    };\n  }\n\n  function isAttrs(node, symbols) {\n    var name = node.parts[0];\n\n    if (symbols.indexOf(name) !== -1) {\n      return false;\n    }\n\n    if (name === 'attrs') {\n      if (node.this === true) {\n        node.parts.shift();\n        node.original = node.original.slice(5);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n});","enifed('ember-template-compiler/plugins/transform-dot-component-invocation', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformDotComponentInvocation;\n\n  /**\n    Transforms dot invocation of closure components to be wrapped\n    with the component helper. This allows for a more static invocation\n    of the component.\n  \n    ```handlebars\n   {{#my-component as |comps|}}\n    {{comp.dropdown isOpen=false}}\n   {{/my-component}}\n    ```\n  \n    with\n  \n    ```handlebars\n    {{#my-component as |comps|}}\n      {{component comp.dropdown isOpen=false}}\n    {{/my-component}}\n    ```\n    and\n  \n    ```handlebars\n   {{#my-component as |comps|}}\n    {{comp.dropdown isOpen}}\n   {{/my-component}}\n    ```\n  \n    with\n  \n    ```handlebars\n    {{#my-component as |comps|}}\n      {{component comp.dropdown isOpen}}\n    {{/my-component}}\n    ```\n  \n    and\n  \n    ```handlebars\n    {{#my-component as |comps|}}\n      {{#comp.dropdown}}Open{{/comp.dropdown}}\n    {{/my-component}}\n    ```\n  \n    with\n  \n    ```handlebars\n    {{#my-component as |comps|}}\n      {{#component comp.dropdown}}Open{{/component}}\n    {{/my-component}}\n    ```\n  \n    @private\n    @class TransFormDotComponentInvocation\n  */\n  function transformDotComponentInvocation(env) {\n    var b = env.syntax.builders;\n\n\n    return {\n      name: 'transform-dot-component-invocation',\n\n      visitors: {\n        MustacheStatement: function (node) {\n          if (isInlineInvocation(node.path, node.params, node.hash)) {\n            wrapInComponent(node, b);\n          }\n        },\n        BlockStatement: function (node) {\n          if (isMultipartPath(node.path)) {\n            wrapInComponent(node, b);\n          }\n        }\n      }\n    };\n  }\n\n  function isMultipartPath(path) {\n    return path.parts && path.parts.length > 1;\n  }\n\n  function isInlineInvocation(path, params, hash) {\n    if (isMultipartPath(path)) {\n      if (params.length > 0 || hash.pairs.length > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function wrapInComponent(node, builder) {\n    var component = node.path;\n    var componentHelper = builder.path('component');\n    node.path = componentHelper;\n    node.params.unshift(component);\n  }\n});","enifed('ember-template-compiler/plugins/transform-each-in-into-each', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformEachInIntoEach;\n  /**\n   @module ember\n  */\n\n  /**\n    A Glimmer2 AST transformation that replaces all instances of\n  \n    ```handlebars\n   {{#each-in iterableThing as |key value|}}\n    ```\n  \n    with\n  \n    ```handlebars\n   {{#each (-each-in iterableThing) as |key value|}}\n    ```\n  \n    @private\n    @class TransformHasBlockSyntax\n  */\n  function transformEachInIntoEach(env) {\n    var b = env.syntax.builders;\n\n\n    return {\n      name: 'transform-each-in-into-each',\n\n      visitors: {\n        BlockStatement: function (node) {\n          if (node.path.original === 'each-in') {\n            node.params[0] = b.sexpr(b.path('-each-in'), [node.params[0]]);\n            return b.block(b.path('each'), node.params, node.hash, node.program, node.inverse, node.loc);\n          }\n        }\n      }\n    };\n  }\n});","enifed('ember-template-compiler/plugins/transform-has-block-syntax', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformHasBlockSyntax;\n  /**\n   @module ember\n  */\n\n  /**\n    A Glimmer2 AST transformation that replaces all instances of\n  \n    ```handlebars\n   {{hasBlock}}\n    ```\n  \n    with\n  \n    ```handlebars\n   {{has-block}}\n    ```\n  \n    @private\n    @class TransformHasBlockSyntax\n  */\n\n  var TRANSFORMATIONS = {\n    hasBlock: 'has-block',\n    hasBlockParams: 'has-block-params'\n  };\n\n  function transformHasBlockSyntax(env) {\n    var b = env.syntax.builders;\n\n\n    return {\n      name: 'transform-has-block-syntax',\n\n      visitors: {\n        PathExpression: function (node) {\n          if (TRANSFORMATIONS[node.original]) {\n            return b.sexpr(b.path(TRANSFORMATIONS[node.original]));\n          }\n        },\n        MustacheStatement: function (node) {\n          if (TRANSFORMATIONS[node.path.original]) {\n            return b.mustache(b.path(TRANSFORMATIONS[node.path.original]), node.params, node.hash, null, node.loc);\n          }\n        },\n        SubExpression: function (node) {\n          if (TRANSFORMATIONS[node.path.original]) {\n            return b.sexpr(b.path(TRANSFORMATIONS[node.path.original]), node.params, node.hash);\n          }\n        }\n      }\n    };\n  }\n});","enifed('ember-template-compiler/plugins/transform-inline-link-to', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformInlineLinkTo;\n  function buildProgram(b, content, loc) {\n    return b.program([buildStatement(b, content, loc)], null, loc);\n  }\n\n  function buildStatement(b, content, loc) {\n    switch (content.type) {\n      case 'PathExpression':\n        return b.mustache(content, null, null, null, loc);\n\n      case 'SubExpression':\n        return b.mustache(content.path, content.params, content.hash, null, loc);\n\n      // The default case handles literals.\n      default:\n        return b.text('' + content.value, loc);\n    }\n  }\n\n  function unsafeHtml(b, expr) {\n    return b.sexpr('-html-safe', [expr]);\n  }\n\n  function transformInlineLinkTo(env) {\n    var b = env.syntax.builders;\n\n\n    return {\n      name: 'transform-inline-link-to',\n\n      visitors: {\n        MustacheStatement: function (node) {\n          if (node.path.original === 'link-to') {\n            var content = node.escaped ? node.params[0] : unsafeHtml(b, node.params[0]);\n            return b.block('link-to', node.params.slice(1), node.hash, buildProgram(b, content, node.loc), null, node.loc);\n          }\n        }\n      }\n    };\n  }\n});","enifed('ember-template-compiler/plugins/transform-input-type-syntax', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformInputTypeSyntax;\n  /**\n   @module ember\n  */\n\n  /**\n    A Glimmer2 AST transformation that replaces all instances of\n  \n    ```handlebars\n   {{input type=boundType}}\n    ```\n  \n    with\n  \n    ```handlebars\n   {{input (-input-type boundType) type=boundType}}\n    ```\n  \n    Note that the type parameters is not removed as the -input-type helpers\n    is only used to select the component class. The component still needs\n    the type parameter to function.\n  \n    @private\n    @class TransformInputTypeSyntax\n  */\n\n  function transformInputTypeSyntax(env) {\n    var b = env.syntax.builders;\n\n    return {\n      name: 'transform-input-type-syntax',\n\n      visitors: {\n        MustacheStatement: function (node) {\n          if (isInput(node)) {\n            insertTypeHelperParameter(node, b);\n          }\n        }\n      }\n    };\n  }\n\n  function isInput(node) {\n    return node.path.original === 'input';\n  }\n\n  function insertTypeHelperParameter(node, builders) {\n    var pairs = node.hash.pairs;\n    var pair = null;\n    for (var i = 0; i < pairs.length; i++) {\n      if (pairs[i].key === 'type') {\n        pair = pairs[i];\n        break;\n      }\n    }\n    if (pair && pair.value.type !== 'StringLiteral') {\n      node.params.unshift(builders.sexpr('-input-type', [pair.value], null, pair.loc));\n    }\n  }\n});","enifed('ember-template-compiler/plugins/transform-old-binding-syntax', ['exports', 'ember-debug', 'ember-template-compiler/system/calculate-location-display'], function (exports, _emberDebug, _calculateLocationDisplay) {\n  'use strict';\n\n  exports.default = transformOldBindingSyntax;\n  function transformOldBindingSyntax(env) {\n    var moduleName = env.meta.moduleName;\n\n    var b = env.syntax.builders;\n\n    return {\n      name: 'transform-old-binding-syntax',\n\n      visitors: {\n        BlockStatement: function (node) {\n          processHash(b, node, moduleName);\n        },\n        MustacheStatement: function (node) {\n          processHash(b, node, moduleName);\n        }\n      }\n    };\n  }\n\n  function processHash(b, node, moduleName) {\n    for (var i = 0; i < node.hash.pairs.length; i++) {\n      var pair = node.hash.pairs[i];\n      var key = pair.key,\n          value = pair.value;\n\n\n      var sourceInformation = (0, _calculateLocationDisplay.default)(moduleName, pair.loc);\n\n      if (key === 'classBinding') {\n        return;\n      }\n\n      (true && !(key !== 'attributeBindings') && (0, _emberDebug.assert)('Setting \\'attributeBindings\\' via template helpers is not allowed ' + sourceInformation, key !== 'attributeBindings'));\n\n\n      if (key.substr(-7) === 'Binding') {\n        var newKey = key.slice(0, -7);\n\n        (true && !(false) && (0, _emberDebug.deprecate)('You\\'re using legacy binding syntax: ' + key + '=' + exprToString(value) + ' ' + sourceInformation + '. Please replace with ' + newKey + '=' + value.original, false, { id: 'ember-template-compiler.transform-old-binding-syntax', until: '3.0.0' }));\n\n\n        pair.key = newKey;\n        if (value.type === 'StringLiteral') {\n          pair.value = b.path(value.original);\n        }\n      }\n    }\n  }\n\n  function exprToString(expr) {\n    switch (expr.type) {\n      case 'StringLiteral':\n        return '\"' + expr.original + '\"';\n      case 'PathExpression':\n        return expr.original;\n    }\n  }\n});","enifed('ember-template-compiler/plugins/transform-old-class-binding-syntax', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformOldClassBindingSyntax;\n  function transformOldClassBindingSyntax(env) {\n    var b = env.syntax.builders;\n\n    return {\n      name: 'transform-old-class-binding-syntax',\n\n      visitors: {\n        MustacheStatement: function (node) {\n          process(b, node);\n        },\n        BlockStatement: function (node) {\n          process(b, node);\n        }\n      }\n    };\n  }\n\n  function process(b, node) {\n    var allOfTheMicrosyntaxes = [];\n    var allOfTheMicrosyntaxIndexes = [];\n    var classPair = void 0;\n\n    each(node.hash.pairs, function (pair, index) {\n      var key = pair.key;\n\n\n      if (key === 'classBinding' || key === 'classNameBindings') {\n        allOfTheMicrosyntaxIndexes.push(index);\n        allOfTheMicrosyntaxes.push(pair);\n      } else if (key === 'class') {\n        classPair = pair;\n      }\n    });\n\n    if (allOfTheMicrosyntaxes.length === 0) {\n      return;\n    }\n\n    var classValue = [];\n\n    if (classPair) {\n      classValue.push(classPair.value);\n      classValue.push(b.string(' '));\n    } else {\n      classPair = b.pair('class', null);\n      node.hash.pairs.push(classPair);\n    }\n\n    each(allOfTheMicrosyntaxIndexes, function (index) {\n      node.hash.pairs.splice(index, 1);\n    });\n\n    each(allOfTheMicrosyntaxes, function (_ref) {\n      var value = _ref.value;\n\n      var sexprs = [];\n      // TODO: add helpful deprecation when both `classNames` and `classNameBindings` can\n      // be removed.\n\n      if (value.type === 'StringLiteral') {\n        var microsyntax = parseMicrosyntax(value.original);\n\n        buildSexprs(microsyntax, sexprs, b);\n\n        classValue.push.apply(classValue, sexprs);\n      }\n    });\n\n    var hash = b.hash();\n    classPair.value = b.sexpr(b.path('concat'), classValue, hash);\n  }\n\n  function buildSexprs(microsyntax, sexprs, b) {\n    for (var i = 0; i < microsyntax.length; i++) {\n      var _microsyntax$i = microsyntax[i],\n          propName = _microsyntax$i[0],\n          activeClass = _microsyntax$i[1],\n          inactiveClass = _microsyntax$i[2];\n\n      var sexpr = void 0;\n\n      // :my-class-name microsyntax for static values\n      if (propName === '') {\n        sexpr = b.string(activeClass);\n      } else {\n        var params = [b.path(propName)];\n\n        if (activeClass || activeClass === '') {\n          params.push(b.string(activeClass));\n        } else {\n          var sexprParams = [b.string(propName), b.path(propName)];\n\n          var hash = b.hash();\n          if (activeClass !== undefined) {\n            hash.pairs.push(b.pair('activeClass', b.string(activeClass)));\n          }\n\n          if (inactiveClass !== undefined) {\n            hash.pairs.push(b.pair('inactiveClass', b.string(inactiveClass)));\n          }\n\n          params.push(b.sexpr(b.path('-normalize-class'), sexprParams, hash));\n        }\n\n        if (inactiveClass || inactiveClass === '') {\n          params.push(b.string(inactiveClass));\n        }\n\n        sexpr = b.sexpr(b.path('if'), params);\n      }\n\n      sexprs.push(sexpr);\n      sexprs.push(b.string(' '));\n    }\n  }\n\n  function each(list, callback) {\n    for (var i = 0; i < list.length; i++) {\n      callback(list[i], i);\n    }\n  }\n\n  function parseMicrosyntax(string) {\n    var segments = string.split(' ');\n\n    for (var i = 0; i < segments.length; i++) {\n      segments[i] = segments[i].split(':');\n    }\n\n    return segments;\n  }\n});","enifed('ember-template-compiler/plugins/transform-quoted-bindings-into-just-bindings', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformQuotedBindingsIntoJustBindings;\n  function transformQuotedBindingsIntoJustBindings() /* env */{\n\n    return {\n      name: 'transform-quoted-bindings-into-just-bindings',\n\n      visitors: {\n        ElementNode: function (node) {\n          var styleAttr = getStyleAttr(node);\n\n          if (!validStyleAttr(styleAttr)) {\n            return;\n          }\n\n          styleAttr.value = styleAttr.value.parts[0];\n        }\n      }\n    };\n  }\n\n  function validStyleAttr(attr) {\n    if (!attr) {\n      return false;\n    }\n\n    var value = attr.value;\n\n    if (!value || value.type !== 'ConcatStatement' || value.parts.length !== 1) {\n      return false;\n    }\n\n    var onlyPart = value.parts[0];\n\n    return onlyPart.type === 'MustacheStatement';\n  }\n\n  function getStyleAttr(node) {\n    var attributes = node.attributes;\n\n    for (var i = 0; i < attributes.length; i++) {\n      if (attributes[i].name === 'style') {\n        return attributes[i];\n      }\n    }\n  }\n});","enifed('ember-template-compiler/plugins/transform-top-level-components', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = transformTopLevelComponent;\n  function transformTopLevelComponent() /* env */{\n    return {\n      name: 'transform-top-level-component',\n\n      visitors: {\n        Program: function (node) {\n          hasSingleComponentNode(node, function (component) {\n            component.tag = '@' + component.tag;\n            component.isStatic = true;\n          });\n        }\n      }\n    };\n  }\n\n  function hasSingleComponentNode(program, componentCallback) {\n    var loc = program.loc,\n        body = program.body;\n\n    if (!loc || loc.start.line !== 1 || loc.start.column !== 0) {\n      return;\n    }\n\n    var lastComponentNode = void 0;\n    var nodeCount = 0;\n\n    for (var i = 0; i < body.length; i++) {\n      var curr = body[i];\n\n      // text node with whitespace only\n      if (curr.type === 'TextNode' && /^[\\s]*$/.test(curr.chars)) {\n        continue;\n      }\n\n      // has multiple root elements if we've been here before\n      if (nodeCount++ > 0) {\n        return false;\n      }\n\n      if (curr.type === 'ComponentNode' || curr.type === 'ElementNode') {\n        lastComponentNode = curr;\n      }\n    }\n\n    if (!lastComponentNode) {\n      return;\n    }\n\n    if (lastComponentNode.type === 'ComponentNode') {\n      componentCallback(lastComponentNode);\n    }\n  }\n});","enifed('ember-template-compiler/system/bootstrap', ['exports', 'ember-debug', 'ember-template-compiler/system/compile'], function (exports, _emberDebug, _compile) {\n  'use strict';\n\n  /**\n    Find templates stored in the head tag as script tags and make them available\n    to `Ember.CoreView` in the global `Ember.TEMPLATES` object.\n  \n    Script tags with `text/x-handlebars` will be compiled\n    with Ember's template compiler and are suitable for use as a view's template.\n  \n    @private\n    @method bootstrap\n    @for Ember.HTMLBars\n    @static\n    @param ctx\n  */\n  /**\n  @module ember\n  */\n\n  function bootstrap(_ref) {\n    var context = _ref.context,\n        hasTemplate = _ref.hasTemplate,\n        setTemplate = _ref.setTemplate;\n\n    if (!context) {\n      context = document;\n    }\n\n    var selector = 'script[type=\"text/x-handlebars\"]';\n\n    var elements = context.querySelectorAll(selector);\n\n    for (var i = 0; i < elements.length; i++) {\n      var script = elements[i];\n\n      // Get the name of the script\n      // First look for data-template-name attribute, then fall back to its\n      // id if no name is found.\n      var templateName = script.getAttribute('data-template-name') || script.getAttribute('id') || 'application';\n      var template = void 0;\n\n      template = (0, _compile.default)(script.innerHTML, {\n        moduleName: templateName\n      });\n\n      // Check if template of same name already exists.\n      if (hasTemplate(templateName)) {\n        throw new _emberDebug.Error('Template named \"' + templateName + '\" already exists.');\n      }\n\n      // For templates which have a name, we save them and then remove them from the DOM.\n      setTemplate(templateName, template);\n\n      // Remove script tag from DOM.\n      script.parentNode.removeChild(script);\n    }\n  }\n\n  exports.default = bootstrap;\n});","enifed('ember-template-compiler/system/calculate-location-display', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = calculateLocationDisplay;\n  function calculateLocationDisplay(moduleName) {\n    var loc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _ref = loc.start || {},\n        column = _ref.column,\n        line = _ref.line;\n\n    var moduleInfo = '';\n    if (moduleName) {\n      moduleInfo += '\\'' + moduleName + '\\' ';\n    }\n\n    if (line !== undefined && column !== undefined) {\n      if (moduleName) {\n        // only prepend @ if the moduleName was present\n        moduleInfo += '@ ';\n      }\n      moduleInfo += 'L' + line + ':C' + column;\n    }\n\n    if (moduleInfo) {\n      moduleInfo = '(' + moduleInfo + ') ';\n    }\n\n    return moduleInfo;\n  }\n});","enifed('ember-template-compiler/system/compile-options', ['exports', 'ember-utils', 'ember-template-compiler/plugins'], function (exports, _emberUtils, _plugins) {\n  'use strict';\n\n  exports.default = compileOptions;\n  exports.registerPlugin = registerPlugin;\n  exports.unregisterPlugin = unregisterPlugin;\n\n\n  var USER_PLUGINS = [];\n\n  function compileOptions(_options) {\n    var options = (0, _emberUtils.assign)({ meta: {} }, _options);\n\n    // move `moduleName` into `meta` property\n    if (options.moduleName) {\n      var meta = options.meta;\n      meta.moduleName = options.moduleName;\n    }\n\n    if (!options.plugins) {\n      options.plugins = { ast: [].concat(USER_PLUGINS, _plugins.default) };\n    } else {\n      var potententialPugins = [].concat(USER_PLUGINS, _plugins.default);\n      var providedPlugins = options.plugins.ast.map(function (plugin) {\n        return wrapLegacyPluginIfNeeded(plugin);\n      });\n      var pluginsToAdd = potententialPugins.filter(function (plugin) {\n        return options.plugins.ast.indexOf(plugin) === -1;\n      });\n      options.plugins.ast = providedPlugins.concat(pluginsToAdd);\n    }\n\n    return options;\n  }\n\n  function wrapLegacyPluginIfNeeded(_plugin) {\n    var plugin = _plugin;\n    if (_plugin.prototype && _plugin.prototype.transform) {\n      plugin = function (env) {\n        var pluginInstantiated = false;\n\n        return {\n          name: _plugin.constructor && _plugin.constructor.name,\n\n          visitors: {\n            Program: function (node) {\n              if (!pluginInstantiated) {\n\n                pluginInstantiated = true;\n                var _plugin2 = new _plugin(env);\n\n                _plugin2.syntax = env.syntax;\n\n                return _plugin2.transform(node);\n              }\n            }\n          }\n        };\n      };\n\n      plugin.__raw = _plugin;\n    }\n\n    return plugin;\n  }\n\n  function registerPlugin(type, _plugin) {\n    if (type !== 'ast') {\n      throw new Error('Attempting to register ' + _plugin + ' as \"' + type + '\" which is not a valid Glimmer plugin type.');\n    }\n\n    for (var i = 0; i < USER_PLUGINS.length; i++) {\n      var PLUGIN = USER_PLUGINS[i];\n      if (PLUGIN === _plugin || PLUGIN.__raw === _plugin) {\n        return;\n      }\n    }\n\n    var plugin = wrapLegacyPluginIfNeeded(_plugin);\n\n    USER_PLUGINS = [plugin].concat(USER_PLUGINS);\n  }\n\n  function unregisterPlugin(type, PluginClass) {\n    if (type !== 'ast') {\n      throw new Error('Attempting to unregister ' + PluginClass + ' as \"' + type + '\" which is not a valid Glimmer plugin type.');\n    }\n\n    USER_PLUGINS = USER_PLUGINS.filter(function (plugin) {\n      return plugin !== PluginClass && plugin.__raw !== PluginClass;\n    });\n  }\n});","enifed('ember-template-compiler/system/compile', ['exports', 'require', 'ember-template-compiler/system/precompile'], function (exports, _require2, _precompile) {\n  'use strict';\n\n  exports.default = compile;\n  /**\n  @module ember\n  */\n  var template = void 0;\n\n  /**\n    Uses HTMLBars `compile` function to process a string into a compiled template.\n  \n    This is not present in production builds.\n  \n    @private\n    @method compile\n    @param {String} templateString This is the string to be compiled by HTMLBars.\n    @param {Object} options This is an options hash to augment the compiler options.\n  */\n  function compile(templateString, options) {\n    if (!template && (0, _require2.has)('ember-glimmer')) {\n      template = (0, _require2.default)('ember-glimmer').template;\n    }\n\n    if (!template) {\n      throw new Error('Cannot call `compile` with only the template compiler loaded. Please load `ember.debug.js` or `ember.prod.js` prior to calling `compile`.');\n    }\n\n    var precompiledTemplateString = (0, _precompile.default)(templateString, options);\n    var templateJS = new Function('return ' + precompiledTemplateString)();\n    return template(templateJS);\n  }\n});","enifed('ember-template-compiler/system/precompile', ['exports', 'ember-template-compiler/system/compile-options', 'require'], function (exports, _compileOptions, _require2) {\n  'use strict';\n\n  exports.default = precompile;\n  /**\n  @module ember\n  */\n\n  var glimmerPrecompile = void 0;\n\n  /**\n    Uses HTMLBars `compile` function to process a string into a compiled template string.\n    The returned string must be passed through `Ember.HTMLBars.template`.\n  \n    This is not present in production builds.\n  \n    @private\n    @method precompile\n    @param {String} templateString This is the string to be compiled by HTMLBars.\n  */\n  function precompile(templateString, options) {\n    if (!glimmerPrecompile && (0, _require2.has)('@glimmer/compiler')) {\n      glimmerPrecompile = (0, _require2.default)('@glimmer/compiler').precompile;\n    }\n\n    if (!glimmerPrecompile) {\n      throw new Error('Cannot call `compile` without the template compiler loaded. Please load `ember-template-compiler.js` prior to calling `compile`.');\n    }\n\n    return glimmerPrecompile(templateString, (0, _compileOptions.default)(options));\n  }\n});","enifed('ember-testing/adapters/adapter', ['exports', 'ember-runtime'], function (exports, _emberRuntime) {\n  'use strict';\n\n  function K() {\n    return this;\n  }\n\n  /**\n   @module @ember/test\n  */\n\n  /**\n    The primary purpose of this class is to create hooks that can be implemented\n    by an adapter for various test frameworks.\n  \n    @class TestAdapter\n    @public\n  */\n  exports.default = _emberRuntime.Object.extend({\n    /**\n      This callback will be called whenever an async operation is about to start.\n       Override this to call your framework's methods that handle async\n      operations.\n       @public\n      @method asyncStart\n    */\n    asyncStart: K,\n\n    /**\n      This callback will be called whenever an async operation has completed.\n       @public\n      @method asyncEnd\n    */\n    asyncEnd: K,\n\n    /**\n      Override this method with your testing framework's false assertion.\n      This function is called whenever an exception occurs causing the testing\n      promise to fail.\n       QUnit example:\n       ```javascript\n        exception: function(error) {\n          ok(false, error);\n        };\n      ```\n       @public\n      @method exception\n      @param {String} error The exception to be raised.\n    */\n    exception: function (error) {\n      throw error;\n    }\n  });\n});","enifed('ember-testing/adapters/qunit', ['exports', 'ember-utils', 'ember-testing/adapters/adapter'], function (exports, _emberUtils, _adapter) {\n  'use strict';\n\n  exports.default = _adapter.default.extend({\n    asyncStart: function () {\n      QUnit.stop();\n    },\n    asyncEnd: function () {\n      QUnit.start();\n    },\n    exception: function (error) {\n      QUnit.config.current.assert.ok(false, (0, _emberUtils.inspect)(error));\n    }\n  });\n});","enifed('ember-testing/events', ['exports', 'ember-views', 'ember-metal'], function (exports, _emberViews, _emberMetal) {\n  'use strict';\n\n  exports.focus = focus;\n  exports.fireEvent = fireEvent;\n\n\n  var DEFAULT_EVENT_OPTIONS = { canBubble: true, cancelable: true };\n  var KEYBOARD_EVENT_TYPES = ['keydown', 'keypress', 'keyup'];\n  var MOUSE_EVENT_TYPES = ['click', 'mousedown', 'mouseup', 'dblclick', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover'];\n\n  function focus(el) {\n    if (!el) {\n      return;\n    }\n    var $el = (0, _emberViews.jQuery)(el);\n    if ($el.is(':input, [contenteditable=true]')) {\n      var type = $el.prop('type');\n      if (type !== 'checkbox' && type !== 'radio' && type !== 'hidden') {\n        (0, _emberMetal.run)(null, function () {\n          // Firefox does not trigger the `focusin` event if the window\n          // does not have focus. If the document doesn't have focus just\n          // use trigger('focusin') instead.\n\n          if (!document.hasFocus || document.hasFocus()) {\n            el.focus();\n          } else {\n            $el.trigger('focusin');\n          }\n        });\n      }\n    }\n  }\n\n  function fireEvent(element, type) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!element) {\n      return;\n    }\n    var event = void 0;\n    if (KEYBOARD_EVENT_TYPES.indexOf(type) > -1) {\n      event = buildKeyboardEvent(type, options);\n    } else if (MOUSE_EVENT_TYPES.indexOf(type) > -1) {\n      var rect = element.getBoundingClientRect();\n      var x = rect.left + 1;\n      var y = rect.top + 1;\n      var simulatedCoordinates = {\n        screenX: x + 5,\n        screenY: y + 95,\n        clientX: x,\n        clientY: y\n      };\n      event = buildMouseEvent(type, _emberViews.jQuery.extend(simulatedCoordinates, options));\n    } else {\n      event = buildBasicEvent(type, options);\n    }\n    element.dispatchEvent(event);\n  }\n\n  function buildBasicEvent(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var event = document.createEvent('Events');\n    event.initEvent(type, true, true);\n    _emberViews.jQuery.extend(event, options);\n    return event;\n  }\n\n  function buildMouseEvent(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var event = void 0;\n    try {\n      event = document.createEvent('MouseEvents');\n      var eventOpts = _emberViews.jQuery.extend({}, DEFAULT_EVENT_OPTIONS, options);\n      event.initMouseEvent(type, eventOpts.canBubble, eventOpts.cancelable, window, eventOpts.detail, eventOpts.screenX, eventOpts.screenY, eventOpts.clientX, eventOpts.clientY, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.button, eventOpts.relatedTarget);\n    } catch (e) {\n      event = buildBasicEvent(type, options);\n    }\n    return event;\n  }\n\n  function buildKeyboardEvent(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var event = void 0;\n    try {\n      event = document.createEvent('KeyEvents');\n      var eventOpts = _emberViews.jQuery.extend({}, DEFAULT_EVENT_OPTIONS, options);\n      event.initKeyEvent(type, eventOpts.canBubble, eventOpts.cancelable, window, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.keyCode, eventOpts.charCode);\n    } catch (e) {\n      event = buildBasicEvent(type, options);\n    }\n    return event;\n  }\n});","enifed('ember-testing/ext/application', ['ember-application', 'ember-testing/setup_for_testing', 'ember-testing/test/helpers', 'ember-testing/test/promise', 'ember-testing/test/run', 'ember-testing/test/on_inject_helpers', 'ember-testing/test/adapter'], function (_emberApplication, _setup_for_testing, _helpers, _promise, _run, _on_inject_helpers, _adapter) {\n  'use strict';\n\n  _emberApplication.Application.reopen({\n    /**\n     This property contains the testing helpers for the current application. These\n     are created once you call `injectTestHelpers` on your `Application`\n     instance. The included helpers are also available on the `window` object by\n     default, but can be used from this object on the individual application also.\n       @property testHelpers\n      @type {Object}\n      @default {}\n      @public\n    */\n    testHelpers: {},\n\n    /**\n     This property will contain the original methods that were registered\n     on the `helperContainer` before `injectTestHelpers` is called.\n      When `removeTestHelpers` is called, these methods are restored to the\n     `helperContainer`.\n       @property originalMethods\n      @type {Object}\n      @default {}\n      @private\n      @since 1.3.0\n    */\n    originalMethods: {},\n\n    /**\n    This property indicates whether or not this application is currently in\n    testing mode. This is set when `setupForTesting` is called on the current\n    application.\n     @property testing\n    @type {Boolean}\n    @default false\n    @since 1.3.0\n    @public\n    */\n    testing: false,\n\n    setupForTesting: function () {\n      (0, _setup_for_testing.default)();\n\n      this.testing = true;\n\n      this.resolveRegistration('router:main').reopen({\n        location: 'none'\n      });\n    },\n\n\n    /**\n      This will be used as the container to inject the test helpers into. By\n      default the helpers are injected into `window`.\n       @property helperContainer\n      @type {Object} The object to be used for test helpers.\n      @default window\n      @since 1.2.0\n      @private\n    */\n    helperContainer: null,\n\n    injectTestHelpers: function (helperContainer) {\n      if (helperContainer) {\n        this.helperContainer = helperContainer;\n      } else {\n        this.helperContainer = window;\n      }\n\n      this.reopen({\n        willDestroy: function () {\n          this._super.apply(this, arguments);\n          this.removeTestHelpers();\n        }\n      });\n\n      this.testHelpers = {};\n      for (var name in _helpers.helpers) {\n        this.originalMethods[name] = this.helperContainer[name];\n        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);\n        protoWrap(_promise.default.prototype, name, helper(this, name), _helpers.helpers[name].meta.wait);\n      }\n\n      (0, _on_inject_helpers.invokeInjectHelpersCallbacks)(this);\n    },\n    removeTestHelpers: function () {\n      if (!this.helperContainer) {\n        return;\n      }\n\n      for (var name in _helpers.helpers) {\n        this.helperContainer[name] = this.originalMethods[name];\n        delete _promise.default.prototype[name];\n        delete this.testHelpers[name];\n        delete this.originalMethods[name];\n      }\n    }\n  });\n\n  // This method is no longer needed\n  // But still here for backwards compatibility\n  // of helper chaining\n  function protoWrap(proto, name, callback, isAsync) {\n    proto[name] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (isAsync) {\n        return callback.apply(this, args);\n      } else {\n        return this.then(function () {\n          return callback.apply(this, args);\n        });\n      }\n    };\n  }\n\n  function helper(app, name) {\n    var fn = _helpers.helpers[name].method;\n    var meta = _helpers.helpers[name].meta;\n    if (!meta.wait) {\n      return function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return fn.apply(app, [app].concat(args));\n      };\n    }\n\n    return function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var lastPromise = (0, _run.default)(function () {\n        return (0, _promise.resolve)((0, _promise.getLastPromise)());\n      });\n\n      // wait for last helper's promise to resolve and then\n      // execute. To be safe, we need to tell the adapter we're going\n      // asynchronous here, because fn may not be invoked before we\n      // return.\n      (0, _adapter.asyncStart)();\n      return lastPromise.then(function () {\n        return fn.apply(app, [app].concat(args));\n      }).finally(_adapter.asyncEnd);\n    };\n  }\n});","enifed('ember-testing/ext/rsvp', ['exports', 'ember-runtime', 'ember-metal', 'ember-debug', 'ember-testing/test/adapter'], function (exports, _emberRuntime, _emberMetal, _emberDebug, _adapter) {\n  'use strict';\n\n  _emberRuntime.RSVP.configure('async', function (callback, promise) {\n    // if schedule will cause autorun, we need to inform adapter\n    if ((0, _emberDebug.isTesting)() && !_emberMetal.run.backburner.currentInstance) {\n      (0, _adapter.asyncStart)();\n      _emberMetal.run.backburner.schedule('actions', function () {\n        (0, _adapter.asyncEnd)();\n        callback(promise);\n      });\n    } else {\n      _emberMetal.run.backburner.schedule('actions', function () {\n        return callback(promise);\n      });\n    }\n  });\n\n  exports.default = _emberRuntime.RSVP;\n});","enifed('ember-testing/helpers', ['ember-testing/test/helpers', 'ember-testing/helpers/and_then', 'ember-testing/helpers/click', 'ember-testing/helpers/current_path', 'ember-testing/helpers/current_route_name', 'ember-testing/helpers/current_url', 'ember-testing/helpers/fill_in', 'ember-testing/helpers/find', 'ember-testing/helpers/find_with_assert', 'ember-testing/helpers/key_event', 'ember-testing/helpers/pause_test', 'ember-testing/helpers/trigger_event', 'ember-testing/helpers/visit', 'ember-testing/helpers/wait'], function (_helpers, _and_then, _click, _current_path, _current_route_name, _current_url, _fill_in, _find, _find_with_assert, _key_event, _pause_test, _trigger_event, _visit, _wait) {\n  'use strict';\n\n  (0, _helpers.registerAsyncHelper)('visit', _visit.default);\n  (0, _helpers.registerAsyncHelper)('click', _click.default);\n  (0, _helpers.registerAsyncHelper)('keyEvent', _key_event.default);\n  (0, _helpers.registerAsyncHelper)('fillIn', _fill_in.default);\n  (0, _helpers.registerAsyncHelper)('wait', _wait.default);\n  (0, _helpers.registerAsyncHelper)('andThen', _and_then.default);\n  (0, _helpers.registerAsyncHelper)('pauseTest', _pause_test.pauseTest);\n  (0, _helpers.registerAsyncHelper)('triggerEvent', _trigger_event.default);\n\n  (0, _helpers.registerHelper)('find', _find.default);\n  (0, _helpers.registerHelper)('findWithAssert', _find_with_assert.default);\n  (0, _helpers.registerHelper)('currentRouteName', _current_route_name.default);\n  (0, _helpers.registerHelper)('currentPath', _current_path.default);\n  (0, _helpers.registerHelper)('currentURL', _current_url.default);\n  (0, _helpers.registerHelper)('resumeTest', _pause_test.resumeTest);\n});","enifed(\"ember-testing/helpers/and_then\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.default = andThen;\n  function andThen(app, callback) {\n    return app.testHelpers.wait(callback(app));\n  }\n});","enifed('ember-testing/helpers/click', ['exports', 'ember-testing/events'], function (exports, _events) {\n  'use strict';\n\n  exports.default = click;\n\n\n  /**\n    Clicks an element and triggers any actions triggered by the element's `click`\n    event.\n  \n    Example:\n  \n    ```javascript\n    click('.some-jQuery-selector').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method click\n    @param {String} selector jQuery selector for finding element on the DOM\n    @param {Object} context A DOM Element, Document, or jQuery to use as context\n    @return {RSVP.Promise<undefined>}\n    @public\n  */\n  function click(app, selector, context) {\n    var $el = app.testHelpers.findWithAssert(selector, context);\n    var el = $el[0];\n\n    (0, _events.fireEvent)(el, 'mousedown');\n\n    (0, _events.focus)(el);\n\n    (0, _events.fireEvent)(el, 'mouseup');\n    (0, _events.fireEvent)(el, 'click');\n\n    return app.testHelpers.wait();\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/current_path', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = currentPath;\n\n\n  /**\n    Returns the current path.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentPath\n  @return {Object} The currently active path.\n  @since 1.5.0\n  @public\n  */\n  function currentPath(app) {\n    var routingService = app.__container__.lookup('service:-routing');\n    return (0, _emberMetal.get)(routingService, 'currentPath');\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/current_route_name', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = currentRouteName;\n\n  /**\n    Returns the currently active route name.\n  \n  Example:\n  \n  ```javascript\n  function validateRouteName() {\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n  }\n  visit('/some/path').then(validateRouteName)\n  ```\n  \n  @method currentRouteName\n  @return {Object} The name of the currently active route.\n  @since 1.5.0\n  @public\n  */\n  function currentRouteName(app) {\n    var routingService = app.__container__.lookup('service:-routing');\n    return (0, _emberMetal.get)(routingService, 'currentRouteName');\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/current_url', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = currentURL;\n\n\n  /**\n    Returns the current URL.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentURL\n  @return {Object} The currently active URL.\n  @since 1.5.0\n  @public\n  */\n  function currentURL(app) {\n    var router = app.__container__.lookup('router:main');\n    return (0, _emberMetal.get)(router, 'location').getURL();\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/fill_in', ['exports', 'ember-testing/events'], function (exports, _events) {\n  'use strict';\n\n  exports.default = fillIn;\n\n\n  /**\n    Fills in an input element with some text.\n  \n    Example:\n  \n    ```javascript\n    fillIn('#email', 'you@example.com').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method fillIn\n    @param {String} selector jQuery selector finding an input element on the DOM\n    to fill text with\n    @param {String} text text to place inside the input element\n    @return {RSVP.Promise<undefined>}\n    @public\n  */\n  function fillIn(app, selector, contextOrText, text) {\n    var $el = void 0,\n        el = void 0,\n        context = void 0;\n    if (text === undefined) {\n      text = contextOrText;\n    } else {\n      context = contextOrText;\n    }\n    $el = app.testHelpers.findWithAssert(selector, context);\n    el = $el[0];\n    (0, _events.focus)(el);\n\n    $el.eq(0).val(text);\n    (0, _events.fireEvent)(el, 'input');\n    (0, _events.fireEvent)(el, 'change');\n\n    return app.testHelpers.wait();\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/find', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = find;\n\n\n  /**\n    Finds an element in the context of the app's container element. A simple alias\n    for `app.$(selector)`.\n  \n    Example:\n  \n    ```javascript\n    var $el = find('.my-selector');\n    ```\n  \n    With the `context` param:\n  \n    ```javascript\n    var $el = find('.my-selector', '.parent-element-class');\n    ```\n  \n    @method find\n    @param {String} selector jQuery string selector for element lookup\n    @param {String} [context] (optional) jQuery selector that will limit the selector\n                              argument to find only within the context's children\n    @return {Object} jQuery object representing the results of the query\n    @public\n  */\n  function find(app, selector, context) {\n    var $el = void 0;\n    context = context || (0, _emberMetal.get)(app, 'rootElement');\n    $el = app.$(selector, context);\n    return $el;\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/find_with_assert', ['exports'], function (exports) {\n  'use strict';\n\n  exports.default = findWithAssert;\n  /**\n  @module ember\n  */\n  /**\n    Like `find`, but throws an error if the element selector returns no results.\n  \n    Example:\n  \n    ```javascript\n    var $el = findWithAssert('.doesnt-exist'); // throws error\n    ```\n  \n    With the `context` param:\n  \n    ```javascript\n    var $el = findWithAssert('.selector-id', '.parent-element-class'); // assert will pass\n    ```\n  \n    @method findWithAssert\n    @param {String} selector jQuery selector string for finding an element within\n    the DOM\n    @param {String} [context] (optional) jQuery selector that will limit the\n    selector argument to find only within the context's children\n    @return {Object} jQuery object representing the results of the query\n    @throws {Error} throws error if jQuery object returned has a length of 0\n    @public\n  */\n  function findWithAssert(app, selector, context) {\n    var $el = app.testHelpers.find(selector, context);\n    if ($el.length === 0) {\n      throw new Error('Element ' + selector + ' not found.');\n    }\n    return $el;\n  }\n});","enifed(\"ember-testing/helpers/key_event\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.default = keyEvent;\n  /**\n  @module ember\n  */\n  /**\n    Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n    Example:\n    ```javascript\n    keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n     // assert something\n    });\n    ```\n    @method keyEvent\n    @param {String} selector jQuery selector for finding element on the DOM\n    @param {String} type the type of key event, e.g. `keypress`, `keydown`, `keyup`\n    @param {Number} keyCode the keyCode of the simulated key event\n    @return {RSVP.Promise<undefined>}\n    @since 1.5.0\n    @public\n  */\n  function keyEvent(app, selector, contextOrType, typeOrKeyCode, keyCode) {\n    var context = void 0,\n        type = void 0;\n\n    if (keyCode === undefined) {\n      context = null;\n      keyCode = typeOrKeyCode;\n      type = contextOrType;\n    } else {\n      context = contextOrType;\n      type = typeOrKeyCode;\n    }\n\n    return app.testHelpers.triggerEvent(selector, context, type, { keyCode: keyCode, which: keyCode });\n  }\n});","enifed('ember-testing/helpers/pause_test', ['exports', 'ember-runtime', 'ember-console', 'ember-debug'], function (exports, _emberRuntime, _emberConsole, _emberDebug) {\n  'use strict';\n\n  exports.resumeTest = resumeTest;\n  exports.pauseTest = pauseTest;\n\n\n  var resume = void 0;\n\n  /**\n   Resumes a test paused by `pauseTest`.\n  \n   @method resumeTest\n   @return {void}\n   @public\n  */\n  /**\n  @module ember\n  */\n  function resumeTest() {\n    (true && !(resume) && (0, _emberDebug.assert)('Testing has not been paused. There is nothing to resume.', resume));\n\n    resume();\n    resume = undefined;\n  }\n\n  /**\n   Pauses the current test - this is useful for debugging while testing or for test-driving.\n   It allows you to inspect the state of your application at any point.\n   Example (The test will pause before clicking the button):\n  \n   ```javascript\n   visit('/')\n   return pauseTest();\n   click('.btn');\n   ```\n  \n   You may want to turn off the timeout before pausing.\n  \n   qunit (as of 2.4.0):\n  \n   ```\n   visit('/');\n   assert.timeout(0);\n   return pauseTest();\n   click('.btn');\n   ```\n  \n   mocha:\n  \n   ```\n   visit('/');\n   this.timeout(0);\n   return pauseTest();\n   click('.btn');\n   ```\n  \n  \n   @since 1.9.0\n   @method pauseTest\n   @return {Object} A promise that will never resolve\n   @public\n  */\n  function pauseTest() {\n    _emberConsole.default.info('Testing paused. Use `resumeTest()` to continue.');\n\n    return new _emberRuntime.RSVP.Promise(function (resolve) {\n      resume = resolve;\n    }, 'TestAdapter paused promise');\n  }\n});","enifed('ember-testing/helpers/trigger_event', ['exports', 'ember-testing/events'], function (exports, _events) {\n  'use strict';\n\n  exports.default = triggerEvent;\n\n  /**\n    Triggers the given DOM event on the element identified by the provided selector.\n    Example:\n    ```javascript\n    triggerEvent('#some-elem-id', 'blur');\n    ```\n    This is actually used internally by the `keyEvent` helper like so:\n    ```javascript\n    triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n    ```\n   @method triggerEvent\n   @param {String} selector jQuery selector for finding element on the DOM\n   @param {String} [context] jQuery selector that will limit the selector\n                             argument to find only within the context's children\n   @param {String} type The event type to be triggered.\n   @param {Object} [options] The options to be passed to jQuery.Event.\n   @return {RSVP.Promise<undefined>}\n   @since 1.5.0\n   @public\n  */\n  function triggerEvent(app, selector, contextOrType, typeOrOptions, possibleOptions) {\n    var arity = arguments.length;\n    var context = void 0,\n        type = void 0,\n        options = void 0;\n\n    if (arity === 3) {\n      // context and options are optional, so this is\n      // app, selector, type\n      context = null;\n      type = contextOrType;\n      options = {};\n    } else if (arity === 4) {\n      // context and options are optional, so this is\n      if (typeof typeOrOptions === 'object') {\n        // either\n        // app, selector, type, options\n        context = null;\n        type = contextOrType;\n        options = typeOrOptions;\n      } else {\n        // or\n        // app, selector, context, type\n        context = contextOrType;\n        type = typeOrOptions;\n        options = {};\n      }\n    } else {\n      context = contextOrType;\n      type = typeOrOptions;\n      options = possibleOptions;\n    }\n\n    var $el = app.testHelpers.findWithAssert(selector, context);\n    var el = $el[0];\n\n    (0, _events.fireEvent)(el, type, options);\n\n    return app.testHelpers.wait();\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/visit', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = visit;\n\n\n  /**\n    Loads a route, sets up any controllers, and renders any templates associated\n    with the route as though a real user had triggered the route change while\n    using your app.\n  \n    Example:\n  \n    ```javascript\n    visit('posts/index').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method visit\n    @param {String} url the name of the route\n    @return {RSVP.Promise<undefined>}\n    @public\n  */\n  function visit(app, url) {\n    var router = app.__container__.lookup('router:main');\n    var shouldHandleURL = false;\n\n    app.boot().then(function () {\n      router.location.setURL(url);\n\n      if (shouldHandleURL) {\n        (0, _emberMetal.run)(app.__deprecatedInstance__, 'handleURL', url);\n      }\n    });\n\n    if (app._readinessDeferrals > 0) {\n      router['initialURL'] = url;\n      (0, _emberMetal.run)(app, 'advanceReadiness');\n      delete router['initialURL'];\n    } else {\n      shouldHandleURL = true;\n    }\n\n    return app.testHelpers.wait();\n  } /**\n    @module ember\n    */\n});","enifed('ember-testing/helpers/wait', ['exports', 'ember-testing/test/waiters', 'ember-runtime', 'ember-metal', 'ember-testing/test/pending_requests'], function (exports, _waiters, _emberRuntime, _emberMetal, _pending_requests) {\n  'use strict';\n\n  exports.default = wait;\n\n\n  /**\n    Causes the run loop to process any pending events. This is used to ensure that\n    any async operations from other helpers (or your assertions) have been processed.\n  \n    This is most often used as the return value for the helper functions (see 'click',\n    'fillIn','visit',etc). However, there is a method to register a test helper which\n    utilizes this method without the need to actually call `wait()` in your helpers.\n  \n    The `wait` helper is built into `registerAsyncHelper` by default. You will not need\n    to `return app.testHelpers.wait();` - the wait behavior is provided for you.\n  \n    Example:\n  \n    ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n  \n    registerAsyncHelper('loginUser', function(app, username, password) {\n      visit('secured/path/here')\n        .fillIn('#username', username)\n        .fillIn('#password', password)\n        .click('.submit');\n    });\n    ```\n  \n    @method wait\n    @param {Object} value The value to be returned.\n    @return {RSVP.Promise<any>} Promise that resolves to the passed value.\n    @public\n    @since 1.0.0\n  */\n  /**\n  @module ember\n  */\n  function wait(app, value) {\n    return new _emberRuntime.RSVP.Promise(function (resolve) {\n      var router = app.__container__.lookup('router:main');\n\n      // Every 10ms, poll for the async thing to have finished\n      var watcher = setInterval(function () {\n        // 1. If the router is loading, keep polling\n        var routerIsLoading = router._routerMicrolib && !!router._routerMicrolib.activeTransition;\n        if (routerIsLoading) {\n          return;\n        }\n\n        // 2. If there are pending Ajax requests, keep polling\n        if ((0, _pending_requests.pendingRequests)()) {\n          return;\n        }\n\n        // 3. If there are scheduled timers or we are inside of a run loop, keep polling\n        if (_emberMetal.run.hasScheduledTimers() || _emberMetal.run.currentRunLoop) {\n          return;\n        }\n\n        if ((0, _waiters.checkWaiters)()) {\n          return;\n        }\n\n        // Stop polling\n        clearInterval(watcher);\n\n        // Synchronously resolve the promise\n        (0, _emberMetal.run)(null, resolve, value);\n      }, 10);\n    });\n  }\n});","enifed('ember-testing/index', ['exports', 'ember-testing/test', 'ember-testing/adapters/adapter', 'ember-testing/setup_for_testing', 'ember-testing/adapters/qunit', 'ember-testing/support', 'ember-testing/ext/application', 'ember-testing/ext/rsvp', 'ember-testing/helpers', 'ember-testing/initializers'], function (exports, _test, _adapter, _setup_for_testing, _qunit) {\n  'use strict';\n\n  exports.QUnitAdapter = exports.setupForTesting = exports.Adapter = exports.Test = undefined;\n  Object.defineProperty(exports, 'Test', {\n    enumerable: true,\n    get: function () {\n      return _test.default;\n    }\n  });\n  Object.defineProperty(exports, 'Adapter', {\n    enumerable: true,\n    get: function () {\n      return _adapter.default;\n    }\n  });\n  Object.defineProperty(exports, 'setupForTesting', {\n    enumerable: true,\n    get: function () {\n      return _setup_for_testing.default;\n    }\n  });\n  Object.defineProperty(exports, 'QUnitAdapter', {\n    enumerable: true,\n    get: function () {\n      return _qunit.default;\n    }\n  });\n});","enifed('ember-testing/initializers', ['ember-runtime'], function (_emberRuntime) {\n  'use strict';\n\n  var name = 'deferReadiness in `testing` mode';\n\n  (0, _emberRuntime.onLoad)('Ember.Application', function (Application) {\n    if (!Application.initializers[name]) {\n      Application.initializer({\n        name: name,\n\n        initialize: function (application) {\n          if (application.testing) {\n            application.deferReadiness();\n          }\n        }\n      });\n    }\n  });\n});","enifed('ember-testing/setup_for_testing', ['exports', 'ember-debug', 'ember-views', 'ember-testing/test/adapter', 'ember-testing/test/pending_requests', 'ember-testing/adapters/adapter', 'ember-testing/adapters/qunit'], function (exports, _emberDebug, _emberViews, _adapter, _pending_requests, _adapter2, _qunit) {\n  'use strict';\n\n  exports.default = setupForTesting;\n\n\n  /**\n    Sets Ember up for testing. This is useful to perform\n    basic setup steps in order to unit test.\n  \n    Use `App.setupForTesting` to perform integration tests (full\n    application testing).\n  \n    @method setupForTesting\n    @namespace Ember\n    @since 1.5.0\n    @private\n  */\n  /* global self */\n\n  function setupForTesting() {\n    (0, _emberDebug.setTesting)(true);\n\n    var adapter = (0, _adapter.getAdapter)();\n    // if adapter is not manually set default to QUnit\n    if (!adapter) {\n      (0, _adapter.setAdapter)(typeof self.QUnit === 'undefined' ? new _adapter2.default() : new _qunit.default());\n    }\n\n    if (_emberViews.jQuery) {\n      (0, _emberViews.jQuery)(document).off('ajaxSend', _pending_requests.incrementPendingRequests);\n      (0, _emberViews.jQuery)(document).off('ajaxComplete', _pending_requests.decrementPendingRequests);\n\n      (0, _pending_requests.clearPendingRequests)();\n\n      (0, _emberViews.jQuery)(document).on('ajaxSend', _pending_requests.incrementPendingRequests);\n      (0, _emberViews.jQuery)(document).on('ajaxComplete', _pending_requests.decrementPendingRequests);\n    }\n  }\n});","enifed('ember-testing/support', ['ember-debug', 'ember-views', 'ember-environment'], function (_emberDebug, _emberViews, _emberEnvironment) {\n  'use strict';\n\n  /**\n    @module ember\n  */\n\n  var $ = _emberViews.jQuery;\n\n  /**\n    This method creates a checkbox and triggers the click event to fire the\n    passed in handler. It is used to correct for a bug in older versions\n    of jQuery (e.g 1.8.3).\n  \n    @private\n    @method testCheckboxClick\n  */\n  function testCheckboxClick(handler) {\n    var input = document.createElement('input');\n    $(input).attr('type', 'checkbox').css({ position: 'absolute', left: '-1000px', top: '-1000px' }).appendTo('body').on('click', handler).trigger('click').remove();\n  }\n\n  if (_emberEnvironment.environment.hasDOM && typeof $ === 'function') {\n    $(function () {\n      /*\n        Determine whether a checkbox checked using jQuery's \"click\" method will have\n        the correct value for its checked property.\n         If we determine that the current jQuery version exhibits this behavior,\n        patch it to work correctly as in the commit for the actual fix:\n        https://github.com/jquery/jquery/commit/1fb2f92.\n      */\n      testCheckboxClick(function () {\n        if (!this.checked && !$.event.special.click) {\n          $.event.special.click = {\n            trigger: function () {\n              if ($.nodeName(this, 'input') && this.type === 'checkbox' && this.click) {\n                this.click();\n                return false;\n              }\n            }\n          };\n        }\n      });\n\n      // Try again to verify that the patch took effect or blow up.\n      testCheckboxClick(function () {\n        (true && (0, _emberDebug.warn)('clicked checkboxes should be checked! the jQuery patch didn\\'t work', this.checked, { id: 'ember-testing.test-checkbox-click' }));\n      });\n    });\n  }\n});","enifed('ember-testing/test', ['exports', 'ember-testing/test/helpers', 'ember-testing/test/on_inject_helpers', 'ember-testing/test/promise', 'ember-testing/test/waiters', 'ember-testing/test/adapter'], function (exports, _helpers, _on_inject_helpers, _promise, _waiters, _adapter) {\n  'use strict';\n\n  /**\n    This is a container for an assortment of testing related functionality:\n  \n    * Choose your default test adapter (for your framework of choice).\n    * Register/Unregister additional test helpers.\n    * Setup callbacks to be fired when the test helpers are injected into\n      your application.\n  \n    @class Test\n    @namespace Ember\n    @public\n  */\n  var Test = {\n    /**\n      Hash containing all known test helpers.\n       @property _helpers\n      @private\n      @since 1.7.0\n    */\n    _helpers: _helpers.helpers,\n\n    registerHelper: _helpers.registerHelper,\n    registerAsyncHelper: _helpers.registerAsyncHelper,\n    unregisterHelper: _helpers.unregisterHelper,\n    onInjectHelpers: _on_inject_helpers.onInjectHelpers,\n    Promise: _promise.default,\n    promise: _promise.promise,\n    resolve: _promise.resolve,\n    registerWaiter: _waiters.registerWaiter,\n    unregisterWaiter: _waiters.unregisterWaiter,\n    checkWaiters: _waiters.checkWaiters\n  };\n\n  /**\n   Used to allow ember-testing to communicate with a specific testing\n   framework.\n  \n   You can manually set it before calling `App.setupForTesting()`.\n  \n   Example:\n  \n   ```javascript\n   Ember.Test.adapter = MyCustomAdapter.create()\n   ```\n  \n   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n  \n   @public\n   @for Ember.Test\n   @property adapter\n   @type {Class} The adapter to be used.\n   @default Ember.Test.QUnitAdapter\n  */\n  /**\n    @module ember\n  */\n  Object.defineProperty(Test, 'adapter', {\n    get: _adapter.getAdapter,\n    set: _adapter.setAdapter\n  });\n\n  exports.default = Test;\n});","enifed('ember-testing/test/adapter', ['exports', 'ember-console', 'ember-metal'], function (exports, _emberConsole, _emberMetal) {\n  'use strict';\n\n  exports.getAdapter = getAdapter;\n  exports.setAdapter = setAdapter;\n  exports.asyncStart = asyncStart;\n  exports.asyncEnd = asyncEnd;\n\n\n  var adapter = void 0;\n  function getAdapter() {\n    return adapter;\n  }\n\n  function setAdapter(value) {\n    adapter = value;\n    if (value && typeof value.exception === 'function') {\n      (0, _emberMetal.setDispatchOverride)(adapterDispatch);\n    } else {\n      (0, _emberMetal.setDispatchOverride)(null);\n    }\n  }\n\n  function asyncStart() {\n    if (adapter) {\n      adapter.asyncStart();\n    }\n  }\n\n  function asyncEnd() {\n    if (adapter) {\n      adapter.asyncEnd();\n    }\n  }\n\n  function adapterDispatch(error) {\n    adapter.exception(error);\n    _emberConsole.default.error(error.stack);\n  }\n});","enifed('ember-testing/test/helpers', ['exports', 'ember-testing/test/promise'], function (exports, _promise) {\n  'use strict';\n\n  exports.helpers = undefined;\n  exports.registerHelper = registerHelper;\n  exports.registerAsyncHelper = registerAsyncHelper;\n  exports.unregisterHelper = unregisterHelper;\n  var helpers = exports.helpers = {};\n  /**\n   @module @ember/test\n  */\n\n  /**\n    `registerHelper` is used to register a test helper that will be injected\n    when `App.injectTestHelpers` is called.\n  \n    The helper method will always be called with the current Application as\n    the first parameter.\n  \n    For example:\n  \n    ```javascript\n    import { registerHelper } from '@ember/test';\n    import { run } from '@ember/runloop';\n  \n    registerHelper('boot', function(app) {\n      run(app, app.advanceReadiness);\n    });\n    ```\n  \n    This helper can later be called without arguments because it will be\n    called with `app` as the first parameter.\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    App = Application.create();\n    App.injectTestHelpers();\n    boot();\n    ```\n  \n    @public\n    @for @ember/test\n    @static\n    @method registerHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @param options {Object}\n  */\n  function registerHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: { wait: false }\n    };\n  }\n\n  /**\n    `registerAsyncHelper` is used to register an async test helper that will be injected\n    when `App.injectTestHelpers` is called.\n  \n    The helper method will always be called with the current Application as\n    the first parameter.\n  \n    For example:\n  \n    ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n    import { run } from '@ember/runloop';\n  \n    registerAsyncHelper('boot', function(app) {\n      run(app, app.advanceReadiness);\n    });\n    ```\n  \n    The advantage of an async helper is that it will not run\n    until the last async helper has completed.  All async helpers\n    after it will wait for it complete before running.\n  \n  \n    For example:\n  \n    ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n  \n    registerAsyncHelper('deletePost', function(app, postId) {\n      click('.delete-' + postId);\n    });\n  \n    // ... in your test\n    visit('/post/2');\n    deletePost(2);\n    visit('/post/3');\n    deletePost(3);\n    ```\n  \n    @public\n    @for @ember/test\n    @method registerAsyncHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @since 1.2.0\n  */\n  function registerAsyncHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: { wait: true }\n    };\n  }\n\n  /**\n    Remove a previously added helper method.\n  \n    Example:\n  \n    ```javascript\n    import { unregisterHelper } from '@ember/test';\n  \n    unregisterHelper('wait');\n    ```\n  \n    @public\n    @method unregisterHelper\n    @static\n    @for @ember/test\n    @param {String} name The helper to remove.\n  */\n  function unregisterHelper(name) {\n    delete helpers[name];\n    delete _promise.default.prototype[name];\n  }\n});","enifed(\"ember-testing/test/on_inject_helpers\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.onInjectHelpers = onInjectHelpers;\n  exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;\n  var callbacks = exports.callbacks = [];\n\n  /**\n    Used to register callbacks to be fired whenever `App.injectTestHelpers`\n    is called.\n  \n    The callback will receive the current application as an argument.\n  \n    Example:\n  \n    ```javascript\n    import $ from 'jquery';\n  \n    Ember.Test.onInjectHelpers(function() {\n      $(document).ajaxSend(function() {\n        Test.pendingRequests++;\n      });\n  \n      $(document).ajaxComplete(function() {\n        Test.pendingRequests--;\n      });\n    });\n    ```\n  \n    @public\n    @for Ember.Test\n    @method onInjectHelpers\n    @param {Function} callback The function to be called.\n  */\n  function onInjectHelpers(callback) {\n    callbacks.push(callback);\n  }\n\n  function invokeInjectHelpersCallbacks(app) {\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](app);\n    }\n  }\n});","enifed(\"ember-testing/test/pending_requests\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.pendingRequests = pendingRequests;\n  exports.clearPendingRequests = clearPendingRequests;\n  exports.incrementPendingRequests = incrementPendingRequests;\n  exports.decrementPendingRequests = decrementPendingRequests;\n  var requests = [];\n\n  function pendingRequests() {\n    return requests.length;\n  }\n\n  function clearPendingRequests() {\n    requests.length = 0;\n  }\n\n  function incrementPendingRequests(_, xhr) {\n    requests.push(xhr);\n  }\n\n  function decrementPendingRequests(_, xhr) {\n    for (var i = 0; i < requests.length; i++) {\n      if (xhr === requests[i]) {\n        requests.splice(i, 1);\n        break;\n      }\n    }\n  }\n});","enifed('ember-testing/test/promise', ['exports', 'ember-babel', 'ember-runtime', 'ember-testing/test/run'], function (exports, _emberBabel, _emberRuntime, _run) {\n  'use strict';\n\n  exports.promise = promise;\n  exports.resolve = resolve;\n  exports.getLastPromise = getLastPromise;\n\n\n  var lastPromise = void 0;\n\n  var TestPromise = function (_RSVP$Promise) {\n    (0, _emberBabel.inherits)(TestPromise, _RSVP$Promise);\n\n    function TestPromise() {\n      (0, _emberBabel.classCallCheck)(this, TestPromise);\n\n      var _this = (0, _emberBabel.possibleConstructorReturn)(this, _RSVP$Promise.apply(this, arguments));\n\n      lastPromise = _this;\n      return _this;\n    }\n\n    TestPromise.prototype.then = function then(_onFulfillment) {\n      var _RSVP$Promise$prototy;\n\n      var onFulfillment = typeof _onFulfillment === 'function' ? function (result) {\n        return isolate(_onFulfillment, result);\n      } : undefined;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_RSVP$Promise$prototy = _RSVP$Promise.prototype.then).call.apply(_RSVP$Promise$prototy, [this, onFulfillment].concat(args));\n    };\n\n    return TestPromise;\n  }(_emberRuntime.RSVP.Promise);\n\n  exports.default = TestPromise;\n\n\n  /**\n    This returns a thenable tailored for testing.  It catches failed\n    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n    callback in the last chained then.\n  \n    This method should be returned by async helpers such as `wait`.\n  \n    @public\n    @for Ember.Test\n    @method promise\n    @param {Function} resolver The function used to resolve the promise.\n    @param {String} label An optional string for identifying the promise.\n  */\n  function promise(resolver, label) {\n    var fullLabel = 'Ember.Test.promise: ' + (label || '<Unknown Promise>');\n    return new TestPromise(resolver, fullLabel);\n  }\n\n  /**\n    Replacement for `Ember.RSVP.resolve`\n    The only difference is this uses\n    an instance of `Ember.Test.Promise`\n  \n    @public\n    @for Ember.Test\n    @method resolve\n    @param {Mixed} The value to resolve\n    @since 1.2.0\n  */\n  function resolve(result, label) {\n    return TestPromise.resolve(result, label);\n  }\n\n  function getLastPromise() {\n    return lastPromise;\n  }\n\n  // This method isolates nested async methods\n  // so that they don't conflict with other last promises.\n  //\n  // 1. Set `Ember.Test.lastPromise` to null\n  // 2. Invoke method\n  // 3. Return the last promise created during method\n  function isolate(onFulfillment, result) {\n    // Reset lastPromise for nested helpers\n    lastPromise = null;\n\n    var value = onFulfillment(result);\n\n    var promise = lastPromise;\n    lastPromise = null;\n\n    // If the method returned a promise\n    // return that promise. If not,\n    // return the last async helper's promise\n    if (value && value instanceof TestPromise || !promise) {\n      return value;\n    } else {\n      return (0, _run.default)(function () {\n        return resolve(promise).then(function () {\n          return value;\n        });\n      });\n    }\n  }\n});","enifed('ember-testing/test/run', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = run;\n  function run(fn) {\n    if (!_emberMetal.run.currentRunLoop) {\n      return (0, _emberMetal.run)(fn);\n    } else {\n      return fn();\n    }\n  }\n});","enifed(\"ember-testing/test/waiters\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.registerWaiter = registerWaiter;\n  exports.unregisterWaiter = unregisterWaiter;\n  exports.checkWaiters = checkWaiters;\n  /**\n   @module @ember/test\n  */\n  var contexts = [];\n  var callbacks = [];\n\n  /**\n     This allows ember-testing to play nicely with other asynchronous\n     events, such as an application that is waiting for a CSS3\n     transition or an IndexDB transaction. The waiter runs periodically\n     after each async helper (i.e. `click`, `andThen`, `visit`, etc) has executed,\n     until the returning result is truthy. After the waiters finish, the next async helper\n     is executed and the process repeats.\n  \n     For example:\n  \n     ```javascript\n     import { registerWaiter } from '@ember/test';\n  \n     registerWaiter(function() {\n       return myPendingTransactions() == 0;\n     });\n     ```\n     The `context` argument allows you to optionally specify the `this`\n     with which your callback will be invoked.\n  \n     For example:\n  \n     ```javascript\n     import { registerWaiter } from '@ember/test';\n  \n     registerWaiter(MyDB, MyDB.hasPendingTransactions);\n     ```\n  \n     @public\n     @for @ember/test\n     @static\n     @method registerWaiter\n     @param {Object} context (optional)\n     @param {Function} callback\n     @since 1.2.0\n  */\n  function registerWaiter(context, callback) {\n    if (arguments.length === 1) {\n      callback = context;\n      context = null;\n    }\n    if (indexOf(context, callback) > -1) {\n      return;\n    }\n    contexts.push(context);\n    callbacks.push(callback);\n  }\n\n  /**\n     `unregisterWaiter` is used to unregister a callback that was\n     registered with `registerWaiter`.\n  \n     @public\n     @for @ember/test\n     @static\n     @method unregisterWaiter\n     @param {Object} context (optional)\n     @param {Function} callback\n     @since 1.2.0\n  */\n  function unregisterWaiter(context, callback) {\n    if (!callbacks.length) {\n      return;\n    }\n    if (arguments.length === 1) {\n      callback = context;\n      context = null;\n    }\n    var i = indexOf(context, callback);\n    if (i === -1) {\n      return;\n    }\n    contexts.splice(i, 1);\n    callbacks.splice(i, 1);\n  }\n\n  /**\n    Iterates through each registered test waiter, and invokes\n    its callback. If any waiter returns false, this method will return\n    true indicating that the waiters have not settled yet.\n  \n    This is generally used internally from the acceptance/integration test\n    infrastructure.\n  \n    @public\n    @for @ember/test\n    @static\n    @method checkWaiters\n  */\n  function checkWaiters() {\n    if (!callbacks.length) {\n      return false;\n    }\n    for (var i = 0; i < callbacks.length; i++) {\n      var context = contexts[i];\n      var callback = callbacks[i];\n      if (!callback.call(context)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function indexOf(context, callback) {\n    for (var i = 0; i < callbacks.length; i++) {\n      if (callbacks[i] === callback && contexts[i] === context) {\n        return i;\n      }\n    }\n    return -1;\n  }\n});","enifed('ember-utils', ['exports'], function (exports) {\n  'use strict';\n\n  /**\n    Strongly hint runtimes to intern the provided string.\n  \n    When do I need to use this function?\n  \n    For the most part, never. Pre-mature optimization is bad, and often the\n    runtime does exactly what you need it to, and more often the trade-off isn't\n    worth it.\n  \n    Why?\n  \n    Runtimes store strings in at least 2 different representations:\n    Ropes and Symbols (interned strings). The Rope provides a memory efficient\n    data-structure for strings created from concatenation or some other string\n    manipulation like splitting.\n  \n    Unfortunately checking equality of different ropes can be quite costly as\n    runtimes must resort to clever string comparison algorithms. These\n    algorithms typically cost in proportion to the length of the string.\n    Luckily, this is where the Symbols (interned strings) shine. As Symbols are\n    unique by their string content, equality checks can be done by pointer\n    comparison.\n  \n    How do I know if my string is a rope or symbol?\n  \n    Typically (warning general sweeping statement, but truthy in runtimes at\n    present) static strings created as part of the JS source are interned.\n    Strings often used for comparisons can be interned at runtime if some\n    criteria are met.  One of these criteria can be the size of the entire rope.\n    For example, in chrome 38 a rope longer then 12 characters will not\n    intern, nor will segments of that rope.\n  \n    Some numbers: http://jsperf.com/eval-vs-keys/8\n  \n    Known Trick™\n  \n    @private\n    @return {String} interned version of the provided string\n  */\n  function intern(str) {\n    var obj = {};\n    obj[str] = 1;\n    for (var key in obj) {\n      if (key === str) {\n        return key;\n      }\n    }\n    return str;\n  }\n\n  /**\n   @module @ember/object\n  */\n\n  /**\n   Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from\n   jQuery master. We'll just bootstrap our own uuid now.\n  \n   @private\n   @return {Number} the uuid\n   */\n  var _uuid = 0;\n\n  /**\n   Generates a universally unique identifier. This method\n   is used internally by Ember for assisting with\n   the generation of GUID's and other unique identifiers.\n  \n   @public\n   @return {Number} [description]\n   */\n  function uuid() {\n    return ++_uuid;\n  }\n\n  /**\n   Prefix used for guids through out Ember.\n   @private\n   @property GUID_PREFIX\n   @for Ember\n   @type String\n   @final\n   */\n  var GUID_PREFIX = 'ember';\n\n  // Used for guid generation...\n  var numberCache = [];\n  var stringCache = {};\n\n  /**\n    A unique key used to assign guids and other private metadata to objects.\n    If you inspect an object in your browser debugger you will often see these.\n    They can be safely ignored.\n  \n    On browsers that support it, these properties are added with enumeration\n    disabled so they won't show up when you iterate over your properties.\n  \n    @private\n    @property GUID_KEY\n    @for Ember\n    @type String\n    @final\n  */\n  var GUID_KEY = intern('__ember' + +new Date());\n\n  var GUID_DESC = {\n    writable: true,\n    configurable: true,\n    enumerable: false,\n    value: null\n  };\n\n  var nullDescriptor = {\n    configurable: true,\n    writable: true,\n    enumerable: false,\n    value: null\n  };\n\n  var GUID_KEY_PROPERTY = {\n    name: GUID_KEY,\n    descriptor: nullDescriptor\n  };\n\n  /**\n    Generates a new guid, optionally saving the guid to the object that you\n    pass in. You will rarely need to use this method. Instead you should\n    call `guidFor(obj)`, which return an existing guid if available.\n  \n    @private\n    @method generateGuid\n    @static\n    @for @ember/object/internals\n    @param {Object} [obj] Object the guid will be used for. If passed in, the guid will\n      be saved on the object and reused whenever you pass the same object\n      again.\n  \n      If no object is passed, just generate a new guid.\n    @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to\n      separate the guid into separate namespaces.\n    @return {String} the guid\n  */\n  function generateGuid(obj) {\n    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GUID_PREFIX;\n\n    var ret = prefix + uuid();\n    if (obj !== undefined && obj !== null) {\n      if (obj[GUID_KEY] === null) {\n        obj[GUID_KEY] = ret;\n      } else {\n        GUID_DESC.value = ret;\n        if (obj.__defineNonEnumerable) {\n          obj.__defineNonEnumerable(GUID_KEY_PROPERTY);\n        } else {\n          Object.defineProperty(obj, GUID_KEY, GUID_DESC);\n        }\n      }\n    }\n    return ret;\n  }\n\n  /**\n    Returns a unique id for the object. If the object does not yet have a guid,\n    one will be assigned to it. You can call this on any object,\n    `EmberObject`-based or not, but be aware that it will add a `_guid`\n    property.\n  \n    You can also use this method on DOM Element objects.\n  \n    @public\n    @static\n    @method guidFor\n    @for @ember/object/internals\n    @param {Object} obj any object, string, number, Element, or primitive\n    @return {String} the unique guid for this instance.\n  */\n  function guidFor(obj) {\n    // special cases where we don't want to add a key to object\n    if (obj === undefined) {\n      return '(undefined)';\n    }\n\n    if (obj === null) {\n      return '(null)';\n    }\n\n    var type = typeof obj;\n    if ((type === 'object' || type === 'function') && obj[GUID_KEY]) {\n      return obj[GUID_KEY];\n    }\n\n    var ret = void 0;\n    // Don't allow prototype changes to String etc. to change the guidFor\n    switch (type) {\n      case 'number':\n        ret = numberCache[obj];\n\n        if (!ret) {\n          ret = numberCache[obj] = 'nu' + obj;\n        }\n\n        return ret;\n\n      case 'string':\n        ret = stringCache[obj];\n\n        if (!ret) {\n          ret = stringCache[obj] = 'st' + uuid();\n        }\n\n        return ret;\n\n      case 'boolean':\n        return obj ? '(true)' : '(false)';\n\n      default:\n        if (obj === Object) {\n          return '(Object)';\n        }\n\n        if (obj === Array) {\n          return '(Array)';\n        }\n\n        return generateGuid(obj);\n    }\n  }\n\n  function symbol(debugName) {\n    // TODO: Investigate using platform symbols, but we do not\n    // want to require non-enumerability for this API, which\n    // would introduce a large cost.\n    var id = GUID_KEY + Math.floor(Math.random() * new Date());\n    return intern('__' + debugName + id + '__');\n  }\n\n  /**\n  @module @ember/application\n  */\n\n  var OWNER = symbol('OWNER');\n\n  /**\n    Framework objects in an Ember application (components, services, routes, etc.)\n    are created via a factory and dependency injection system. Each of these\n    objects is the responsibility of an \"owner\", which handled its\n    instantiation and manages its lifetime.\n  \n    `getOwner` fetches the owner object responsible for an instance. This can\n    be used to lookup or resolve other class instances, or register new factories\n    into the owner.\n  \n    For example, this component dynamically looks up a service based on the\n    `audioType` passed as an attribute:\n  \n    ```app/components/play-audio.js\n    import Component from '@ember/component';\n    import { computed } from '@ember/object';\n    import { getOwner } from '@ember/application';\n  \n    // Usage:\n    //\n    //   {{play-audio audioType=model.audioType audioFile=model.file}}\n    //\n    export default Component.extend({\n      audioService: computed('audioType', function() {\n        let owner = getOwner(this);\n        return owner.lookup(`service:${this.get('audioType')}`);\n      }),\n  \n      click() {\n        let player = this.get('audioService');\n        player.play(this.get('audioFile'));\n      }\n    });\n    ```\n  \n    @method getOwner\n    @static\n    @for @ember/application\n    @param {Object} object An object with an owner.\n    @return {Object} An owner object.\n    @since 2.3.0\n    @public\n  */\n  function getOwner(object) {\n    return object[OWNER];\n  }\n\n  /**\n    `setOwner` forces a new owner on a given object instance. This is primarily\n    useful in some testing cases.\n  \n    @method setOwner\n    @static\n    @for @ember/application\n    @param {Object} object An object instance.\n    @param {Object} object The new owner object of the object instance.\n    @since 2.3.0\n    @public\n  */\n  function setOwner(object, owner) {\n    object[OWNER] = owner;\n  }\n\n  /**\n   @module @ember/polyfills\n  */\n  /**\n    Copy properties from a source object to a target object.\n  \n    ```javascript\n    import { assign } from '@ember/polyfills';\n  \n    var a = { first: 'Yehuda' };\n    var b = { last: 'Katz' };\n    var c = { company: 'Tilde Inc.' };\n    assign(a, b, c); // a === { first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.' }, b === { last: 'Katz' }, c === { company: 'Tilde Inc.' }\n    ```\n  \n    @method assign\n    @for @ember/polyfills\n    @param {Object} original The object to assign into\n    @param {Object} ...args The objects to copy properties from\n    @return {Object}\n    @public\n    @static\n  */\n  function assign(original) {\n    for (var i = 1; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) {\n        continue;\n      }\n\n      var updates = Object.keys(arg);\n\n      for (var _i = 0; _i < updates.length; _i++) {\n        var prop = updates[_i];\n        original[prop] = arg[prop];\n      }\n    }\n\n    return original;\n  }\n\n  var assign$1 = Object.assign || assign;\n\n  // the delete is meant to hint at runtimes that this object should remain in\n  // dictionary mode. This is clearly a runtime specific hack, but currently it\n  // appears worthwhile in some usecases. Please note, these deletes do increase\n  // the cost of creation dramatically over a plain Object.create. And as this\n  // only makes sense for long-lived dictionaries that aren't instantiated often.\n  function makeDictionary(parent) {\n    var dict = Object.create(parent);\n    dict['_dict'] = null;\n    delete dict['_dict'];\n    return dict;\n  }\n\n  var HAS_SUPER_PATTERN = /\\.(_super|call\\(this|apply\\(this)/;\n  var fnToString = Function.prototype.toString;\n\n  var checkHasSuper = function () {\n    var sourceAvailable = fnToString.call(function () {\n      return this;\n    }).indexOf('return this') > -1;\n\n    if (sourceAvailable) {\n      return function checkHasSuper(func) {\n        return HAS_SUPER_PATTERN.test(fnToString.call(func));\n      };\n    }\n\n    return function checkHasSuper() {\n      return true;\n    };\n  }();\n\n  function ROOT() {}\n  ROOT.__hasSuper = false;\n\n  function hasSuper(func) {\n    if (func.__hasSuper === undefined) {\n      func.__hasSuper = checkHasSuper(func);\n    }\n    return func.__hasSuper;\n  }\n\n  /**\n    Wraps the passed function so that `this._super` will point to the superFunc\n    when the function is invoked. This is the primitive we use to implement\n    calls to super.\n  \n    @private\n    @method wrap\n    @for Ember\n    @param {Function} func The function to call\n    @param {Function} superFunc The super function.\n    @return {Function} wrapped function.\n  */\n  function wrap(func, superFunc) {\n    if (!hasSuper(func)) {\n      return func;\n    }\n    // ensure an unwrapped super that calls _super is wrapped with a terminal _super\n    if (!superFunc.wrappedFunction && hasSuper(superFunc)) {\n      return _wrap(func, _wrap(superFunc, ROOT));\n    }\n    return _wrap(func, superFunc);\n  }\n\n  function _wrap(func, superFunc) {\n    function superWrapper() {\n      var orig = this._super;\n      this._super = superFunc;\n      var ret = func.apply(this, arguments);\n      this._super = orig;\n      return ret;\n    }\n\n    superWrapper.wrappedFunction = func;\n    superWrapper.__ember_observes__ = func.__ember_observes__;\n    superWrapper.__ember_observesBefore__ = func.__ember_observesBefore__;\n    superWrapper.__ember_listens__ = func.__ember_listens__;\n\n    return superWrapper;\n  }\n\n  var objectToString = Object.prototype.toString;\n  /**\n   @module @ember/debug\n  */\n  /**\n    Convenience method to inspect an object. This method will attempt to\n    convert the object into a useful string description.\n  \n    It is a pretty simple implementation. If you want something more robust,\n    use something like JSDump: https://github.com/NV/jsDump\n  \n    @method inspect\n    @static\n    @param {Object} obj The object you want to inspect.\n    @return {String} A description of the object\n    @since 1.4.0\n    @private\n  */\n  function inspect(obj) {\n    if (obj === null) {\n      return 'null';\n    }\n    if (obj === undefined) {\n      return 'undefined';\n    }\n    if (Array.isArray(obj)) {\n      return '[' + obj + ']';\n    }\n    // for non objects\n    var type = typeof obj;\n    if (type !== 'object' && type !== 'symbol') {\n      return '' + obj;\n    }\n    // overridden toString\n    if (typeof obj.toString === 'function' && obj.toString !== objectToString) {\n      return obj.toString();\n    }\n\n    // Object.prototype.toString === {}.toString\n    var v = void 0;\n    var ret = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        v = obj[key];\n        if (v === 'toString') {\n          continue;\n        } // ignore useless items\n        if (typeof v === 'function') {\n          v = 'function() { ... }';\n        }\n\n        if (v && typeof v.toString !== 'function') {\n          ret.push(key + ': ' + objectToString.call(v));\n        } else {\n          ret.push(key + ': ' + v);\n        }\n      }\n    }\n    return '{' + ret.join(', ') + '}';\n  }\n\n  function lookupDescriptor(obj, keyName) {\n    var current = obj;\n    while (current) {\n      var descriptor = Object.getOwnPropertyDescriptor(current, keyName);\n\n      if (descriptor) {\n        return descriptor;\n      }\n\n      current = Object.getPrototypeOf(current);\n    }\n\n    return null;\n  }\n\n  /**\n   @param {Object} t target\n   @param {String} m method\n   @param {Array} a args\n   @private\n   */\n  function applyStr(t, m, a) {\n    var l = a && a.length;\n    if (!a || !l) {\n      return t[m]();\n    }\n    switch (l) {\n      case 1:\n        return t[m](a[0]);\n      case 2:\n        return t[m](a[0], a[1]);\n      case 3:\n        return t[m](a[0], a[1], a[2]);\n      case 4:\n        return t[m](a[0], a[1], a[2], a[3]);\n      case 5:\n        return t[m](a[0], a[1], a[2], a[3], a[4]);\n      default:\n        return t[m].apply(t, a);\n    }\n  }\n\n  /**\n    Checks to see if the `methodName` exists on the `obj`.\n  \n    ```javascript\n    let foo = { bar: function() { return 'bar'; }, baz: null };\n  \n    Ember.canInvoke(foo, 'bar'); // true\n    Ember.canInvoke(foo, 'baz'); // false\n    Ember.canInvoke(foo, 'bat'); // false\n    ```\n  \n    @method canInvoke\n    @for Ember\n    @param {Object} obj The object to check for the method\n    @param {String} methodName The method name to check for\n    @return {Boolean}\n    @private\n  */\n  function canInvoke(obj, methodName) {\n    return obj !== null && obj !== undefined && typeof obj[methodName] === 'function';\n  }\n\n  /**\n    @module @ember/utils\n  */\n\n  /**\n    Checks to see if the `methodName` exists on the `obj`,\n    and if it does, invokes it with the arguments passed.\n  \n    ```javascript\n    import { tryInvoke } from '@ember/utils';\n  \n    let d = new Date('03/15/2013');\n  \n    tryInvoke(d, 'getTime');              // 1363320000000\n    tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\n    tryInvoke(d, 'noSuchMethod', [2014]); // undefined\n    ```\n  \n    @method tryInvoke\n    @for @ember/utils\n    @static\n    @param {Object} obj The object to check for the method\n    @param {String} methodName The method name to check for\n    @param {Array} [args] The arguments to pass to the method\n    @return {*} the return value of the invoked method or undefined if it cannot be invoked\n    @public\n  */\n  function tryInvoke(obj, methodName, args) {\n    if (canInvoke(obj, methodName)) {\n      return applyStr(obj, methodName, args);\n    }\n  }\n\n  var isArray = Array.isArray;\n\n  /**\n   @module @ember/array\n  */\n  /**\n   Forces the passed object to be part of an array. If the object is already\n   an array, it will return the object. Otherwise, it will add the object to\n   an array. If obj is `null` or `undefined`, it will return an empty array.\n  \n   ```javascript\n   import { makeArray } from '@ember/array';\n   import ArrayProxy from '@ember/array/proxy';\n  \n   makeArray();            // []\n   makeArray(null);        // []\n   makeArray(undefined);   // []\n   makeArray('lindsay');   // ['lindsay']\n   makeArray([1, 2, 42]);  // [1, 2, 42]\n  \n   let controller = ArrayProxy.create({ content: [] });\n  \n   makeArray(controller) === controller;  // true\n   ```\n  \n   @method makeArray\n   @static\n   @for @ember/array\n   @param {Object} obj the object\n   @return {Array}\n   @private\n   */\n  function makeArray(obj) {\n    if (obj === null || obj === undefined) {\n      return [];\n    }\n    return isArray(obj) ? obj : [obj];\n  }\n\n  var name = symbol('NAME_KEY');\n\n  var objectToString$1 = Object.prototype.toString;\n\n  function isNone(obj) {\n    return obj === null || obj === undefined;\n  }\n\n  /*\n   A `toString` util function that supports objects without a `toString`\n   method, e.g. an object created with `Object.create(null)`.\n  */\n  function toString(obj) {\n    var type = typeof obj;\n    if (type === \"string\") {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      // Reimplement Array.prototype.join according to spec (22.1.3.13)\n      // Changing ToString(element) with this safe version of ToString.\n      var len = obj.length;\n      var r = '';\n\n      for (var k = 0; k < len; k++) {\n        if (k > 0) {\n          r += ',';\n        }\n\n        if (!isNone(obj[k])) {\n          r += toString(obj[k]);\n        }\n      }\n\n      return r;\n    } else if (obj != null && typeof obj.toString === 'function') {\n      return obj.toString();\n    } else {\n      return objectToString$1.call(obj);\n    }\n  }\n\n  var HAS_NATIVE_PROXY = typeof Proxy === 'function';\n\n  /*\n   This package will be eagerly parsed and should have no dependencies on external\n   packages.\n  \n   It is intended to be used to share utility methods that will be needed\n   by every Ember application (and is **not** a dumping ground of useful utilities).\n  \n   Utility methods that are needed in < 80% of cases should be placed\n   elsewhere (so they can be lazily evaluated / parsed).\n  */\n\n  exports.symbol = symbol;\n  exports.getOwner = getOwner;\n  exports.setOwner = setOwner;\n  exports.OWNER = OWNER;\n  exports.assign = assign$1;\n  exports.assignPolyfill = assign;\n  exports.dictionary = makeDictionary;\n  exports.uuid = uuid;\n  exports.GUID_KEY = GUID_KEY;\n  exports.GUID_DESC = GUID_DESC;\n  exports.GUID_KEY_PROPERTY = GUID_KEY_PROPERTY;\n  exports.generateGuid = generateGuid;\n  exports.guidFor = guidFor;\n  exports.intern = intern;\n  exports.checkHasSuper = checkHasSuper;\n  exports.ROOT = ROOT;\n  exports.wrap = wrap;\n  exports.inspect = inspect;\n  exports.lookupDescriptor = lookupDescriptor;\n  exports.canInvoke = canInvoke;\n  exports.tryInvoke = tryInvoke;\n  exports.makeArray = makeArray;\n  exports.applyStr = applyStr;\n  exports.NAME_KEY = name;\n  exports.toString = toString;\n  exports.HAS_NATIVE_PROXY = HAS_NATIVE_PROXY;\n});","enifed('ember-views/compat/attrs', ['exports', 'ember-utils'], function (exports, _emberUtils) {\n  'use strict';\n\n  exports.MUTABLE_CELL = undefined;\n  var MUTABLE_CELL = exports.MUTABLE_CELL = (0, _emberUtils.symbol)('MUTABLE_CELL');\n});","enifed('ember-views/compat/fallback-view-registry', ['exports', 'ember-utils'], function (exports, _emberUtils) {\n  'use strict';\n\n  exports.default = (0, _emberUtils.dictionary)(null);\n});","enifed('ember-views/component_lookup', ['exports', 'ember-debug', 'ember-runtime'], function (exports, _emberDebug, _emberRuntime) {\n  'use strict';\n\n  exports.default = _emberRuntime.Object.extend({\n    componentFor: function (name, owner, options) {\n      (true && !(~name.indexOf('-')) && (0, _emberDebug.assert)('You cannot use \\'' + name + '\\' as a component name. Component names must contain a hyphen.', ~name.indexOf('-')));\n\n      var fullName = 'component:' + name;\n      return owner.factoryFor(fullName, options);\n    },\n    layoutFor: function (name, owner, options) {\n      (true && !(~name.indexOf('-')) && (0, _emberDebug.assert)('You cannot use \\'' + name + '\\' as a component name. Component names must contain a hyphen.', ~name.indexOf('-')));\n\n\n      var templateFullName = 'template:components/' + name;\n      return owner.lookup(templateFullName, options);\n    }\n  });\n});","enifed('ember-views/index', ['exports', 'ember-views/system/jquery', 'ember-views/system/utils', 'ember-views/system/event_dispatcher', 'ember-views/component_lookup', 'ember-views/mixins/text_support', 'ember-views/views/core_view', 'ember-views/mixins/class_names_support', 'ember-views/mixins/child_views_support', 'ember-views/mixins/view_state_support', 'ember-views/mixins/view_support', 'ember-views/mixins/action_support', 'ember-views/compat/attrs', 'ember-views/system/lookup_partial', 'ember-views/utils/lookup-component', 'ember-views/system/action_manager', 'ember-views/compat/fallback-view-registry', 'ember-views/system/ext'], function (exports, _jquery, _utils, _event_dispatcher, _component_lookup, _text_support, _core_view, _class_names_support, _child_views_support, _view_state_support, _view_support, _action_support, _attrs, _lookup_partial, _lookupComponent, _action_manager, _fallbackViewRegistry) {\n  'use strict';\n\n  exports.fallbackViewRegistry = exports.ActionManager = exports.lookupComponent = exports.hasPartial = exports.lookupPartial = exports.MUTABLE_CELL = exports.ActionSupport = exports.ViewMixin = exports.ViewStateSupport = exports.ChildViewsSupport = exports.ClassNamesSupport = exports.CoreView = exports.TextSupport = exports.ComponentLookup = exports.EventDispatcher = exports.constructStyleDeprecationMessage = exports.setViewElement = exports.getViewElement = exports.getViewId = exports.getChildViews = exports.getRootViews = exports.getViewBoundingClientRect = exports.getViewClientRects = exports.getViewBounds = exports.isSimpleClick = exports.jQuery = undefined;\n  Object.defineProperty(exports, 'jQuery', {\n    enumerable: true,\n    get: function () {\n      return _jquery.default;\n    }\n  });\n  Object.defineProperty(exports, 'isSimpleClick', {\n    enumerable: true,\n    get: function () {\n      return _utils.isSimpleClick;\n    }\n  });\n  Object.defineProperty(exports, 'getViewBounds', {\n    enumerable: true,\n    get: function () {\n      return _utils.getViewBounds;\n    }\n  });\n  Object.defineProperty(exports, 'getViewClientRects', {\n    enumerable: true,\n    get: function () {\n      return _utils.getViewClientRects;\n    }\n  });\n  Object.defineProperty(exports, 'getViewBoundingClientRect', {\n    enumerable: true,\n    get: function () {\n      return _utils.getViewBoundingClientRect;\n    }\n  });\n  Object.defineProperty(exports, 'getRootViews', {\n    enumerable: true,\n    get: function () {\n      return _utils.getRootViews;\n    }\n  });\n  Object.defineProperty(exports, 'getChildViews', {\n    enumerable: true,\n    get: function () {\n      return _utils.getChildViews;\n    }\n  });\n  Object.defineProperty(exports, 'getViewId', {\n    enumerable: true,\n    get: function () {\n      return _utils.getViewId;\n    }\n  });\n  Object.defineProperty(exports, 'getViewElement', {\n    enumerable: true,\n    get: function () {\n      return _utils.getViewElement;\n    }\n  });\n  Object.defineProperty(exports, 'setViewElement', {\n    enumerable: true,\n    get: function () {\n      return _utils.setViewElement;\n    }\n  });\n  Object.defineProperty(exports, 'constructStyleDeprecationMessage', {\n    enumerable: true,\n    get: function () {\n      return _utils.constructStyleDeprecationMessage;\n    }\n  });\n  Object.defineProperty(exports, 'EventDispatcher', {\n    enumerable: true,\n    get: function () {\n      return _event_dispatcher.default;\n    }\n  });\n  Object.defineProperty(exports, 'ComponentLookup', {\n    enumerable: true,\n    get: function () {\n      return _component_lookup.default;\n    }\n  });\n  Object.defineProperty(exports, 'TextSupport', {\n    enumerable: true,\n    get: function () {\n      return _text_support.default;\n    }\n  });\n  Object.defineProperty(exports, 'CoreView', {\n    enumerable: true,\n    get: function () {\n      return _core_view.default;\n    }\n  });\n  Object.defineProperty(exports, 'ClassNamesSupport', {\n    enumerable: true,\n    get: function () {\n      return _class_names_support.default;\n    }\n  });\n  Object.defineProperty(exports, 'ChildViewsSupport', {\n    enumerable: true,\n    get: function () {\n      return _child_views_support.default;\n    }\n  });\n  Object.defineProperty(exports, 'ViewStateSupport', {\n    enumerable: true,\n    get: function () {\n      return _view_state_support.default;\n    }\n  });\n  Object.defineProperty(exports, 'ViewMixin', {\n    enumerable: true,\n    get: function () {\n      return _view_support.default;\n    }\n  });\n  Object.defineProperty(exports, 'ActionSupport', {\n    enumerable: true,\n    get: function () {\n      return _action_support.default;\n    }\n  });\n  Object.defineProperty(exports, 'MUTABLE_CELL', {\n    enumerable: true,\n    get: function () {\n      return _attrs.MUTABLE_CELL;\n    }\n  });\n  Object.defineProperty(exports, 'lookupPartial', {\n    enumerable: true,\n    get: function () {\n      return _lookup_partial.default;\n    }\n  });\n  Object.defineProperty(exports, 'hasPartial', {\n    enumerable: true,\n    get: function () {\n      return _lookup_partial.hasPartial;\n    }\n  });\n  Object.defineProperty(exports, 'lookupComponent', {\n    enumerable: true,\n    get: function () {\n      return _lookupComponent.default;\n    }\n  });\n  Object.defineProperty(exports, 'ActionManager', {\n    enumerable: true,\n    get: function () {\n      return _action_manager.default;\n    }\n  });\n  Object.defineProperty(exports, 'fallbackViewRegistry', {\n    enumerable: true,\n    get: function () {\n      return _fallbackViewRegistry.default;\n    }\n  });\n});","enifed('ember-views/mixins/action_support', ['exports', 'ember-utils', 'ember-metal', 'ember-debug', 'ember-views/compat/attrs'], function (exports, _emberUtils, _emberMetal, _emberDebug, _attrs) {\n  'use strict';\n\n  /**\n   @module ember\n  */\n  function validateAction(component, actionName) {\n    if (actionName && actionName[_attrs.MUTABLE_CELL]) {\n      actionName = actionName.value;\n    }\n\n    (true && !((0, _emberMetal.isNone)(actionName) || typeof actionName === 'string' || typeof actionName === 'function') && (0, _emberDebug.assert)('The default action was triggered on the component ' + component.toString() + ', but the action name (' + actionName + ') was not a string.', (0, _emberMetal.isNone)(actionName) || typeof actionName === 'string' || typeof actionName === 'function'));\n\n    return actionName;\n  }\n\n  /**\n   @class ActionSupport\n   @namespace Ember\n   @private\n  */\n  exports.default = _emberMetal.Mixin.create({\n    /**\n      Calls an action passed to a component.\n       For example a component for playing or pausing music may translate click events\n      into action notifications of \"play\" or \"stop\" depending on some internal state\n      of the component:\n       ```app/components/play-button.js\n      import Component from '@ember/component';\n       export default Component.extend({\n        click() {\n          if (this.get('isPlaying')) {\n            this.sendAction('play');\n          } else {\n            this.sendAction('stop');\n          }\n        }\n      });\n      ```\n       The actions \"play\" and \"stop\" must be passed to this `play-button` component:\n       ```handlebars\n      {{! app/templates/application.hbs }}\n      {{play-button play=(action \"musicStarted\") stop=(action \"musicStopped\")}}\n      ```\n       When the component receives a browser `click` event it translate this\n      interaction into application-specific semantics (\"play\" or \"stop\") and\n      calls the specified action.\n       ```app/controller/application.js\n      import Controller from '@ember/controller';\n       export default Controller.extend({\n        actions: {\n          musicStarted() {\n            // called when the play button is clicked\n            // and the music started playing\n          },\n          musicStopped() {\n            // called when the play button is clicked\n            // and the music stopped playing\n          }\n        }\n      });\n      ```\n       If no action is passed to `sendAction` a default name of \"action\"\n      is assumed.\n       ```app/components/next-button.js\n      import Component from '@ember/component';\n       export default Component.extend({\n        click() {\n          this.sendAction();\n        }\n      });\n      ```\n       ```handlebars\n      {{! app/templates/application.hbs }}\n      {{next-button action=(action \"playNextSongInAlbum\")}}\n      ```\n       ```app/controllers/application.js\n      import Controller from '@ember/controller';\n       export default Controller.extend({\n        actions: {\n          playNextSongInAlbum() {\n            ...\n          }\n        }\n      });\n      ```\n       @method sendAction\n      @param [action] {String} the action to call\n      @param [params] {*} arguments for the action\n      @public\n    */\n    sendAction: function (action) {\n      for (var _len = arguments.length, contexts = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        contexts[_key - 1] = arguments[_key];\n      }\n\n      var actionName = void 0;\n\n      // Send the default action\n      if (action === undefined) {\n        action = 'action';\n      }\n      actionName = (0, _emberMetal.get)(this, 'attrs.' + action) || (0, _emberMetal.get)(this, action);\n      actionName = validateAction(this, actionName);\n\n      // If no action name for that action could be found, just abort.\n      if (actionName === undefined) {\n        return;\n      }\n\n      if (typeof actionName === 'function') {\n        actionName.apply(undefined, contexts);\n      } else {\n        this.triggerAction({\n          action: actionName,\n          actionContext: contexts\n        });\n      }\n    },\n    send: function (actionName) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      var action = this.actions && this.actions[actionName];\n\n      if (action) {\n        var shouldBubble = action.apply(this, args) === true;\n        if (!shouldBubble) {\n          return;\n        }\n      }\n\n      var target = (0, _emberMetal.get)(this, 'target');\n      if (target) {\n        (true && !(typeof target.send === 'function') && (0, _emberDebug.assert)('The `target` for ' + this + ' (' + target + ') does not have a `send` method', typeof target.send === 'function'));\n\n        target.send.apply(target, arguments);\n      } else {\n        (true && !(action) && (0, _emberDebug.assert)((0, _emberUtils.inspect)(this) + ' had no action handler for: ' + actionName, action));\n      }\n    }\n  });\n});","enifed('ember-views/mixins/child_views_support', ['exports', 'ember-utils', 'ember-metal', 'ember-views/system/utils'], function (exports, _emberUtils, _emberMetal, _utils) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n    init: function () {\n      this._super.apply(this, arguments);\n      (0, _utils.initChildViews)(this);\n    },\n\n\n    /**\n      Array of child views. You should never edit this array directly.\n       @property childViews\n      @type Array\n      @default []\n      @private\n    */\n    childViews: (0, _emberMetal.descriptor)({\n      configurable: false,\n      enumerable: false,\n      get: function () {\n        return (0, _utils.getChildViews)(this);\n      }\n    }),\n\n    appendChild: function (view) {\n      this.linkChild(view);\n      (0, _utils.addChildView)(this, view);\n    },\n    linkChild: function (instance) {\n      if (!(0, _emberUtils.getOwner)(instance)) {\n        (0, _emberUtils.setOwner)(instance, (0, _emberUtils.getOwner)(this));\n      }\n    }\n  });\n});","enifed('ember-views/mixins/class_names_support', ['exports', 'ember-metal', 'ember-debug'], function (exports, _emberMetal, _emberDebug) {\n  'use strict';\n\n  /**\n  @module ember\n  */\n\n  var EMPTY_ARRAY = Object.freeze([]);\n\n  /**\n    @class ClassNamesSupport\n    @namespace Ember\n    @private\n  */\n  exports.default = _emberMetal.Mixin.create({\n    concatenatedProperties: ['classNames', 'classNameBindings'],\n\n    init: function () {\n      this._super.apply(this, arguments);\n\n      (true && !((0, _emberMetal.descriptorFor)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)) && (0, _emberDebug.assert)('Only arrays are allowed for \\'classNameBindings\\'', (0, _emberMetal.descriptorFor)(this, 'classNameBindings') === undefined && Array.isArray(this.classNameBindings)));\n      (true && !((0, _emberMetal.descriptorFor)(this, 'classNames') === undefined && Array.isArray(this.classNames)) && (0, _emberDebug.assert)('Only arrays of static class strings are allowed for \\'classNames\\'. For dynamic classes, use \\'classNameBindings\\'.', (0, _emberMetal.descriptorFor)(this, 'classNames') === undefined && Array.isArray(this.classNames)));\n    },\n\n\n    /**\n      Standard CSS class names to apply to the view's outer element. This\n      property automatically inherits any class names defined by the view's\n      superclasses as well.\n       @property classNames\n      @type Array\n      @default ['ember-view']\n      @public\n    */\n    classNames: EMPTY_ARRAY,\n\n    /**\n      A list of properties of the view to apply as class names. If the property\n      is a string value, the value of that string will be applied as a class\n      name.\n       ```javascript\n      // Applies the 'high' class to the view element\n      import Component from '@ember/component';\n      Component.extend({\n        classNameBindings: ['priority'],\n        priority: 'high'\n      });\n      ```\n       If the value of the property is a Boolean, the name of that property is\n      added as a dasherized class name.\n       ```javascript\n      // Applies the 'is-urgent' class to the view element\n      import Component from '@ember/component';\n      Component.extend({\n        classNameBindings: ['isUrgent'],\n        isUrgent: true\n      });\n      ```\n       If you would prefer to use a custom value instead of the dasherized\n      property name, you can pass a binding like this:\n       ```javascript\n      // Applies the 'urgent' class to the view element\n      import Component from '@ember/component';\n      Component.extend({\n        classNameBindings: ['isUrgent:urgent'],\n        isUrgent: true\n      });\n      ```\n       This list of properties is inherited from the component's superclasses as well.\n       @property classNameBindings\n      @type Array\n      @default []\n      @public\n    */\n    classNameBindings: EMPTY_ARRAY\n  });\n});","enifed('ember-views/mixins/text_support', ['exports', 'ember-metal', 'ember-runtime'], function (exports, _emberMetal, _emberRuntime) {\n  'use strict';\n\n  /**\n  @module ember\n  */\n\n  var KEY_EVENTS = {\n    13: 'insertNewline',\n    27: 'cancel'\n  };\n\n  /**\n    `TextSupport` is a shared mixin used by both `TextField` and\n    `TextArea`. `TextSupport` adds a number of methods that allow you to\n    specify a controller action to invoke when a certain event is fired on your\n    text field or textarea. The specified controller action would get the current\n    value of the field passed in as the only argument unless the value of\n    the field is empty. In that case, the instance of the field itself is passed\n    in as the only argument.\n  \n    Let's use the pressing of the escape key as an example. If you wanted to\n    invoke a controller action when a user presses the escape key while on your\n    field, you would use the `escape-press` attribute on your field like so:\n  \n    ```handlebars\n      {{! application.hbs}}\n  \n      {{input escape-press='alertUser'}}\n    ```\n  \n    ```javascript\n        import Application from '@ember/application';\n        import Controller from '@ember/controller';\n        App = Application.create();\n  \n        App.ApplicationController = Controller.extend({\n          actions: {\n            alertUser: function ( currentValue ) {\n              alert( 'escape pressed, current value: ' + currentValue );\n            }\n          }\n        });\n    ```\n  \n    The following chart is a visual representation of what takes place when the\n    escape key is pressed in this scenario:\n  \n    ```\n    The Template\n    +---------------------------+\n    |                           |\n    | escape-press='alertUser'  |\n    |                           |          TextSupport Mixin\n    +----+----------------------+          +-------------------------------+\n         |                                 | cancel method                 |\n         |      escape button pressed      |                               |\n         +-------------------------------> | checks for the `escape-press` |\n                                           | attribute and pulls out the   |\n         +-------------------------------+ | `alertUser` value             |\n         |     action name 'alertUser'     +-------------------------------+\n         |     sent to controller\n         v\n    Controller\n    +------------------------------------------ +\n    |                                           |\n    |  actions: {                               |\n    |     alertUser: function( currentValue ){  |\n    |       alert( 'the esc key was pressed!' ) |\n    |     }                                     |\n    |  }                                        |\n    |                                           |\n    +-------------------------------------------+\n    ```\n  \n    Here are the events that we currently support along with the name of the\n    attribute you would need to use on your field. To reiterate, you would use the\n    attribute name like so:\n  \n    ```handlebars\n      {{input attribute-name='controllerAction'}}\n    ```\n  \n    ```\n    +--------------------+----------------+\n    |                    |                |\n    | event              | attribute name |\n    +--------------------+----------------+\n    | new line inserted  | insert-newline |\n    |                    |                |\n    | enter key pressed  | insert-newline |\n    |                    |                |\n    | cancel key pressed | escape-press   |\n    |                    |                |\n    | focusin            | focus-in       |\n    |                    |                |\n    | focusout           | focus-out      |\n    |                    |                |\n    | keypress           | key-press      |\n    |                    |                |\n    | keyup              | key-up         |\n    |                    |                |\n    | keydown            | key-down       |\n    +--------------------+----------------+\n    ```\n  \n    @class TextSupport\n    @namespace Ember\n    @uses Ember.TargetActionSupport\n    @extends Mixin\n    @private\n  */\n  exports.default = _emberMetal.Mixin.create(_emberRuntime.TargetActionSupport, {\n    value: '',\n\n    attributeBindings: ['autocapitalize', 'autocorrect', 'autofocus', 'disabled', 'form', 'maxlength', 'minlength', 'placeholder', 'readonly', 'required', 'selectionDirection', 'spellcheck', 'tabindex', 'title'],\n    placeholder: null,\n    disabled: false,\n    maxlength: null,\n\n    init: function () {\n      this._super.apply(this, arguments);\n      this.on('paste', this, this._elementValueDidChange);\n      this.on('cut', this, this._elementValueDidChange);\n      this.on('input', this, this._elementValueDidChange);\n    },\n\n\n    /**\n      Whether the `keyUp` event that triggers an `action` to be sent continues\n      propagating to other views.\n       By default, when the user presses the return key on their keyboard and\n      the text field has an `action` set, the action will be sent to the view's\n      controller and the key event will stop propagating.\n       If you would like parent views to receive the `keyUp` event even after an\n      action has been dispatched, set `bubbles` to true.\n       @property bubbles\n      @type Boolean\n      @default false\n      @private\n    */\n    bubbles: false,\n\n    interpretKeyEvents: function (event) {\n      var map = KEY_EVENTS;\n      var method = map[event.keyCode];\n\n      this._elementValueDidChange();\n      if (method) {\n        return this[method](event);\n      }\n    },\n    _elementValueDidChange: function () {\n      (0, _emberMetal.set)(this, 'value', this.element.value);\n    },\n    change: function (event) {\n      this._elementValueDidChange(event);\n    },\n\n\n    /**\n      Allows you to specify a controller action to invoke when either the `enter`\n      key is pressed or, in the case of the field being a textarea, when a newline\n      is inserted. To use this method, give your field an `insert-newline`\n      attribute. The value of that attribute should be the name of the action\n      in your controller that you wish to invoke.\n       For an example on how to use the `insert-newline` attribute, please\n      reference the example near the top of this file.\n       @method insertNewline\n      @param {Event} event\n      @private\n    */\n    insertNewline: function (event) {\n      sendAction('enter', this, event);\n      sendAction('insert-newline', this, event);\n    },\n\n\n    /**\n      Allows you to specify a controller action to invoke when the escape button\n      is pressed. To use this method, give your field an `escape-press`\n      attribute. The value of that attribute should be the name of the action\n      in your controller that you wish to invoke.\n       For an example on how to use the `escape-press` attribute, please reference\n      the example near the top of this file.\n       @method cancel\n      @param {Event} event\n      @private\n    */\n    cancel: function (event) {\n      sendAction('escape-press', this, event);\n    },\n\n\n    /**\n      Allows you to specify a controller action to invoke when a field receives\n      focus. To use this method, give your field a `focus-in` attribute. The value\n      of that attribute should be the name of the action in your controller\n      that you wish to invoke.\n       For an example on how to use the `focus-in` attribute, please reference the\n      example near the top of this file.\n       @method focusIn\n      @param {Event} event\n      @private\n    */\n    focusIn: function (event) {\n      sendAction('focus-in', this, event);\n    },\n\n\n    /**\n      Allows you to specify a controller action to invoke when a field loses\n      focus. To use this method, give your field a `focus-out` attribute. The value\n      of that attribute should be the name of the action in your controller\n      that you wish to invoke.\n       For an example on how to use the `focus-out` attribute, please reference the\n      example near the top of this file.\n       @method focusOut\n      @param {Event} event\n      @private\n    */\n    focusOut: function (event) {\n      this._elementValueDidChange(event);\n      sendAction('focus-out', this, event);\n    },\n\n\n    /**\n      Allows you to specify a controller action to invoke when a key is pressed.\n      To use this method, give your field a `key-press` attribute. The value of\n      that attribute should be the name of the action in your controller you\n      that wish to invoke.\n       For an example on how to use the `key-press` attribute, please reference the\n      example near the top of this file.\n       @method keyPress\n      @param {Event} event\n      @private\n    */\n    keyPress: function (event) {\n      sendAction('key-press', this, event);\n    },\n\n\n    /**\n      Allows you to specify a controller action to invoke when a key-up event is\n      fired. To use this method, give your field a `key-up` attribute. The value\n      of that attribute should be the name of the action in your controller\n      that you wish to invoke.\n       For an example on how to use the `key-up` attribute, please reference the\n      example near the top of this file.\n       @method keyUp\n      @param {Event} event\n      @private\n    */\n    keyUp: function (event) {\n      this.interpretKeyEvents(event);\n\n      this.sendAction('key-up', (0, _emberMetal.get)(this, 'value'), event);\n    },\n\n\n    /**\n      Allows you to specify a controller action to invoke when a key-down event is\n      fired. To use this method, give your field a `key-down` attribute. The value\n      of that attribute should be the name of the action in your controller that\n      you wish to invoke.\n       For an example on how to use the `key-down` attribute, please reference the\n      example near the top of this file.\n       @method keyDown\n      @param {Event} event\n      @private\n    */\n    keyDown: function (event) {\n      this.sendAction('key-down', (0, _emberMetal.get)(this, 'value'), event);\n    }\n  });\n\n\n  // In principle, this shouldn't be necessary, but the legacy\n  // sendAction semantics for TextField are different from\n  // the component semantics so this method normalizes them.\n  function sendAction(eventName, view, event) {\n    var action = (0, _emberMetal.get)(view, 'attrs.' + eventName) || (0, _emberMetal.get)(view, eventName);\n    var value = (0, _emberMetal.get)(view, 'value');\n\n    view.sendAction(eventName, value);\n\n    if (action && !(0, _emberMetal.get)(view, 'bubbles')) {\n      event.stopPropagation();\n    }\n  }\n});","enifed('ember-views/mixins/view_state_support', ['exports', 'ember-metal'], function (exports, _emberMetal) {\n  'use strict';\n\n  exports.default = _emberMetal.Mixin.create({\n    _transitionTo: function (state) {\n      var priorState = this._currentState;\n      var currentState = this._currentState = this._states[state];\n      this._state = state;\n\n      if (priorState && priorState.exit) {\n        priorState.exit(this);\n      }\n      if (currentState.enter) {\n        currentState.enter(this);\n      }\n    }\n  });\n});","enifed('ember-views/mixins/view_support', ['exports', 'ember-utils', 'ember-metal', 'ember-debug', 'ember-environment', 'ember-views/system/utils', 'ember-runtime/system/core_object', 'ember-views/system/jquery'], function (exports, _emberUtils, _emberMetal, _emberDebug, _emberEnvironment, _utils, _core_object, _jquery) {\n  'use strict';\n\n  var _Mixin$create;\n\n  function K() {\n    return this;\n  }\n\n  /**\n   @class ViewMixin\n   @namespace Ember\n   @private\n  */\n  exports.default = _emberMetal.Mixin.create((_Mixin$create = {\n    /**\n      A list of properties of the view to apply as attributes. If the property\n      is a string value, the value of that string will be applied as the value\n      for an attribute of the property's name.\n       The following example creates a tag like `<div priority=\"high\" />`.\n       ```app/components/my-component.js\n      import Component from '@ember/component';\n       export default Component.extend({\n        attributeBindings: ['priority'],\n        priority: 'high'\n      });\n      ```\n       If the value of the property is a Boolean, the attribute is treated as\n      an HTML Boolean attribute. It will be present if the property is `true`\n      and omitted if the property is `false`.\n       The following example creates markup like `<div visible />`.\n       ```app/components/my-component.js\n      import Component from '@ember/component';\n       export default Component.extend({\n        attributeBindings: ['visible'],\n        visible: true\n      });\n      ```\n       If you would prefer to use a custom value instead of the property name,\n      you can create the same markup as the last example with a binding like\n      this:\n       ```app/components/my-component.js\n      import Component from '@ember/component';\n       export default Component.extend({\n        attributeBindings: ['isVisible:visible'],\n        isVisible: true\n      });\n      ```\n       This list of attributes is inherited from the component's superclasses,\n      as well.\n       @property attributeBindings\n      @type Array\n      @default []\n      @public\n     */\n    concatenatedProperties: ['attributeBindings']\n\n  }, _Mixin$create[_core_object.POST_INIT] = function () {\n    if (_emberEnvironment.ENV._ENABLE_DID_INIT_ATTRS_SUPPORT === true) {\n      this.trigger('didInitAttrs');\n    }\n    this.trigger('didReceiveAttrs');\n  }, _Mixin$create.nearestOfType = function (klass) {\n    var view = this.parentView;\n    var isOfType = klass instanceof _emberMetal.Mixin ? function (view) {\n      return klass.detect(view);\n    } : function (view) {\n      return klass.detect(view.constructor);\n    };\n\n    while (view) {\n      if (isOfType(view)) {\n        return view;\n      }\n      view = view.parentView;\n    }\n  }, _Mixin$create.nearestWithProperty = function (property) {\n    var view = this.parentView;\n\n    while (view) {\n      if (property in view) {\n        return view;\n      }\n      view = view.parentView;\n    }\n  }, _Mixin$create.rerender = function () {\n    return this._currentState.rerender(this);\n  }, _Mixin$create.element = (0, _emberMetal.descriptor)({\n    configurable: false,\n    enumerable: false,\n    get: function () {\n      return this.renderer.getElement(this);\n    }\n  }), _Mixin$create.$ = function (sel) {\n    (true && !(this.tagName !== '') && (0, _emberDebug.assert)('You cannot access this.$() on a component with `tagName: \\'\\'` specified.', this.tagName !== ''));\n\n    if (this.element) {\n      return sel ? (0, _jquery.default)(sel, this.element) : (0, _jquery.default)(this.element);\n    }\n  }, _Mixin$create.appendTo = function (selector) {\n    var env = this._environment || _emberEnvironment.environment;\n    var target = void 0;\n\n    if (env.hasDOM) {\n      target = typeof selector === 'string' ? document.querySelector(selector) : selector;\n\n      (true && !(target) && (0, _emberDebug.assert)('You tried to append to (' + selector + ') but that isn\\'t in the DOM', target));\n      (true && !(!(0, _utils.matches)(target, '.ember-view')) && (0, _emberDebug.assert)('You cannot append to an existing Ember.View.', !(0, _utils.matches)(target, '.ember-view')));\n      (true && !(function () {\n        var node = target.parentNode;\n        while (node) {\n          if (node.nodeType !== 9 && (0, _utils.matches)(node, '.ember-view')) {\n            return false;\n          }\n\n          node = node.parentNode;\n        }\n\n        return true;\n      }()) && (0, _emberDebug.assert)('You cannot append to an existing Ember.View.', function () {\n        var node = target.parentNode;while (node) {\n          if (node.nodeType !== 9 && (0, _utils.matches)(node, '.ember-view')) {\n            return false;\n          }node = node.parentNode;\n        }return true;\n      }()));\n    } else {\n      target = selector;\n\n      (true && !(typeof target !== 'string') && (0, _emberDebug.assert)('You tried to append to a selector string (' + selector + ') in an environment without jQuery', typeof target !== 'string'));\n      (true && !(typeof selector.appendChild === 'function') && (0, _emberDebug.assert)('You tried to append to a non-Element (' + selector + ') in an environment without jQuery', typeof selector.appendChild === 'function'));\n    }\n\n    this.renderer.appendTo(this, target);\n\n    return this;\n  }, _Mixin$create.append = function () {\n    return this.appendTo(document.body);\n  }, _Mixin$create.elementId = null, _Mixin$create.findElementInParentElement = function (parentElem) {\n    var id = '#' + this.elementId;\n    return (0, _jquery.default)(id)[0] || (0, _jquery.default)(id, parentElem)[0];\n  }, _Mixin$create.willInsertElement = K, _Mixin$create.didInsertElement = K, _Mixin$create.willClearRender = K, _Mixin$create.destroy = function () {\n    this._super.apply(this, arguments);\n    this._currentState.destroy(this);\n  }, _Mixin$create.willDestroyElement = K, _Mixin$create.parentViewDidChange = K, _Mixin$create.tagName = null, _Mixin$create.init = function () {\n    this._super.apply(this, arguments);\n\n    // tslint:disable-next-line:max-line-length\n    (true && !((0, _emberMetal.descriptorFor)(this, 'elementId') === undefined) && (0, _emberDebug.assert)('You cannot use a computed property for the component\\'s `elementId` (' + this + ').', (0, _emberMetal.descriptorFor)(this, 'elementId') === undefined));\n\n    // tslint:disable-next-line:max-line-length\n\n    (true && !((0, _emberMetal.descriptorFor)(this, 'tagName') === undefined) && (0, _emberDebug.assert)('You cannot use a computed property for the component\\'s `tagName` (' + this + ').', (0, _emberMetal.descriptorFor)(this, 'tagName') === undefined));\n\n\n    if (!this.elementId && this.tagName !== '') {\n      this.elementId = (0, _emberUtils.guidFor)(this);\n    }\n\n    if (_emberEnvironment.environment._ENABLE_DID_INIT_ATTRS_SUPPORT) {\n      (true && !(typeof this.didInitAttrs !== 'function') && (0, _emberDebug.deprecate)('[DEPRECATED] didInitAttrs called in ' + this.toString() + '.', typeof this.didInitAttrs !== 'function', {\n        id: 'ember-views.did-init-attrs',\n        until: '3.0.0',\n        url: 'https://emberjs.com/deprecations/v2.x#toc_ember-component-didinitattrs'\n      }));\n    } else {\n      (true && !(typeof this.didInitAttrs !== 'function') && (0, _emberDebug.assert)('didInitAttrs called in ' + this.toString() + ' is no longer supported.', typeof this.didInitAttrs !== 'function'));\n    }\n\n    (true && !(!this.render) && (0, _emberDebug.assert)('Using a custom `.render` function is no longer supported.', !this.render));\n  }, _Mixin$create.__defineNonEnumerable = function (property) {\n    this[property.name] = property.descriptor.value;\n  }, _Mixin$create.handleEvent = function (eventName, evt) {\n    return this._currentState.handleEvent(this, eventName, evt);\n  }, _Mixin$create));\n});","enifed(\"ember-views/system/action_manager\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.default = ActionManager;\n  /**\n  @module ember\n  */\n\n  function ActionManager() {}\n\n  /**\n    Global action id hash.\n  \n    @private\n    @property registeredActions\n    @type Object\n  */\n  ActionManager.registeredActions = {};\n});","enifed('ember-views/system/event_dispatcher', ['exports', 'ember-utils', 'ember-debug', 'ember-metal', 'ember-runtime', 'ember-views/system/jquery', 'ember-views/system/action_manager', 'ember-views/compat/fallback-view-registry'], function (exports, _emberUtils, _emberDebug, _emberMetal, _emberRuntime, _jquery, _action_manager, _fallbackViewRegistry) {\n  'use strict';\n\n  var HAS_JQUERY = _jquery.default !== undefined; /**\n                                                  @module ember\n                                                  */\n\n  var ROOT_ELEMENT_CLASS = 'ember-application';\n  var ROOT_ELEMENT_SELECTOR = '.' + ROOT_ELEMENT_CLASS;\n\n  /**\n    `Ember.EventDispatcher` handles delegating browser events to their\n    corresponding `Ember.Views.` For example, when you click on a view,\n    `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets\n    called.\n  \n    @class EventDispatcher\n    @namespace Ember\n    @private\n    @extends Ember.Object\n  */\n  exports.default = _emberRuntime.Object.extend({\n\n    /**\n      The set of events names (and associated handler function names) to be setup\n      and dispatched by the `EventDispatcher`. Modifications to this list can be done\n      at setup time, generally via the `Application.customEvents` hash.\n       To add new events to be listened to:\n       ```javascript\n      import Application from '@ember/application';\n       let App = Application.create({\n        customEvents: {\n          paste: 'paste'\n        }\n      });\n      ```\n       To prevent default events from being listened to:\n       ```javascript\n      import Application from '@ember/application';\n       let App = Application.create({\n        customEvents: {\n          mouseenter: null,\n          mouseleave: null\n        }\n      });\n      ```\n      @property events\n      @type Object\n      @private\n    */\n    events: {\n      touchstart: 'touchStart',\n      touchmove: 'touchMove',\n      touchend: 'touchEnd',\n      touchcancel: 'touchCancel',\n      keydown: 'keyDown',\n      keyup: 'keyUp',\n      keypress: 'keyPress',\n      mousedown: 'mouseDown',\n      mouseup: 'mouseUp',\n      contextmenu: 'contextMenu',\n      click: 'click',\n      dblclick: 'doubleClick',\n      mousemove: 'mouseMove',\n      focusin: 'focusIn',\n      focusout: 'focusOut',\n      mouseenter: 'mouseEnter',\n      mouseleave: 'mouseLeave',\n      submit: 'submit',\n      input: 'input',\n      change: 'change',\n      dragstart: 'dragStart',\n      drag: 'drag',\n      dragenter: 'dragEnter',\n      dragleave: 'dragLeave',\n      dragover: 'dragOver',\n      drop: 'drop',\n      dragend: 'dragEnd'\n    },\n\n    /**\n      The root DOM element to which event listeners should be attached. Event\n      listeners will be attached to the document unless this is overridden.\n       Can be specified as a DOMElement or a selector string.\n       The default body is a string since this may be evaluated before document.body\n      exists in the DOM.\n       @private\n      @property rootElement\n      @type DOMElement\n      @default 'body'\n    */\n    rootElement: 'body',\n\n    init: function () {\n      var _this = this;\n\n      this._super();\n\n      (true && !(function () {\n        var owner = (0, _emberUtils.getOwner)(_this);\n        var environment = owner.lookup('-environment:main');\n\n        return environment.isInteractive;\n      }()) && (0, _emberDebug.assert)('EventDispatcher should never be instantiated in fastboot mode. Please report this as an Ember bug.', function () {\n        var owner = (0, _emberUtils.getOwner)(_this);var environment = owner.lookup('-environment:main');return environment.isInteractive;\n      }()));\n\n\n      this._eventHandlers = Object.create(null);\n    },\n\n\n    /**\n      Sets up event listeners for standard browser events.\n       This will be called after the browser sends a `DOMContentReady` event. By\n      default, it will set up all of the listeners on the document body. If you\n      would like to register the listeners on a different element, set the event\n      dispatcher's `root` property.\n       @private\n      @method setup\n      @param addedEvents {Object}\n    */\n    setup: function (addedEvents, _rootElement) {\n      var event = void 0,\n          rootElement = void 0;\n      var events = this._finalEvents = (0, _emberUtils.assign)({}, (0, _emberMetal.get)(this, 'events'), addedEvents);\n\n      if (!(0, _emberMetal.isNone)(_rootElement)) {\n        (0, _emberMetal.set)(this, 'rootElement', _rootElement);\n      }\n\n      var rootElementSelector = (0, _emberMetal.get)(this, 'rootElement');\n      if (HAS_JQUERY) {\n        rootElement = (0, _jquery.default)(rootElementSelector);\n        (true && !(!rootElement.is(ROOT_ELEMENT_SELECTOR)) && (0, _emberDebug.assert)('You cannot use the same root element (' + (rootElement.selector || rootElement[0].tagName) + ') multiple times in an Ember.Application', !rootElement.is(ROOT_ELEMENT_SELECTOR)));\n        (true && !(!rootElement.closest(ROOT_ELEMENT_SELECTOR).length) && (0, _emberDebug.assert)('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', !rootElement.closest(ROOT_ELEMENT_SELECTOR).length));\n        (true && !(!rootElement.find(ROOT_ELEMENT_SELECTOR).length) && (0, _emberDebug.assert)('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.find(ROOT_ELEMENT_SELECTOR).length));\n\n\n        rootElement.addClass(ROOT_ELEMENT_CLASS);\n\n        if (!rootElement.is(ROOT_ELEMENT_SELECTOR)) {\n          throw new TypeError('Unable to add \\'' + ROOT_ELEMENT_CLASS + '\\' class to root element (' + (rootElement.selector || rootElement[0].tagName) + '). Make sure you set rootElement to the body or an element in the body.');\n        }\n      } else {\n        if (typeof rootElementSelector !== 'string') {\n          rootElement = rootElementSelector;\n        } else {\n          rootElement = document.querySelector(rootElementSelector);\n        }\n\n        (true && !(!rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _emberDebug.assert)('You cannot use the same root element (' + ((0, _emberMetal.get)(this, 'rootElement') || rootElement.tagName) + ') multiple times in an Ember.Application', !rootElement.classList.contains(ROOT_ELEMENT_CLASS)));\n        (true && !(function () {\n          var target = rootElement.parentNode;\n          do {\n            if (target.classList.contains(ROOT_ELEMENT_CLASS)) {\n              return false;\n            }\n\n            target = target.parentNode;\n          } while (target && target.nodeType === 1);\n\n          return true;\n        }()) && (0, _emberDebug.assert)('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', function () {\n          var target = rootElement.parentNode;do {\n            if (target.classList.contains(ROOT_ELEMENT_CLASS)) {\n              return false;\n            }target = target.parentNode;\n          } while (target && target.nodeType === 1);return true;\n        }()));\n        (true && !(!rootElement.querySelector(ROOT_ELEMENT_SELECTOR)) && (0, _emberDebug.assert)('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.querySelector(ROOT_ELEMENT_SELECTOR)));\n\n\n        rootElement.classList.add(ROOT_ELEMENT_CLASS);\n\n        (true && !(rootElement.classList.contains(ROOT_ELEMENT_CLASS)) && (0, _emberDebug.assert)('Unable to add \\'' + ROOT_ELEMENT_CLASS + '\\' class to root element (' + ((0, _emberMetal.get)(this, 'rootElement') || rootElement.tagName) + '). Make sure you set rootElement to the body or an element in the body.', rootElement.classList.contains(ROOT_ELEMENT_CLASS)));\n      }\n\n      var viewRegistry = this._getViewRegistry();\n\n      for (event in events) {\n        if (events.hasOwnProperty(event)) {\n          this.setupHandler(rootElement, event, events[event], viewRegistry);\n        }\n      }\n    },\n\n\n    /**\n      Registers an event listener on the rootElement. If the given event is\n      triggered, the provided event handler will be triggered on the target view.\n       If the target view does not implement the event handler, or if the handler\n      returns `false`, the parent view will be called. The event will continue to\n      bubble to each successive parent view until it reaches the top.\n       @private\n      @method setupHandler\n      @param {Element} rootElement\n      @param {String} event the browser-originated event to listen to\n      @param {String} eventName the name of the method to call on the view\n      @param {Object} viewRegistry\n    */\n    setupHandler: function (rootElement, event, eventName, viewRegistry) {\n      if (eventName === null) {\n        return;\n      }\n\n      if (HAS_JQUERY) {\n        rootElement.on(event + '.ember', '.ember-view', function (evt) {\n          var view = viewRegistry[this.id];\n          var result = true;\n\n          if (view) {\n            result = view.handleEvent(eventName, evt);\n          }\n\n          return result;\n        });\n\n        rootElement.on(event + '.ember', '[data-ember-action]', function (evt) {\n          var attributes = evt.currentTarget.attributes;\n          var handledActions = [];\n\n          for (var i = 0; i < attributes.length; i++) {\n            var attr = attributes.item(i);\n            var attrName = attr.name;\n\n            if (attrName.lastIndexOf('data-ember-action-', 0) !== -1) {\n              var action = _action_manager.default.registeredActions[attr.value];\n\n              // We have to check for action here since in some cases, jQuery will trigger\n              // an event on `removeChild` (i.e. focusout) after we've already torn down the\n              // action handlers for the view.\n              if (action && action.eventName === eventName && handledActions.indexOf(action) === -1) {\n                action.handler(evt);\n                // Action handlers can mutate state which in turn creates new attributes on the element.\n                // This effect could cause the `data-ember-action` attribute to shift down and be invoked twice.\n                // To avoid this, we keep track of which actions have been handled.\n                handledActions.push(action);\n              }\n            }\n          }\n        });\n      } else {\n        var viewHandler = function (target, event) {\n          var view = viewRegistry[target.id];\n          var result = true;\n\n          if (view) {\n            result = view.handleEvent(eventName, event);\n          }\n\n          return result;\n        };\n\n        var actionHandler = function (target, event) {\n          var actionId = target.getAttribute('data-ember-action');\n          var actions = _action_manager.default.registeredActions[actionId];\n\n          // In Glimmer2 this attribute is set to an empty string and an additional\n          // attribute it set for each action on a given element. In this case, the\n          // attributes need to be read so that a proper set of action handlers can\n          // be coalesced.\n          if (actionId === '') {\n            var attributes = target.attributes;\n            var attributeCount = attributes.length;\n\n            actions = [];\n\n            for (var i = 0; i < attributeCount; i++) {\n              var attr = attributes.item(i);\n              var attrName = attr.name;\n\n              if (attrName.indexOf('data-ember-action-') === 0) {\n                actions = actions.concat(_action_manager.default.registeredActions[attr.value]);\n              }\n            }\n          }\n\n          // We have to check for actions here since in some cases, jQuery will trigger\n          // an event on `removeChild` (i.e. focusout) after we've already torn down the\n          // action handlers for the view.\n          if (!actions) {\n            return;\n          }\n\n          for (var index = 0; index < actions.length; index++) {\n            var action = actions[index];\n\n            if (action && action.eventName === eventName) {\n              return action.handler(event);\n            }\n          }\n        };\n\n        var handleEvent = this._eventHandlers[event] = function (event) {\n          var target = event.target;\n\n          do {\n            if (viewRegistry[target.id]) {\n              if (viewHandler(target, event) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n              }\n            } else if (target.hasAttribute('data-ember-action')) {\n              actionHandler(target, event);\n              break;\n            }\n\n            target = target.parentNode;\n          } while (target && target.nodeType === 1);\n        };\n\n        rootElement.addEventListener(event, handleEvent);\n      }\n    },\n    _getViewRegistry: function () {\n      var owner = (0, _emberUtils.getOwner)(this);\n      var viewRegistry = owner && owner.lookup('-view-registry:main') || _fallbackViewRegistry.default;\n\n      return viewRegistry;\n    },\n    destroy: function () {\n      var rootElementSelector = (0, _emberMetal.get)(this, 'rootElement');\n      var rootElement = void 0;\n      if (rootElementSelector.nodeType) {\n        rootElement = rootElementSelector;\n      } else {\n        rootElement = document.querySelector(rootElementSelector);\n      }\n\n      if (!rootElement) {\n        return;\n      }\n\n      if (HAS_JQUERY) {\n        (0, _jquery.default)(rootElementSelector).off('.ember', '**');\n      } else {\n        for (var event in this._eventHandlers) {\n          rootElement.removeEventListener(event, this._eventHandlers[event]);\n        }\n      }\n\n      rootElement.classList.remove(ROOT_ELEMENT_CLASS);\n\n      return this._super.apply(this, arguments);\n    },\n    toString: function () {\n      return '(EventDispatcher)';\n    }\n  });\n});","enifed('ember-views/system/ext', ['ember-metal'], function (_emberMetal) {\n  'use strict';\n\n  // Add a new named queue for rendering views that happens\n  // after bindings have synced, and a queue for scheduling actions\n  // that should occur after view rendering.\n  _emberMetal.run._addQueue('render', 'actions');\n  _emberMetal.run._addQueue('afterRender', 'render');\n});","enifed('ember-views/system/jquery', ['exports', 'ember-environment'], function (exports, _emberEnvironment) {\n  'use strict';\n\n  var jQuery = void 0;\n\n  if (_emberEnvironment.environment.hasDOM) {\n    jQuery = _emberEnvironment.context.imports.jQuery;\n\n    if (jQuery) {\n      if (jQuery.event.addProp) {\n        jQuery.event.addProp('dataTransfer');\n      } else {\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dndevents\n        ['dragstart', 'drag', 'dragenter', 'dragleave', 'dragover', 'drop', 'dragend'].forEach(function (eventName) {\n          jQuery.event.fixHooks[eventName] = {\n            props: ['dataTransfer']\n          };\n        });\n      }\n    }\n  }\n\n  exports.default = jQuery;\n});","enifed('ember-views/system/lookup_partial', ['exports', 'ember-debug'], function (exports, _emberDebug) {\n  'use strict';\n\n  exports.default = lookupPartial;\n  exports.hasPartial = hasPartial;\n\n\n  function parseUnderscoredName(templateName) {\n    var nameParts = templateName.split('/');\n    var lastPart = nameParts[nameParts.length - 1];\n\n    nameParts[nameParts.length - 1] = '_' + lastPart;\n\n    return nameParts.join('/');\n  }\n\n  function lookupPartial(templateName, owner) {\n    if (templateName == null) {\n      return;\n    }\n\n    var template = templateFor(owner, parseUnderscoredName(templateName), templateName);\n\n    (true && !(!!template) && (0, _emberDebug.assert)('Unable to find partial with name \"' + templateName + '\"', !!template));\n\n\n    return template;\n  }\n\n  function hasPartial(name, owner) {\n    if (!owner) {\n      throw new _emberDebug.Error('Container was not found when looking up a views template. ' + 'This is most likely due to manually instantiating an Ember.View. ' + 'See: http://git.io/EKPpnA');\n    }\n\n    return owner.hasRegistration('template:' + parseUnderscoredName(name)) || owner.hasRegistration('template:' + name);\n  }\n\n  function templateFor(owner, underscored, name) {\n    if (!name) {\n      return;\n    }\n    (true && !(name.indexOf('.') === -1) && (0, _emberDebug.assert)('templateNames are not allowed to contain periods: ' + name, name.indexOf('.') === -1));\n\n\n    if (!owner) {\n      throw new _emberDebug.Error('Container was not found when looking up a views template. ' + 'This is most likely due to manually instantiating an Ember.View. ' + 'See: http://git.io/EKPpnA');\n    }\n\n    return owner.lookup('template:' + underscored) || owner.lookup('template:' + name);\n  }\n});","enifed('ember-views/system/utils', ['exports', 'ember-utils'], function (exports, _emberUtils) {\n  'use strict';\n\n  exports.elMatches = undefined;\n  exports.isSimpleClick = isSimpleClick;\n  exports.constructStyleDeprecationMessage = constructStyleDeprecationMessage;\n  exports.getRootViews = getRootViews;\n  exports.getViewId = getViewId;\n  exports.getViewElement = getViewElement;\n  exports.initViewElement = initViewElement;\n  exports.setViewElement = setViewElement;\n  exports.getChildViews = getChildViews;\n  exports.initChildViews = initChildViews;\n  exports.addChildView = addChildView;\n  exports.collectChildViews = collectChildViews;\n  exports.getViewBounds = getViewBounds;\n  exports.getViewRange = getViewRange;\n  exports.getViewClientRects = getViewClientRects;\n  exports.getViewBoundingClientRect = getViewBoundingClientRect;\n  exports.matches = matches;\n\n\n  /**\n  @module ember\n  */\n\n  function isSimpleClick(event) {\n    var modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;\n    var secondaryClick = event.which > 1; // IE9 may return undefined\n\n    return !modifier && !secondaryClick;\n  } /* globals Element */\n  function constructStyleDeprecationMessage(affectedStyle) {\n    return '' + 'Binding style attributes may introduce cross-site scripting vulnerabilities; ' + 'please ensure that values being bound are properly escaped. For more information, ' + 'including how to disable this warning, see ' + 'https://emberjs.com/deprecations/v1.x/#toc_binding-style-attributes. ' + 'Style affected: \"' + affectedStyle + '\"';\n  }\n\n  /**\n    @private\n    @method getRootViews\n    @param {Object} owner\n  */\n  function getRootViews(owner) {\n    var registry = owner.lookup('-view-registry:main');\n\n    var rootViews = [];\n\n    Object.keys(registry).forEach(function (id) {\n      var view = registry[id];\n\n      if (view.parentView === null) {\n        rootViews.push(view);\n      }\n    });\n\n    return rootViews;\n  }\n\n  /**\n    @private\n    @method getViewId\n    @param {Ember.View} view\n   */\n  function getViewId(view) {\n    if (view.tagName === '') {\n      return (0, _emberUtils.guidFor)(view);\n    } else {\n      return view.elementId || (0, _emberUtils.guidFor)(view);\n    }\n  }\n\n  var VIEW_ELEMENT = (0, _emberUtils.symbol)('VIEW_ELEMENT');\n\n  /**\n    @private\n    @method getViewElement\n    @param {Ember.View} view\n   */\n  function getViewElement(view) {\n    return view[VIEW_ELEMENT];\n  }\n\n  function initViewElement(view) {\n    view[VIEW_ELEMENT] = null;\n  }\n\n  function setViewElement(view, element) {\n    return view[VIEW_ELEMENT] = element;\n  }\n\n  var CHILD_VIEW_IDS = (0, _emberUtils.symbol)('CHILD_VIEW_IDS');\n\n  /**\n    @private\n    @method getChildViews\n    @param {Ember.View} view\n  */\n  function getChildViews(view) {\n    var owner = (0, _emberUtils.getOwner)(view);\n    var registry = owner.lookup('-view-registry:main');\n    return collectChildViews(view, registry);\n  }\n\n  function initChildViews(view) {\n    view[CHILD_VIEW_IDS] = [];\n  }\n\n  function addChildView(parent, child) {\n    parent[CHILD_VIEW_IDS].push(getViewId(child));\n  }\n\n  function collectChildViews(view, registry) {\n    var ids = [];\n    var views = [];\n\n    view[CHILD_VIEW_IDS].forEach(function (id) {\n      var view = registry[id];\n\n      if (view && !view.isDestroying && !view.isDestroyed && ids.indexOf(id) === -1) {\n        ids.push(id);\n        views.push(view);\n      }\n    });\n\n    view[CHILD_VIEW_IDS] = ids;\n\n    return views;\n  }\n\n  /**\n    @private\n    @method getViewBounds\n    @param {Ember.View} view\n  */\n  function getViewBounds(view) {\n    return view.renderer.getBounds(view);\n  }\n\n  /**\n    @private\n    @method getViewRange\n    @param {Ember.View} view\n  */\n  function getViewRange(view) {\n    var bounds = getViewBounds(view);\n\n    var range = document.createRange();\n    range.setStartBefore(bounds.firstNode);\n    range.setEndAfter(bounds.lastNode);\n\n    return range;\n  }\n\n  /**\n    `getViewClientRects` provides information about the position of the border\n    box edges of a view relative to the viewport.\n  \n    It is only intended to be used by development tools like the Ember Inspector\n    and may not work on older browsers.\n  \n    @private\n    @method getViewClientRects\n    @param {Ember.View} view\n  */\n  function getViewClientRects(view) {\n    var range = getViewRange(view);\n    return range.getClientRects();\n  }\n\n  /**\n    `getViewBoundingClientRect` provides information about the position of the\n    bounding border box edges of a view relative to the viewport.\n  \n    It is only intended to be used by development tools like the Ember Inspector\n    and may not work on older browsers.\n  \n    @private\n    @method getViewBoundingClientRect\n    @param {Ember.View} view\n  */\n  function getViewBoundingClientRect(view) {\n    var range = getViewRange(view);\n    return range.getBoundingClientRect();\n  }\n\n  /**\n    Determines if the element matches the specified selector.\n  \n    @private\n    @method matches\n    @param {DOMElement} el\n    @param {String} selector\n  */\n  var elMatches = exports.elMatches = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector);\n\n  function matches(el, selector) {\n    return elMatches.call(el, selector);\n  }\n});","enifed('ember-views/utils/lookup-component', ['exports', 'ember-babel', 'container', 'ember/features'], function (exports, _emberBabel, _container, _features) {\n  'use strict';\n\n  exports.default = lookupComponent;\n\n  var _templateObject = (0, _emberBabel.taggedTemplateLiteralLoose)(['component:-default'], ['component:-default']);\n\n  function lookupModuleUnificationComponentPair(componentLookup, owner, name, options) {\n    var localComponent = componentLookup.componentFor(name, owner, options);\n    var localLayout = componentLookup.layoutFor(name, owner, options);\n\n    var globalComponent = componentLookup.componentFor(name, owner);\n    var globalLayout = componentLookup.layoutFor(name, owner);\n\n    var localAndUniqueComponent = !!localComponent && (!globalComponent || localComponent.class !== globalComponent.class);\n    var localAndUniqueLayout = !!localLayout && (!globalLayout || localLayout.meta.moduleName !== globalLayout.meta.moduleName);\n\n    if (localAndUniqueComponent && localAndUniqueLayout) {\n      return { layout: localLayout, component: localComponent };\n    }\n\n    if (localAndUniqueComponent && !localAndUniqueLayout) {\n      return { layout: null, component: localComponent };\n    }\n\n    var defaultComponentFactory = null;\n\n    if (!_features.EMBER_GLIMMER_TEMPLATE_ONLY_COMPONENTS) {\n      defaultComponentFactory = owner.factoryFor((0, _container.privatize)(_templateObject));\n    }\n\n    if (!localAndUniqueComponent && localAndUniqueLayout) {\n      return { layout: localLayout, component: defaultComponentFactory };\n    }\n\n    var component = globalComponent || globalLayout && defaultComponentFactory;\n    return { layout: globalLayout, component: component };\n  }\n\n  function lookupComponentPair(componentLookup, owner, name, options) {\n    if (_features.EMBER_MODULE_UNIFICATION) {\n      return lookupModuleUnificationComponentPair(componentLookup, owner, name, options);\n    }\n\n    var component = componentLookup.componentFor(name, owner, options);\n    var layout = componentLookup.layoutFor(name, owner, options);\n\n    var result = { layout: layout, component: component };\n\n    if (!_features.EMBER_GLIMMER_TEMPLATE_ONLY_COMPONENTS && layout && !component) {\n      result.component = owner.factoryFor((0, _container.privatize)(_templateObject));\n    }\n\n    return result;\n  }\n\n  function lookupComponent(owner, name, options) {\n    var componentLookup = owner.lookup('component-lookup:main');\n\n    var source = options && options.source;\n\n    if (source) {\n      var localResult = lookupComponentPair(componentLookup, owner, name, options);\n\n      if (localResult.component || localResult.layout) {\n        return localResult;\n      }\n    }\n\n    return lookupComponentPair(componentLookup, owner, name);\n  }\n});","enifed('ember-views/views/core_view', ['exports', 'ember-runtime', 'ember-views/system/utils', 'ember-views/views/states'], function (exports, _emberRuntime, _utils, _states) {\n  'use strict';\n\n  /**\n    `Ember.CoreView` is an abstract class that exists to give view-like behavior\n    to both Ember's main view class `Component` and other classes that don't need\n    the full functionality of `Component`.\n  \n    Unless you have specific needs for `CoreView`, you will use `Component`\n    in your applications.\n  \n    @class CoreView\n    @namespace Ember\n    @extends EmberObject\n    @deprecated Use `Component` instead.\n    @uses Evented\n    @uses Ember.ActionHandler\n    @private\n  */\n  var CoreView = _emberRuntime.FrameworkObject.extend(_emberRuntime.Evented, _emberRuntime.ActionHandler, {\n    isView: true,\n\n    _states: (0, _states.cloneStates)(_states.states),\n\n    init: function () {\n      this._super.apply(this, arguments);\n      this._state = 'preRender';\n      this._currentState = this._states.preRender;\n\n      (0, _utils.initViewElement)(this);\n\n      if (!this.renderer) {\n        throw new Error('Cannot instantiate a component without a renderer. Please ensure that you are creating ' + this + ' with a proper container/registry.');\n      }\n    },\n\n\n    /**\n      If the view is currently inserted into the DOM of a parent view, this\n      property will point to the parent of the view.\n       @property parentView\n      @type Ember.View\n      @default null\n      @private\n    */\n    parentView: null,\n\n    instrumentDetails: function (hash) {\n      hash.object = this.toString();\n      hash.containerKey = this._debugContainerKey;\n      hash.view = this;\n      return hash;\n    },\n    trigger: function (name) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this._super.apply(this, arguments);\n      var method = this[name];\n      if (typeof method === 'function') {\n        return method.apply(this, args);\n      }\n    },\n    has: function (name) {\n      return typeof this[name] === 'function' || this._super(name);\n    }\n  });\n\n  CoreView.reopenClass({\n    isViewFactory: true\n  });\n\n  exports.default = CoreView;\n});","enifed('ember-views/views/states', ['exports', 'ember-utils', 'ember-views/views/states/default', 'ember-views/views/states/pre_render', 'ember-views/views/states/has_element', 'ember-views/views/states/in_dom', 'ember-views/views/states/destroying'], function (exports, _emberUtils, _default2, _pre_render, _has_element, _in_dom, _destroying) {\n  'use strict';\n\n  exports.states = undefined;\n  exports.cloneStates = cloneStates;\n  function cloneStates(from) {\n    var into = {};\n\n    into._default = {};\n    into.preRender = Object.create(into._default);\n    into.destroying = Object.create(into._default);\n    into.hasElement = Object.create(into._default);\n    into.inDOM = Object.create(into.hasElement);\n\n    for (var stateName in from) {\n      if (!from.hasOwnProperty(stateName)) {\n        continue;\n      }\n      (0, _emberUtils.assign)(into[stateName], from[stateName]);\n    }\n\n    return into;\n  }\n\n  /*\n    Describe how the specified actions should behave in the various\n    states that a view can exist in. Possible states:\n  \n    * preRender: when a view is first instantiated, and after its\n      element was destroyed, it is in the preRender state\n    * hasElement: the DOM representation of the view is created,\n      and is ready to be inserted\n    * inDOM: once a view has been inserted into the DOM it is in\n      the inDOM state. A view spends the vast majority of its\n      existence in this state.\n    * destroyed: once a view has been destroyed (using the destroy\n      method), it is in this state. No further actions can be invoked\n      on a destroyed view.\n  */\n  var states = exports.states = {\n    _default: _default2.default,\n    preRender: _pre_render.default,\n    inDOM: _in_dom.default,\n    hasElement: _has_element.default,\n    destroying: _destroying.default\n  };\n});","enifed('ember-views/views/states/default', ['exports', 'ember-debug'], function (exports, _emberDebug) {\n  'use strict';\n\n  exports.default = {\n    // appendChild is only legal while rendering the buffer.\n    appendChild: function () {\n      throw new _emberDebug.EmberError('You can\\'t use appendChild outside of the rendering process');\n    },\n\n\n    // Handle events from `Ember.EventDispatcher`\n    handleEvent: function () {\n      return true; // continue event propagation\n    },\n    rerender: function () {},\n    destroy: function () {}\n  };\n});","enifed('ember-views/views/states/destroying', ['exports', 'ember-utils', 'ember-debug', 'ember-views/views/states/default'], function (exports, _emberUtils, _emberDebug, _default2) {\n  'use strict';\n\n  var destroying = Object.create(_default2.default);\n\n  (0, _emberUtils.assign)(destroying, {\n    appendChild: function () {\n      throw new _emberDebug.Error('You can\\'t call appendChild on a view being destroyed');\n    },\n    rerender: function () {\n      throw new _emberDebug.Error('You can\\'t call rerender on a view being destroyed');\n    }\n  });\n\n  exports.default = destroying;\n});","enifed('ember-views/views/states/has_element', ['exports', 'ember-utils', 'ember-views/views/states/default', 'ember-metal'], function (exports, _emberUtils, _default2, _emberMetal) {\n  'use strict';\n\n  var hasElement = Object.create(_default2.default);\n\n  (0, _emberUtils.assign)(hasElement, {\n    rerender: function (view) {\n      view.renderer.rerender(view);\n    },\n    destroy: function (view) {\n      view.renderer.remove(view);\n    },\n    handleEvent: function (view, eventName, event) {\n      if (view.has(eventName)) {\n        // Handler should be able to re-dispatch events, so we don't\n        // preventDefault or stopPropagation.\n        return (0, _emberMetal.flaggedInstrument)('interaction.' + eventName, { event: event, view: view }, function () {\n          return _emberMetal.run.join(view, view.trigger, eventName, event);\n        });\n      } else {\n        return true; // continue event propagation\n      }\n    }\n  });\n\n  exports.default = hasElement;\n});","enifed('ember-views/views/states/in_dom', ['exports', 'ember-utils', 'ember-metal', 'ember-debug', 'ember-views/views/states/has_element'], function (exports, _emberUtils, _emberMetal, _emberDebug, _has_element) {\n  'use strict';\n\n  var inDOM = Object.create(_has_element.default);\n\n  (0, _emberUtils.assign)(inDOM, {\n    enter: function (view) {\n      // Register the view for event handling. This hash is used by\n      // Ember.EventDispatcher to dispatch incoming events.\n      view.renderer.register(view);\n\n      if (true) {\n        (0, _emberMetal._addBeforeObserver)(view, 'elementId', function () {\n          throw new _emberDebug.Error('Changing a view\\'s elementId after creation is not allowed');\n        });\n      }\n    },\n    exit: function (view) {\n      view.renderer.unregister(view);\n    }\n  });\n\n  exports.default = inDOM;\n});","enifed('ember-views/views/states/pre_render', ['exports', 'ember-views/views/states/default'], function (exports, _default2) {\n  'use strict';\n\n  exports.default = Object.create(_default2.default);\n});","enifed('ember/features', ['exports', 'ember-environment', 'ember-utils'], function (exports, _emberEnvironment, _emberUtils) {\n    'use strict';\n\n    exports.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER = exports.MANDATORY_SETTER = exports.DESCRIPTOR_TRAP = exports.GLIMMER_CUSTOM_COMPONENT_MANAGER = exports.EMBER_MODULE_UNIFICATION = exports.EMBER_ENGINES_MOUNT_PARAMS = exports.EMBER_ROUTING_ROUTER_SERVICE = exports.EMBER_METAL_ES5_GETTERS = exports.EMBER_GLIMMER_TEMPLATE_ONLY_COMPONENTS = exports.EMBER_GLIMMER_REMOVE_APPLICATION_TEMPLATE_WRAPPER = exports.EMBER_GLIMMER_NAMED_ARGUMENTS = exports.EMBER_IMPROVED_INSTRUMENTATION = exports.EMBER_LIBRARIES_ISREGISTERED = exports.FEATURES_STRIPPED_TEST = exports.FEATURES = exports.DEFAULT_FEATURES = undefined;\n    var DEFAULT_FEATURES = exports.DEFAULT_FEATURES = { \"features-stripped-test\": false, \"ember-libraries-isregistered\": false, \"ember-improved-instrumentation\": false, \"ember-glimmer-named-arguments\": false, \"ember-glimmer-remove-application-template-wrapper\": false, \"ember-glimmer-template-only-components\": false, \"ember-metal-es5-getters\": false, \"ember-routing-router-service\": true, \"ember-engines-mount-params\": true, \"ember-module-unification\": false, \"glimmer-custom-component-manager\": false, \"descriptor-trap\": true, \"mandatory-setter\": true, \"ember-glimmer-detect-backtracking-rerender\": true };\n    var FEATURES = exports.FEATURES = (0, _emberUtils.assign)(DEFAULT_FEATURES, _emberEnvironment.ENV.FEATURES);\n\n    var FEATURES_STRIPPED_TEST = exports.FEATURES_STRIPPED_TEST = FEATURES[\"features-stripped-test\"];\n    var EMBER_LIBRARIES_ISREGISTERED = exports.EMBER_LIBRARIES_ISREGISTERED = FEATURES[\"ember-libraries-isregistered\"];\n    var EMBER_IMPROVED_INSTRUMENTATION = exports.EMBER_IMPROVED_INSTRUMENTATION = FEATURES[\"ember-improved-instrumentation\"];\n    var EMBER_GLIMMER_NAMED_ARGUMENTS = exports.EMBER_GLIMMER_NAMED_ARGUMENTS = FEATURES[\"ember-glimmer-named-arguments\"];\n    var EMBER_GLIMMER_REMOVE_APPLICATION_TEMPLATE_WRAPPER = exports.EMBER_GLIMMER_REMOVE_APPLICATION_TEMPLATE_WRAPPER = FEATURES[\"ember-glimmer-remove-application-template-wrapper\"];\n    var EMBER_GLIMMER_TEMPLATE_ONLY_COMPONENTS = exports.EMBER_GLIMMER_TEMPLATE_ONLY_COMPONENTS = FEATURES[\"ember-glimmer-template-only-components\"];\n    var EMBER_METAL_ES5_GETTERS = exports.EMBER_METAL_ES5_GETTERS = FEATURES[\"ember-metal-es5-getters\"];\n    var EMBER_ROUTING_ROUTER_SERVICE = exports.EMBER_ROUTING_ROUTER_SERVICE = FEATURES[\"ember-routing-router-service\"];\n    var EMBER_ENGINES_MOUNT_PARAMS = exports.EMBER_ENGINES_MOUNT_PARAMS = FEATURES[\"ember-engines-mount-params\"];\n    var EMBER_MODULE_UNIFICATION = exports.EMBER_MODULE_UNIFICATION = FEATURES[\"ember-module-unification\"];\n    var GLIMMER_CUSTOM_COMPONENT_MANAGER = exports.GLIMMER_CUSTOM_COMPONENT_MANAGER = FEATURES[\"glimmer-custom-component-manager\"];\n    var DESCRIPTOR_TRAP = exports.DESCRIPTOR_TRAP = FEATURES[\"descriptor-trap\"];\n    var MANDATORY_SETTER = exports.MANDATORY_SETTER = FEATURES[\"mandatory-setter\"];\n    var EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER = exports.EMBER_GLIMMER_DETECT_BACKTRACKING_RERENDER = FEATURES[\"ember-glimmer-detect-backtracking-rerender\"];\n});","enifed('ember/index', ['exports', 'require', 'ember-environment', 'node-module', 'ember-utils', 'container', 'ember-metal', 'ember/features', 'ember-debug', 'backburner', 'ember-console', 'ember-runtime', 'ember-glimmer', 'ember/version', 'ember-views', 'ember-routing', 'ember-application', 'ember-extension-support'], function (exports, _require2, _emberEnvironment, _nodeModule, _emberUtils, _container, _emberMetal, _features, _emberDebug, _backburner, _emberConsole, _emberRuntime, _emberGlimmer, _version, _emberViews, _emberRouting, _emberApplication, _emberExtensionSupport) {\n  'use strict';\n\n  exports.VERSION = undefined;\n\n\n  // ember-utils exports\n\n\n  // ****ember-metal****\n\n\n  // ****ember-environment****\n  _emberMetal.default.getOwner = _emberUtils.getOwner;\n  _emberMetal.default.setOwner = _emberUtils.setOwner;\n  _emberMetal.default.generateGuid = _emberUtils.generateGuid;\n  _emberMetal.default.GUID_KEY = _emberUtils.GUID_KEY;\n  _emberMetal.default.guidFor = _emberUtils.guidFor;\n  _emberMetal.default.inspect = _emberUtils.inspect;\n  _emberMetal.default.makeArray = _emberUtils.makeArray;\n  _emberMetal.default.canInvoke = _emberUtils.canInvoke;\n  _emberMetal.default.tryInvoke = _emberUtils.tryInvoke;\n  _emberMetal.default.wrap = _emberUtils.wrap;\n  _emberMetal.default.applyStr = _emberUtils.applyStr;\n  _emberMetal.default.uuid = _emberUtils.uuid;\n  _emberMetal.default.assign = _emberUtils.assign;\n\n  // container exports\n  _emberMetal.default.Container = _container.Container;\n  _emberMetal.default.Registry = _container.Registry;\n\n  // need to import this directly, to ensure the babel feature\n  // flag plugin works properly\n\n\n  var computed = _emberMetal.computed;\n  computed.alias = _emberMetal.alias;\n  _emberMetal.default.computed = computed;\n  _emberMetal.default.ComputedProperty = _emberMetal.ComputedProperty;\n  _emberMetal.default.cacheFor = _emberMetal.cacheFor;\n\n  _emberMetal.default.assert = _emberDebug.assert;\n  _emberMetal.default.warn = _emberDebug.warn;\n  _emberMetal.default.debug = _emberDebug.debug;\n  _emberMetal.default.deprecate = _emberDebug.deprecate;\n  _emberMetal.default.deprecateFunc = _emberDebug.deprecateFunc;\n  _emberMetal.default.runInDebug = _emberDebug.runInDebug;\n  /**\n    @public\n    @class Ember.Debug\n  */\n  _emberMetal.default.Debug = {\n    registerDeprecationHandler: _emberDebug.registerDeprecationHandler,\n    registerWarnHandler: _emberDebug.registerWarnHandler\n  };\n  _emberMetal.default.merge = _emberMetal.merge;\n\n  _emberMetal.default.instrument = _emberMetal.instrument;\n  _emberMetal.default.subscribe = _emberMetal.instrumentationSubscribe;\n  _emberMetal.default.Instrumentation = {\n    instrument: _emberMetal.instrument,\n    subscribe: _emberMetal.instrumentationSubscribe,\n    unsubscribe: _emberMetal.instrumentationUnsubscribe,\n    reset: _emberMetal.instrumentationReset\n  };\n\n  _emberMetal.default.Error = _emberDebug.Error;\n  _emberMetal.default.meta = _emberMetal.meta;\n  _emberMetal.default.get = _emberMetal.get;\n  _emberMetal.default.getWithDefault = _emberMetal.getWithDefault;\n  _emberMetal.default._getPath = _emberMetal._getPath;\n  _emberMetal.default.set = _emberMetal.set;\n  _emberMetal.default.trySet = _emberMetal.trySet;\n  _emberMetal.default.FEATURES = _features.FEATURES;\n  _emberMetal.default.FEATURES.isEnabled = _emberDebug.isFeatureEnabled;\n  _emberMetal.default._Cache = _emberMetal.Cache;\n  _emberMetal.default.on = _emberMetal.on;\n  _emberMetal.default.addListener = _emberMetal.addListener;\n  _emberMetal.default.removeListener = _emberMetal.removeListener;\n  _emberMetal.default.sendEvent = _emberMetal.sendEvent;\n  _emberMetal.default.hasListeners = _emberMetal.hasListeners;\n  _emberMetal.default.isNone = _emberMetal.isNone;\n  _emberMetal.default.isEmpty = _emberMetal.isEmpty;\n  _emberMetal.default.isBlank = _emberMetal.isBlank;\n  _emberMetal.default.isPresent = _emberMetal.isPresent;\n  _emberMetal.default.run = _emberMetal.run;\n  _emberMetal.default._ObserverSet = _emberMetal.ObserverSet;\n  _emberMetal.default.propertyWillChange = _emberMetal.propertyWillChange;\n  _emberMetal.default.propertyDidChange = _emberMetal.propertyDidChange;\n  _emberMetal.default.overrideChains = _emberMetal.overrideChains;\n  _emberMetal.default.beginPropertyChanges = _emberMetal.beginPropertyChanges;\n  _emberMetal.default.endPropertyChanges = _emberMetal.endPropertyChanges;\n  _emberMetal.default.changeProperties = _emberMetal.changeProperties;\n  _emberMetal.default.platform = {\n    defineProperty: true,\n    hasPropertyAccessors: true\n  };\n  _emberMetal.default.defineProperty = _emberMetal.defineProperty;\n  _emberMetal.default.watchKey = _emberMetal.watchKey;\n  _emberMetal.default.unwatchKey = _emberMetal.unwatchKey;\n  _emberMetal.default.removeChainWatcher = _emberMetal.removeChainWatcher;\n  _emberMetal.default._ChainNode = _emberMetal.ChainNode;\n  _emberMetal.default.finishChains = _emberMetal.finishChains;\n  _emberMetal.default.watchPath = _emberMetal.watchPath;\n  _emberMetal.default.unwatchPath = _emberMetal.unwatchPath;\n  _emberMetal.default.watch = _emberMetal.watch;\n  _emberMetal.default.isWatching = _emberMetal.isWatching;\n  _emberMetal.default.unwatch = _emberMetal.unwatch;\n  _emberMetal.default.destroy = _emberMetal.deleteMeta;\n  _emberMetal.default.libraries = _emberMetal.libraries;\n  _emberMetal.default.OrderedSet = _emberMetal.OrderedSet;\n  _emberMetal.default.Map = _emberMetal.Map;\n  _emberMetal.default.MapWithDefault = _emberMetal.MapWithDefault;\n  _emberMetal.default.getProperties = _emberMetal.getProperties;\n  _emberMetal.default.setProperties = _emberMetal.setProperties;\n  _emberMetal.default.expandProperties = _emberMetal.expandProperties;\n  _emberMetal.default.NAME_KEY = _emberUtils.NAME_KEY;\n  _emberMetal.default.addObserver = _emberMetal.addObserver;\n  _emberMetal.default.removeObserver = _emberMetal.removeObserver;\n  if (_emberEnvironment.ENV._ENABLE_PROPERTY_REQUIRED_SUPPORT) {\n    _emberMetal.default.required = _emberMetal.required;\n  }\n  _emberMetal.default.aliasMethod = _emberMetal.aliasMethod;\n  _emberMetal.default.observer = _emberMetal.observer;\n  _emberMetal.default.mixin = _emberMetal.mixin;\n  _emberMetal.default.Mixin = _emberMetal.Mixin;\n  _emberMetal.default.bind = _emberMetal.bind;\n  _emberMetal.default.Binding = _emberMetal.Binding;\n\n  Object.defineProperty(_emberMetal.default, 'ENV', {\n    get: function () {\n      return _emberEnvironment.ENV;\n    },\n\n    enumerable: false\n  });\n\n  /**\n   The context that Ember searches for namespace instances on.\n  \n   @private\n   */\n  Object.defineProperty(_emberMetal.default, 'lookup', {\n    get: function () {\n      return _emberEnvironment.context.lookup;\n    },\n    set: function (value) {\n      _emberEnvironment.context.lookup = value;\n    },\n\n    enumerable: false\n  });\n\n  _emberMetal.default.EXTEND_PROTOTYPES = _emberEnvironment.ENV.EXTEND_PROTOTYPES;\n\n  // BACKWARDS COMPAT ACCESSORS FOR ENV FLAGS\n  Object.defineProperty(_emberMetal.default, 'LOG_STACKTRACE_ON_DEPRECATION', {\n    get: function () {\n      return _emberEnvironment.ENV.LOG_STACKTRACE_ON_DEPRECATION;\n    },\n    set: function (value) {\n      _emberEnvironment.ENV.LOG_STACKTRACE_ON_DEPRECATION = !!value;\n    },\n\n    enumerable: false\n  });\n\n  Object.defineProperty(_emberMetal.default, 'LOG_VERSION', {\n    get: function () {\n      return _emberEnvironment.ENV.LOG_VERSION;\n    },\n    set: function (value) {\n      _emberEnvironment.ENV.LOG_VERSION = !!value;\n    },\n\n    enumerable: false\n  });\n\n  if (true) {\n    Object.defineProperty(_emberMetal.default, 'MODEL_FACTORY_INJECTIONS', {\n      get: function () {\n        return false;\n      },\n      set: function () {\n        (true && !(false) && (0, _emberDebug.deprecate)('Ember.MODEL_FACTORY_INJECTIONS is no longer required', false, {\n          id: 'ember-metal.model_factory_injections',\n          until: '2.17.0',\n          url: 'https://emberjs.com/deprecations/v2.x/#toc_id-ember-metal-model_factory_injections'\n        }));\n      },\n\n      enumerable: false\n    });\n  }\n\n  Object.defineProperty(_emberMetal.default, 'LOG_BINDINGS', {\n    get: function () {\n      return _emberEnvironment.ENV.LOG_BINDINGS;\n    },\n    set: function (value) {\n      _emberEnvironment.ENV.LOG_BINDINGS = !!value;\n    },\n\n    enumerable: false\n  });\n\n  /**\n    A function may be assigned to `Ember.onerror` to be called when Ember\n    internals encounter an error. This is useful for specialized error handling\n    and reporting code.\n  \n    ```javascript\n    import $ from 'jquery';\n  \n    Ember.onerror = function(error) {\n      $.ajax('/report-error', 'POST', {\n        stack: error.stack,\n        otherInformation: 'whatever app state you want to provide'\n      });\n    };\n    ```\n  \n    Internally, `Ember.onerror` is used as Backburner's error handler.\n  \n    @event onerror\n    @for Ember\n    @param {Exception} error the error object\n    @public\n  */\n  Object.defineProperty(_emberMetal.default, 'onerror', {\n    get: _emberMetal.getOnerror,\n    set: _emberMetal.setOnerror,\n    enumerable: false\n  });\n\n  Object.defineProperty(_emberMetal.default, 'testing', {\n    get: _emberDebug.isTesting,\n    set: _emberDebug.setTesting,\n    enumerable: false\n  });\n\n  _emberMetal.default._Backburner = _backburner.default;\n\n  _emberMetal.default.Logger = _emberConsole.default;\n\n  // ****ember-runtime****\n\n  _emberMetal.default.String = _emberRuntime.String;\n  _emberMetal.default.Object = _emberRuntime.Object;\n  _emberMetal.default._RegistryProxyMixin = _emberRuntime.RegistryProxyMixin;\n  _emberMetal.default._ContainerProxyMixin = _emberRuntime.ContainerProxyMixin;\n  _emberMetal.default.compare = _emberRuntime.compare;\n  _emberMetal.default.copy = _emberRuntime.copy;\n  _emberMetal.default.isEqual = _emberRuntime.isEqual;\n  _emberMetal.default.inject = _emberRuntime.inject;\n  _emberMetal.default.Array = _emberRuntime.Array;\n  _emberMetal.default.Comparable = _emberRuntime.Comparable;\n  _emberMetal.default.Enumerable = _emberRuntime.Enumerable;\n  _emberMetal.default.ArrayProxy = _emberRuntime.ArrayProxy;\n  _emberMetal.default.ObjectProxy = _emberRuntime.ObjectProxy;\n  _emberMetal.default.ActionHandler = _emberRuntime.ActionHandler;\n  _emberMetal.default.CoreObject = _emberRuntime.CoreObject;\n  _emberMetal.default.NativeArray = _emberRuntime.NativeArray;\n  _emberMetal.default.Copyable = _emberRuntime.Copyable;\n  _emberMetal.default.MutableEnumerable = _emberRuntime.MutableEnumerable;\n  _emberMetal.default.MutableArray = _emberRuntime.MutableArray;\n  _emberMetal.default.TargetActionSupport = _emberRuntime.TargetActionSupport;\n  _emberMetal.default.Evented = _emberRuntime.Evented;\n  _emberMetal.default.PromiseProxyMixin = _emberRuntime.PromiseProxyMixin;\n  _emberMetal.default.Observable = _emberRuntime.Observable;\n  _emberMetal.default.typeOf = _emberRuntime.typeOf;\n  _emberMetal.default.isArray = _emberRuntime.isArray;\n  _emberMetal.default.Object = _emberRuntime.Object;\n  _emberMetal.default.onLoad = _emberRuntime.onLoad;\n  _emberMetal.default.runLoadHooks = _emberRuntime.runLoadHooks;\n  _emberMetal.default.Controller = _emberRuntime.Controller;\n  _emberMetal.default.ControllerMixin = _emberRuntime.ControllerMixin;\n  _emberMetal.default.Service = _emberRuntime.Service;\n  _emberMetal.default._ProxyMixin = _emberRuntime._ProxyMixin;\n  _emberMetal.default.RSVP = _emberRuntime.RSVP;\n  _emberMetal.default.Namespace = _emberRuntime.Namespace;\n\n  // ES6TODO: this seems a less than ideal way/place to add properties to Ember.computed\n  computed.empty = _emberRuntime.empty;\n  computed.notEmpty = _emberRuntime.notEmpty;\n  computed.none = _emberRuntime.none;\n  computed.not = _emberRuntime.not;\n  computed.bool = _emberRuntime.bool;\n  computed.match = _emberRuntime.match;\n  computed.equal = _emberRuntime.equal;\n  computed.gt = _emberRuntime.gt;\n  computed.gte = _emberRuntime.gte;\n  computed.lt = _emberRuntime.lt;\n  computed.lte = _emberRuntime.lte;\n  computed.oneWay = _emberRuntime.oneWay;\n  computed.reads = _emberRuntime.oneWay;\n  computed.readOnly = _emberRuntime.readOnly;\n  computed.deprecatingAlias = _emberRuntime.deprecatingAlias;\n  computed.and = _emberRuntime.and;\n  computed.or = _emberRuntime.or;\n  computed.any = _emberRuntime.any;\n\n  computed.sum = _emberRuntime.sum;\n  computed.min = _emberRuntime.min;\n  computed.max = _emberRuntime.max;\n  computed.map = _emberRuntime.map;\n  computed.sort = _emberRuntime.sort;\n  computed.setDiff = _emberRuntime.setDiff;\n  computed.mapBy = _emberRuntime.mapBy;\n  computed.filter = _emberRuntime.filter;\n  computed.filterBy = _emberRuntime.filterBy;\n  computed.uniq = _emberRuntime.uniq;\n\n  computed.uniqBy = _emberRuntime.uniqBy;\n  computed.union = _emberRuntime.union;\n  computed.intersect = _emberRuntime.intersect;\n  computed.collect = _emberRuntime.collect;\n\n  /**\n    Defines the hash of localized strings for the current language. Used by\n    the `String.loc` helper. To localize, add string values to this\n    hash.\n  \n    @property STRINGS\n    @for Ember\n    @type Object\n    @private\n  */\n  Object.defineProperty(_emberMetal.default, 'STRINGS', {\n    configurable: false,\n    get: _emberRuntime.getStrings,\n    set: _emberRuntime.setStrings\n  });\n\n  /**\n    Whether searching on the global for new Namespace instances is enabled.\n  \n    This is only exported here as to not break any addons.  Given the new\n    visit API, you will have issues if you treat this as a indicator of\n    booted.\n  \n    Internally this is only exposing a flag in Namespace.\n  \n    @property BOOTED\n    @for Ember\n    @type Boolean\n    @private\n  */\n  Object.defineProperty(_emberMetal.default, 'BOOTED', {\n    configurable: false,\n    enumerable: false,\n    get: _emberRuntime.isNamespaceSearchDisabled,\n    set: _emberRuntime.setNamespaceSearchDisabled\n  });\n\n  _emberMetal.default.Component = _emberGlimmer.Component;\n  _emberGlimmer.Helper.helper = _emberGlimmer.helper;\n  _emberMetal.default.Helper = _emberGlimmer.Helper;\n  _emberMetal.default.Checkbox = _emberGlimmer.Checkbox;\n  _emberMetal.default.TextField = _emberGlimmer.TextField;\n  _emberMetal.default.TextArea = _emberGlimmer.TextArea;\n  _emberMetal.default.LinkComponent = _emberGlimmer.LinkComponent;\n\n  if (_emberEnvironment.ENV.EXTEND_PROTOTYPES.String) {\n    String.prototype.htmlSafe = function () {\n      return (0, _emberGlimmer.htmlSafe)(this);\n    };\n  }\n\n  var EmberHandlebars = _emberMetal.default.Handlebars = _emberMetal.default.Handlebars || {};\n  var EmberHTMLBars = _emberMetal.default.HTMLBars = _emberMetal.default.HTMLBars || {};\n  var EmberHandleBarsUtils = EmberHandlebars.Utils = EmberHandlebars.Utils || {};\n\n  EmberHTMLBars.template = EmberHandlebars.template = _emberGlimmer.template;\n  EmberHandleBarsUtils.escapeExpression = _emberGlimmer.escapeExpression;\n  _emberRuntime.String.htmlSafe = _emberGlimmer.htmlSafe;\n\n  _emberRuntime.String.isHTMLSafe = _emberGlimmer.isHTMLSafe;\n\n  /**\n    Global hash of shared templates. This will automatically be populated\n    by the build tools so that you can store your Handlebars templates in\n    separate files that get loaded into JavaScript at buildtime.\n  \n    @property TEMPLATES\n    @for Ember\n    @type Object\n    @private\n  */\n  Object.defineProperty(_emberMetal.default, 'TEMPLATES', {\n    get: _emberGlimmer.getTemplates,\n    set: _emberGlimmer.setTemplates,\n    configurable: false,\n    enumerable: false\n  });\n\n  exports.VERSION = _version.default;\n\n\n  /**\n    The semantic version\n  \n    @property VERSION\n    @type String\n    @public\n  */\n  _emberMetal.default.VERSION = _version.default;\n\n  _emberMetal.libraries.registerCoreLibrary('Ember', _version.default);\n\n  // require the main entry points for each of these packages\n  // this is so that the global exports occur properly\n\n\n  _emberMetal.default.$ = _emberViews.jQuery;\n\n  _emberMetal.default.ViewTargetActionSupport = _emberViews.ViewTargetActionSupport;\n\n  _emberMetal.default.ViewUtils = {\n    isSimpleClick: _emberViews.isSimpleClick,\n    getViewElement: _emberViews.getViewElement,\n    getViewBounds: _emberViews.getViewBounds,\n    getViewClientRects: _emberViews.getViewClientRects,\n    getViewBoundingClientRect: _emberViews.getViewBoundingClientRect,\n    getRootViews: _emberViews.getRootViews,\n    getChildViews: _emberViews.getChildViews\n  };\n\n  _emberMetal.default.TextSupport = _emberViews.TextSupport;\n  _emberMetal.default.ComponentLookup = _emberViews.ComponentLookup;\n  _emberMetal.default.EventDispatcher = _emberViews.EventDispatcher;\n\n  _emberMetal.default.Location = _emberRouting.Location;\n  _emberMetal.default.AutoLocation = _emberRouting.AutoLocation;\n  _emberMetal.default.HashLocation = _emberRouting.HashLocation;\n  _emberMetal.default.HistoryLocation = _emberRouting.HistoryLocation;\n  _emberMetal.default.NoneLocation = _emberRouting.NoneLocation;\n  _emberMetal.default.controllerFor = _emberRouting.controllerFor;\n  _emberMetal.default.generateControllerFactory = _emberRouting.generateControllerFactory;\n  _emberMetal.default.generateController = _emberRouting.generateController;\n  _emberMetal.default.RouterDSL = _emberRouting.RouterDSL;\n  _emberMetal.default.Router = _emberRouting.Router;\n  _emberMetal.default.Route = _emberRouting.Route;\n\n  _emberMetal.default.Application = _emberApplication.Application;\n  _emberMetal.default.ApplicationInstance = _emberApplication.ApplicationInstance;\n  _emberMetal.default.Engine = _emberApplication.Engine;\n  _emberMetal.default.EngineInstance = _emberApplication.EngineInstance;\n  _emberMetal.default.DefaultResolver = _emberMetal.default.Resolver = _emberApplication.Resolver;\n\n  (0, _emberRuntime.runLoadHooks)('Ember.Application', _emberApplication.Application);\n\n  _emberMetal.default.DataAdapter = _emberExtensionSupport.DataAdapter;\n  _emberMetal.default.ContainerDebugAdapter = _emberExtensionSupport.ContainerDebugAdapter;\n\n  if ((0, _require2.has)('ember-template-compiler')) {\n    (0, _require2.default)('ember-template-compiler');\n  }\n\n  // do this to ensure that Ember.Test is defined properly on the global\n  // if it is present.\n  if ((0, _require2.has)('ember-testing')) {\n    var testing = (0, _require2.default)('ember-testing');\n\n    _emberMetal.default.Test = testing.Test;\n    _emberMetal.default.Test.Adapter = testing.Adapter;\n    _emberMetal.default.Test.QUnitAdapter = testing.QUnitAdapter;\n    _emberMetal.default.setupForTesting = testing.setupForTesting;\n  }\n\n  (0, _emberRuntime.runLoadHooks)('Ember');\n\n  /**\n    @module ember\n    @private\n  */\n  exports.default = _emberMetal.default;\n\n\n  /* globals module */\n  if (_nodeModule.IS_NODE) {\n    _nodeModule.module.exports = _emberMetal.default;\n  } else {\n    _emberEnvironment.context.exports.Ember = _emberEnvironment.context.exports.Em = _emberMetal.default;\n  }\n\n  /**\n   @module jquery\n   @public\n   */\n\n  /**\n   @class jquery\n   @public\n   @static\n   */\n\n  /**\n    Alias for jQuery\n  \n    @for jquery\n    @method $\n    @static\n    @public\n  */\n});","enifed(\"ember/version\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.default = \"3.0.0\";\n});","enifed(\"handlebars\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  // File ignored in coverage tests via setting in .istanbul.yml\n  /* Jison generated parser */\n  var handlebars = function () {\n    var parser = { trace: function trace() {},\n      yy: {},\n      symbols_: { \"error\": 2, \"root\": 3, \"program\": 4, \"EOF\": 5, \"program_repetition0\": 6, \"statement\": 7, \"mustache\": 8, \"block\": 9, \"rawBlock\": 10, \"partial\": 11, \"partialBlock\": 12, \"content\": 13, \"COMMENT\": 14, \"CONTENT\": 15, \"openRawBlock\": 16, \"rawBlock_repetition_plus0\": 17, \"END_RAW_BLOCK\": 18, \"OPEN_RAW_BLOCK\": 19, \"helperName\": 20, \"openRawBlock_repetition0\": 21, \"openRawBlock_option0\": 22, \"CLOSE_RAW_BLOCK\": 23, \"openBlock\": 24, \"block_option0\": 25, \"closeBlock\": 26, \"openInverse\": 27, \"block_option1\": 28, \"OPEN_BLOCK\": 29, \"openBlock_repetition0\": 30, \"openBlock_option0\": 31, \"openBlock_option1\": 32, \"CLOSE\": 33, \"OPEN_INVERSE\": 34, \"openInverse_repetition0\": 35, \"openInverse_option0\": 36, \"openInverse_option1\": 37, \"openInverseChain\": 38, \"OPEN_INVERSE_CHAIN\": 39, \"openInverseChain_repetition0\": 40, \"openInverseChain_option0\": 41, \"openInverseChain_option1\": 42, \"inverseAndProgram\": 43, \"INVERSE\": 44, \"inverseChain\": 45, \"inverseChain_option0\": 46, \"OPEN_ENDBLOCK\": 47, \"OPEN\": 48, \"mustache_repetition0\": 49, \"mustache_option0\": 50, \"OPEN_UNESCAPED\": 51, \"mustache_repetition1\": 52, \"mustache_option1\": 53, \"CLOSE_UNESCAPED\": 54, \"OPEN_PARTIAL\": 55, \"partialName\": 56, \"partial_repetition0\": 57, \"partial_option0\": 58, \"openPartialBlock\": 59, \"OPEN_PARTIAL_BLOCK\": 60, \"openPartialBlock_repetition0\": 61, \"openPartialBlock_option0\": 62, \"param\": 63, \"sexpr\": 64, \"OPEN_SEXPR\": 65, \"sexpr_repetition0\": 66, \"sexpr_option0\": 67, \"CLOSE_SEXPR\": 68, \"hash\": 69, \"hash_repetition_plus0\": 70, \"hashSegment\": 71, \"ID\": 72, \"EQUALS\": 73, \"blockParams\": 74, \"OPEN_BLOCK_PARAMS\": 75, \"blockParams_repetition_plus0\": 76, \"CLOSE_BLOCK_PARAMS\": 77, \"path\": 78, \"dataName\": 79, \"STRING\": 80, \"NUMBER\": 81, \"BOOLEAN\": 82, \"UNDEFINED\": 83, \"NULL\": 84, \"DATA\": 85, \"pathSegments\": 86, \"SEP\": 87, \"$accept\": 0, \"$end\": 1 },\n      terminals_: { 2: \"error\", 5: \"EOF\", 14: \"COMMENT\", 15: \"CONTENT\", 18: \"END_RAW_BLOCK\", 19: \"OPEN_RAW_BLOCK\", 23: \"CLOSE_RAW_BLOCK\", 29: \"OPEN_BLOCK\", 33: \"CLOSE\", 34: \"OPEN_INVERSE\", 39: \"OPEN_INVERSE_CHAIN\", 44: \"INVERSE\", 47: \"OPEN_ENDBLOCK\", 48: \"OPEN\", 51: \"OPEN_UNESCAPED\", 54: \"CLOSE_UNESCAPED\", 55: \"OPEN_PARTIAL\", 60: \"OPEN_PARTIAL_BLOCK\", 65: \"OPEN_SEXPR\", 68: \"CLOSE_SEXPR\", 72: \"ID\", 73: \"EQUALS\", 75: \"OPEN_BLOCK_PARAMS\", 77: \"CLOSE_BLOCK_PARAMS\", 80: \"STRING\", 81: \"NUMBER\", 82: \"BOOLEAN\", 83: \"UNDEFINED\", 84: \"NULL\", 85: \"DATA\", 87: \"SEP\" },\n      productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],\n      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$\n      /**/) {\n\n        var $0 = $$.length - 1;\n        switch (yystate) {\n          case 1:\n            return $$[$0 - 1];\n            break;\n          case 2:\n            this.$ = yy.prepareProgram($$[$0]);\n            break;\n          case 3:\n            this.$ = $$[$0];\n            break;\n          case 4:\n            this.$ = $$[$0];\n            break;\n          case 5:\n            this.$ = $$[$0];\n            break;\n          case 6:\n            this.$ = $$[$0];\n            break;\n          case 7:\n            this.$ = $$[$0];\n            break;\n          case 8:\n            this.$ = $$[$0];\n            break;\n          case 9:\n            this.$ = {\n              type: 'CommentStatement',\n              value: yy.stripComment($$[$0]),\n              strip: yy.stripFlags($$[$0], $$[$0]),\n              loc: yy.locInfo(this._$)\n            };\n\n            break;\n          case 10:\n            this.$ = {\n              type: 'ContentStatement',\n              original: $$[$0],\n              value: $$[$0],\n              loc: yy.locInfo(this._$)\n            };\n\n            break;\n          case 11:\n            this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n            break;\n          case 12:\n            this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };\n            break;\n          case 13:\n            this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);\n            break;\n          case 14:\n            this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);\n            break;\n          case 15:\n            this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n            break;\n          case 16:\n            this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n            break;\n          case 17:\n            this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n            break;\n          case 18:\n            this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };\n            break;\n          case 19:\n            var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),\n                program = yy.prepareProgram([inverse], $$[$0 - 1].loc);\n            program.chained = true;\n\n            this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };\n\n            break;\n          case 20:\n            this.$ = $$[$0];\n            break;\n          case 21:\n            this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };\n            break;\n          case 22:\n            this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n            break;\n          case 23:\n            this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n            break;\n          case 24:\n            this.$ = {\n              type: 'PartialStatement',\n              name: $$[$0 - 3],\n              params: $$[$0 - 2],\n              hash: $$[$0 - 1],\n              indent: '',\n              strip: yy.stripFlags($$[$0 - 4], $$[$0]),\n              loc: yy.locInfo(this._$)\n            };\n\n            break;\n          case 25:\n            this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n            break;\n          case 26:\n            this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };\n            break;\n          case 27:\n            this.$ = $$[$0];\n            break;\n          case 28:\n            this.$ = $$[$0];\n            break;\n          case 29:\n            this.$ = {\n              type: 'SubExpression',\n              path: $$[$0 - 3],\n              params: $$[$0 - 2],\n              hash: $$[$0 - 1],\n              loc: yy.locInfo(this._$)\n            };\n\n            break;\n          case 30:\n            this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };\n            break;\n          case 31:\n            this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };\n            break;\n          case 32:\n            this.$ = yy.id($$[$0 - 1]);\n            break;\n          case 33:\n            this.$ = $$[$0];\n            break;\n          case 34:\n            this.$ = $$[$0];\n            break;\n          case 35:\n            this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };\n            break;\n          case 36:\n            this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };\n            break;\n          case 37:\n            this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };\n            break;\n          case 38:\n            this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };\n            break;\n          case 39:\n            this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };\n            break;\n          case 40:\n            this.$ = $$[$0];\n            break;\n          case 41:\n            this.$ = $$[$0];\n            break;\n          case 42:\n            this.$ = yy.preparePath(true, $$[$0], this._$);\n            break;\n          case 43:\n            this.$ = yy.preparePath(false, $$[$0], this._$);\n            break;\n          case 44:\n            $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];\n            break;\n          case 45:\n            this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];\n            break;\n          case 46:\n            this.$ = [];\n            break;\n          case 47:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 48:\n            this.$ = [$$[$0]];\n            break;\n          case 49:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 50:\n            this.$ = [];\n            break;\n          case 51:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 58:\n            this.$ = [];\n            break;\n          case 59:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 64:\n            this.$ = [];\n            break;\n          case 65:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 70:\n            this.$ = [];\n            break;\n          case 71:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 78:\n            this.$ = [];\n            break;\n          case 79:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 82:\n            this.$ = [];\n            break;\n          case 83:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 86:\n            this.$ = [];\n            break;\n          case 87:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 90:\n            this.$ = [];\n            break;\n          case 91:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 94:\n            this.$ = [];\n            break;\n          case 95:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 98:\n            this.$ = [$$[$0]];\n            break;\n          case 99:\n            $$[$0 - 1].push($$[$0]);\n            break;\n          case 100:\n            this.$ = [$$[$0]];\n            break;\n          case 101:\n            $$[$0 - 1].push($$[$0]);\n            break;\n        }\n      },\n      table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],\n      defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },\n      parseError: function parseError(str, hash) {\n        throw new Error(str);\n      },\n      parse: function parse(input) {\n        var self = this,\n            stack = [0],\n            vstack = [null],\n            lstack = [],\n            table = this.table,\n            yytext = \"\",\n            yylineno = 0,\n            yyleng = 0,\n            recovering = 0;\n        this.lexer.setInput(input);\n        this.lexer.yy = this.yy;\n        this.yy.lexer = this.lexer;\n        this.yy.parser = this;\n        if (typeof this.lexer.yylloc == \"undefined\") this.lexer.yylloc = {};\n        var yyloc = this.lexer.yylloc;\n        lstack.push(yyloc);\n        var ranges = this.lexer.options && this.lexer.options.ranges;\n        if (typeof this.yy.parseError === \"function\") this.parseError = this.yy.parseError;\n        function lex() {\n          var token;\n          token = self.lexer.lex() || 1;\n          if (typeof token !== \"number\") {\n            token = self.symbols_[token] || token;\n          }\n          return token;\n        }\n        var symbol,\n            preErrorSymbol,\n            state,\n            action,\n            a,\n            r,\n            yyval = {},\n            p,\n            len,\n            newState,\n            expected;\n        while (true) {\n          state = stack[stack.length - 1];\n          if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n          } else {\n            if (symbol === null || typeof symbol == \"undefined\") {\n              symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n          }\n          if (typeof action === \"undefined\" || !action.length || !action[0]) {\n            var errStr = \"\";\n            if (!recovering) {\n              expected = [];\n              for (p in table[state]) {\n                if (this.terminals_[p] && p > 2) {\n                  expected.push(\"'\" + this.terminals_[p] + \"'\");\n                }\n              }if (this.lexer.showPosition) {\n                errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + this.lexer.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n              } else {\n                errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == 1 ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n              }\n              this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });\n            }\n          }\n          if (action[0] instanceof Array && action.length > 1) {\n            throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n          }\n          switch (action[0]) {\n            case 1:\n              stack.push(symbol);\n              vstack.push(this.lexer.yytext);\n              lstack.push(this.lexer.yylloc);\n              stack.push(action[1]);\n              symbol = null;\n              if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) recovering--;\n              } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n              }\n              break;\n            case 2:\n              len = this.productions_[action[1]][1];\n              yyval.$ = vstack[vstack.length - len];\n              yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };\n              if (ranges) {\n                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n              }\n              r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n              if (typeof r !== \"undefined\") {\n                return r;\n              }\n              if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n              }\n              stack.push(this.productions_[action[1]][0]);\n              vstack.push(yyval.$);\n              lstack.push(yyval._$);\n              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n              stack.push(newState);\n              break;\n            case 3:\n              return true;\n          }\n        }\n        return true;\n      }\n    };\n    /* Jison generated lexer */\n    var lexer = function () {\n      var lexer = { EOF: 1,\n        parseError: function parseError(str, hash) {\n          if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n          } else {\n            throw new Error(str);\n          }\n        },\n        setInput: function (input) {\n          this._input = input;\n          this._more = this._less = this.done = false;\n          this.yylineno = this.yyleng = 0;\n          this.yytext = this.matched = this.match = '';\n          this.conditionStack = ['INITIAL'];\n          this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };\n          if (this.options.ranges) this.yylloc.range = [0, 0];\n          this.offset = 0;\n          return this;\n        },\n        input: function () {\n          var ch = this._input[0];\n          this.yytext += ch;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch;\n          this.matched += ch;\n          var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n          if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n          } else {\n            this.yylloc.last_column++;\n          }\n          if (this.options.ranges) this.yylloc.range[1]++;\n\n          this._input = this._input.slice(1);\n          return ch;\n        },\n        unput: function (ch) {\n          var len = ch.length;\n          var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n          this._input = ch + this._input;\n          this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n          //this.yyleng -= len;\n          this.offset -= len;\n          var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n          this.match = this.match.substr(0, this.match.length - 1);\n          this.matched = this.matched.substr(0, this.matched.length - 1);\n\n          if (lines.length - 1) this.yylineno -= lines.length - 1;\n          var r = this.yylloc.range;\n\n          this.yylloc = { first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n          };\n\n          if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n          }\n          return this;\n        },\n        more: function () {\n          this._more = true;\n          return this;\n        },\n        less: function (n) {\n          this.unput(this.match.slice(n));\n        },\n        pastInput: function () {\n          var past = this.matched.substr(0, this.matched.length - this.match.length);\n          return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n        },\n        upcomingInput: function () {\n          var next = this.match;\n          if (next.length < 20) {\n            next += this._input.substr(0, 20 - next.length);\n          }\n          return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n        },\n        showPosition: function () {\n          var pre = this.pastInput();\n          var c = new Array(pre.length + 1).join(\"-\");\n          return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n        },\n        next: function () {\n          if (this.done) {\n            return this.EOF;\n          }\n          if (!this._input) this.done = true;\n\n          var token, match, tempMatch, index, col, lines;\n          if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n          }\n          var rules = this._currentRules();\n          for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n              match = tempMatch;\n              index = i;\n              if (!this.options.flex) break;\n            }\n          }\n          if (match) {\n            lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n            if (lines) this.yylineno += lines.length;\n            this.yylloc = { first_line: this.yylloc.last_line,\n              last_line: this.yylineno + 1,\n              first_column: this.yylloc.last_column,\n              last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length };\n            this.yytext += match[0];\n            this.match += match[0];\n            this.matches = match;\n            this.yyleng = this.yytext.length;\n            if (this.options.ranges) {\n              this.yylloc.range = [this.offset, this.offset += this.yyleng];\n            }\n            this._more = false;\n            this._input = this._input.slice(match[0].length);\n            this.matched += match[0];\n            token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);\n            if (this.done && this._input) this.done = false;\n            if (token) return token;else return;\n          }\n          if (this._input === \"\") {\n            return this.EOF;\n          } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), { text: \"\", token: null, line: this.yylineno });\n          }\n        },\n        lex: function lex() {\n          var r = this.next();\n          if (typeof r !== 'undefined') {\n            return r;\n          } else {\n            return this.lex();\n          }\n        },\n        begin: function begin(condition) {\n          this.conditionStack.push(condition);\n        },\n        popState: function popState() {\n          return this.conditionStack.pop();\n        },\n        _currentRules: function _currentRules() {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        },\n        topState: function () {\n          return this.conditionStack[this.conditionStack.length - 2];\n        },\n        pushState: function begin(condition) {\n          this.begin(condition);\n        } };\n      lexer.options = {};\n      lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START\n      /**/) {\n\n        function strip(start, end) {\n          return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);\n        }\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            if (yy_.yytext.slice(-2) === \"\\\\\\\\\") {\n              strip(0, 1);\n              this.begin(\"mu\");\n            } else if (yy_.yytext.slice(-1) === \"\\\\\") {\n              strip(0, 1);\n              this.begin(\"emu\");\n            } else {\n              this.begin(\"mu\");\n            }\n            if (yy_.yytext) return 15;\n\n            break;\n          case 1:\n            return 15;\n            break;\n          case 2:\n            this.popState();\n            return 15;\n\n            break;\n          case 3:\n            this.begin('raw');return 15;\n            break;\n          case 4:\n            this.popState();\n            // Should be using `this.topState()` below, but it currently\n            // returns the second top instead of the first top. Opened an\n            // issue about it at https://github.com/zaach/jison/issues/291\n            if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {\n              return 15;\n            } else {\n              yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);\n              return 'END_RAW_BLOCK';\n            }\n\n            break;\n          case 5:\n            return 15;\n            break;\n          case 6:\n            this.popState();\n            return 14;\n\n            break;\n          case 7:\n            return 65;\n            break;\n          case 8:\n            return 68;\n            break;\n          case 9:\n            return 19;\n            break;\n          case 10:\n            this.popState();\n            this.begin('raw');\n            return 23;\n\n            break;\n          case 11:\n            return 55;\n            break;\n          case 12:\n            return 60;\n            break;\n          case 13:\n            return 29;\n            break;\n          case 14:\n            return 47;\n            break;\n          case 15:\n            this.popState();return 44;\n            break;\n          case 16:\n            this.popState();return 44;\n            break;\n          case 17:\n            return 34;\n            break;\n          case 18:\n            return 39;\n            break;\n          case 19:\n            return 51;\n            break;\n          case 20:\n            return 48;\n            break;\n          case 21:\n            this.unput(yy_.yytext);\n            this.popState();\n            this.begin('com');\n\n            break;\n          case 22:\n            this.popState();\n            return 14;\n\n            break;\n          case 23:\n            return 48;\n            break;\n          case 24:\n            return 73;\n            break;\n          case 25:\n            return 72;\n            break;\n          case 26:\n            return 72;\n            break;\n          case 27:\n            return 87;\n            break;\n          case 28:\n            // ignore whitespace\n            break;\n          case 29:\n            this.popState();return 54;\n            break;\n          case 30:\n            this.popState();return 33;\n            break;\n          case 31:\n            yy_.yytext = strip(1, 2).replace(/\\\\\"/g, '\"');return 80;\n            break;\n          case 32:\n            yy_.yytext = strip(1, 2).replace(/\\\\'/g, \"'\");return 80;\n            break;\n          case 33:\n            return 85;\n            break;\n          case 34:\n            return 82;\n            break;\n          case 35:\n            return 82;\n            break;\n          case 36:\n            return 83;\n            break;\n          case 37:\n            return 84;\n            break;\n          case 38:\n            return 81;\n            break;\n          case 39:\n            return 75;\n            break;\n          case 40:\n            return 77;\n            break;\n          case 41:\n            return 72;\n            break;\n          case 42:\n            yy_.yytext = yy_.yytext.replace(/\\\\([\\\\\\]])/g, '$1');return 72;\n            break;\n          case 43:\n            return 'INVALID';\n            break;\n          case 44:\n            return 5;\n            break;\n        }\n      };\n      lexer.rules = [/^(?:[^\\x00]*?(?=(\\{\\{)))/, /^(?:[^\\x00]+)/, /^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/, /^(?:\\{\\{\\{\\{(?=[^\\/]))/, /^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/, /^(?:[^\\x00]*?(?=(\\{\\{\\{\\{)))/, /^(?:[\\s\\S]*?--(~)?\\}\\})/, /^(?:\\()/, /^(?:\\))/, /^(?:\\{\\{\\{\\{)/, /^(?:\\}\\}\\}\\})/, /^(?:\\{\\{(~)?>)/, /^(?:\\{\\{(~)?#>)/, /^(?:\\{\\{(~)?#\\*?)/, /^(?:\\{\\{(~)?\\/)/, /^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\^)/, /^(?:\\{\\{(~)?\\s*else\\b)/, /^(?:\\{\\{(~)?\\{)/, /^(?:\\{\\{(~)?&)/, /^(?:\\{\\{(~)?!--)/, /^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/, /^(?:\\{\\{(~)?\\*?)/, /^(?:=)/, /^(?:\\.\\.)/, /^(?:\\.(?=([=~}\\s\\/.)|])))/, /^(?:[\\/.])/, /^(?:\\s+)/, /^(?:\\}(~)?\\}\\})/, /^(?:(~)?\\}\\})/, /^(?:\"(\\\\[\"]|[^\"])*\")/, /^(?:'(\\\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\\s)])))/, /^(?:false(?=([~}\\s)])))/, /^(?:undefined(?=([~}\\s)])))/, /^(?:null(?=([~}\\s)])))/, /^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/, /^(?:as\\s+\\|)/, /^(?:\\|)/, /^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/, /^(?:\\[(\\\\\\]|[^\\]])*\\])/, /^(?:.)/, /^(?:$)/];\n      lexer.conditions = { \"mu\": { \"rules\": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], \"inclusive\": false }, \"emu\": { \"rules\": [2], \"inclusive\": false }, \"com\": { \"rules\": [6], \"inclusive\": false }, \"raw\": { \"rules\": [3, 4, 5], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 44], \"inclusive\": true } };\n      return lexer;\n    }();\n    parser.lexer = lexer;\n    function Parser() {\n      this.yy = {};\n    }Parser.prototype = parser;parser.Parser = Parser;\n    return new Parser();\n  }();\n\n  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];\n\n  function Exception(message, node) {\n    var loc = node && node.loc,\n        line = void 0,\n        column = void 0;\n    if (loc) {\n      line = loc.start.line;\n      column = loc.start.column;\n\n      message += ' - ' + line + ':' + column;\n    }\n\n    var tmp = Error.prototype.constructor.call(this, message);\n\n    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n    for (var idx = 0; idx < errorProps.length; idx++) {\n      this[errorProps[idx]] = tmp[errorProps[idx]];\n    }\n\n    /* istanbul ignore else */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, Exception);\n    }\n\n    try {\n      if (loc) {\n        this.lineNumber = line;\n\n        // Work around issue under safari where we can't directly set the column value\n        /* istanbul ignore next */\n        if (Object.defineProperty) {\n          Object.defineProperty(this, 'column', {\n            value: column,\n            enumerable: true\n          });\n        } else {\n          this.column = column;\n        }\n      }\n    } catch (nop) {\n      /* Ignore if the browser is very particular */\n    }\n  }\n\n  Exception.prototype = new Error();\n\n  function Visitor() {\n    this.parents = [];\n  }\n\n  Visitor.prototype = {\n    constructor: Visitor,\n    mutating: false,\n\n    // Visits a given value. If mutating, will replace the value if necessary.\n    acceptKey: function (node, name) {\n      var value = this.accept(node[name]);\n      if (this.mutating) {\n        // Hacky sanity check: This may have a few false positives for type for the helper\n        // methods but will generally do the right thing without a lot of overhead.\n        if (value && !Visitor.prototype[value.type]) {\n          throw new Exception('Unexpected node type \"' + value.type + '\" found when accepting ' + name + ' on ' + node.type);\n        }\n        node[name] = value;\n      }\n    },\n\n    // Performs an accept operation with added sanity check to ensure\n    // required keys are not removed.\n    acceptRequired: function (node, name) {\n      this.acceptKey(node, name);\n\n      if (!node[name]) {\n        throw new Exception(node.type + ' requires ' + name);\n      }\n    },\n\n    // Traverses a given array. If mutating, empty respnses will be removed\n    // for child elements.\n    acceptArray: function (array) {\n      for (var i = 0, l = array.length; i < l; i++) {\n        this.acceptKey(array, i);\n\n        if (!array[i]) {\n          array.splice(i, 1);\n          i--;\n          l--;\n        }\n      }\n    },\n\n    accept: function (object) {\n      if (!object) {\n        return;\n      }\n\n      /* istanbul ignore next: Sanity code */\n      if (!this[object.type]) {\n        throw new Exception('Unknown type: ' + object.type, object);\n      }\n\n      if (this.current) {\n        this.parents.unshift(this.current);\n      }\n      this.current = object;\n\n      var ret = this[object.type](object);\n\n      this.current = this.parents.shift();\n\n      if (!this.mutating || ret) {\n        return ret;\n      } else if (ret !== false) {\n        return object;\n      }\n    },\n\n    Program: function (program) {\n      this.acceptArray(program.body);\n    },\n\n    MustacheStatement: visitSubExpression,\n    Decorator: visitSubExpression,\n\n    BlockStatement: visitBlock,\n    DecoratorBlock: visitBlock,\n\n    PartialStatement: visitPartial,\n    PartialBlockStatement: function (partial) {\n      visitPartial.call(this, partial);\n\n      this.acceptKey(partial, 'program');\n    },\n\n    ContentStatement: function () /* content */{},\n    CommentStatement: function () /* comment */{},\n\n    SubExpression: visitSubExpression,\n\n    PathExpression: function () /* path */{},\n\n    StringLiteral: function () /* string */{},\n    NumberLiteral: function () /* number */{},\n    BooleanLiteral: function () /* bool */{},\n    UndefinedLiteral: function () /* literal */{},\n    NullLiteral: function () /* literal */{},\n\n    Hash: function (hash) {\n      this.acceptArray(hash.pairs);\n    },\n    HashPair: function (pair) {\n      this.acceptRequired(pair, 'value');\n    }\n  };\n\n  function visitSubExpression(mustache) {\n    this.acceptRequired(mustache, 'path');\n    this.acceptArray(mustache.params);\n    this.acceptKey(mustache, 'hash');\n  }\n  function visitBlock(block) {\n    visitSubExpression.call(this, block);\n\n    this.acceptKey(block, 'program');\n    this.acceptKey(block, 'inverse');\n  }\n  function visitPartial(partial) {\n    this.acceptRequired(partial, 'name');\n    this.acceptArray(partial.params);\n    this.acceptKey(partial, 'hash');\n  }\n\n  function WhitespaceControl() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.options = options;\n  }\n  WhitespaceControl.prototype = new Visitor();\n\n  WhitespaceControl.prototype.Program = function (program) {\n    var doStandalone = !this.options.ignoreStandalone;\n\n    var isRoot = !this.isRootSeen;\n    this.isRootSeen = true;\n\n    var body = program.body;\n    for (var i = 0, l = body.length; i < l; i++) {\n      var current = body[i],\n          strip = this.accept(current);\n\n      if (!strip) {\n        continue;\n      }\n\n      var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n          _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n          openStandalone = strip.openStandalone && _isPrevWhitespace,\n          closeStandalone = strip.closeStandalone && _isNextWhitespace,\n          inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n      if (strip.close) {\n        omitRight(body, i, true);\n      }\n      if (strip.open) {\n        omitLeft(body, i, true);\n      }\n\n      if (doStandalone && inlineStandalone) {\n        omitRight(body, i);\n\n        if (omitLeft(body, i)) {\n          // If we are on a standalone node, save the indent info for partials\n          if (current.type === 'PartialStatement') {\n            // Pull out the whitespace from the final line\n            current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n          }\n        }\n      }\n      if (doStandalone && openStandalone) {\n        omitRight((current.program || current.inverse).body);\n\n        // Strip out the previous content node if it's whitespace only\n        omitLeft(body, i);\n      }\n      if (doStandalone && closeStandalone) {\n        // Always strip the next node\n        omitRight(body, i);\n\n        omitLeft((current.inverse || current.program).body);\n      }\n    }\n\n    return program;\n  };\n\n  WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {\n    this.accept(block.program);\n    this.accept(block.inverse);\n\n    // Find the inverse program that is involed with whitespace stripping.\n    var program = block.program || block.inverse,\n        inverse = block.program && block.inverse,\n        firstInverse = inverse,\n        lastInverse = inverse;\n\n    if (inverse && inverse.chained) {\n      firstInverse = inverse.body[0].program;\n\n      // Walk the inverse chain to find the last inverse that is actually in the chain.\n      while (lastInverse.chained) {\n        lastInverse = lastInverse.body[lastInverse.body.length - 1].program;\n      }\n    }\n\n    var strip = {\n      open: block.openStrip.open,\n      close: block.closeStrip.close,\n\n      // Determine the standalone candiacy. Basically flag our content as being possibly standalone\n      // so our parent can determine if we actually are standalone\n      openStandalone: isNextWhitespace(program.body),\n      closeStandalone: isPrevWhitespace((firstInverse || program).body)\n    };\n\n    if (block.openStrip.close) {\n      omitRight(program.body, null, true);\n    }\n\n    if (inverse) {\n      var inverseStrip = block.inverseStrip;\n\n      if (inverseStrip.open) {\n        omitLeft(program.body, null, true);\n      }\n\n      if (inverseStrip.close) {\n        omitRight(firstInverse.body, null, true);\n      }\n      if (block.closeStrip.open) {\n        omitLeft(lastInverse.body, null, true);\n      }\n\n      // Find standalone else statments\n      if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {\n        omitLeft(program.body);\n        omitRight(firstInverse.body);\n      }\n    } else if (block.closeStrip.open) {\n      omitLeft(program.body, null, true);\n    }\n\n    return strip;\n  };\n\n  WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {\n    return mustache.strip;\n  };\n\n  WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {\n    /* istanbul ignore next */\n    var strip = node.strip || {};\n    return {\n      inlineStandalone: true,\n      open: strip.open,\n      close: strip.close\n    };\n  };\n\n  function isPrevWhitespace(body, i, isRoot) {\n    if (i === undefined) {\n      i = body.length;\n    }\n\n    // Nodes that end with newlines are considered whitespace (but are special\n    // cased for strip operations)\n    var prev = body[i - 1],\n        sibling = body[i - 2];\n    if (!prev) {\n      return isRoot;\n    }\n\n    if (prev.type === 'ContentStatement') {\n      return (sibling || !isRoot ? /\\r?\\n\\s*?$/ : /(^|\\r?\\n)\\s*?$/).test(prev.original);\n    }\n  }\n  function isNextWhitespace(body, i, isRoot) {\n    if (i === undefined) {\n      i = -1;\n    }\n\n    var next = body[i + 1],\n        sibling = body[i + 2];\n    if (!next) {\n      return isRoot;\n    }\n\n    if (next.type === 'ContentStatement') {\n      return (sibling || !isRoot ? /^\\s*?\\r?\\n/ : /^\\s*?(\\r?\\n|$)/).test(next.original);\n    }\n  }\n\n  // Marks the node to the right of the position as omitted.\n  // I.e. {{foo}}' ' will mark the ' ' node as omitted.\n  //\n  // If i is undefined, then the first child will be marked as such.\n  //\n  // If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n  // content is met.\n  function omitRight(body, i, multiple) {\n    var current = body[i == null ? 0 : i + 1];\n    if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {\n      return;\n    }\n\n    var original = current.value;\n    current.value = current.value.replace(multiple ? /^\\s+/ : /^[ \\t]*\\r?\\n?/, '');\n    current.rightStripped = current.value !== original;\n  }\n\n  // Marks the node to the left of the position as omitted.\n  // I.e. ' '{{foo}} will mark the ' ' node as omitted.\n  //\n  // If i is undefined then the last child will be marked as such.\n  //\n  // If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n  // content is met.\n  function omitLeft(body, i, multiple) {\n    var current = body[i == null ? body.length - 1 : i - 1];\n    if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {\n      return;\n    }\n\n    // We omit the last node if it's whitespace only and not preceeded by a non-content node.\n    var original = current.value;\n    current.value = current.value.replace(multiple ? /\\s+$/ : /[ \\t]+$/, '');\n    current.leftStripped = current.value !== original;\n    return current.leftStripped;\n  }\n\n  function validateClose(open, close) {\n    close = close.path ? close.path.original : close;\n\n    if (open.path.original !== close) {\n      var errorNode = { loc: open.path.loc };\n\n      throw new Exception(open.path.original + \" doesn't match \" + close, errorNode);\n    }\n  }\n\n  function SourceLocation(source, locInfo) {\n    this.source = source;\n    this.start = {\n      line: locInfo.first_line,\n      column: locInfo.first_column\n    };\n    this.end = {\n      line: locInfo.last_line,\n      column: locInfo.last_column\n    };\n  }\n\n  function id(token) {\n    if (/^\\[.*\\]$/.test(token)) {\n      return token.substr(1, token.length - 2);\n    } else {\n      return token;\n    }\n  }\n\n  function stripFlags(open, close) {\n    return {\n      open: open.charAt(2) === '~',\n      close: close.charAt(close.length - 3) === '~'\n    };\n  }\n\n  function stripComment(comment) {\n    return comment.replace(/^\\{\\{~?\\!-?-?/, '').replace(/-?-?~?\\}\\}$/, '');\n  }\n\n  function preparePath(data, parts, loc) {\n    loc = this.locInfo(loc);\n\n    var original = data ? '@' : '',\n        dig = [],\n        depth = 0;\n\n    for (var i = 0, l = parts.length; i < l; i++) {\n      var part = parts[i].part,\n\n      // If we have [] syntax then we do not treat path references as operators,\n      // i.e. foo.[this] resolves to approximately context.foo['this']\n      isLiteral = parts[i].original !== part;\n      original += (parts[i].separator || '') + part;\n\n      if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {\n        if (dig.length > 0) {\n          throw new Exception('Invalid path: ' + original, { loc: loc });\n        } else if (part === '..') {\n          depth++;\n        }\n      } else {\n        dig.push(part);\n      }\n    }\n\n    return {\n      type: 'PathExpression',\n      data: data,\n      depth: depth,\n      parts: dig,\n      original: original,\n      loc: loc\n    };\n  }\n\n  function prepareMustache(path, params, hash, open, strip, locInfo) {\n    // Must use charAt to support IE pre-10\n    var escapeFlag = open.charAt(3) || open.charAt(2),\n        escaped = escapeFlag !== '{' && escapeFlag !== '&';\n\n    var decorator = /\\*/.test(open);\n    return {\n      type: decorator ? 'Decorator' : 'MustacheStatement',\n      path: path,\n      params: params,\n      hash: hash,\n      escaped: escaped,\n      strip: strip,\n      loc: this.locInfo(locInfo)\n    };\n  }\n\n  function prepareRawBlock(openRawBlock, contents, close, locInfo) {\n    validateClose(openRawBlock, close);\n\n    locInfo = this.locInfo(locInfo);\n    var program = {\n      type: 'Program',\n      body: contents,\n      strip: {},\n      loc: locInfo\n    };\n\n    return {\n      type: 'BlockStatement',\n      path: openRawBlock.path,\n      params: openRawBlock.params,\n      hash: openRawBlock.hash,\n      program: program,\n      openStrip: {},\n      inverseStrip: {},\n      closeStrip: {},\n      loc: locInfo\n    };\n  }\n\n  function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {\n    if (close && close.path) {\n      validateClose(openBlock, close);\n    }\n\n    var decorator = /\\*/.test(openBlock.open);\n\n    program.blockParams = openBlock.blockParams;\n\n    var inverse = void 0,\n        inverseStrip = void 0;\n\n    if (inverseAndProgram) {\n      if (decorator) {\n        throw new Exception('Unexpected inverse block on decorator', inverseAndProgram);\n      }\n\n      if (inverseAndProgram.chain) {\n        inverseAndProgram.program.body[0].closeStrip = close.strip;\n      }\n\n      inverseStrip = inverseAndProgram.strip;\n      inverse = inverseAndProgram.program;\n    }\n\n    if (inverted) {\n      inverted = inverse;\n      inverse = program;\n      program = inverted;\n    }\n\n    return {\n      type: decorator ? 'DecoratorBlock' : 'BlockStatement',\n      path: openBlock.path,\n      params: openBlock.params,\n      hash: openBlock.hash,\n      program: program,\n      inverse: inverse,\n      openStrip: openBlock.strip,\n      inverseStrip: inverseStrip,\n      closeStrip: close && close.strip,\n      loc: this.locInfo(locInfo)\n    };\n  }\n\n  function prepareProgram(statements, loc) {\n    if (!loc && statements.length) {\n      var firstLoc = statements[0].loc,\n          lastLoc = statements[statements.length - 1].loc;\n\n      /* istanbul ignore else */\n      if (firstLoc && lastLoc) {\n        loc = {\n          source: firstLoc.source,\n          start: {\n            line: firstLoc.start.line,\n            column: firstLoc.start.column\n          },\n          end: {\n            line: lastLoc.end.line,\n            column: lastLoc.end.column\n          }\n        };\n      }\n    }\n\n    return {\n      type: 'Program',\n      body: statements,\n      strip: {},\n      loc: loc\n    };\n  }\n\n  function preparePartialBlock(open, program, close, locInfo) {\n    validateClose(open, close);\n\n    return {\n      type: 'PartialBlockStatement',\n      name: open.path,\n      params: open.params,\n      hash: open.hash,\n      program: program,\n      openStrip: open.strip,\n      closeStrip: close && close.strip,\n      loc: this.locInfo(locInfo)\n    };\n  }\n\n  var Helpers = Object.freeze({\n    SourceLocation: SourceLocation,\n    id: id,\n    stripFlags: stripFlags,\n    stripComment: stripComment,\n    preparePath: preparePath,\n    prepareMustache: prepareMustache,\n    prepareRawBlock: prepareRawBlock,\n    prepareBlock: prepareBlock,\n    prepareProgram: prepareProgram,\n    preparePartialBlock: preparePartialBlock\n  });\n\n  function extend(obj /* , ...source */) {\n    for (var i = 1; i < arguments.length; i++) {\n      for (var key in arguments[i]) {\n        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n          obj[key] = arguments[i][key];\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  var toString = Object.prototype.toString;\n\n  // Sourced from lodash\n  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n  /* eslint-disable func-style */\n  var isFunction = function (value) {\n    return typeof value === 'function';\n  };\n  // fallback for older versions of Chrome and Safari\n  /* istanbul ignore next */\n  if (isFunction(/x/)) {\n    isFunction = function (value) {\n      return typeof value === 'function' && toString.call(value) === '[object Function]';\n    };\n  }\n  /* eslint-enable func-style */\n\n  /* istanbul ignore next */\n\n  // Older IE versions do not directly support indexOf so we must implement our own, sadly.\n\n  var yy = {};\n  extend(yy, Helpers);\n\n  function parse(input, options) {\n    // Just return if an already-compiled AST was passed in.\n    if (input.type === 'Program') {\n      return input;\n    }\n\n    handlebars.yy = yy;\n\n    // Altering the shared object here, but this is ok as parser is a sync operation\n    yy.locInfo = function (locInfo) {\n      return new yy.SourceLocation(options && options.srcName, locInfo);\n    };\n\n    var strip = new WhitespaceControl(options);\n    return strip.accept(handlebars.parse(input));\n  }\n\n  exports.parser = handlebars;\n  exports.parse = parse;\n});","/*global enifed */\nenifed('node-module', ['exports'], function(_exports) {\n  var IS_NODE = typeof module === 'object' && typeof module.require === 'function';\n  if (IS_NODE) {\n    _exports.require = module.require;\n    _exports.module = module;\n    _exports.IS_NODE = IS_NODE;\n  } else {\n    _exports.require = null;\n    _exports.module = null;\n    _exports.IS_NODE = IS_NODE;\n  }\n});","enifed(\"route-recognizer\", [\"exports\"], function (exports) {\n    \"use strict\";\n\n    var createObject = Object.create;\n    function createMap() {\n        var map = createObject(null);\n        map[\"__\"] = undefined;\n        delete map[\"__\"];\n        return map;\n    }\n\n    var Target = function Target(path, matcher, delegate) {\n        this.path = path;\n        this.matcher = matcher;\n        this.delegate = delegate;\n    };\n    Target.prototype.to = function to(target, callback) {\n        var delegate = this.delegate;\n        if (delegate && delegate.willAddRoute) {\n            target = delegate.willAddRoute(this.matcher.target, target);\n        }\n        this.matcher.add(this.path, target);\n        if (callback) {\n            if (callback.length === 0) {\n                throw new Error(\"You must have an argument in the function passed to `to`\");\n            }\n            this.matcher.addChild(this.path, target, callback, this.delegate);\n        }\n    };\n    var Matcher = function Matcher(target) {\n        this.routes = createMap();\n        this.children = createMap();\n        this.target = target;\n    };\n    Matcher.prototype.add = function add(path, target) {\n        this.routes[path] = target;\n    };\n    Matcher.prototype.addChild = function addChild(path, target, callback, delegate) {\n        var matcher = new Matcher(target);\n        this.children[path] = matcher;\n        var match = generateMatch(path, matcher, delegate);\n        if (delegate && delegate.contextEntered) {\n            delegate.contextEntered(target, match);\n        }\n        callback(match);\n    };\n    function generateMatch(startingPath, matcher, delegate) {\n        function match(path, callback) {\n            var fullPath = startingPath + path;\n            if (callback) {\n                callback(generateMatch(fullPath, matcher, delegate));\n            } else {\n                return new Target(fullPath, matcher, delegate);\n            }\n        }\n\n        return match;\n    }\n    function addRoute(routeArray, path, handler) {\n        var len = 0;\n        for (var i = 0; i < routeArray.length; i++) {\n            len += routeArray[i].path.length;\n        }\n        path = path.substr(len);\n        var route = { path: path, handler: handler };\n        routeArray.push(route);\n    }\n    function eachRoute(baseRoute, matcher, callback, binding) {\n        var routes = matcher.routes;\n        var paths = Object.keys(routes);\n        for (var i = 0; i < paths.length; i++) {\n            var path = paths[i];\n            var routeArray = baseRoute.slice();\n            addRoute(routeArray, path, routes[path]);\n            var nested = matcher.children[path];\n            if (nested) {\n                eachRoute(routeArray, nested, callback, binding);\n            } else {\n                callback.call(binding, routeArray);\n            }\n        }\n    }\n    var map = function (callback, addRouteCallback) {\n        var matcher = new Matcher();\n        callback(generateMatch(\"\", matcher, this.delegate));\n        eachRoute([], matcher, function (routes) {\n            if (addRouteCallback) {\n                addRouteCallback(this, routes);\n            } else {\n                this.add(routes);\n            }\n        }, this);\n    };\n\n    // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n    // values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n    // chars are \"/\" and \"%\".\n    // Safe to call multiple times on the same path.\n    // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n    function normalizePath(path) {\n        return path.split(\"/\").map(normalizeSegment).join(\"/\");\n    }\n    // We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n    // form when normalizing paths, so replace them with their encoded form after\n    // decoding the rest of the path\n    var SEGMENT_RESERVED_CHARS = /%|\\//g;\n    function normalizeSegment(segment) {\n        if (segment.length < 3 || segment.indexOf(\"%\") === -1) {\n            return segment;\n        }\n        return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n    }\n    // We do not want to encode these characters when generating dynamic path segments\n    // See https://tools.ietf.org/html/rfc3986#section-3.3\n    // sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n    // others allowed by RFC 3986: \":\", \"@\"\n    //\n    // First encode the entire path segment, then decode any of the encoded special chars.\n    //\n    // The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n    // so the possible encoded chars are:\n    // ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\n    var PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;\n    function encodePathSegment(str) {\n        return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n    }\n\n    var escapeRegex = /(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)/g;\n    var isArray = Array.isArray;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    function getParam(params, key) {\n        if (typeof params !== \"object\" || params === null) {\n            throw new Error(\"You must pass an object as the second argument to `generate`.\");\n        }\n        if (!hasOwnProperty.call(params, key)) {\n            throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n        }\n        var value = params[key];\n        var str = typeof value === \"string\" ? value : \"\" + value;\n        if (str.length === 0) {\n            throw new Error(\"You must provide a param `\" + key + \"`.\");\n        }\n        return str;\n    }\n    var eachChar = [];\n    eachChar[0 /* Static */] = function (segment, currentState) {\n        var state = currentState;\n        var value = segment.value;\n        for (var i = 0; i < value.length; i++) {\n            var ch = value.charCodeAt(i);\n            state = state.put(ch, false, false);\n        }\n        return state;\n    };\n    eachChar[1 /* Dynamic */] = function (_, currentState) {\n        return currentState.put(47 /* SLASH */, true, true);\n    };\n    eachChar[2 /* Star */] = function (_, currentState) {\n        return currentState.put(-1 /* ANY */, false, true);\n    };\n    eachChar[4 /* Epsilon */] = function (_, currentState) {\n        return currentState;\n    };\n    var regex = [];\n    regex[0 /* Static */] = function (segment) {\n        return segment.value.replace(escapeRegex, \"\\\\$1\");\n    };\n    regex[1 /* Dynamic */] = function () {\n        return \"([^/]+)\";\n    };\n    regex[2 /* Star */] = function () {\n        return \"(.+)\";\n    };\n    regex[4 /* Epsilon */] = function () {\n        return \"\";\n    };\n    var generate = [];\n    generate[0 /* Static */] = function (segment) {\n        return segment.value;\n    };\n    generate[1 /* Dynamic */] = function (segment, params) {\n        var value = getParam(params, segment.value);\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n            return encodePathSegment(value);\n        } else {\n            return value;\n        }\n    };\n    generate[2 /* Star */] = function (segment, params) {\n        return getParam(params, segment.value);\n    };\n    generate[4 /* Epsilon */] = function () {\n        return \"\";\n    };\n    var EmptyObject = Object.freeze({});\n    var EmptyArray = Object.freeze([]);\n    // The `names` will be populated with the paramter name for each dynamic/star\n    // segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n    // segment, indicating whether it should be decoded during recognition.\n    function parse(segments, route, types) {\n        // normalize route as not starting with a \"/\". Recognition will\n        // also normalize.\n        if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {\n                route = route.substr(1);\n            }\n        var parts = route.split(\"/\");\n        var names = undefined;\n        var shouldDecodes = undefined;\n        for (var i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            var flags = 0;\n            var type = 0;\n            if (part === \"\") {\n                type = 4 /* Epsilon */;\n            } else if (part.charCodeAt(0) === 58 /* COLON */) {\n                    type = 1 /* Dynamic */;\n                } else if (part.charCodeAt(0) === 42 /* STAR */) {\n                    type = 2 /* Star */;\n                } else {\n                type = 0 /* Static */;\n            }\n            flags = 2 << type;\n            if (flags & 12 /* Named */) {\n                    part = part.slice(1);\n                    names = names || [];\n                    names.push(part);\n                    shouldDecodes = shouldDecodes || [];\n                    shouldDecodes.push((flags & 4 /* Decoded */) !== 0);\n                }\n            if (flags & 14 /* Counted */) {\n                    types[type]++;\n                }\n            segments.push({\n                type: type,\n                value: normalizeSegment(part)\n            });\n        }\n        return {\n            names: names || EmptyArray,\n            shouldDecodes: shouldDecodes || EmptyArray\n        };\n    }\n    function isEqualCharSpec(spec, char, negate) {\n        return spec.char === char && spec.negate === negate;\n    }\n    // A State has a character specification and (`charSpec`) and a list of possible\n    // subsequent states (`nextStates`).\n    //\n    // If a State is an accepting state, it will also have several additional\n    // properties:\n    //\n    // * `regex`: A regular expression that is used to extract parameters from paths\n    //   that reached this accepting state.\n    // * `handlers`: Information on how to convert the list of captures into calls\n    //   to registered handlers with the specified parameters\n    // * `types`: How many static, dynamic or star segments in this route. Used to\n    //   decide which route to use if multiple registered routes match a path.\n    //\n    // Currently, State is implemented naively by looping over `nextStates` and\n    // comparing a character specification against a character. A more efficient\n    // implementation would use a hash of keys pointing at one or more next states.\n    var State = function State(states, id, char, negate, repeat) {\n        this.states = states;\n        this.id = id;\n        this.char = char;\n        this.negate = negate;\n        this.nextStates = repeat ? id : null;\n        this.pattern = \"\";\n        this._regex = undefined;\n        this.handlers = undefined;\n        this.types = undefined;\n    };\n    State.prototype.regex = function regex$1() {\n        if (!this._regex) {\n            this._regex = new RegExp(this.pattern);\n        }\n        return this._regex;\n    };\n    State.prototype.get = function get(char, negate) {\n        var this$1 = this;\n\n        var nextStates = this.nextStates;\n        if (nextStates === null) {\n            return;\n        }\n        if (isArray(nextStates)) {\n            for (var i = 0; i < nextStates.length; i++) {\n                var child = this$1.states[nextStates[i]];\n                if (isEqualCharSpec(child, char, negate)) {\n                    return child;\n                }\n            }\n        } else {\n            var child$1 = this.states[nextStates];\n            if (isEqualCharSpec(child$1, char, negate)) {\n                return child$1;\n            }\n        }\n    };\n    State.prototype.put = function put(char, negate, repeat) {\n        var state;\n        // If the character specification already exists in a child of the current\n        // state, just return that state.\n        if (state = this.get(char, negate)) {\n            return state;\n        }\n        // Make a new state for the character spec\n        var states = this.states;\n        state = new State(states, states.length, char, negate, repeat);\n        states[states.length] = state;\n        // Insert the new state as a child of the current state\n        if (this.nextStates == null) {\n            this.nextStates = state.id;\n        } else if (isArray(this.nextStates)) {\n            this.nextStates.push(state.id);\n        } else {\n            this.nextStates = [this.nextStates, state.id];\n        }\n        // Return the new state\n        return state;\n    };\n    // Find a list of child states matching the next character\n    State.prototype.match = function match(ch) {\n        var this$1 = this;\n\n        var nextStates = this.nextStates;\n        if (!nextStates) {\n            return [];\n        }\n        var returned = [];\n        if (isArray(nextStates)) {\n            for (var i = 0; i < nextStates.length; i++) {\n                var child = this$1.states[nextStates[i]];\n                if (isMatch(child, ch)) {\n                    returned.push(child);\n                }\n            }\n        } else {\n            var child$1 = this.states[nextStates];\n            if (isMatch(child$1, ch)) {\n                returned.push(child$1);\n            }\n        }\n        return returned;\n    };\n    function isMatch(spec, char) {\n        return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;\n    }\n    // This is a somewhat naive strategy, but should work in a lot of cases\n    // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n    //\n    // This strategy generally prefers more static and less dynamic matching.\n    // Specifically, it\n    //\n    //  * prefers fewer stars to more, then\n    //  * prefers using stars for less of the match to more, then\n    //  * prefers fewer dynamic segments to more, then\n    //  * prefers more static segments to more\n    function sortSolutions(states) {\n        return states.sort(function (a, b) {\n            var ref = a.types || [0, 0, 0];\n            var astatics = ref[0];\n            var adynamics = ref[1];\n            var astars = ref[2];\n            var ref$1 = b.types || [0, 0, 0];\n            var bstatics = ref$1[0];\n            var bdynamics = ref$1[1];\n            var bstars = ref$1[2];\n            if (astars !== bstars) {\n                return astars - bstars;\n            }\n            if (astars) {\n                if (astatics !== bstatics) {\n                    return bstatics - astatics;\n                }\n                if (adynamics !== bdynamics) {\n                    return bdynamics - adynamics;\n                }\n            }\n            if (adynamics !== bdynamics) {\n                return adynamics - bdynamics;\n            }\n            if (astatics !== bstatics) {\n                return bstatics - astatics;\n            }\n            return 0;\n        });\n    }\n    function recognizeChar(states, ch) {\n        var nextStates = [];\n        for (var i = 0, l = states.length; i < l; i++) {\n            var state = states[i];\n            nextStates = nextStates.concat(state.match(ch));\n        }\n        return nextStates;\n    }\n    var RecognizeResults = function RecognizeResults(queryParams) {\n        this.length = 0;\n        this.queryParams = queryParams || {};\n    };\n\n    RecognizeResults.prototype.splice = Array.prototype.splice;\n    RecognizeResults.prototype.slice = Array.prototype.slice;\n    RecognizeResults.prototype.push = Array.prototype.push;\n    function findHandler(state, originalPath, queryParams) {\n        var handlers = state.handlers;\n        var regex = state.regex();\n        if (!regex || !handlers) {\n            throw new Error(\"state not initialized\");\n        }\n        var captures = originalPath.match(regex);\n        var currentCapture = 1;\n        var result = new RecognizeResults(queryParams);\n        result.length = handlers.length;\n        for (var i = 0; i < handlers.length; i++) {\n            var handler = handlers[i];\n            var names = handler.names;\n            var shouldDecodes = handler.shouldDecodes;\n            var params = EmptyObject;\n            var isDynamic = false;\n            if (names !== EmptyArray && shouldDecodes !== EmptyArray) {\n                for (var j = 0; j < names.length; j++) {\n                    isDynamic = true;\n                    var name = names[j];\n                    var capture = captures && captures[currentCapture++];\n                    if (params === EmptyObject) {\n                        params = {};\n                    }\n                    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {\n                        params[name] = capture && decodeURIComponent(capture);\n                    } else {\n                        params[name] = capture;\n                    }\n                }\n            }\n            result[i] = {\n                handler: handler.handler,\n                params: params,\n                isDynamic: isDynamic\n            };\n        }\n        return result;\n    }\n    function decodeQueryParamPart(part) {\n        // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n        part = part.replace(/\\+/gm, \"%20\");\n        var result;\n        try {\n            result = decodeURIComponent(part);\n        } catch (error) {\n            result = \"\";\n        }\n        return result;\n    }\n    var RouteRecognizer = function RouteRecognizer() {\n        this.names = createMap();\n        var states = [];\n        var state = new State(states, 0, -1 /* ANY */, true, false);\n        states[0] = state;\n        this.states = states;\n        this.rootState = state;\n    };\n    RouteRecognizer.prototype.add = function add(routes, options) {\n        var currentState = this.rootState;\n        var pattern = \"^\";\n        var types = [0, 0, 0];\n        var handlers = new Array(routes.length);\n        var allSegments = [];\n        var isEmpty = true;\n        var j = 0;\n        for (var i = 0; i < routes.length; i++) {\n            var route = routes[i];\n            var ref = parse(allSegments, route.path, types);\n            var names = ref.names;\n            var shouldDecodes = ref.shouldDecodes;\n            // preserve j so it points to the start of newly added segments\n            for (; j < allSegments.length; j++) {\n                var segment = allSegments[j];\n                if (segment.type === 4 /* Epsilon */) {\n                        continue;\n                    }\n                isEmpty = false;\n                // Add a \"/\" for the new segment\n                currentState = currentState.put(47 /* SLASH */, false, false);\n                pattern += \"/\";\n                // Add a representation of the segment to the NFA and regex\n                currentState = eachChar[segment.type](segment, currentState);\n                pattern += regex[segment.type](segment);\n            }\n            handlers[i] = {\n                handler: route.handler,\n                names: names,\n                shouldDecodes: shouldDecodes\n            };\n        }\n        if (isEmpty) {\n            currentState = currentState.put(47 /* SLASH */, false, false);\n            pattern += \"/\";\n        }\n        currentState.handlers = handlers;\n        currentState.pattern = pattern + \"$\";\n        currentState.types = types;\n        var name;\n        if (typeof options === \"object\" && options !== null && options.as) {\n            name = options.as;\n        }\n        if (name) {\n            // if (this.names[name]) {\n            //   throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n            // }\n            this.names[name] = {\n                segments: allSegments,\n                handlers: handlers\n            };\n        }\n    };\n    RouteRecognizer.prototype.handlersFor = function handlersFor(name) {\n        var route = this.names[name];\n        if (!route) {\n            throw new Error(\"There is no route named \" + name);\n        }\n        var result = new Array(route.handlers.length);\n        for (var i = 0; i < route.handlers.length; i++) {\n            var handler = route.handlers[i];\n            result[i] = handler;\n        }\n        return result;\n    };\n    RouteRecognizer.prototype.hasRoute = function hasRoute(name) {\n        return !!this.names[name];\n    };\n    RouteRecognizer.prototype.generate = function generate$1(name, params) {\n        var route = this.names[name];\n        var output = \"\";\n        if (!route) {\n            throw new Error(\"There is no route named \" + name);\n        }\n        var segments = route.segments;\n        for (var i = 0; i < segments.length; i++) {\n            var segment = segments[i];\n            if (segment.type === 4 /* Epsilon */) {\n                    continue;\n                }\n            output += \"/\";\n            output += generate[segment.type](segment, params);\n        }\n        if (output.charAt(0) !== \"/\") {\n            output = \"/\" + output;\n        }\n        if (params && params.queryParams) {\n            output += this.generateQueryString(params.queryParams);\n        }\n        return output;\n    };\n    RouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {\n        var pairs = [];\n        var keys = Object.keys(params);\n        keys.sort();\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = params[key];\n            if (value == null) {\n                continue;\n            }\n            var pair = encodeURIComponent(key);\n            if (isArray(value)) {\n                for (var j = 0; j < value.length; j++) {\n                    var arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n                    pairs.push(arrayPair);\n                }\n            } else {\n                pair += \"=\" + encodeURIComponent(value);\n                pairs.push(pair);\n            }\n        }\n        if (pairs.length === 0) {\n            return \"\";\n        }\n        return \"?\" + pairs.join(\"&\");\n    };\n    RouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {\n        var pairs = queryString.split(\"&\");\n        var queryParams = {};\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i].split(\"=\"),\n                key = decodeQueryParamPart(pair[0]),\n                keyLength = key.length,\n                isArray = false,\n                value = void 0;\n            if (pair.length === 1) {\n                value = \"true\";\n            } else {\n                // Handle arrays\n                if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n                    isArray = true;\n                    key = key.slice(0, keyLength - 2);\n                    if (!queryParams[key]) {\n                        queryParams[key] = [];\n                    }\n                }\n                value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n            }\n            if (isArray) {\n                queryParams[key].push(value);\n            } else {\n                queryParams[key] = value;\n            }\n        }\n        return queryParams;\n    };\n    RouteRecognizer.prototype.recognize = function recognize(path) {\n        var results;\n        var states = [this.rootState];\n        var queryParams = {};\n        var isSlashDropped = false;\n        var hashStart = path.indexOf(\"#\");\n        if (hashStart !== -1) {\n            path = path.substr(0, hashStart);\n        }\n        var queryStart = path.indexOf(\"?\");\n        if (queryStart !== -1) {\n            var queryString = path.substr(queryStart + 1, path.length);\n            path = path.substr(0, queryStart);\n            queryParams = this.parseQueryString(queryString);\n        }\n        if (path.charAt(0) !== \"/\") {\n            path = \"/\" + path;\n        }\n        var originalPath = path;\n        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n            path = normalizePath(path);\n        } else {\n            path = decodeURI(path);\n            originalPath = decodeURI(originalPath);\n        }\n        var pathLen = path.length;\n        if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n            path = path.substr(0, pathLen - 1);\n            originalPath = originalPath.substr(0, originalPath.length - 1);\n            isSlashDropped = true;\n        }\n        for (var i = 0; i < path.length; i++) {\n            states = recognizeChar(states, path.charCodeAt(i));\n            if (!states.length) {\n                break;\n            }\n        }\n        var solutions = [];\n        for (var i$1 = 0; i$1 < states.length; i$1++) {\n            if (states[i$1].handlers) {\n                solutions.push(states[i$1]);\n            }\n        }\n        states = sortSolutions(solutions);\n        var state = solutions[0];\n        if (state && state.handlers) {\n            // if a trailing slash was dropped and a star segment is the last segment\n            // specified, put the trailing slash back\n            if (isSlashDropped && state.pattern && state.pattern.slice(-5) === \"(.+)$\") {\n                originalPath = originalPath + \"/\";\n            }\n            results = findHandler(state, originalPath, queryParams);\n        }\n        return results;\n    };\n    RouteRecognizer.VERSION = \"0.3.3\";\n    // Set to false to opt-out of encoding and decoding path segments.\n    // See https://github.com/tildeio/route-recognizer/pull/55\n    RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n    RouteRecognizer.Normalizer = {\n        normalizeSegment: normalizeSegment, normalizePath: normalizePath, encodePathSegment: encodePathSegment\n    };\n    RouteRecognizer.prototype.map = map;\n\n    exports.default = RouteRecognizer;\n});","enifed('router', ['exports', 'ember-babel', 'route-recognizer', 'rsvp'], function (exports, _emberBabel, _routeRecognizer, _rsvp) {\n  'use strict';\n\n  exports.Transition = undefined;\n\n\n  var slice = Array.prototype.slice;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /**\n    Determines if an object is Promise by checking if it is \"thenable\".\n  **/\n  function isPromise(obj) {\n    return (typeof obj === 'object' && obj !== null || typeof obj === 'function') && typeof obj.then === 'function';\n  }\n\n  function merge(hash, other) {\n    for (var prop in other) {\n      if (hasOwnProperty.call(other, prop)) {\n        hash[prop] = other[prop];\n      }\n    }\n  }\n\n  /**\n    @private\n  \n    Extracts query params from the end of an array\n  **/\n  function extractQueryParams(array) {\n    var len = array && array.length,\n        head = void 0,\n        queryParams = void 0;\n\n    if (len && len > 0 && array[len - 1] && array[len - 1].hasOwnProperty('queryParams')) {\n      queryParams = array[len - 1].queryParams;\n      head = slice.call(array, 0, len - 1);\n      return [head, queryParams];\n    } else {\n      return [array, null];\n    }\n  }\n\n  /**\n    @private\n  \n    Coerces query param properties and array elements into strings.\n  **/\n  function coerceQueryParamsToString(queryParams) {\n    for (var key in queryParams) {\n      if (typeof queryParams[key] === 'number') {\n        queryParams[key] = '' + queryParams[key];\n      } else if (Array.isArray(queryParams[key])) {\n        for (var i = 0, l = queryParams[key].length; i < l; i++) {\n          queryParams[key][i] = '' + queryParams[key][i];\n        }\n      }\n    }\n  }\n  /**\n    @private\n   */\n  function _log(router, sequence, msg) {\n    if (!router.log) {\n      return;\n    }\n\n    if (arguments.length === 3) {\n      router.log('Transition #' + sequence + ': ' + msg);\n    } else {\n      msg = sequence;\n      router.log(msg);\n    }\n  }\n\n  function isParam(object) {\n    return typeof object === 'string' || object instanceof String || typeof object === 'number' || object instanceof Number;\n  }\n\n  function forEach(array, callback) {\n    for (var i = 0, l = array.length; i < l && false !== callback(array[i]); i++) {\n      // empty intentionally\n    }\n  }\n\n  function _trigger(router, handlerInfos, ignoreFailure, args) {\n    if (router.triggerEvent) {\n      router.triggerEvent(handlerInfos, ignoreFailure, args);\n      return;\n    }\n\n    var name = args.shift();\n\n    if (!handlerInfos) {\n      if (ignoreFailure) {\n        return;\n      }\n      throw new Error(\"Could not trigger event '\" + name + \"'. There are no active handlers\");\n    }\n\n    var eventWasHandled = false;\n\n    function delayedEvent(name, args, handler) {\n      handler.events[name].apply(handler, args);\n    }\n\n    for (var i = handlerInfos.length - 1; i >= 0; i--) {\n      var handlerInfo = handlerInfos[i],\n          handler = handlerInfo.handler;\n\n      // If there is no handler, it means the handler hasn't resolved yet which\n      // means that we should trigger the event later when the handler is available\n      if (!handler) {\n        handlerInfo.handlerPromise.then(delayedEvent.bind(null, name, args));\n        continue;\n      }\n\n      if (handler.events && handler.events[name]) {\n        if (handler.events[name].apply(handler, args) === true) {\n          eventWasHandled = true;\n        } else {\n          return;\n        }\n      }\n    }\n\n    // In the case that we got an UnrecognizedURLError as an event with no handler,\n    // let it bubble up\n    if (name === 'error' && args[0].name === 'UnrecognizedURLError') {\n      throw args[0];\n    } else if (!eventWasHandled && !ignoreFailure) {\n      throw new Error(\"Nothing handled the event '\" + name + \"'.\");\n    }\n  }\n\n  function getChangelist(oldObject, newObject) {\n    var key = void 0;\n    var results = {\n      all: {},\n      changed: {},\n      removed: {}\n    };\n\n    merge(results.all, newObject);\n\n    var didChange = false;\n    coerceQueryParamsToString(oldObject);\n    coerceQueryParamsToString(newObject);\n\n    // Calculate removals\n    for (key in oldObject) {\n      if (hasOwnProperty.call(oldObject, key)) {\n        if (!hasOwnProperty.call(newObject, key)) {\n          didChange = true;\n          results.removed[key] = oldObject[key];\n        }\n      }\n    }\n\n    // Calculate changes\n    for (key in newObject) {\n      if (hasOwnProperty.call(newObject, key)) {\n        if (Array.isArray(oldObject[key]) && Array.isArray(newObject[key])) {\n          if (oldObject[key].length !== newObject[key].length) {\n            results.changed[key] = newObject[key];\n            didChange = true;\n          } else {\n            for (var i = 0, l = oldObject[key].length; i < l; i++) {\n              if (oldObject[key][i] !== newObject[key][i]) {\n                results.changed[key] = newObject[key];\n                didChange = true;\n              }\n            }\n          }\n        } else {\n          if (oldObject[key] !== newObject[key]) {\n            results.changed[key] = newObject[key];\n            didChange = true;\n          }\n        }\n      }\n    }\n\n    return didChange && results;\n  }\n\n  function _promiseLabel(label) {\n    return 'Router: ' + label;\n  }\n\n  function resolveHook(obj, hookName) {\n    if (!obj) {\n      return;\n    }\n    var underscored = '_' + hookName;\n    return obj[underscored] && underscored || obj[hookName] && hookName;\n  }\n\n  function callHook(obj, _hookName, arg1, arg2) {\n    var hookName = resolveHook(obj, _hookName);\n    return hookName && obj[hookName].call(obj, arg1, arg2);\n  }\n\n  function applyHook(obj, _hookName, args) {\n    var hookName = resolveHook(obj, _hookName);\n    if (hookName) {\n      if (args.length === 0) {\n        return obj[hookName].call(obj);\n      } else if (args.length === 1) {\n        return obj[hookName].call(obj, args[0]);\n      } else if (args.length === 2) {\n        return obj[hookName].call(obj, args[0], args[1]);\n      } else {\n        return obj[hookName].apply(obj, args);\n      }\n    }\n  }\n\n  function TransitionState() {\n    this.handlerInfos = [];\n    this.queryParams = {};\n    this.params = {};\n  }\n\n  TransitionState.prototype = {\n    promiseLabel: function (label) {\n      var targetName = '';\n      forEach(this.handlerInfos, function (handlerInfo) {\n        if (targetName !== '') {\n          targetName += '.';\n        }\n        targetName += handlerInfo.name;\n      });\n      return _promiseLabel(\"'\" + targetName + \"': \" + label);\n    },\n\n    resolve: function (shouldContinue, payload) {\n      // First, calculate params for this state. This is useful\n      // information to provide to the various route hooks.\n      var params = this.params;\n      forEach(this.handlerInfos, function (handlerInfo) {\n        params[handlerInfo.name] = handlerInfo.params || {};\n      });\n\n      payload = payload || {};\n      payload.resolveIndex = 0;\n\n      var currentState = this;\n      var wasAborted = false;\n\n      // The prelude RSVP.resolve() asyncs us into the promise land.\n      return _rsvp.Promise.resolve(null, this.promiseLabel('Start transition')).then(resolveOneHandlerInfo, null, this.promiseLabel('Resolve handler')).catch(handleError, this.promiseLabel('Handle error'));\n\n      function innerShouldContinue() {\n        return _rsvp.Promise.resolve(shouldContinue(), currentState.promiseLabel('Check if should continue')).catch(function (reason) {\n          // We distinguish between errors that occurred\n          // during resolution (e.g. before\"Model/model/afterModel),\n          // and aborts due to a rejecting promise from shouldContinue().\n          wasAborted = true;\n          return _rsvp.Promise.reject(reason);\n        }, currentState.promiseLabel('Handle abort'));\n      }\n\n      function handleError(error) {\n        // This is the only possible\n        // reject value of TransitionState#resolve\n        var handlerInfos = currentState.handlerInfos;\n        var errorHandlerIndex = payload.resolveIndex >= handlerInfos.length ? handlerInfos.length - 1 : payload.resolveIndex;\n        return _rsvp.Promise.reject({\n          error: error,\n          handlerWithError: currentState.handlerInfos[errorHandlerIndex].handler,\n          wasAborted: wasAborted,\n          state: currentState\n        });\n      }\n\n      function proceed(resolvedHandlerInfo) {\n        var wasAlreadyResolved = currentState.handlerInfos[payload.resolveIndex].isResolved;\n\n        // Swap the previously unresolved handlerInfo with\n        // the resolved handlerInfo\n        currentState.handlerInfos[payload.resolveIndex++] = resolvedHandlerInfo;\n\n        if (!wasAlreadyResolved) {\n          // Call the redirect hook. The reason we call it here\n          // vs. afterModel is so that redirects into child\n          // routes don't re-run the model hooks for this\n          // already-resolved route.\n          var handler = resolvedHandlerInfo.handler;\n          callHook(handler, 'redirect', resolvedHandlerInfo.context, payload);\n        }\n\n        // Proceed after ensuring that the redirect hook\n        // didn't abort this transition by transitioning elsewhere.\n        return innerShouldContinue().then(resolveOneHandlerInfo, null, currentState.promiseLabel('Resolve handler'));\n      }\n\n      function resolveOneHandlerInfo() {\n        if (payload.resolveIndex === currentState.handlerInfos.length) {\n          // This is is the only possible\n          // fulfill value of TransitionState#resolve\n          return {\n            error: null,\n            state: currentState\n          };\n        }\n\n        var handlerInfo = currentState.handlerInfos[payload.resolveIndex];\n\n        return handlerInfo.resolve(innerShouldContinue, payload).then(proceed, null, currentState.promiseLabel('Proceed'));\n      }\n    }\n  };\n\n  function TransitionAbortedError(message) {\n    if (!(this instanceof TransitionAbortedError)) {\n      return new TransitionAbortedError(message);\n    }\n\n    var error = Error.call(this, message);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, TransitionAbortedError);\n    } else {\n      this.stack = error.stack;\n    }\n\n    this.description = error.description;\n    this.fileName = error.fileName;\n    this.lineNumber = error.lineNumber;\n    this.message = error.message || 'TransitionAborted';\n    this.name = 'TransitionAborted';\n    this.number = error.number;\n    this.code = error.code;\n  }\n\n  TransitionAbortedError.prototype = Object.create(Error.prototype);\n\n  /**\n    A Transition is a thennable (a promise-like object) that represents\n    an attempt to transition to another route. It can be aborted, either\n    explicitly via `abort` or by attempting another transition while a\n    previous one is still underway. An aborted transition can also\n    be `retry()`d later.\n  \n    @class Transition\n    @constructor\n    @param {Object} router\n    @param {Object} intent\n    @param {Object} state\n    @param {Object} error\n    @private\n   */\n\n  var Transition = function () {\n    function Transition(router, intent, state, error, previousTransition) {\n      var _this = this;\n\n      (0, _emberBabel.classCallCheck)(this, Transition);\n\n      this.state = state || router.state;\n      this.intent = intent;\n      this.router = router;\n      this.data = this.intent && this.intent.data || {};\n      this.resolvedModels = {};\n      this.queryParams = {};\n      this.promise = undefined;\n      this.error = undefined;\n      this.params = undefined;\n      this.handlerInfos = undefined;\n      this.targetName = undefined;\n      this.pivotHandler = undefined;\n      this.sequence = undefined;\n      this.isAborted = false;\n      this.isActive = true;\n      this.urlMethod = 'update';\n      this.resolveIndex = 0;\n      this.queryParamsOnly = false;\n      this.isTransition = true;\n\n      if (error) {\n        this.promise = _rsvp.Promise.reject(error);\n        this.error = error;\n        return;\n      }\n\n      // if you're doing multiple redirects, need the new transition to know if it\n      // is actually part of the first transition or not. Any further redirects\n      // in the initial transition also need to know if they are part of the\n      // initial transition\n      this.isCausedByAbortingTransition = !!previousTransition;\n      this.isCausedByInitialTransition = previousTransition && (previousTransition.isCausedByInitialTransition || previousTransition.sequence === 0);\n\n      if (state) {\n        this.params = state.params;\n        this.queryParams = state.queryParams;\n        this.handlerInfos = state.handlerInfos;\n\n        var len = state.handlerInfos.length;\n        if (len) {\n          this.targetName = state.handlerInfos[len - 1].name;\n        }\n\n        for (var i = 0; i < len; ++i) {\n          var handlerInfo = state.handlerInfos[i];\n\n          // TODO: this all seems hacky\n          if (!handlerInfo.isResolved) {\n            break;\n          }\n          this.pivotHandler = handlerInfo.handler;\n        }\n\n        this.sequence = router.currentSequence++;\n        this.promise = state.resolve(function () {\n          if (_this.isAborted) {\n            return _rsvp.Promise.reject(undefined, _promiseLabel('Transition aborted - reject'));\n          }\n        }, this).catch(function (result) {\n          if (result.wasAborted || _this.isAborted) {\n            return _rsvp.Promise.reject(logAbort(_this));\n          } else {\n            _this.trigger('error', result.error, _this, result.handlerWithError);\n            _this.abort();\n            return _rsvp.Promise.reject(result.error);\n          }\n        }, _promiseLabel('Handle Abort'));\n      } else {\n        this.promise = _rsvp.Promise.resolve(this.state);\n        this.params = {};\n      }\n    }\n\n    Transition.prototype.isExiting = function isExiting(handler) {\n      var handlerInfos = this.handlerInfos;\n      for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n        var handlerInfo = handlerInfos[i];\n        if (handlerInfo.name === handler || handlerInfo.handler === handler) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    Transition.prototype.then = function then(onFulfilled, onRejected, label) {\n      return this.promise.then(onFulfilled, onRejected, label);\n    };\n\n    Transition.prototype.catch = function _catch(onRejection, label) {\n      return this.promise.catch(onRejection, label);\n    };\n\n    Transition.prototype.finally = function _finally(callback, label) {\n      return this.promise.finally(callback, label);\n    };\n\n    Transition.prototype.abort = function abort() {\n      if (this.isAborted) {\n        return this;\n      }\n      _log(this.router, this.sequence, this.targetName + ': transition was aborted');\n      this.intent.preTransitionState = this.router.state;\n      this.isAborted = true;\n      this.isActive = false;\n      this.router.activeTransition = null;\n      return this;\n    };\n\n    Transition.prototype.retry = function retry() {\n      // TODO: add tests for merged state retry()s\n      this.abort();\n      var newTransition = this.router.transitionByIntent(this.intent, false);\n\n      // inheriting a `null` urlMethod is not valid\n      // the urlMethod is only set to `null` when\n      // the transition is initiated *after* the url\n      // has been updated (i.e. `router.handleURL`)\n      //\n      // in that scenario, the url method cannot be\n      // inherited for a new transition because then\n      // the url would not update even though it should\n      if (this.urlMethod !== null) {\n        newTransition.method(this.urlMethod);\n      }\n      return newTransition;\n    };\n\n    Transition.prototype.method = function method(_method) {\n      this.urlMethod = _method;\n      return this;\n    };\n\n    Transition.prototype.trigger = function trigger(ignoreFailure) {\n      var args = slice.call(arguments);\n      if (typeof ignoreFailure === 'boolean') {\n        args.shift();\n      } else {\n        // Throw errors on unhandled trigger events by default\n        ignoreFailure = false;\n      }\n      _trigger(this.router, this.state.handlerInfos.slice(0, this.resolveIndex + 1), ignoreFailure, args);\n    };\n\n    Transition.prototype.followRedirects = function followRedirects() {\n      var router = this.router;\n      return this.promise.catch(function (reason) {\n        if (router.activeTransition) {\n          return router.activeTransition.followRedirects();\n        }\n        return _rsvp.Promise.reject(reason);\n      });\n    };\n\n    Transition.prototype.toString = function toString() {\n      return 'Transition (sequence ' + this.sequence + ')';\n    };\n\n    Transition.prototype.log = function log(message) {\n      _log(this.router, this.sequence, message);\n    };\n\n    return Transition;\n  }();\n\n  // Alias 'trigger' as 'send'\n  Transition.prototype.send = Transition.prototype.trigger;\n\n  /**\n    @private\n  \n    Logs and returns an instance of TransitionAborted.\n   */\n  function logAbort(transition) {\n    _log(transition.router, transition.sequence, 'detected abort.');\n    return new TransitionAbortedError();\n  }\n\n  var TransitionIntent = function TransitionIntent() {\n    (0, _emberBabel.classCallCheck)(this, TransitionIntent);\n\n    this.data = this.data || {};\n  };\n\n  var DEFAULT_HANDLER = Object.freeze({});\n\n  var HandlerInfo = function () {\n    function HandlerInfo(_props) {\n      (0, _emberBabel.classCallCheck)(this, HandlerInfo);\n\n      var props = _props || {};\n\n      // initialize local properties to ensure consistent object shape\n      this._handler = DEFAULT_HANDLER;\n      this._handlerPromise = null;\n      this.factory = null; // Injected by the handler info factory\n      this.name = props.name;\n\n      for (var prop in props) {\n        if (prop === 'handler') {\n          this._processHandler(props.handler);\n        } else {\n          this[prop] = props[prop];\n        }\n      }\n    }\n\n    HandlerInfo.prototype.getHandler = function getHandler() {};\n\n    HandlerInfo.prototype.fetchHandler = function fetchHandler() {\n      var handler = this.getHandler(this.name);\n\n      return this._processHandler(handler);\n    };\n\n    HandlerInfo.prototype._processHandler = function _processHandler(handler) {\n      var _this2 = this;\n\n      // Setup a handlerPromise so that we can wait for asynchronously loaded handlers\n      this.handlerPromise = _rsvp.Promise.resolve(handler);\n\n      // Wait until the 'handler' property has been updated when chaining to a handler\n      // that is a promise\n      if (isPromise(handler)) {\n        this.handlerPromise = this.handlerPromise.then(function (h) {\n          return _this2.updateHandler(h);\n        });\n        // set to undefined to avoid recursive loop in the handler getter\n        return this.handler = undefined;\n      } else if (handler) {\n        return this.updateHandler(handler);\n      }\n    };\n\n    HandlerInfo.prototype.log = function log(payload, message) {\n      if (payload.log) {\n        payload.log(this.name + ': ' + message);\n      }\n    };\n\n    HandlerInfo.prototype.promiseLabel = function promiseLabel(label) {\n      return _promiseLabel(\"'\" + this.name + \"' \" + label);\n    };\n\n    HandlerInfo.prototype.getUnresolved = function getUnresolved() {\n      return this;\n    };\n\n    HandlerInfo.prototype.serialize = function serialize() {\n      return this.params || {};\n    };\n\n    HandlerInfo.prototype.updateHandler = function updateHandler(handler) {\n      // Store the name of the handler on the handler for easy checks later\n      handler._handlerName = this.name;\n      return this.handler = handler;\n    };\n\n    HandlerInfo.prototype.resolve = function resolve(shouldContinue, payload) {\n      var checkForAbort = this.checkForAbort.bind(this, shouldContinue),\n          beforeModel = this.runBeforeModelHook.bind(this, payload),\n          model = this.getModel.bind(this, payload),\n          afterModel = this.runAfterModelHook.bind(this, payload),\n          becomeResolved = this.becomeResolved.bind(this, payload),\n          self = this;\n\n      return _rsvp.Promise.resolve(this.handlerPromise, this.promiseLabel('Start handler')).then(function (handler) {\n        // We nest this chain in case the handlerPromise has an error so that\n        // we don't have to bubble it through every step\n        return _rsvp.Promise.resolve(handler).then(checkForAbort, null, self.promiseLabel('Check for abort')).then(beforeModel, null, self.promiseLabel('Before model')).then(checkForAbort, null, self.promiseLabel(\"Check if aborted during 'beforeModel' hook\")).then(model, null, self.promiseLabel('Model')).then(checkForAbort, null, self.promiseLabel(\"Check if aborted in 'model' hook\")).then(afterModel, null, self.promiseLabel('After model')).then(checkForAbort, null, self.promiseLabel(\"Check if aborted in 'afterModel' hook\")).then(becomeResolved, null, self.promiseLabel('Become resolved'));\n      }, function (error) {\n        throw error;\n      });\n    };\n\n    HandlerInfo.prototype.runBeforeModelHook = function runBeforeModelHook(payload) {\n      if (payload.trigger) {\n        payload.trigger(true, 'willResolveModel', payload, this.handler);\n      }\n      return this.runSharedModelHook(payload, 'beforeModel', []);\n    };\n\n    HandlerInfo.prototype.runAfterModelHook = function runAfterModelHook(payload, resolvedModel) {\n      // Stash the resolved model on the payload.\n      // This makes it possible for users to swap out\n      // the resolved model in afterModel.\n      var name = this.name;\n      this.stashResolvedModel(payload, resolvedModel);\n\n      return this.runSharedModelHook(payload, 'afterModel', [resolvedModel]).then(function () {\n        // Ignore the fulfilled value returned from afterModel.\n        // Return the value stashed in resolvedModels, which\n        // might have been swapped out in afterModel.\n        return payload.resolvedModels[name];\n      }, null, this.promiseLabel('Ignore fulfillment value and return model value'));\n    };\n\n    HandlerInfo.prototype.runSharedModelHook = function runSharedModelHook(payload, hookName, args) {\n      this.log(payload, 'calling ' + hookName + ' hook');\n\n      if (this.queryParams) {\n        args.push(this.queryParams);\n      }\n      args.push(payload);\n\n      var result = applyHook(this.handler, hookName, args);\n\n      if (result && result.isTransition) {\n        result = null;\n      }\n\n      return _rsvp.Promise.resolve(result, this.promiseLabel('Resolve value returned from one of the model hooks'));\n    };\n\n    HandlerInfo.prototype.getModel = function getModel() {};\n\n    HandlerInfo.prototype.checkForAbort = function checkForAbort(shouldContinue, promiseValue) {\n      return _rsvp.Promise.resolve(shouldContinue(), this.promiseLabel('Check for abort')).then(function () {\n        // We don't care about shouldContinue's resolve value;\n        // pass along the original value passed to this fn.\n        return promiseValue;\n      }, null, this.promiseLabel('Ignore fulfillment value and continue'));\n    };\n\n    HandlerInfo.prototype.stashResolvedModel = function stashResolvedModel(payload, resolvedModel) {\n      payload.resolvedModels = payload.resolvedModels || {};\n      payload.resolvedModels[this.name] = resolvedModel;\n    };\n\n    HandlerInfo.prototype.becomeResolved = function becomeResolved(payload, resolvedContext) {\n      var params = this.serialize(resolvedContext);\n\n      if (payload) {\n        this.stashResolvedModel(payload, resolvedContext);\n        payload.params = payload.params || {};\n        payload.params[this.name] = params;\n      }\n\n      return this.factory('resolved', {\n        context: resolvedContext,\n        name: this.name,\n        handler: this.handler,\n        params: params\n      });\n    };\n\n    HandlerInfo.prototype.shouldSupercede = function shouldSupercede(other) {\n      // Prefer this newer handlerInfo over `other` if:\n      // 1) The other one doesn't exist\n      // 2) The names don't match\n      // 3) This handler has a context that doesn't match\n      //    the other one (or the other one doesn't have one).\n      // 4) This handler has parameters that don't match the other.\n      if (!other) {\n        return true;\n      }\n\n      var contextsMatch = other.context === this.context;\n      return other.name !== this.name || this.hasOwnProperty('context') && !contextsMatch || this.hasOwnProperty('params') && !paramsMatch(this.params, other.params);\n    };\n\n    (0, _emberBabel.createClass)(HandlerInfo, [{\n      key: 'handler',\n      get: function () {\n        // _handler could be set to either a handler object or undefined, so we\n        // compare against a default reference to know when it's been set\n        if (this._handler !== DEFAULT_HANDLER) {\n          return this._handler;\n        }\n\n        return this.fetchHandler();\n      },\n      set: function (handler) {\n        return this._handler = handler;\n      }\n    }, {\n      key: 'handlerPromise',\n      get: function () {\n        if (this._handlerPromise !== null) {\n          return this._handlerPromise;\n        }\n\n        this.fetchHandler();\n\n        return this._handlerPromise;\n      },\n      set: function (handlerPromise) {\n        this._handlerPromise = handlerPromise;\n\n        return handlerPromise;\n      }\n    }]);\n    return HandlerInfo;\n  }();\n\n  // this is bonkers, we require that `context` be set on on the\n  // HandlerInfo prototype to null because the checks in\n  // `NamedTransitionIntent.prototype.applyToHandlers` here\n  // https://github.com/tildeio/router.js/blob/v1.2.8/lib/router/transition-intent/named-transition-intent.js#L76-L81\n  // check of `oldHandlerInfo.context === newHandlerInfo.context` and assumes\n  // that the params _must_ match also in that case.\n  //\n  // The only reason `oldHandlerInfo.context` and `newHandlerInfo.context` did not\n  // match in prior versions is because if the context isn't set yet (on newHandlerInfo)\n  // is because it inherits the `null` from the prototype vs `undefined` (on\n  // the oldHandlerInfo).\n  //\n  // A future refactoring should remove that conditional, and fix the hand full of\n  // failing tests.\n  HandlerInfo.prototype.context = null;\n\n  function paramsMatch(a, b) {\n    if (!a ^ !b) {\n      // Only one is null.\n      return false;\n    }\n\n    if (!a) {\n      // Both must be null.\n      return true;\n    }\n\n    // Note: this assumes that both params have the same\n    // number of keys, but since we're comparing the\n    // same handlers, they should.\n    for (var k in a) {\n      if (a.hasOwnProperty(k) && a[k] !== b[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  var ResolvedHandlerInfo = function (_HandlerInfo) {\n    (0, _emberBabel.inherits)(ResolvedHandlerInfo, _HandlerInfo);\n\n    function ResolvedHandlerInfo(props) {\n      (0, _emberBabel.classCallCheck)(this, ResolvedHandlerInfo);\n\n      var _this3 = (0, _emberBabel.possibleConstructorReturn)(this, _HandlerInfo.call(this, props));\n\n      _this3.isResolved = true;\n      return _this3;\n    }\n\n    ResolvedHandlerInfo.prototype.resolve = function resolve(shouldContinue, payload) {\n      // A ResolvedHandlerInfo just resolved with itself.\n      if (payload && payload.resolvedModels) {\n        payload.resolvedModels[this.name] = this.context;\n      }\n      return _rsvp.Promise.resolve(this, this.promiseLabel('Resolve'));\n    };\n\n    ResolvedHandlerInfo.prototype.getUnresolved = function getUnresolved() {\n      return this.factory('param', {\n        name: this.name,\n        handler: this.handler,\n        params: this.params\n      });\n    };\n\n    return ResolvedHandlerInfo;\n  }(HandlerInfo);\n\n  var UnresolvedHandlerInfoByObject = function (_HandlerInfo2) {\n    (0, _emberBabel.inherits)(UnresolvedHandlerInfoByObject, _HandlerInfo2);\n\n    function UnresolvedHandlerInfoByObject(props) {\n      (0, _emberBabel.classCallCheck)(this, UnresolvedHandlerInfoByObject);\n\n      var _this4 = (0, _emberBabel.possibleConstructorReturn)(this, _HandlerInfo2.call(this, props));\n\n      _this4.names = _this4.names || [];\n      return _this4;\n    }\n\n    UnresolvedHandlerInfoByObject.prototype.getModel = function getModel(payload) {\n      this.log(payload, this.name + ': resolving provided model');\n      return _rsvp.Promise.resolve(this.context);\n    };\n\n    UnresolvedHandlerInfoByObject.prototype.serialize = function serialize(_model) {\n      var model = _model || this.context,\n          names = this.names;\n\n      var object = {};\n      if (isParam(model)) {\n        object[names[0]] = model;\n        return object;\n      }\n\n      // Use custom serialize if it exists.\n      if (this.serializer) {\n        // invoke this.serializer unbound (getSerializer returns a stateless function)\n        return this.serializer.call(null, model, names);\n      } else if (this.handler && this.handler.serialize) {\n        return this.handler.serialize(model, names);\n      }\n\n      if (names.length !== 1) {\n        return;\n      }\n\n      var name = names[0];\n\n      if (/_id$/.test(name)) {\n        object[name] = model.id;\n      } else {\n        object[name] = model;\n      }\n      return object;\n    };\n\n    return UnresolvedHandlerInfoByObject;\n  }(HandlerInfo);\n\n  var UnresolvedHandlerInfoByParam = function (_HandlerInfo3) {\n    (0, _emberBabel.inherits)(UnresolvedHandlerInfoByParam, _HandlerInfo3);\n\n    function UnresolvedHandlerInfoByParam(props) {\n      (0, _emberBabel.classCallCheck)(this, UnresolvedHandlerInfoByParam);\n\n      var _this5 = (0, _emberBabel.possibleConstructorReturn)(this, _HandlerInfo3.call(this, props));\n\n      _this5.params = _this5.params || {};\n      return _this5;\n    }\n\n    UnresolvedHandlerInfoByParam.prototype.getModel = function getModel(payload) {\n      var fullParams = this.params;\n      if (payload && payload.queryParams) {\n        fullParams = {};\n        merge(fullParams, this.params);\n        fullParams.queryParams = payload.queryParams;\n      }\n\n      var handler = this.handler;\n      var hookName = resolveHook(handler, 'deserialize') || resolveHook(handler, 'model');\n\n      return this.runSharedModelHook(payload, hookName, [fullParams]);\n    };\n\n    return UnresolvedHandlerInfoByParam;\n  }(HandlerInfo);\n\n  handlerInfoFactory.klasses = {\n    resolved: ResolvedHandlerInfo,\n    param: UnresolvedHandlerInfoByParam,\n    object: UnresolvedHandlerInfoByObject\n  };\n\n  function handlerInfoFactory(name, props) {\n    var klass = handlerInfoFactory.klasses[name];\n    var handlerInfo = new klass(props || {});\n    handlerInfo.factory = handlerInfoFactory;\n    return handlerInfo;\n  }\n\n  var NamedTransitionIntent = function (_TransitionIntent) {\n    (0, _emberBabel.inherits)(NamedTransitionIntent, _TransitionIntent);\n\n    function NamedTransitionIntent(props) {\n      (0, _emberBabel.classCallCheck)(this, NamedTransitionIntent);\n\n      var _this6 = (0, _emberBabel.possibleConstructorReturn)(this, _TransitionIntent.call(this, props));\n\n      _this6.name = props.name;\n      _this6.pivotHandler = props.pivotHandler;\n      _this6.contexts = props.contexts || [];\n      _this6.queryParams = props.queryParams;\n      return _this6;\n    }\n\n    NamedTransitionIntent.prototype.applyToState = function applyToState(oldState, recognizer, getHandler, isIntermediate, getSerializer) {\n      var partitionedArgs = extractQueryParams([this.name].concat(this.contexts)),\n          pureArgs = partitionedArgs[0],\n          handlers = recognizer.handlersFor(pureArgs[0]);\n\n      var targetRouteName = handlers[handlers.length - 1].handler;\n\n      return this.applyToHandlers(oldState, handlers, getHandler, targetRouteName, isIntermediate, null, getSerializer);\n    };\n\n    NamedTransitionIntent.prototype.applyToHandlers = function applyToHandlers(oldState, handlers, getHandler, targetRouteName, isIntermediate, checkingIfActive, getSerializer) {\n      var i, len;\n      var newState = new TransitionState();\n      var objects = this.contexts.slice(0);\n\n      var invalidateIndex = handlers.length;\n\n      // Pivot handlers are provided for refresh transitions\n      if (this.pivotHandler) {\n        for (i = 0, len = handlers.length; i < len; ++i) {\n          if (handlers[i].handler === this.pivotHandler._handlerName) {\n            invalidateIndex = i;\n            break;\n          }\n        }\n      }\n\n      for (i = handlers.length - 1; i >= 0; --i) {\n        var result = handlers[i];\n        var name = result.handler;\n\n        var oldHandlerInfo = oldState.handlerInfos[i];\n        var newHandlerInfo = null;\n\n        if (result.names.length > 0) {\n          if (i >= invalidateIndex) {\n            newHandlerInfo = this.createParamHandlerInfo(name, getHandler, result.names, objects, oldHandlerInfo);\n          } else {\n            var serializer = getSerializer(name);\n            newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, getHandler, result.names, objects, oldHandlerInfo, targetRouteName, i, serializer);\n          }\n        } else {\n          // This route has no dynamic segment.\n          // Therefore treat as a param-based handlerInfo\n          // with empty params. This will cause the `model`\n          // hook to be called with empty params, which is desirable.\n          newHandlerInfo = this.createParamHandlerInfo(name, getHandler, result.names, objects, oldHandlerInfo);\n        }\n\n        if (checkingIfActive) {\n          // If we're performing an isActive check, we want to\n          // serialize URL params with the provided context, but\n          // ignore mismatches between old and new context.\n          newHandlerInfo = newHandlerInfo.becomeResolved(null, newHandlerInfo.context);\n          var oldContext = oldHandlerInfo && oldHandlerInfo.context;\n          if (result.names.length > 0 && newHandlerInfo.context === oldContext) {\n            // If contexts match in isActive test, assume params also match.\n            // This allows for flexibility in not requiring that every last\n            // handler provide a `serialize` method\n            newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;\n          }\n          newHandlerInfo.context = oldContext;\n        }\n\n        var handlerToUse = oldHandlerInfo;\n        if (i >= invalidateIndex || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {\n          invalidateIndex = Math.min(i, invalidateIndex);\n          handlerToUse = newHandlerInfo;\n        }\n\n        if (isIntermediate && !checkingIfActive) {\n          handlerToUse = handlerToUse.becomeResolved(null, handlerToUse.context);\n        }\n\n        newState.handlerInfos.unshift(handlerToUse);\n      }\n\n      if (objects.length > 0) {\n        throw new Error('More context objects were passed than there are dynamic segments for the route: ' + targetRouteName);\n      }\n\n      if (!isIntermediate) {\n        this.invalidateChildren(newState.handlerInfos, invalidateIndex);\n      }\n\n      merge(newState.queryParams, this.queryParams || {});\n\n      return newState;\n    };\n\n    NamedTransitionIntent.prototype.invalidateChildren = function invalidateChildren(handlerInfos, invalidateIndex) {\n      for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {\n        var handlerInfo = handlerInfos[i];\n        handlerInfos[i] = handlerInfo.getUnresolved();\n      }\n    };\n\n    NamedTransitionIntent.prototype.getHandlerInfoForDynamicSegment = function getHandlerInfoForDynamicSegment(name, getHandler, names, objects, oldHandlerInfo, targetRouteName, i, serializer) {\n      var objectToUse;\n      if (objects.length > 0) {\n        // Use the objects provided for this transition.\n        objectToUse = objects[objects.length - 1];\n        if (isParam(objectToUse)) {\n          return this.createParamHandlerInfo(name, getHandler, names, objects, oldHandlerInfo);\n        } else {\n          objects.pop();\n        }\n      } else if (oldHandlerInfo && oldHandlerInfo.name === name) {\n        // Reuse the matching oldHandlerInfo\n        return oldHandlerInfo;\n      } else {\n        if (this.preTransitionState) {\n          var preTransitionHandlerInfo = this.preTransitionState.handlerInfos[i];\n          objectToUse = preTransitionHandlerInfo && preTransitionHandlerInfo.context;\n        } else {\n          // Ideally we should throw this error to provide maximal\n          // information to the user that not enough context objects\n          // were provided, but this proves too cumbersome in Ember\n          // in cases where inner template helpers are evaluated\n          // before parent helpers un-render, in which cases this\n          // error somewhat prematurely fires.\n          //throw new Error(\"Not enough context objects were provided to complete a transition to \" + targetRouteName + \". Specifically, the \" + name + \" route needs an object that can be serialized into its dynamic URL segments [\" + names.join(', ') + \"]\");\n          return oldHandlerInfo;\n        }\n      }\n\n      return handlerInfoFactory('object', {\n        name: name,\n        getHandler: getHandler,\n        serializer: serializer,\n        context: objectToUse,\n        names: names\n      });\n    };\n\n    NamedTransitionIntent.prototype.createParamHandlerInfo = function createParamHandlerInfo(name, getHandler, names, objects, oldHandlerInfo) {\n      var params = {};\n\n      // Soak up all the provided string/numbers\n      var numNames = names.length;\n      while (numNames--) {\n        // Only use old params if the names match with the new handler\n        var oldParams = oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params || {};\n\n        var peek = objects[objects.length - 1];\n        var paramName = names[numNames];\n        if (isParam(peek)) {\n          params[paramName] = '' + objects.pop();\n        } else {\n          // If we're here, this means only some of the params\n          // were string/number params, so try and use a param\n          // value from a previous handler.\n          if (oldParams.hasOwnProperty(paramName)) {\n            params[paramName] = oldParams[paramName];\n          } else {\n            throw new Error(\"You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route \" + name);\n          }\n        }\n      }\n\n      return handlerInfoFactory('param', {\n        name: name,\n        getHandler: getHandler,\n        params: params\n      });\n    };\n\n    return NamedTransitionIntent;\n  }(TransitionIntent);\n\n  function UnrecognizedURLError(message) {\n    if (!(this instanceof UnrecognizedURLError)) {\n      return new UnrecognizedURLError(message);\n    }\n\n    var error = Error.call(this, message);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnrecognizedURLError);\n    } else {\n      this.stack = error.stack;\n    }\n\n    this.description = error.description;\n    this.fileName = error.fileName;\n    this.lineNumber = error.lineNumber;\n    this.message = error.message || 'UnrecognizedURL';\n    this.name = 'UnrecognizedURLError';\n    this.number = error.number;\n    this.code = error.code;\n  }\n\n  UnrecognizedURLError.prototype = Object.create(Error.prototype);\n\n  var URLTransitionIntent = function (_TransitionIntent2) {\n    (0, _emberBabel.inherits)(URLTransitionIntent, _TransitionIntent2);\n\n    function URLTransitionIntent(props) {\n      (0, _emberBabel.classCallCheck)(this, URLTransitionIntent);\n\n      var _this7 = (0, _emberBabel.possibleConstructorReturn)(this, _TransitionIntent2.call(this, props));\n\n      _this7.url = props.url;\n      return _this7;\n    }\n\n    URLTransitionIntent.prototype.applyToState = function applyToState(oldState, recognizer, getHandler) {\n      var newState = new TransitionState();\n\n      var results = recognizer.recognize(this.url),\n          i,\n          len;\n\n      if (!results) {\n        throw new UnrecognizedURLError(this.url);\n      }\n\n      var statesDiffer = false;\n      var url = this.url;\n\n      // Checks if a handler is accessible by URL. If it is not, an error is thrown.\n      // For the case where the handler is loaded asynchronously, the error will be\n      // thrown once it is loaded.\n      function checkHandlerAccessibility(handler) {\n        if (handler && handler.inaccessibleByURL) {\n          throw new UnrecognizedURLError(url);\n        }\n\n        return handler;\n      }\n\n      for (i = 0, len = results.length; i < len; ++i) {\n        var result = results[i];\n        var name = result.handler;\n        var newHandlerInfo = handlerInfoFactory('param', {\n          name: name,\n          getHandler: getHandler,\n          params: result.params\n        });\n        var handler = newHandlerInfo.handler;\n\n        if (handler) {\n          checkHandlerAccessibility(handler);\n        } else {\n          // If the hanlder is being loaded asynchronously, check if we can\n          // access it after it has resolved\n          newHandlerInfo.handlerPromise = newHandlerInfo.handlerPromise.then(checkHandlerAccessibility);\n        }\n\n        var oldHandlerInfo = oldState.handlerInfos[i];\n        if (statesDiffer || newHandlerInfo.shouldSupercede(oldHandlerInfo)) {\n          statesDiffer = true;\n          newState.handlerInfos[i] = newHandlerInfo;\n        } else {\n          newState.handlerInfos[i] = oldHandlerInfo;\n        }\n      }\n\n      merge(newState.queryParams, results.queryParams);\n\n      return newState;\n    };\n\n    return URLTransitionIntent;\n  }(TransitionIntent);\n\n  var pop = Array.prototype.pop;\n\n  function Router(_options) {\n    var options = _options || {};\n    this.getHandler = options.getHandler || this.getHandler;\n    this.getSerializer = options.getSerializer || this.getSerializer;\n    this.updateURL = options.updateURL || this.updateURL;\n    this.replaceURL = options.replaceURL || this.replaceURL;\n    this.didTransition = options.didTransition || this.didTransition;\n    this.willTransition = options.willTransition || this.willTransition;\n    this.delegate = options.delegate || this.delegate;\n    this.triggerEvent = options.triggerEvent || this.triggerEvent;\n    this.log = options.log || this.log;\n    this.dslCallBacks = []; // NOTE: set by Ember\n    this.state = undefined;\n    this.activeTransition = undefined;\n    this._changedQueryParams = undefined;\n    this.oldState = undefined;\n    this.currentHandlerInfos = undefined;\n    this.currentSequence = 0;\n\n    this.recognizer = new _routeRecognizer.default();\n    this.reset();\n  }\n\n  function getTransitionByIntent(intent, isIntermediate) {\n    var wasTransitioning = !!this.activeTransition;\n    var oldState = wasTransitioning ? this.activeTransition.state : this.state;\n    var newTransition;\n\n    var newState = intent.applyToState(oldState, this.recognizer, this.getHandler, isIntermediate, this.getSerializer);\n    var queryParamChangelist = getChangelist(oldState.queryParams, newState.queryParams);\n\n    if (handlerInfosEqual(newState.handlerInfos, oldState.handlerInfos)) {\n      // This is a no-op transition. See if query params changed.\n      if (queryParamChangelist) {\n        newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);\n        if (newTransition) {\n          newTransition.queryParamsOnly = true;\n          return newTransition;\n        }\n      }\n\n      // No-op. No need to create a new transition.\n      return this.activeTransition || new Transition(this);\n    }\n\n    if (isIntermediate) {\n      setupContexts(this, newState);\n      return;\n    }\n\n    // Create a new transition to the destination route.\n    newTransition = new Transition(this, intent, newState, undefined, this.activeTransition);\n\n    // transition is to same route with same params, only query params differ.\n    // not caught above probably because refresh() has been used\n    if (handlerInfosSameExceptQueryParams(newState.handlerInfos, oldState.handlerInfos)) {\n      newTransition.queryParamsOnly = true;\n    }\n\n    // Abort and usurp any previously active transition.\n    if (this.activeTransition) {\n      this.activeTransition.abort();\n    }\n    this.activeTransition = newTransition;\n\n    // Transition promises by default resolve with resolved state.\n    // For our purposes, swap out the promise to resolve\n    // after the transition has been finalized.\n    newTransition.promise = newTransition.promise.then(function (result) {\n      return finalizeTransition(newTransition, result.state);\n    }, null, _promiseLabel('Settle transition promise when transition is finalized'));\n\n    if (!wasTransitioning) {\n      notifyExistingHandlers(this, newState, newTransition);\n    }\n\n    fireQueryParamDidChange(this, newState, queryParamChangelist);\n\n    return newTransition;\n  }\n\n  Router.prototype = {\n    /**\n      The main entry point into the router. The API is essentially\n      the same as the `map` method in `route-recognizer`.\n       This method extracts the String handler at the last `.to()`\n      call and uses it as the name of the whole route.\n       @param {Function} callback\n    */\n    map: function (callback) {\n      this.recognizer.delegate = this.delegate;\n\n      this.recognizer.map(callback, function (recognizer, routes) {\n        for (var i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {\n          var route = routes[i];\n          recognizer.add(routes, { as: route.handler });\n          proceed = route.path === '/' || route.path === '' || route.handler.slice(-6) === '.index';\n        }\n      });\n    },\n\n    hasRoute: function (route) {\n      return this.recognizer.hasRoute(route);\n    },\n\n    getHandler: function () {},\n\n    getSerializer: function () {},\n\n    queryParamsTransition: function (changelist, wasTransitioning, oldState, newState) {\n      var router = this;\n\n      fireQueryParamDidChange(this, newState, changelist);\n\n      if (!wasTransitioning && this.activeTransition) {\n        // One of the handlers in queryParamsDidChange\n        // caused a transition. Just return that transition.\n        return this.activeTransition;\n      } else {\n        // Running queryParamsDidChange didn't change anything.\n        // Just update query params and be on our way.\n\n        // We have to return a noop transition that will\n        // perform a URL update at the end. This gives\n        // the user the ability to set the url update\n        // method (default is replaceState).\n        var newTransition = new Transition(this);\n        newTransition.queryParamsOnly = true;\n\n        oldState.queryParams = finalizeQueryParamChange(this, newState.handlerInfos, newState.queryParams, newTransition);\n\n        newTransition.promise = newTransition.promise.then(function (result) {\n          updateURL(newTransition, oldState, true);\n          if (router.didTransition) {\n            router.didTransition(router.currentHandlerInfos);\n          }\n          return result;\n        }, null, _promiseLabel('Transition complete'));\n        return newTransition;\n      }\n    },\n\n    // NOTE: this doesn't really belong here, but here\n    // it shall remain until our ES6 transpiler can\n    // handle cyclical deps.\n    transitionByIntent: function (intent /*, isIntermediate*/) {\n      try {\n        return getTransitionByIntent.apply(this, arguments);\n      } catch (e) {\n        return new Transition(this, intent, null, e);\n      }\n    },\n\n    /**\n      Clears the current and target route handlers and triggers exit\n      on each of them starting at the leaf and traversing up through\n      its ancestors.\n    */\n    reset: function () {\n      if (this.state) {\n        forEach(this.state.handlerInfos.slice().reverse(), function (handlerInfo) {\n          var handler = handlerInfo.handler;\n          callHook(handler, 'exit');\n        });\n      }\n\n      this.oldState = undefined;\n      this.state = new TransitionState();\n      this.currentHandlerInfos = null;\n    },\n\n    activeTransition: null,\n\n    /**\n      var handler = handlerInfo.handler;\n      The entry point for handling a change to the URL (usually\n      via the back and forward button).\n       Returns an Array of handlers and the parameters associated\n      with those parameters.\n       @param {String} url a URL to process\n       @return {Array} an Array of `[handler, parameter]` tuples\n    */\n    handleURL: function (url) {\n      // Perform a URL-based transition, but don't change\n      // the URL afterward, since it already happened.\n      var args = slice.call(arguments);\n      if (url.charAt(0) !== '/') {\n        args[0] = '/' + url;\n      }\n\n      return doTransition(this, args).method(null);\n    },\n\n    /**\n      Hook point for updating the URL.\n       @param {String} url a URL to update to\n    */\n    updateURL: function () {\n      throw new Error('updateURL is not implemented');\n    },\n\n    /**\n      Hook point for replacing the current URL, i.e. with replaceState\n       By default this behaves the same as `updateURL`\n       @param {String} url a URL to update to\n    */\n    replaceURL: function (url) {\n      this.updateURL(url);\n    },\n\n    /**\n      Transition into the specified named route.\n       If necessary, trigger the exit callback on any handlers\n      that are no longer represented by the target route.\n       @param {String} name the name of the route\n    */\n    transitionTo: function () /*name*/{\n      return doTransition(this, arguments);\n    },\n\n    intermediateTransitionTo: function () /*name*/{\n      return doTransition(this, arguments, true);\n    },\n\n    refresh: function (pivotHandler) {\n      var previousTransition = this.activeTransition;\n      var state = previousTransition ? previousTransition.state : this.state;\n      var handlerInfos = state.handlerInfos;\n\n      _log(this, 'Starting a refresh transition');\n      var intent = new NamedTransitionIntent({\n        name: handlerInfos[handlerInfos.length - 1].name,\n        pivotHandler: pivotHandler || handlerInfos[0].handler,\n        contexts: [], // TODO collect contexts...?\n        queryParams: this._changedQueryParams || state.queryParams || {}\n      });\n\n      var newTransition = this.transitionByIntent(intent, false);\n\n      // if the previous transition is a replace transition, that needs to be preserved\n      if (previousTransition && previousTransition.urlMethod === 'replace') {\n        newTransition.method(previousTransition.urlMethod);\n      }\n\n      return newTransition;\n    },\n\n    /**\n      Identical to `transitionTo` except that the current URL will be replaced\n      if possible.\n       This method is intended primarily for use with `replaceState`.\n       @param {String} name the name of the route\n    */\n    replaceWith: function () /*name*/{\n      return doTransition(this, arguments).method('replace');\n    },\n\n    /**\n      Take a named route and context objects and generate a\n      URL.\n       @param {String} name the name of the route to generate\n        a URL for\n      @param {...Object} objects a list of objects to serialize\n       @return {String} a URL\n    */\n    generate: function (handlerName) {\n      var partitionedArgs = extractQueryParams(slice.call(arguments, 1)),\n          suppliedParams = partitionedArgs[0],\n          queryParams = partitionedArgs[1];\n\n      // Construct a TransitionIntent with the provided params\n      // and apply it to the present state of the router.\n      var intent = new NamedTransitionIntent({\n        name: handlerName,\n        contexts: suppliedParams\n      });\n      var state = intent.applyToState(this.state, this.recognizer, this.getHandler, null, this.getSerializer);\n      var params = {};\n\n      for (var i = 0, len = state.handlerInfos.length; i < len; ++i) {\n        var handlerInfo = state.handlerInfos[i];\n        var handlerParams = handlerInfo.serialize();\n        merge(params, handlerParams);\n      }\n      params.queryParams = queryParams;\n\n      return this.recognizer.generate(handlerName, params);\n    },\n\n    applyIntent: function (handlerName, contexts) {\n      var intent = new NamedTransitionIntent({\n        name: handlerName,\n        contexts: contexts\n      });\n\n      var state = this.activeTransition && this.activeTransition.state || this.state;\n      return intent.applyToState(state, this.recognizer, this.getHandler, null, this.getSerializer);\n    },\n\n    isActiveIntent: function (handlerName, contexts, queryParams, _state) {\n      var state = _state || this.state,\n          targetHandlerInfos = state.handlerInfos,\n          handlerInfo,\n          len;\n\n      if (!targetHandlerInfos.length) {\n        return false;\n      }\n\n      var targetHandler = targetHandlerInfos[targetHandlerInfos.length - 1].name;\n      var recogHandlers = this.recognizer.handlersFor(targetHandler);\n\n      var index = 0;\n      for (len = recogHandlers.length; index < len; ++index) {\n        handlerInfo = targetHandlerInfos[index];\n        if (handlerInfo.name === handlerName) {\n          break;\n        }\n      }\n\n      if (index === recogHandlers.length) {\n        // The provided route name isn't even in the route hierarchy.\n        return false;\n      }\n\n      var testState = new TransitionState();\n      testState.handlerInfos = targetHandlerInfos.slice(0, index + 1);\n      recogHandlers = recogHandlers.slice(0, index + 1);\n\n      var intent = new NamedTransitionIntent({\n        name: targetHandler,\n        contexts: contexts\n      });\n\n      var newState = intent.applyToHandlers(testState, recogHandlers, this.getHandler, targetHandler, true, true, this.getSerializer);\n\n      var handlersEqual = handlerInfosEqual(newState.handlerInfos, testState.handlerInfos);\n      if (!queryParams || !handlersEqual) {\n        return handlersEqual;\n      }\n\n      // Get a hash of QPs that will still be active on new route\n      var activeQPsOnNewHandler = {};\n      merge(activeQPsOnNewHandler, queryParams);\n\n      var activeQueryParams = state.queryParams;\n      for (var key in activeQueryParams) {\n        if (activeQueryParams.hasOwnProperty(key) && activeQPsOnNewHandler.hasOwnProperty(key)) {\n          activeQPsOnNewHandler[key] = activeQueryParams[key];\n        }\n      }\n\n      return handlersEqual && !getChangelist(activeQPsOnNewHandler, queryParams);\n    },\n\n    isActive: function (handlerName) {\n      var partitionedArgs = extractQueryParams(slice.call(arguments, 1));\n      return this.isActiveIntent(handlerName, partitionedArgs[0], partitionedArgs[1]);\n    },\n\n    trigger: function () /*name*/{\n      var args = slice.call(arguments);\n      _trigger(this, this.currentHandlerInfos, false, args);\n    },\n\n    /**\n      Hook point for logging transition status updates.\n       @param {String} message The message to log.\n    */\n    log: null\n  };\n\n  /**\n    @private\n  \n    Fires queryParamsDidChange event\n  */\n  function fireQueryParamDidChange(router, newState, queryParamChangelist) {\n    // If queryParams changed trigger event\n    if (queryParamChangelist) {\n      // This is a little hacky but we need some way of storing\n      // changed query params given that no activeTransition\n      // is guaranteed to have occurred.\n      router._changedQueryParams = queryParamChangelist.all;\n      _trigger(router, newState.handlerInfos, true, ['queryParamsDidChange', queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);\n      router._changedQueryParams = null;\n    }\n  }\n\n  /**\n    @private\n  \n    Takes an Array of `HandlerInfo`s, figures out which ones are\n    exiting, entering, or changing contexts, and calls the\n    proper handler hooks.\n  \n    For example, consider the following tree of handlers. Each handler is\n    followed by the URL segment it handles.\n  \n    ```\n    |~index (\"/\")\n    | |~posts (\"/posts\")\n    | | |-showPost (\"/:id\")\n    | | |-newPost (\"/new\")\n    | | |-editPost (\"/edit\")\n    | |~about (\"/about/:id\")\n    ```\n  \n    Consider the following transitions:\n  \n    1. A URL transition to `/posts/1`.\n       1. Triggers the `*model` callbacks on the\n          `index`, `posts`, and `showPost` handlers\n       2. Triggers the `enter` callback on the same\n       3. Triggers the `setup` callback on the same\n    2. A direct transition to `newPost`\n       1. Triggers the `exit` callback on `showPost`\n       2. Triggers the `enter` callback on `newPost`\n       3. Triggers the `setup` callback on `newPost`\n    3. A direct transition to `about` with a specified\n       context object\n       1. Triggers the `exit` callback on `newPost`\n          and `posts`\n       2. Triggers the `serialize` callback on `about`\n       3. Triggers the `enter` callback on `about`\n       4. Triggers the `setup` callback on `about`\n  \n    @param {Router} transition\n    @param {TransitionState} newState\n  */\n  function setupContexts(router, newState, transition) {\n    var partition = partitionHandlers(router.state, newState);\n    var i, l, handler;\n\n    for (i = 0, l = partition.exited.length; i < l; i++) {\n      handler = partition.exited[i].handler;\n      delete handler.context;\n\n      callHook(handler, 'reset', true, transition);\n      callHook(handler, 'exit', transition);\n    }\n\n    var oldState = router.oldState = router.state;\n    router.state = newState;\n    var currentHandlerInfos = router.currentHandlerInfos = partition.unchanged.slice();\n\n    try {\n      for (i = 0, l = partition.reset.length; i < l; i++) {\n        handler = partition.reset[i].handler;\n        callHook(handler, 'reset', false, transition);\n      }\n\n      for (i = 0, l = partition.updatedContext.length; i < l; i++) {\n        handlerEnteredOrUpdated(currentHandlerInfos, partition.updatedContext[i], false, transition);\n      }\n\n      for (i = 0, l = partition.entered.length; i < l; i++) {\n        handlerEnteredOrUpdated(currentHandlerInfos, partition.entered[i], true, transition);\n      }\n    } catch (e) {\n      router.state = oldState;\n      router.currentHandlerInfos = oldState.handlerInfos;\n      throw e;\n    }\n\n    router.state.queryParams = finalizeQueryParamChange(router, currentHandlerInfos, newState.queryParams, transition);\n  }\n\n  /**\n    @private\n  \n    Helper method used by setupContexts. Handles errors or redirects\n    that may happen in enter/setup.\n  */\n  function handlerEnteredOrUpdated(currentHandlerInfos, handlerInfo, enter, transition) {\n    var handler = handlerInfo.handler,\n        context = handlerInfo.context;\n\n    function _handlerEnteredOrUpdated(handler) {\n      if (enter) {\n        callHook(handler, 'enter', transition);\n      }\n\n      if (transition && transition.isAborted) {\n        throw new TransitionAbortedError();\n      }\n\n      handler.context = context;\n      callHook(handler, 'contextDidChange');\n\n      callHook(handler, 'setup', context, transition);\n      if (transition && transition.isAborted) {\n        throw new TransitionAbortedError();\n      }\n\n      currentHandlerInfos.push(handlerInfo);\n    }\n\n    // If the handler doesn't exist, it means we haven't resolved the handler promise yet\n    if (!handler) {\n      handlerInfo.handlerPromise = handlerInfo.handlerPromise.then(_handlerEnteredOrUpdated);\n    } else {\n      _handlerEnteredOrUpdated(handler);\n    }\n\n    return true;\n  }\n\n  /**\n    @private\n  \n    This function is called when transitioning from one URL to\n    another to determine which handlers are no longer active,\n    which handlers are newly active, and which handlers remain\n    active but have their context changed.\n  \n    Take a list of old handlers and new handlers and partition\n    them into four buckets:\n  \n    * unchanged: the handler was active in both the old and\n      new URL, and its context remains the same\n    * updated context: the handler was active in both the\n      old and new URL, but its context changed. The handler's\n      `setup` method, if any, will be called with the new\n      context.\n    * exited: the handler was active in the old URL, but is\n      no longer active.\n    * entered: the handler was not active in the old URL, but\n      is now active.\n  \n    The PartitionedHandlers structure has four fields:\n  \n    * `updatedContext`: a list of `HandlerInfo` objects that\n      represent handlers that remain active but have a changed\n      context\n    * `entered`: a list of `HandlerInfo` objects that represent\n      handlers that are newly active\n    * `exited`: a list of `HandlerInfo` objects that are no\n      longer active.\n    * `unchanged`: a list of `HanderInfo` objects that remain active.\n  \n    @param {Array[HandlerInfo]} oldHandlers a list of the handler\n      information for the previous URL (or `[]` if this is the\n      first handled transition)\n    @param {Array[HandlerInfo]} newHandlers a list of the handler\n      information for the new URL\n  \n    @return {Partition}\n  */\n  function partitionHandlers(oldState, newState) {\n    var oldHandlers = oldState.handlerInfos;\n    var newHandlers = newState.handlerInfos;\n\n    var handlers = {\n      updatedContext: [],\n      exited: [],\n      entered: [],\n      unchanged: [],\n      reset: undefined\n    };\n\n    var handlerChanged,\n        contextChanged = false,\n        i,\n        l;\n\n    for (i = 0, l = newHandlers.length; i < l; i++) {\n      var oldHandler = oldHandlers[i],\n          newHandler = newHandlers[i];\n\n      if (!oldHandler || oldHandler.handler !== newHandler.handler) {\n        handlerChanged = true;\n      }\n\n      if (handlerChanged) {\n        handlers.entered.push(newHandler);\n        if (oldHandler) {\n          handlers.exited.unshift(oldHandler);\n        }\n      } else if (contextChanged || oldHandler.context !== newHandler.context) {\n        contextChanged = true;\n        handlers.updatedContext.push(newHandler);\n      } else {\n        handlers.unchanged.push(oldHandler);\n      }\n    }\n\n    for (i = newHandlers.length, l = oldHandlers.length; i < l; i++) {\n      handlers.exited.unshift(oldHandlers[i]);\n    }\n\n    handlers.reset = handlers.updatedContext.slice();\n    handlers.reset.reverse();\n\n    return handlers;\n  }\n\n  function updateURL(transition, state /*, inputUrl*/) {\n    var urlMethod = transition.urlMethod;\n\n    if (!urlMethod) {\n      return;\n    }\n\n    var router = transition.router,\n        handlerInfos = state.handlerInfos,\n        handlerName = handlerInfos[handlerInfos.length - 1].name,\n        params = {};\n\n    for (var i = handlerInfos.length - 1; i >= 0; --i) {\n      var handlerInfo = handlerInfos[i];\n      merge(params, handlerInfo.params);\n      if (handlerInfo.handler.inaccessibleByURL) {\n        urlMethod = null;\n      }\n    }\n\n    if (urlMethod) {\n      params.queryParams = transition._visibleQueryParams || state.queryParams;\n      var url = router.recognizer.generate(handlerName, params);\n\n      // transitions during the initial transition must always use replaceURL.\n      // When the app boots, you are at a url, e.g. /foo. If some handler\n      // redirects to bar as part of the initial transition, you don't want to\n      // add a history entry for /foo. If you do, pressing back will immediately\n      // hit the redirect again and take you back to /bar, thus killing the back\n      // button\n      var initial = transition.isCausedByInitialTransition;\n\n      // say you are at / and you click a link to route /foo. In /foo's\n      // handler, the transition is aborted using replacewith('/bar').\n      // Because the current url is still /, the history entry for / is\n      // removed from the history. Clicking back will take you to the page\n      // you were on before /, which is often not even the app, thus killing\n      // the back button. That's why updateURL is always correct for an\n      // aborting transition that's not the initial transition\n      var replaceAndNotAborting = urlMethod === 'replace' && !transition.isCausedByAbortingTransition;\n\n      // because calling refresh causes an aborted transition, this needs to be\n      // special cased - if the initial transition is a replace transition, the\n      // urlMethod should be honored here.\n      var isQueryParamsRefreshTransition = transition.queryParamsOnly && urlMethod === 'replace';\n\n      if (initial || replaceAndNotAborting || isQueryParamsRefreshTransition) {\n        router.replaceURL(url);\n      } else {\n        router.updateURL(url);\n      }\n    }\n  }\n\n  /**\n    @private\n  \n    Updates the URL (if necessary) and calls `setupContexts`\n    to update the router's array of `currentHandlerInfos`.\n   */\n  function finalizeTransition(transition, newState) {\n    try {\n      _log(transition.router, transition.sequence, 'Resolved all models on destination route; finalizing transition.');\n\n      var router = transition.router,\n          handlerInfos = newState.handlerInfos;\n\n      // Run all the necessary enter/setup/exit hooks\n      setupContexts(router, newState, transition);\n\n      // Check if a redirect occurred in enter/setup\n      if (transition.isAborted) {\n        // TODO: cleaner way? distinguish b/w targetHandlerInfos?\n        router.state.handlerInfos = router.currentHandlerInfos;\n        return _rsvp.Promise.reject(logAbort(transition));\n      }\n\n      updateURL(transition, newState, transition.intent.url);\n\n      transition.isActive = false;\n      router.activeTransition = null;\n\n      _trigger(router, router.currentHandlerInfos, true, ['didTransition']);\n\n      if (router.didTransition) {\n        router.didTransition(router.currentHandlerInfos);\n      }\n\n      _log(router, transition.sequence, 'TRANSITION COMPLETE.');\n\n      // Resolve with the final handler.\n      return handlerInfos[handlerInfos.length - 1].handler;\n    } catch (e) {\n      if (!(e instanceof TransitionAbortedError)) {\n        //var erroneousHandler = handlerInfos.pop();\n        var infos = transition.state.handlerInfos;\n        transition.trigger(true, 'error', e, transition, infos[infos.length - 1].handler);\n        transition.abort();\n      }\n\n      throw e;\n    }\n  }\n\n  /**\n    @private\n  \n    Begins and returns a Transition based on the provided\n    arguments. Accepts arguments in the form of both URL\n    transitions and named transitions.\n  \n    @param {Router} router\n    @param {Array[Object]} args arguments passed to transitionTo,\n      replaceWith, or handleURL\n  */\n  function doTransition(router, args, isIntermediate) {\n    // Normalize blank transitions to root URL transitions.\n    var name = args[0] || '/';\n\n    var lastArg = args[args.length - 1];\n    var queryParams = {};\n    if (lastArg && lastArg.hasOwnProperty('queryParams')) {\n      queryParams = pop.call(args).queryParams;\n    }\n\n    var intent;\n    if (args.length === 0) {\n      _log(router, 'Updating query params');\n\n      // A query param update is really just a transition\n      // into the route you're already on.\n      var handlerInfos = router.state.handlerInfos;\n      intent = new NamedTransitionIntent({\n        name: handlerInfos[handlerInfos.length - 1].name,\n        contexts: [],\n        queryParams: queryParams\n      });\n    } else if (name.charAt(0) === '/') {\n      _log(router, 'Attempting URL transition to ' + name);\n      intent = new URLTransitionIntent({ url: name });\n    } else {\n      _log(router, 'Attempting transition to ' + name);\n      intent = new NamedTransitionIntent({\n        name: args[0],\n        contexts: slice.call(args, 1),\n        queryParams: queryParams\n      });\n    }\n\n    return router.transitionByIntent(intent, isIntermediate);\n  }\n\n  function handlerInfosEqual(handlerInfos, otherHandlerInfos) {\n    if (handlerInfos.length !== otherHandlerInfos.length) {\n      return false;\n    }\n\n    for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n      if (handlerInfos[i] !== otherHandlerInfos[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function handlerInfosSameExceptQueryParams(handlerInfos, otherHandlerInfos) {\n    if (handlerInfos.length !== otherHandlerInfos.length) {\n      return false;\n    }\n\n    for (var i = 0, len = handlerInfos.length; i < len; ++i) {\n      if (handlerInfos[i].name !== otherHandlerInfos[i].name) {\n        return false;\n      }\n\n      if (!paramsEqual(handlerInfos[i].params, otherHandlerInfos[i].params)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function paramsEqual(params, otherParams) {\n    if (!params && !otherParams) {\n      return true;\n    } else if (!params && !!otherParams || !!params && !otherParams) {\n      // one is falsy but other is not;\n      return false;\n    }\n    var keys = Object.keys(params);\n    var otherKeys = Object.keys(otherParams);\n\n    if (keys.length !== otherKeys.length) {\n      return false;\n    }\n\n    for (var i = 0, len = keys.length; i < len; ++i) {\n      var key = keys[i];\n\n      if (params[key] !== otherParams[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function finalizeQueryParamChange(router, resolvedHandlers, newQueryParams, transition) {\n    // We fire a finalizeQueryParamChange event which\n    // gives the new route hierarchy a chance to tell\n    // us which query params it's consuming and what\n    // their final values are. If a query param is\n    // no longer consumed in the final route hierarchy,\n    // its serialized segment will be removed\n    // from the URL.\n\n    for (var k in newQueryParams) {\n      if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {\n        delete newQueryParams[k];\n      }\n    }\n\n    var finalQueryParamsArray = [];\n    _trigger(router, resolvedHandlers, true, ['finalizeQueryParamChange', newQueryParams, finalQueryParamsArray, transition]);\n\n    if (transition) {\n      transition._visibleQueryParams = {};\n    }\n\n    var finalQueryParams = {};\n    for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {\n      var qp = finalQueryParamsArray[i];\n      finalQueryParams[qp.key] = qp.value;\n      if (transition && qp.visible !== false) {\n        transition._visibleQueryParams[qp.key] = qp.value;\n      }\n    }\n    return finalQueryParams;\n  }\n\n  function notifyExistingHandlers(router, newState, newTransition) {\n    var oldHandlers = router.state.handlerInfos,\n        changing = [],\n        i,\n        oldHandlerLen,\n        oldHandler,\n        newHandler;\n\n    oldHandlerLen = oldHandlers.length;\n    for (i = 0; i < oldHandlerLen; i++) {\n      oldHandler = oldHandlers[i];\n      newHandler = newState.handlerInfos[i];\n\n      if (!newHandler || oldHandler.name !== newHandler.name) {\n        break;\n      }\n\n      if (!newHandler.isResolved) {\n        changing.push(oldHandler);\n      }\n    }\n\n    _trigger(router, oldHandlers, true, ['willTransition', newTransition]);\n\n    if (router.willTransition) {\n      router.willTransition(oldHandlers, newState.handlerInfos, newTransition);\n    }\n  }\n\n  exports.Transition = Transition;\n  exports.default = Router;\n});","enifed('rsvp', ['exports', 'ember-babel', 'node-module'], function (exports, _emberBabel, _nodeModule) {\n  'use strict';\n\n  exports.filter = exports.async = exports.map = exports.reject = exports.resolve = exports.off = exports.on = exports.configure = exports.denodeify = exports.defer = exports.rethrow = exports.hashSettled = exports.hash = exports.race = exports.allSettled = exports.all = exports.EventTarget = exports.Promise = exports.cast = exports.asap = undefined;\n\n  var _rsvp;\n\n  function callbacksFor(object) {\n    var callbacks = object._promiseCallbacks;\n\n    if (!callbacks) {\n      callbacks = object._promiseCallbacks = {};\n    }\n\n    return callbacks;\n  }\n\n  /**\n    @class RSVP.EventTarget\n  */\n  var EventTarget = {\n    mixin: function (object) {\n      object['on'] = this['on'];\n      object['off'] = this['off'];\n      object['trigger'] = this['trigger'];\n      object._promiseCallbacks = undefined;\n      return object;\n    },\n    on: function (eventName, callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback must be a function');\n      }\n\n      var allCallbacks = callbacksFor(this),\n          callbacks = void 0;\n\n      callbacks = allCallbacks[eventName];\n\n      if (!callbacks) {\n        callbacks = allCallbacks[eventName] = [];\n      }\n\n      if (callbacks.indexOf(callback)) {\n        callbacks.push(callback);\n      }\n    },\n    off: function (eventName, callback) {\n      var allCallbacks = callbacksFor(this),\n          callbacks = void 0,\n          index = void 0;\n\n      if (!callback) {\n        allCallbacks[eventName] = [];\n        return;\n      }\n\n      callbacks = allCallbacks[eventName];\n\n      index = callbacks.indexOf(callback);\n\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    },\n    trigger: function (eventName, options, label) {\n      var allCallbacks = callbacksFor(this),\n          callbacks = void 0,\n          callback = void 0;\n\n      if (callbacks = allCallbacks[eventName]) {\n        // Don't cache the callbacks.length since it may grow\n        for (var i = 0; i < callbacks.length; i++) {\n          callback = callbacks[i];\n\n          callback(options, label);\n        }\n      }\n    }\n  };\n\n  var config = {\n    instrument: false\n  };\n\n  EventTarget['mixin'](config);\n\n  function configure(name, value) {\n    if (arguments.length === 2) {\n      config[name] = value;\n    } else {\n      return config[name];\n    }\n  }\n\n  var queue = [];\n\n  function scheduleFlush() {\n    setTimeout(function () {\n      for (var i = 0; i < queue.length; i++) {\n        var entry = queue[i];\n\n        var payload = entry.payload;\n\n        payload.guid = payload.key + payload.id;\n        payload.childGuid = payload.key + payload.childId;\n        if (payload.error) {\n          payload.stack = payload.error.stack;\n        }\n\n        config['trigger'](entry.name, entry.payload);\n      }\n      queue.length = 0;\n    }, 50);\n  }\n\n  function instrument(eventName, promise, child) {\n    if (1 === queue.push({\n      name: eventName,\n      payload: {\n        key: promise._guidKey,\n        id: promise._id,\n        eventName: eventName,\n        detail: promise._result,\n        childId: child && child._id,\n        label: promise._label,\n        timeStamp: Date.now(),\n        error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n      } })) {\n      scheduleFlush();\n    }\n  }\n\n  /**\n    `RSVP.Promise.resolve` returns a promise that will become resolved with the\n    passed `value`. It is shorthand for the following:\n  \n    ```javascript\n    let promise = new RSVP.Promise(function(resolve, reject){\n      resolve(1);\n    });\n  \n    promise.then(function(value){\n      // value === 1\n    });\n    ```\n  \n    Instead of writing the above, your code now simply becomes the following:\n  \n    ```javascript\n    let promise = RSVP.Promise.resolve(1);\n  \n    promise.then(function(value){\n      // value === 1\n    });\n    ```\n  \n    @method resolve\n    @static\n    @param {*} object value that the returned promise will be resolved with\n    @param {String} label optional string for identifying the returned promise.\n    Useful for tooling.\n    @return {Promise} a promise that will become fulfilled with the given\n    `value`\n  */\n  function resolve$1(object, label) {\n    /*jshint validthis:true */\n    var Constructor = this;\n\n    if (object && typeof object === 'object' && object.constructor === Constructor) {\n      return object;\n    }\n\n    var promise = new Constructor(noop, label);\n    resolve(promise, object);\n    return promise;\n  }\n\n  function withOwnPromise() {\n    return new TypeError('A promises callback cannot return that same promise.');\n  }\n\n  function objectOrFunction(x) {\n    var type = typeof x;\n    return x !== null && (type === 'object' || type === 'function');\n  }\n\n  function noop() {}\n\n  var PENDING = void 0;\n  var FULFILLED = 1;\n  var REJECTED = 2;\n\n  function ErrorObject() {\n    this.error = null;\n  }\n\n  var GET_THEN_ERROR = new ErrorObject();\n\n  function getThen(promise) {\n    try {\n      return promise.then;\n    } catch (error) {\n      GET_THEN_ERROR.error = error;\n      return GET_THEN_ERROR;\n    }\n  }\n\n  var TRY_CATCH_ERROR = new ErrorObject();\n\n  var tryCatchCallback = void 0;\n  function tryCatcher() {\n    try {\n      var target = tryCatchCallback;\n      tryCatchCallback = null;\n      return target.apply(this, arguments);\n    } catch (e) {\n      TRY_CATCH_ERROR.error = e;\n      return TRY_CATCH_ERROR;\n    }\n  }\n\n  function tryCatch(fn) {\n    tryCatchCallback = fn;\n    return tryCatcher;\n  }\n\n  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n    try {\n      then$$1.call(value, fulfillmentHandler, rejectionHandler);\n    } catch (e) {\n      return e;\n    }\n  }\n\n  function handleForeignThenable(promise, thenable, then$$1) {\n    config.async(function (promise) {\n      var sealed = false;\n      var error = tryThen(then$$1, thenable, function (value) {\n        if (sealed) {\n          return;\n        }\n        sealed = true;\n        if (thenable !== value) {\n          resolve(promise, value, undefined);\n        } else {\n          fulfill(promise, value);\n        }\n      }, function (reason) {\n        if (sealed) {\n          return;\n        }\n        sealed = true;\n\n        reject(promise, reason);\n      }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n      if (!sealed && error) {\n        sealed = true;\n        reject(promise, error);\n      }\n    }, promise);\n  }\n\n  function handleOwnThenable(promise, thenable) {\n    if (thenable._state === FULFILLED) {\n      fulfill(promise, thenable._result);\n    } else if (thenable._state === REJECTED) {\n      thenable._onError = null;\n      reject(promise, thenable._result);\n    } else {\n      subscribe(thenable, undefined, function (value) {\n        if (thenable === value) {\n          fulfill(promise, value);\n        } else {\n          resolve(promise, value);\n        }\n      }, function (reason) {\n        return reject(promise, reason);\n      });\n    }\n  }\n\n  function handleMaybeThenable(promise, maybeThenable, then$$1) {\n    var isOwnThenable = maybeThenable.constructor === promise.constructor && then$$1 === then && promise.constructor.resolve === resolve$1;\n\n    if (isOwnThenable) {\n      handleOwnThenable(promise, maybeThenable);\n    } else if (then$$1 === GET_THEN_ERROR) {\n      var error = GET_THEN_ERROR.error;\n      GET_THEN_ERROR.error = null;\n      reject(promise, error);\n    } else if (typeof then$$1 === 'function') {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n\n  function resolve(promise, value) {\n    if (promise === value) {\n      fulfill(promise, value);\n    } else if (objectOrFunction(value)) {\n      handleMaybeThenable(promise, value, getThen(value));\n    } else {\n      fulfill(promise, value);\n    }\n  }\n\n  function publishRejection(promise) {\n    if (promise._onError) {\n      promise._onError(promise._result);\n    }\n\n    publish(promise);\n  }\n\n  function fulfill(promise, value) {\n    if (promise._state !== PENDING) {\n      return;\n    }\n\n    promise._result = value;\n    promise._state = FULFILLED;\n\n    if (promise._subscribers.length === 0) {\n      if (config.instrument) {\n        instrument('fulfilled', promise);\n      }\n    } else {\n      config.async(publish, promise);\n    }\n  }\n\n  function reject(promise, reason) {\n    if (promise._state !== PENDING) {\n      return;\n    }\n    promise._state = REJECTED;\n    promise._result = reason;\n    config.async(publishRejection, promise);\n  }\n\n  function subscribe(parent, child, onFulfillment, onRejection) {\n    var subscribers = parent._subscribers;\n    var length = subscribers.length;\n\n    parent._onError = null;\n\n    subscribers[length] = child;\n    subscribers[length + FULFILLED] = onFulfillment;\n    subscribers[length + REJECTED] = onRejection;\n\n    if (length === 0 && parent._state) {\n      config.async(publish, parent);\n    }\n  }\n\n  function publish(promise) {\n    var subscribers = promise._subscribers;\n    var settled = promise._state;\n\n    if (config.instrument) {\n      instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n    }\n\n    if (subscribers.length === 0) {\n      return;\n    }\n\n    var child = void 0,\n        callback = void 0,\n        result = promise._result;\n\n    for (var i = 0; i < subscribers.length; i += 3) {\n      child = subscribers[i];\n      callback = subscribers[i + settled];\n\n      if (child) {\n        invokeCallback(settled, child, callback, result);\n      } else {\n        callback(result);\n      }\n    }\n\n    promise._subscribers.length = 0;\n  }\n\n  function invokeCallback(state, promise, callback, result) {\n    var hasCallback = typeof callback === 'function';\n    var value = void 0;\n\n    if (hasCallback) {\n      value = tryCatch(callback)(result);\n    } else {\n      value = result;\n    }\n\n    if (promise._state !== PENDING) {\n      // noop\n    } else if (value === promise) {\n      reject(promise, withOwnPromise());\n    } else if (value === TRY_CATCH_ERROR) {\n      var error = value.error;\n      value.error = null; // release\n      reject(promise, error);\n    } else if (hasCallback) {\n      resolve(promise, value);\n    } else if (state === FULFILLED) {\n      fulfill(promise, value);\n    } else if (state === REJECTED) {\n      reject(promise, value);\n    }\n  }\n\n  function initializePromise(promise, resolver) {\n    var resolved = false;\n    try {\n      resolver(function (value) {\n        if (resolved) {\n          return;\n        }\n        resolved = true;\n        resolve(promise, value);\n      }, function (reason) {\n        if (resolved) {\n          return;\n        }\n        resolved = true;\n        reject(promise, reason);\n      });\n    } catch (e) {\n      reject(promise, e);\n    }\n  }\n\n  function then(onFulfillment, onRejection, label) {\n    var parent = this;\n    var state = parent._state;\n\n    if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n      config.instrument && instrument('chained', parent, parent);\n      return parent;\n    }\n\n    parent._onError = null;\n\n    var child = new parent.constructor(noop, label);\n    var result = parent._result;\n\n    config.instrument && instrument('chained', parent, child);\n\n    if (state === PENDING) {\n      subscribe(parent, child, onFulfillment, onRejection);\n    } else {\n      var callback = state === FULFILLED ? onFulfillment : onRejection;\n      config.async(function () {\n        return invokeCallback(state, child, callback, result);\n      });\n    }\n\n    return child;\n  }\n\n  var Enumerator = function () {\n    function Enumerator(Constructor, input, abortOnReject, label) {\n      (0, _emberBabel.classCallCheck)(this, Enumerator);\n\n      this._instanceConstructor = Constructor;\n      this.promise = new Constructor(noop, label);\n      this._abortOnReject = abortOnReject;\n      this.isUsingOwnPromise = Constructor === Promise;\n\n      this._init.apply(this, arguments);\n    }\n\n    Enumerator.prototype._init = function _init(Constructor, input) {\n      var len = input.length || 0;\n      this.length = len;\n      this._remaining = len;\n      this._result = new Array(len);\n\n      this._enumerate(input);\n    };\n\n    Enumerator.prototype._enumerate = function _enumerate(input) {\n      var length = this.length;\n      var promise = this.promise;\n\n      for (var i = 0; promise._state === PENDING && i < length; i++) {\n        this._eachEntry(input[i], i, true);\n      }\n\n      this._checkFullfillment();\n    };\n\n    Enumerator.prototype._checkFullfillment = function _checkFullfillment() {\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    };\n\n    Enumerator.prototype._settleMaybeThenable = function _settleMaybeThenable(entry, i, firstPass) {\n      var c = this._instanceConstructor;\n      var resolve$$1 = c.resolve;\n\n      if (resolve$$1 === resolve$1) {\n        var then$$1 = getThen(entry);\n\n        if (then$$1 === then && entry._state !== PENDING) {\n          entry._onError = null;\n          this._settledAt(entry._state, i, entry._result, firstPass);\n        } else if (typeof then$$1 !== 'function') {\n          this._settledAt(FULFILLED, i, entry, firstPass);\n        } else if (this.isUsingOwnPromise) {\n          var promise = new c(noop);\n          handleMaybeThenable(promise, entry, then$$1);\n          this._willSettleAt(promise, i, firstPass);\n        } else {\n          this._willSettleAt(new c(function (resolve$$1) {\n            return resolve$$1(entry);\n          }), i, firstPass);\n        }\n      } else {\n        this._willSettleAt(resolve$$1(entry), i, firstPass);\n      }\n    };\n\n    Enumerator.prototype._eachEntry = function _eachEntry(entry, i, firstPass) {\n      if (entry !== null && typeof entry === 'object') {\n        this._settleMaybeThenable(entry, i, firstPass);\n      } else {\n        this._setResultAt(FULFILLED, i, entry, firstPass);\n      }\n    };\n\n    Enumerator.prototype._settledAt = function _settledAt(state, i, value, firstPass) {\n      var promise = this.promise;\n\n      if (promise._state === PENDING) {\n        if (this._abortOnReject && state === REJECTED) {\n          reject(promise, value);\n        } else {\n          this._setResultAt(state, i, value, firstPass);\n          this._checkFullfillment();\n        }\n      }\n    };\n\n    Enumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n      this._remaining--;\n      this._result[i] = value;\n    };\n\n    Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i, firstPass) {\n      var _this = this;\n\n      subscribe(promise, undefined, function (value) {\n        return _this._settledAt(FULFILLED, i, value, firstPass);\n      }, function (reason) {\n        return _this._settledAt(REJECTED, i, reason, firstPass);\n      });\n    };\n\n    return Enumerator;\n  }();\n\n  function setSettledResult(state, i, value) {\n    this._remaining--;\n    if (state === FULFILLED) {\n      this._result[i] = {\n        state: 'fulfilled',\n        value: value\n      };\n    } else {\n      this._result[i] = {\n        state: 'rejected',\n        reason: value\n      };\n    }\n  }\n\n  /**\n    `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n    is fulfilled with an array of fulfillment values for the passed promises, or\n    rejected with the reason of the first passed promise to be rejected. It casts all\n    elements of the passed iterable to promises as it runs this algorithm.\n  \n    Example:\n  \n    ```javascript\n    let promise1 = RSVP.resolve(1);\n    let promise2 = RSVP.resolve(2);\n    let promise3 = RSVP.resolve(3);\n    let promises = [ promise1, promise2, promise3 ];\n  \n    RSVP.Promise.all(promises).then(function(array){\n      // The array here would be [ 1, 2, 3 ];\n    });\n    ```\n  \n    If any of the `promises` given to `RSVP.all` are rejected, the first promise\n    that is rejected will be given as an argument to the returned promises's\n    rejection handler. For example:\n  \n    Example:\n  \n    ```javascript\n    let promise1 = RSVP.resolve(1);\n    let promise2 = RSVP.reject(new Error(\"2\"));\n    let promise3 = RSVP.reject(new Error(\"3\"));\n    let promises = [ promise1, promise2, promise3 ];\n  \n    RSVP.Promise.all(promises).then(function(array){\n      // Code here never runs because there are rejected promises!\n    }, function(error) {\n      // error.message === \"2\"\n    });\n    ```\n  \n    @method all\n    @static\n    @param {Array} entries array of promises\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise} promise that is fulfilled when all `promises` have been\n    fulfilled, or rejected if any of them become rejected.\n    @static\n  */\n  function all(entries, label) {\n    if (!Array.isArray(entries)) {\n      return this.reject(new TypeError(\"Promise.all must be called with an array\"), label);\n    }\n    return new Enumerator(this, entries, true /* abort on reject */, label).promise;\n  }\n\n  /**\n    `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n    first passed promise to settle.\n  \n    Example:\n  \n    ```javascript\n    let promise1 = new RSVP.Promise(function(resolve, reject){\n      setTimeout(function(){\n        resolve('promise 1');\n      }, 200);\n    });\n  \n    let promise2 = new RSVP.Promise(function(resolve, reject){\n      setTimeout(function(){\n        resolve('promise 2');\n      }, 100);\n    });\n  \n    RSVP.Promise.race([promise1, promise2]).then(function(result){\n      // result === 'promise 2' because it was resolved before promise1\n      // was resolved.\n    });\n    ```\n  \n    `RSVP.Promise.race` is deterministic in that only the state of the first\n    settled promise matters. For example, even if other promises given to the\n    `promises` array argument are resolved, but the first settled promise has\n    become rejected before the other promises became fulfilled, the returned\n    promise will become rejected:\n  \n    ```javascript\n    let promise1 = new RSVP.Promise(function(resolve, reject){\n      setTimeout(function(){\n        resolve('promise 1');\n      }, 200);\n    });\n  \n    let promise2 = new RSVP.Promise(function(resolve, reject){\n      setTimeout(function(){\n        reject(new Error('promise 2'));\n      }, 100);\n    });\n  \n    RSVP.Promise.race([promise1, promise2]).then(function(result){\n      // Code here never runs\n    }, function(reason){\n      // reason.message === 'promise 2' because promise 2 became rejected before\n      // promise 1 became fulfilled\n    });\n    ```\n  \n    An example real-world use case is implementing timeouts:\n  \n    ```javascript\n    RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n    ```\n  \n    @method race\n    @static\n    @param {Array} entries array of promises to observe\n    @param {String} label optional string for describing the promise returned.\n    Useful for tooling.\n    @return {Promise} a promise which settles in the same way as the first passed\n    promise to settle.\n  */\n  function race(entries, label) {\n    /*jshint validthis:true */\n    var Constructor = this;\n\n    var promise = new Constructor(noop, label);\n\n    if (!Array.isArray(entries)) {\n      reject(promise, new TypeError('Promise.race must be called with an array'));\n      return promise;\n    }\n\n    for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n      subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n        return resolve(promise, value);\n      }, function (reason) {\n        return reject(promise, reason);\n      });\n    }\n\n    return promise;\n  }\n\n  /**\n    `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n    It is shorthand for the following:\n  \n    ```javascript\n    let promise = new RSVP.Promise(function(resolve, reject){\n      reject(new Error('WHOOPS'));\n    });\n  \n    promise.then(function(value){\n      // Code here doesn't run because the promise is rejected!\n    }, function(reason){\n      // reason.message === 'WHOOPS'\n    });\n    ```\n  \n    Instead of writing the above, your code now simply becomes the following:\n  \n    ```javascript\n    let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n  \n    promise.then(function(value){\n      // Code here doesn't run because the promise is rejected!\n    }, function(reason){\n      // reason.message === 'WHOOPS'\n    });\n    ```\n  \n    @method reject\n    @static\n    @param {*} reason value that the returned promise will be rejected with.\n    @param {String} label optional string for identifying the returned promise.\n    Useful for tooling.\n    @return {Promise} a promise rejected with the given `reason`.\n  */\n  function reject$1(reason, label) {\n    /*jshint validthis:true */\n    var Constructor = this;\n    var promise = new Constructor(noop, label);\n    reject(promise, reason);\n    return promise;\n  }\n\n  var guidKey = 'rsvp_' + Date.now() + '-';\n  var counter = 0;\n\n  function needsResolver() {\n    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n  }\n\n  function needsNew() {\n    throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n  }\n\n  /**\n    Promise objects represent the eventual result of an asynchronous operation. The\n    primary way of interacting with a promise is through its `then` method, which\n    registers callbacks to receive either a promise’s eventual value or the reason\n    why the promise cannot be fulfilled.\n  \n    Terminology\n    -----------\n  \n    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n    - `thenable` is an object or function that defines a `then` method.\n    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n    - `exception` is a value that is thrown using the throw statement.\n    - `reason` is a value that indicates why a promise was rejected.\n    - `settled` the final resting state of a promise, fulfilled or rejected.\n  \n    A promise can be in one of three states: pending, fulfilled, or rejected.\n  \n    Promises that are fulfilled have a fulfillment value and are in the fulfilled\n    state.  Promises that are rejected have a rejection reason and are in the\n    rejected state.  A fulfillment value is never a thenable.\n  \n    Promises can also be said to *resolve* a value.  If this value is also a\n    promise, then the original promise's settled state will match the value's\n    settled state.  So a promise that *resolves* a promise that rejects will\n    itself reject, and a promise that *resolves* a promise that fulfills will\n    itself fulfill.\n  \n  \n    Basic Usage:\n    ------------\n  \n    ```js\n    let promise = new Promise(function(resolve, reject) {\n      // on success\n      resolve(value);\n  \n      // on failure\n      reject(reason);\n    });\n  \n    promise.then(function(value) {\n      // on fulfillment\n    }, function(reason) {\n      // on rejection\n    });\n    ```\n  \n    Advanced Usage:\n    ---------------\n  \n    Promises shine when abstracting away asynchronous interactions such as\n    `XMLHttpRequest`s.\n  \n    ```js\n    function getJSON(url) {\n      return new Promise(function(resolve, reject){\n        let xhr = new XMLHttpRequest();\n  \n        xhr.open('GET', url);\n        xhr.onreadystatechange = handler;\n        xhr.responseType = 'json';\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.send();\n  \n        function handler() {\n          if (this.readyState === this.DONE) {\n            if (this.status === 200) {\n              resolve(this.response);\n            } else {\n              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n            }\n          }\n        };\n      });\n    }\n  \n    getJSON('/posts.json').then(function(json) {\n      // on fulfillment\n    }, function(reason) {\n      // on rejection\n    });\n    ```\n  \n    Unlike callbacks, promises are great composable primitives.\n  \n    ```js\n    Promise.all([\n      getJSON('/posts'),\n      getJSON('/comments')\n    ]).then(function(values){\n      values[0] // => postsJSON\n      values[1] // => commentsJSON\n  \n      return values;\n    });\n    ```\n  \n    @class RSVP.Promise\n    @param {function} resolver\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @constructor\n  */\n\n  var Promise = function () {\n    function Promise(resolver, label) {\n      (0, _emberBabel.classCallCheck)(this, Promise);\n\n      this._id = counter++;\n      this._label = label;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      config.instrument && instrument('created', this);\n\n      if (noop !== resolver) {\n        typeof resolver !== 'function' && needsResolver();\n        this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n      }\n    }\n\n    Promise.prototype._onError = function _onError(reason) {\n      var _this2 = this;\n\n      config.after(function () {\n        if (_this2._onError) {\n          config.trigger('error', reason, _this2._label);\n        }\n      });\n    };\n\n    Promise.prototype.catch = function _catch(onRejection, label) {\n      return this.then(undefined, onRejection, label);\n    };\n\n    Promise.prototype.finally = function _finally(callback, label) {\n      var promise = this;\n      var constructor = promise.constructor;\n\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      }, label);\n    };\n\n    return Promise;\n  }();\n\n  Promise.cast = resolve$1; // deprecated\n  Promise.all = all;\n  Promise.race = race;\n  Promise.resolve = resolve$1;\n  Promise.reject = reject$1;\n\n  Promise.prototype._guidKey = guidKey;\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we\\'re unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfillment\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n  Promise.prototype.then = then;\n\n  function Result() {\n    this.value = undefined;\n  }\n\n  var ERROR = new Result();\n  var GET_THEN_ERROR$1 = new Result();\n\n  function getThen$1(obj) {\n    try {\n      return obj.then;\n    } catch (error) {\n      ERROR.value = error;\n      return ERROR;\n    }\n  }\n\n  function tryApply(f, s, a) {\n    try {\n      f.apply(s, a);\n    } catch (error) {\n      ERROR.value = error;\n      return ERROR;\n    }\n  }\n\n  function makeObject(_, argumentNames) {\n    var obj = {};\n    var length = _.length;\n    var args = new Array(length);\n\n    for (var x = 0; x < length; x++) {\n      args[x] = _[x];\n    }\n\n    for (var i = 0; i < argumentNames.length; i++) {\n      var name = argumentNames[i];\n      obj[name] = args[i + 1];\n    }\n\n    return obj;\n  }\n\n  function arrayResult(_) {\n    var length = _.length;\n    var args = new Array(length - 1);\n\n    for (var i = 1; i < length; i++) {\n      args[i - 1] = _[i];\n    }\n\n    return args;\n  }\n\n  function wrapThenable(then, promise) {\n    return {\n      then: function (onFulFillment, onRejection) {\n        return then.call(promise, onFulFillment, onRejection);\n      }\n    };\n  }\n\n  /**\n    `RSVP.denodeify` takes a 'node-style' function and returns a function that\n    will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n    browser when you'd prefer to use promises over using callbacks. For example,\n    `denodeify` transforms the following:\n  \n    ```javascript\n    let fs = require('fs');\n  \n    fs.readFile('myfile.txt', function(err, data){\n      if (err) return handleError(err);\n      handleData(data);\n    });\n    ```\n  \n    into:\n  \n    ```javascript\n    let fs = require('fs');\n    let readFile = RSVP.denodeify(fs.readFile);\n  \n    readFile('myfile.txt').then(handleData, handleError);\n    ```\n  \n    If the node function has multiple success parameters, then `denodeify`\n    just returns the first one:\n  \n    ```javascript\n    let request = RSVP.denodeify(require('request'));\n  \n    request('http://example.com').then(function(res) {\n      // ...\n    });\n    ```\n  \n    However, if you need all success parameters, setting `denodeify`'s\n    second parameter to `true` causes it to return all success parameters\n    as an array:\n  \n    ```javascript\n    let request = RSVP.denodeify(require('request'), true);\n  \n    request('http://example.com').then(function(result) {\n      // result[0] -> res\n      // result[1] -> body\n    });\n    ```\n  \n    Or if you pass it an array with names it returns the parameters as a hash:\n  \n    ```javascript\n    let request = RSVP.denodeify(require('request'), ['res', 'body']);\n  \n    request('http://example.com').then(function(result) {\n      // result.res\n      // result.body\n    });\n    ```\n  \n    Sometimes you need to retain the `this`:\n  \n    ```javascript\n    let app = require('express')();\n    let render = RSVP.denodeify(app.render.bind(app));\n    ```\n  \n    The denodified function inherits from the original function. It works in all\n    environments, except IE 10 and below. Consequently all properties of the original\n    function are available to you. However, any properties you change on the\n    denodeified function won't be changed on the original function. Example:\n  \n    ```javascript\n    let request = RSVP.denodeify(require('request')),\n        cookieJar = request.jar(); // <- Inheritance is used here\n  \n    request('http://example.com', {jar: cookieJar}).then(function(res) {\n      // cookieJar.cookies holds now the cookies returned by example.com\n    });\n    ```\n  \n    Using `denodeify` makes it easier to compose asynchronous operations instead\n    of using callbacks. For example, instead of:\n  \n    ```javascript\n    let fs = require('fs');\n  \n    fs.readFile('myfile.txt', function(err, data){\n      if (err) { ... } // Handle error\n      fs.writeFile('myfile2.txt', data, function(err){\n        if (err) { ... } // Handle error\n        console.log('done')\n      });\n    });\n    ```\n  \n    you can chain the operations together using `then` from the returned promise:\n  \n    ```javascript\n    let fs = require('fs');\n    let readFile = RSVP.denodeify(fs.readFile);\n    let writeFile = RSVP.denodeify(fs.writeFile);\n  \n    readFile('myfile.txt').then(function(data){\n      return writeFile('myfile2.txt', data);\n    }).then(function(){\n      console.log('done')\n    }).catch(function(error){\n      // Handle error\n    });\n    ```\n  \n    @method denodeify\n    @static\n    @for RSVP\n    @param {Function} nodeFunc a 'node-style' function that takes a callback as\n    its last argument. The callback expects an error to be passed as its first\n    argument (if an error occurred, otherwise null), and the value from the\n    operation as its second argument ('function(err, value){ }').\n    @param {Boolean|Array} [options] An optional paramter that if set\n    to `true` causes the promise to fulfill with the callback's success arguments\n    as an array. This is useful if the node function has multiple success\n    paramters. If you set this paramter to an array with names, the promise will\n    fulfill with a hash with these names as keys and the success parameters as\n    values.\n    @return {Function} a function that wraps `nodeFunc` to return an\n    `RSVP.Promise`\n    @static\n  */\n  function denodeify(nodeFunc, options) {\n    var fn = function () {\n      var self = this;\n      var l = arguments.length;\n      var args = new Array(l + 1);\n      var promiseInput = false;\n\n      for (var i = 0; i < l; ++i) {\n        var arg = arguments[i];\n\n        if (!promiseInput) {\n          // TODO: clean this up\n          promiseInput = needsPromiseInput(arg);\n          if (promiseInput === GET_THEN_ERROR$1) {\n            var p = new Promise(noop);\n            reject(p, GET_THEN_ERROR$1.value);\n            return p;\n          } else if (promiseInput && promiseInput !== true) {\n            arg = wrapThenable(promiseInput, arg);\n          }\n        }\n        args[i] = arg;\n      }\n\n      var promise = new Promise(noop);\n\n      args[l] = function (err, val) {\n        if (err) reject(promise, err);else if (options === undefined) resolve(promise, val);else if (options === true) resolve(promise, arrayResult(arguments));else if (Array.isArray(options)) resolve(promise, makeObject(arguments, options));else resolve(promise, val);\n      };\n\n      if (promiseInput) {\n        return handlePromiseInput(promise, args, nodeFunc, self);\n      } else {\n        return handleValueInput(promise, args, nodeFunc, self);\n      }\n    };\n\n    (0, _emberBabel.defaults)(fn, nodeFunc);\n\n\n    return fn;\n  }\n\n  function handleValueInput(promise, args, nodeFunc, self) {\n    var result = tryApply(nodeFunc, self, args);\n    if (result === ERROR) {\n      reject(promise, result.value);\n    }\n    return promise;\n  }\n\n  function handlePromiseInput(promise, args, nodeFunc, self) {\n    return Promise.all(args).then(function (args) {\n      var result = tryApply(nodeFunc, self, args);\n      if (result === ERROR) {\n        reject(promise, result.value);\n      }\n      return promise;\n    });\n  }\n\n  function needsPromiseInput(arg) {\n    if (arg && typeof arg === 'object') {\n      if (arg.constructor === Promise) {\n        return true;\n      } else {\n        return getThen$1(arg);\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n    This is a convenient alias for `RSVP.Promise.all`.\n  \n    @method all\n    @static\n    @for RSVP\n    @param {Array} array Array of promises.\n    @param {String} label An optional label. This is useful\n    for tooling.\n  */\n  function all$1(array, label) {\n    return Promise.all(array, label);\n  }\n\n  var AllSettled = function (_Enumerator) {\n    (0, _emberBabel.inherits)(AllSettled, _Enumerator);\n\n    function AllSettled(Constructor, entries, label) {\n      (0, _emberBabel.classCallCheck)(this, AllSettled);\n      return (0, _emberBabel.possibleConstructorReturn)(this, _Enumerator.call(this, Constructor, entries, false /* don't abort on reject */, label));\n    }\n\n    return AllSettled;\n  }(Enumerator);\n\n  AllSettled.prototype._setResultAt = setSettledResult;\n\n  /**\n  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\n  a fail-fast method, it waits until all the promises have returned and\n  shows you all the results. This is useful if you want to handle multiple\n  promises' failure states together as a set.\n   Returns a promise that is fulfilled when all the given promises have been\n  settled. The return promise is fulfilled with an array of the states of\n  the promises passed into the `promises` array argument.\n   Each state object will either indicate fulfillment or rejection, and\n  provide the corresponding value or reason. The states will take one of\n  the following formats:\n   ```javascript\n  { state: 'fulfilled', value: value }\n    or\n  { state: 'rejected', reason: reason }\n  ```\n   Example:\n   ```javascript\n  let promise1 = RSVP.Promise.resolve(1);\n  let promise2 = RSVP.Promise.reject(new Error('2'));\n  let promise3 = RSVP.Promise.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n   RSVP.allSettled(promises).then(function(array){\n    // array == [\n    //   { state: 'fulfilled', value: 1 },\n    //   { state: 'rejected', reason: Error },\n    //   { state: 'rejected', reason: Error }\n    // ]\n    // Note that for the second item, reason.message will be '2', and for the\n    // third item, reason.message will be '3'.\n  }, function(error) {\n    // Not run. (This block would only be called if allSettled had failed,\n    // for instance if passed an incorrect argument type.)\n  });\n  ```\n   @method allSettled\n  @static\n  @for RSVP\n  @param {Array} entries\n  @param {String} label - optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with an array of the settled\n  states of the constituent promises.\n  */\n\n  function allSettled(entries, label) {\n    if (!Array.isArray(entries)) {\n      return Promise.reject(new TypeError(\"Promise.allSettled must be called with an array\"), label);\n    }\n\n    return new AllSettled(Promise, entries, label).promise;\n  }\n\n  /**\n    This is a convenient alias for `RSVP.Promise.race`.\n  \n    @method race\n    @static\n    @for RSVP\n    @param {Array} array Array of promises.\n    @param {String} label An optional label. This is useful\n    for tooling.\n   */\n  function race$1(array, label) {\n    return Promise.race(array, label);\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var PromiseHash = function (_Enumerator2) {\n    (0, _emberBabel.inherits)(PromiseHash, _Enumerator2);\n\n    function PromiseHash(Constructor, object) {\n      var abortOnReject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var label = arguments[3];\n      (0, _emberBabel.classCallCheck)(this, PromiseHash);\n      return (0, _emberBabel.possibleConstructorReturn)(this, _Enumerator2.call(this, Constructor, object, abortOnReject, label));\n    }\n\n    PromiseHash.prototype._init = function _init(Constructor, object) {\n      this._result = {};\n\n      this._enumerate(object);\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    };\n\n    PromiseHash.prototype._enumerate = function _enumerate(input) {\n      var promise = this.promise;\n      var results = [];\n\n      for (var key in input) {\n        if (hasOwnProperty.call(input, key)) {\n          results.push({\n            position: key,\n            entry: input[key]\n          });\n        }\n      }\n\n      var length = results.length;\n      this._remaining = length;\n      var result = void 0;\n\n      for (var i = 0; promise._state === PENDING && i < length; i++) {\n        result = results[i];\n        this._eachEntry(result.entry, result.position);\n      }\n    };\n\n    return PromiseHash;\n  }(Enumerator);\n\n  /**\n    `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n    for its `promises` argument.\n  \n    Returns a promise that is fulfilled when all the given promises have been\n    fulfilled, or rejected if any of them become rejected. The returned promise\n    is fulfilled with a hash that has the same key names as the `promises` object\n    argument. If any of the values in the object are not promises, they will\n    simply be copied over to the fulfilled object.\n  \n    Example:\n  \n    ```javascript\n    let promises = {\n      myPromise: RSVP.resolve(1),\n      yourPromise: RSVP.resolve(2),\n      theirPromise: RSVP.resolve(3),\n      notAPromise: 4\n    };\n  \n    RSVP.hash(promises).then(function(hash){\n      // hash here is an object that looks like:\n      // {\n      //   myPromise: 1,\n      //   yourPromise: 2,\n      //   theirPromise: 3,\n      //   notAPromise: 4\n      // }\n    });\n    ````\n  \n    If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n    that is rejected will be given as the reason to the rejection handler.\n  \n    Example:\n  \n    ```javascript\n    let promises = {\n      myPromise: RSVP.resolve(1),\n      rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n      anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n    };\n  \n    RSVP.hash(promises).then(function(hash){\n      // Code here never runs because there are rejected promises!\n    }, function(reason) {\n      // reason.message === 'rejectedPromise'\n    });\n    ```\n  \n    An important note: `RSVP.hash` is intended for plain JavaScript objects that\n    are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n    chains.\n  \n    Example:\n  \n    ```javascript\n    function MyConstructor(){\n      this.example = RSVP.resolve('Example');\n    }\n  \n    MyConstructor.prototype = {\n      protoProperty: RSVP.resolve('Proto Property')\n    };\n  \n    let myObject = new MyConstructor();\n  \n    RSVP.hash(myObject).then(function(hash){\n      // protoProperty will not be present, instead you will just have an\n      // object that looks like:\n      // {\n      //   example: 'Example'\n      // }\n      //\n      // hash.hasOwnProperty('protoProperty'); // false\n      // 'undefined' === typeof hash.protoProperty\n    });\n    ```\n  \n    @method hash\n    @static\n    @for RSVP\n    @param {Object} object\n    @param {String} label optional string that describes the promise.\n    Useful for tooling.\n    @return {Promise} promise that is fulfilled when all properties of `promises`\n    have been fulfilled, or rejected if any of them become rejected.\n  */\n  function hash(object, label) {\n    if (object === null || typeof object !== 'object') {\n      return Promise.reject(new TypeError(\"Promise.hash must be called with an object\"), label);\n    }\n\n    return new PromiseHash(Promise, object, label).promise;\n  }\n\n  var HashSettled = function (_PromiseHash) {\n    (0, _emberBabel.inherits)(HashSettled, _PromiseHash);\n\n    function HashSettled(Constructor, object, label) {\n      (0, _emberBabel.classCallCheck)(this, HashSettled);\n      return (0, _emberBabel.possibleConstructorReturn)(this, _PromiseHash.call(this, Constructor, object, false, label));\n    }\n\n    return HashSettled;\n  }(PromiseHash);\n\n  HashSettled.prototype._setResultAt = setSettledResult;\n\n  /**\n    `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n    instead of an array for its `promises` argument.\n  \n    Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n    but like `RSVP.allSettled`, `hashSettled` waits until all the\n    constituent promises have returned and then shows you all the results\n    with their states and values/reasons. This is useful if you want to\n    handle multiple promises' failure states together as a set.\n  \n    Returns a promise that is fulfilled when all the given promises have been\n    settled, or rejected if the passed parameters are invalid.\n  \n    The returned promise is fulfilled with a hash that has the same key names as\n    the `promises` object argument. If any of the values in the object are not\n    promises, they will be copied over to the fulfilled object and marked with state\n    'fulfilled'.\n  \n    Example:\n  \n    ```javascript\n    let promises = {\n      myPromise: RSVP.Promise.resolve(1),\n      yourPromise: RSVP.Promise.resolve(2),\n      theirPromise: RSVP.Promise.resolve(3),\n      notAPromise: 4\n    };\n  \n    RSVP.hashSettled(promises).then(function(hash){\n      // hash here is an object that looks like:\n      // {\n      //   myPromise: { state: 'fulfilled', value: 1 },\n      //   yourPromise: { state: 'fulfilled', value: 2 },\n      //   theirPromise: { state: 'fulfilled', value: 3 },\n      //   notAPromise: { state: 'fulfilled', value: 4 }\n      // }\n    });\n    ```\n  \n    If any of the `promises` given to `RSVP.hash` are rejected, the state will\n    be set to 'rejected' and the reason for rejection provided.\n  \n    Example:\n  \n    ```javascript\n    let promises = {\n      myPromise: RSVP.Promise.resolve(1),\n      rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n      anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n    };\n  \n    RSVP.hashSettled(promises).then(function(hash){\n      // hash here is an object that looks like:\n      // {\n      //   myPromise:              { state: 'fulfilled', value: 1 },\n      //   rejectedPromise:        { state: 'rejected', reason: Error },\n      //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n      // }\n      // Note that for rejectedPromise, reason.message == 'rejection',\n      // and for anotherRejectedPromise, reason.message == 'more rejection'.\n    });\n    ```\n  \n    An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n    are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n    chains.\n  \n    Example:\n  \n    ```javascript\n    function MyConstructor(){\n      this.example = RSVP.Promise.resolve('Example');\n    }\n  \n    MyConstructor.prototype = {\n      protoProperty: RSVP.Promise.resolve('Proto Property')\n    };\n  \n    let myObject = new MyConstructor();\n  \n    RSVP.hashSettled(myObject).then(function(hash){\n      // protoProperty will not be present, instead you will just have an\n      // object that looks like:\n      // {\n      //   example: { state: 'fulfilled', value: 'Example' }\n      // }\n      //\n      // hash.hasOwnProperty('protoProperty'); // false\n      // 'undefined' === typeof hash.protoProperty\n    });\n    ```\n  \n    @method hashSettled\n    @for RSVP\n    @param {Object} object\n    @param {String} label optional string that describes the promise.\n    Useful for tooling.\n    @return {Promise} promise that is fulfilled when when all properties of `promises`\n    have been settled.\n    @static\n  */\n\n  function hashSettled(object, label) {\n    if (object === null || typeof object !== 'object') {\n      return Promise.reject(new TypeError(\"RSVP.hashSettled must be called with an object\"), label);\n    }\n\n    return new HashSettled(Promise, object, false, label).promise;\n  }\n\n  /**\n    `RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\n    loop in order to aid debugging.\n  \n    Promises A+ specifies that any exceptions that occur with a promise must be\n    caught by the promises implementation and bubbled to the last handler. For\n    this reason, it is recommended that you always specify a second rejection\n    handler function to `then`. However, `RSVP.rethrow` will throw the exception\n    outside of the promise, so it bubbles up to your console if in the browser,\n    or domain/cause uncaught exception in Node. `rethrow` will also throw the\n    error again so the error can be handled by the promise per the spec.\n  \n    ```javascript\n    function throws(){\n      throw new Error('Whoops!');\n    }\n  \n    let promise = new RSVP.Promise(function(resolve, reject){\n      throws();\n    });\n  \n    promise.catch(RSVP.rethrow).then(function(){\n      // Code here doesn't run because the promise became rejected due to an\n      // error!\n    }, function (err){\n      // handle the error here\n    });\n    ```\n  \n    The 'Whoops' error will be thrown on the next turn of the event loop\n    and you can watch for it in your console. You can also handle it using a\n    rejection handler given to `.then` or `.catch` on the returned promise.\n  \n    @method rethrow\n    @static\n    @for RSVP\n    @param {Error} reason reason the promise became rejected.\n    @throws Error\n    @static\n  */\n  function rethrow(reason) {\n    setTimeout(function () {\n      throw reason;\n    });\n    throw reason;\n  }\n\n  /**\n    `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n    `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n    interface. New code should use the `RSVP.Promise` constructor instead.\n  \n    The object returned from `RSVP.defer` is a plain object with three properties:\n  \n    * promise - an `RSVP.Promise`.\n    * reject - a function that causes the `promise` property on this object to\n      become rejected\n    * resolve - a function that causes the `promise` property on this object to\n      become fulfilled.\n  \n    Example:\n  \n     ```javascript\n     let deferred = RSVP.defer();\n  \n     deferred.resolve(\"Success!\");\n  \n     deferred.promise.then(function(value){\n       // value here is \"Success!\"\n     });\n     ```\n  \n    @method defer\n    @static\n    @for RSVP\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Object}\n   */\n\n  function defer(label) {\n    var deferred = { resolve: undefined, reject: undefined };\n\n    deferred.promise = new Promise(function (resolve, reject) {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    }, label);\n\n    return deferred;\n  }\n\n  var MapEnumerator = function (_Enumerator3) {\n    (0, _emberBabel.inherits)(MapEnumerator, _Enumerator3);\n\n    function MapEnumerator(Constructor, entries, mapFn, label) {\n      (0, _emberBabel.classCallCheck)(this, MapEnumerator);\n      return (0, _emberBabel.possibleConstructorReturn)(this, _Enumerator3.call(this, Constructor, entries, true, label, mapFn));\n    }\n\n    MapEnumerator.prototype._init = function _init(Constructor, input, bool, label, mapFn) {\n      var len = input.length || 0;\n      this.length = len;\n      this._remaining = len;\n      this._result = new Array(len);\n      this._mapFn = mapFn;\n\n      this._enumerate(input);\n    };\n\n    MapEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n      if (firstPass) {\n        var val = tryCatch(this._mapFn)(value, i);\n        if (val === TRY_CATCH_ERROR) {\n          this._settledAt(REJECTED, i, val.error, false);\n        } else {\n          this._eachEntry(val, i, false);\n        }\n      } else {\n        this._remaining--;\n        this._result[i] = value;\n      }\n    };\n\n    return MapEnumerator;\n  }(Enumerator);\n\n  /**\n   `RSVP.map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called\n    meaning that as soon as any promise resolves its value will be passed to `mapFn`.\n    `RSVP.map` returns a promise that will become fulfilled with the result of running\n    `mapFn` on the values the promises become fulfilled with.\n  \n    For example:\n  \n    ```javascript\n  \n    let promise1 = RSVP.resolve(1);\n    let promise2 = RSVP.resolve(2);\n    let promise3 = RSVP.resolve(3);\n    let promises = [ promise1, promise2, promise3 ];\n  \n    let mapFn = function(item){\n      return item + 1;\n    };\n  \n    RSVP.map(promises, mapFn).then(function(result){\n      // result is [ 2, 3, 4 ]\n    });\n    ```\n  \n    If any of the `promises` given to `RSVP.map` are rejected, the first promise\n    that is rejected will be given as an argument to the returned promise's\n    rejection handler. For example:\n  \n    ```javascript\n    let promise1 = RSVP.resolve(1);\n    let promise2 = RSVP.reject(new Error('2'));\n    let promise3 = RSVP.reject(new Error('3'));\n    let promises = [ promise1, promise2, promise3 ];\n  \n    let mapFn = function(item){\n      return item + 1;\n    };\n  \n    RSVP.map(promises, mapFn).then(function(array){\n      // Code here never runs because there are rejected promises!\n    }, function(reason) {\n      // reason.message === '2'\n    });\n    ```\n  \n    `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n    say you want to get all comments from a set of blog posts, but you need\n    the blog posts first because they contain a url to those comments.\n  \n    ```javscript\n  \n    let mapFn = function(blogPost){\n      // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n      // with some comments data\n      return getComments(blogPost.comments_url);\n    };\n  \n    // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some blog post data\n    RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n      // comments is the result of asking the server for the comments\n      // of all blog posts returned from getBlogPosts()\n    });\n    ```\n  \n    @method map\n    @static\n    @for RSVP\n    @param {Array} promises\n    @param {Function} mapFn function to be called on each fulfilled promise.\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise} promise that is fulfilled with the result of calling\n    `mapFn` on each fulfilled promise or value when they become fulfilled.\n     The promise will be rejected if any of the given `promises` become rejected.\n    @static\n  */\n  function map(promises, mapFn, label) {\n    if (!Array.isArray(promises)) {\n      return Promise.reject(new TypeError(\"RSVP.map must be called with an array\"), label);\n    }\n\n    if (typeof mapFn !== 'function') {\n      return Promise.reject(new TypeError(\"RSVP.map expects a function as a second argument\"), label);\n    }\n\n    return new MapEnumerator(Promise, promises, mapFn, label).promise;\n  }\n\n  /**\n    This is a convenient alias for `RSVP.Promise.resolve`.\n  \n    @method resolve\n    @static\n    @for RSVP\n    @param {*} value value that the returned promise will be resolved with\n    @param {String} label optional string for identifying the returned promise.\n    Useful for tooling.\n    @return {Promise} a promise that will become fulfilled with the given\n    `value`\n  */\n  function resolve$2(value, label) {\n    return Promise.resolve(value, label);\n  }\n\n  /**\n    This is a convenient alias for `RSVP.Promise.reject`.\n  \n    @method reject\n    @static\n    @for RSVP\n    @param {*} reason value that the returned promise will be rejected with.\n    @param {String} label optional string for identifying the returned promise.\n    Useful for tooling.\n    @return {Promise} a promise rejected with the given `reason`.\n  */\n  function reject$2(reason, label) {\n    return Promise.reject(reason, label);\n  }\n\n  var EMPTY_OBJECT = {};\n\n  var FilterEnumerator = function (_Enumerator4) {\n    (0, _emberBabel.inherits)(FilterEnumerator, _Enumerator4);\n\n    function FilterEnumerator(Constructor, entries, filterFn, label) {\n      (0, _emberBabel.classCallCheck)(this, FilterEnumerator);\n      return (0, _emberBabel.possibleConstructorReturn)(this, _Enumerator4.call(this, Constructor, entries, true, label, filterFn));\n    }\n\n    FilterEnumerator.prototype._init = function _init(Constructor, input, bool, label, filterFn) {\n      var len = input.length || 0;\n      this.length = len;\n      this._remaining = len;\n\n      this._result = new Array(len);\n      this._filterFn = filterFn;\n\n      this._enumerate(input);\n    };\n\n    FilterEnumerator.prototype._checkFullfillment = function _checkFullfillment() {\n      if (this._remaining === 0) {\n        this._result = this._result.filter(function (val) {\n          return val !== EMPTY_OBJECT;\n        });\n        fulfill(this.promise, this._result);\n      }\n    };\n\n    FilterEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n      if (firstPass) {\n        this._result[i] = value;\n        var val = tryCatch(this._filterFn)(value, i);\n        if (val === TRY_CATCH_ERROR) {\n          this._settledAt(REJECTED, i, val.error, false);\n        } else {\n          this._eachEntry(val, i, false);\n        }\n      } else {\n        this._remaining--;\n        if (!value) {\n          this._result[i] = EMPTY_OBJECT;\n        }\n      }\n    };\n\n    return FilterEnumerator;\n  }(Enumerator);\n\n  /**\n   `RSVP.filter` is similar to JavaScript's native `filter` method.\n   `filterFn` is eagerly called meaning that as soon as any promise\n    resolves its value will be passed to `filterFn`. `RSVP.filter` returns\n    a promise that will become fulfilled with the result of running\n    `filterFn` on the values the promises become fulfilled with.\n  \n    For example:\n  \n    ```javascript\n  \n    let promise1 = RSVP.resolve(1);\n    let promise2 = RSVP.resolve(2);\n    let promise3 = RSVP.resolve(3);\n  \n    let promises = [promise1, promise2, promise3];\n  \n    let filterFn = function(item){\n      return item > 1;\n    };\n  \n    RSVP.filter(promises, filterFn).then(function(result){\n      // result is [ 2, 3 ]\n    });\n    ```\n  \n    If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n    that is rejected will be given as an argument to the returned promise's\n    rejection handler. For example:\n  \n    ```javascript\n    let promise1 = RSVP.resolve(1);\n    let promise2 = RSVP.reject(new Error('2'));\n    let promise3 = RSVP.reject(new Error('3'));\n    let promises = [ promise1, promise2, promise3 ];\n  \n    let filterFn = function(item){\n      return item > 1;\n    };\n  \n    RSVP.filter(promises, filterFn).then(function(array){\n      // Code here never runs because there are rejected promises!\n    }, function(reason) {\n      // reason.message === '2'\n    });\n    ```\n  \n    `RSVP.filter` will also wait for any promises returned from `filterFn`.\n    For instance, you may want to fetch a list of users then return a subset\n    of those users based on some asynchronous operation:\n  \n    ```javascript\n  \n    let alice = { name: 'alice' };\n    let bob   = { name: 'bob' };\n    let users = [ alice, bob ];\n  \n    let promises = users.map(function(user){\n      return RSVP.resolve(user);\n    });\n  \n    let filterFn = function(user){\n      // Here, Alice has permissions to create a blog post, but Bob does not.\n      return getPrivilegesForUser(user).then(function(privs){\n        return privs.can_create_blog_post === true;\n      });\n    };\n    RSVP.filter(promises, filterFn).then(function(users){\n      // true, because the server told us only Alice can create a blog post.\n      users.length === 1;\n      // false, because Alice is the only user present in `users`\n      users[0] === bob;\n    });\n    ```\n  \n    @method filter\n    @static\n    @for RSVP\n    @param {Array} promises\n    @param {Function} filterFn - function to be called on each resolved value to\n    filter the final results.\n    @param {String} label optional string describing the promise. Useful for\n    tooling.\n    @return {Promise}\n  */\n\n  function filter(promises, filterFn, label) {\n    if (!Array.isArray(promises) && !(promises !== null && typeof promises === 'object' && promises.then !== undefined)) {\n      return Promise.reject(new TypeError(\"RSVP.filter must be called with an array or promise\"), label);\n    }\n\n    if (typeof filterFn !== 'function') {\n      return Promise.reject(new TypeError(\"RSVP.filter expects function as a second argument\"), label);\n    }\n\n    return Promise.resolve(promises, label).then(function (promises) {\n      return new FilterEnumerator(Promise, promises, filterFn, label).promise;\n    });\n  }\n\n  var len = 0;\n  var vertxNext = void 0;\n  function asap(callback, arg) {\n    queue$1[len] = callback;\n    queue$1[len + 1] = arg;\n    len += 2;\n    if (len === 2) {\n      // If len is 1, that means that we need to schedule an async flush.\n      // If additional callbacks are queued before the queue is flushed, they\n      // will be processed by this flush that we are scheduling.\n      scheduleFlush$1();\n    }\n  }\n\n  var browserWindow = typeof window !== 'undefined' ? window : undefined;\n  var browserGlobal = browserWindow || {};\n  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n  // test for web worker but not in IE10\n  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n  // node\n  function useNextTick() {\n    var nextTick = process.nextTick;\n    // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n    // setImmediate should be used instead instead\n    var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n      nextTick = setImmediate;\n    }\n    return function () {\n      return nextTick(flush);\n    };\n  }\n\n  // vertx\n  function useVertxTimer() {\n    if (typeof vertxNext !== 'undefined') {\n      return function () {\n        vertxNext(flush);\n      };\n    }\n    return useSetTimeout();\n  }\n\n  function useMutationObserver() {\n    var iterations = 0;\n    var observer = new BrowserMutationObserver(flush);\n    var node = document.createTextNode('');\n    observer.observe(node, { characterData: true });\n\n    return function () {\n      return node.data = iterations = ++iterations % 2;\n    };\n  }\n\n  // web worker\n  function useMessageChannel() {\n    var channel = new MessageChannel();\n    channel.port1.onmessage = flush;\n    return function () {\n      return channel.port2.postMessage(0);\n    };\n  }\n\n  function useSetTimeout() {\n    return function () {\n      return setTimeout(flush, 1);\n    };\n  }\n\n  var queue$1 = new Array(1000);\n\n  function flush() {\n    for (var i = 0; i < len; i += 2) {\n      var callback = queue$1[i];\n      var arg = queue$1[i + 1];\n\n      callback(arg);\n\n      queue$1[i] = undefined;\n      queue$1[i + 1] = undefined;\n    }\n\n    len = 0;\n  }\n\n  function attemptVertex() {\n    try {\n      var r = _nodeModule.require;\n      var vertx = r('vertx');\n      vertxNext = vertx.runOnLoop || vertx.runOnContext;\n      return useVertxTimer();\n    } catch (e) {\n      return useSetTimeout();\n    }\n  }\n\n  var scheduleFlush$1 = void 0;\n  // Decide what async method to use to triggering processing of queued callbacks:\n  if (isNode) {\n    scheduleFlush$1 = useNextTick();\n  } else if (BrowserMutationObserver) {\n    scheduleFlush$1 = useMutationObserver();\n  } else if (isWorker) {\n    scheduleFlush$1 = useMessageChannel();\n  } else if (browserWindow === undefined && typeof _nodeModule.require === 'function') {\n    scheduleFlush$1 = attemptVertex();\n  } else {\n    scheduleFlush$1 = useSetTimeout();\n  }\n\n  /* global self */\n  if (typeof self === 'object') {\n\n    /* global global */\n  } else if (typeof global === 'object') {} else {\n    throw new Error('no global: `self` or `global` found');\n  }\n\n  // defaults\n  config.async = asap;\n  config.after = function (cb) {\n    return setTimeout(cb, 0);\n  };\n  var cast = resolve$2;\n\n  var async = function (callback, arg) {\n    return config.async(callback, arg);\n  };\n\n  function on() {\n    config['on'].apply(config, arguments);\n  }\n\n  function off() {\n    config['off'].apply(config, arguments);\n  }\n\n  // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\n  if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n    var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n    configure('instrument', true);\n    for (var eventName in callbacks) {\n      if (callbacks.hasOwnProperty(eventName)) {\n        on(eventName, callbacks[eventName]);\n      }\n    }\n  }\n\n  // the default export here is for backwards compat:\n  //   https://github.com/tildeio/rsvp.js/issues/434\n  var rsvp = (_rsvp = {\n    asap: asap,\n    cast: cast,\n    Promise: Promise,\n    EventTarget: EventTarget,\n    all: all$1,\n    allSettled: allSettled,\n    race: race$1,\n    hash: hash,\n    hashSettled: hashSettled,\n    rethrow: rethrow,\n    defer: defer,\n    denodeify: denodeify,\n    configure: configure,\n    on: on,\n    off: off,\n    resolve: resolve$2,\n    reject: reject$2,\n    map: map\n  }, _rsvp['async'] = async, _rsvp.filter = filter, _rsvp);\n\n  exports.asap = asap;\n  exports.cast = cast;\n  exports.Promise = Promise;\n  exports.EventTarget = EventTarget;\n  exports.all = all$1;\n  exports.allSettled = allSettled;\n  exports.race = race$1;\n  exports.hash = hash;\n  exports.hashSettled = hashSettled;\n  exports.rethrow = rethrow;\n  exports.defer = defer;\n  exports.denodeify = denodeify;\n  exports.configure = configure;\n  exports.on = on;\n  exports.off = off;\n  exports.resolve = resolve$2;\n  exports.reject = reject$2;\n  exports.map = map;\n  exports.async = async;\n  exports.filter = filter;\n  exports.default = rsvp;\n});","requireModule('ember')","(function() {\n  define('ember-cli-shims/deprecations', [], function() {\n    var values = {\"ember-application\":{\"default\":[\"@ember/application\"]},\"ember-array\":{\"default\":[\"@ember/array\"]},\"ember-array/mutable\":{\"default\":[\"@ember/array/mutable\"]},\"ember-array/utils\":{\"A\":[\"@ember/array\",\"A\"],\"isEmberArray\":[\"@ember/array\",\"isArray\"],\"wrap\":[\"@ember/array\",\"makeArray\"]},\"ember-component\":{\"default\":[\"@ember/component\"]},\"ember-components/checkbox\":{\"default\":[\"@ember/component/checkbox\"]},\"ember-components/text-area\":{\"default\":[\"@ember/component/text-area\"]},\"ember-components/text-field\":{\"default\":[\"@ember/component/text-field\"]},\"ember-controller\":{\"default\":[\"@ember/controller\"]},\"ember-controller/inject\":{\"default\":[\"@ember/controller\",\"inject\"]},\"ember-controller/proxy\":{\"default\":[\"@ember/array/proxy\"]},\"ember-debug\":{\"log\":[\"@ember/debug\",\"debug\"],\"inspect\":[\"@ember/debug\",\"inspect\"],\"run\":[\"@ember/debug\",\"runInDebug\"],\"warn\":[\"@ember/debug\",\"warn\"]},\"ember-debug/container-debug-adapter\":{\"default\":[\"@ember/debug/container-debug-adapter\"]},\"ember-debug/data-adapter\":{\"default\":[\"@ember/debug/data-adapter\"]},\"ember-deprecations\":{\"deprecate\":[\"@ember/application/deprecations\",\"deprecate\"],\"deprecateFunc\":[\"@ember/application/deprecations\",\"deprecateFunc\"]},\"ember-enumerable\":{\"default\":[\"@ember/enumerable\"]},\"ember-evented\":{\"default\":[\"@ember/object/evented\"]},\"ember-evented/on\":{\"default\":[\"@ember/object/evented\",\"on\"]},\"ember-globals-resolver\":{\"default\":[\"@ember/application/globals-resolver\"]},\"ember-helper\":{\"default\":[\"@ember/component/helper\"],\"helper\":[\"@ember/component/helper\",\"helper\"]},\"ember-instrumentation\":{\"instrument\":[\"@ember/instrumentation\",\"instrument\"],\"reset\":[\"@ember/instrumentation\",\"reset\"],\"subscribe\":[\"@ember/instrumentation\",\"subscribe\"],\"unsubscribe\":[\"@ember/instrumentation\",\"unsubscribe\"]},\"ember-locations/hash\":{\"default\":[\"@ember/routing/hash-location\"]},\"ember-locations/history\":{\"default\":[\"@ember/routing/history-location\"]},\"ember-locations/none\":{\"default\":[\"@ember/routing/none-location\"]},\"ember-map\":{\"default\":[\"@ember/map\"],\"withDefault\":[\"@ember/map/with-default\"]},\"ember-metal/events\":{\"addListener\":[\"@ember/object/events\",\"addListener\"],\"removeListener\":[\"@ember/object/events\",\"removeListener\"],\"send\":[\"@ember/object/events\",\"sendEvent\"]},\"ember-metal/get\":{\"default\":[\"@ember/object\",\"get\"],\"getProperties\":[\"@ember/object\",\"getProperties\"]},\"ember-metal/mixin\":{\"default\":[\"@ember/object/mixin\"]},\"ember-metal/observer\":{\"default\":[\"@ember/object\",\"observer\"],\"addObserver\":[\"@ember/object/observers\",\"addObserver\"],\"removeObserver\":[\"@ember/object/observers\",\"removeObserver\"]},\"ember-metal/on-load\":{\"default\":[\"@ember/application\",\"onLoad\"],\"run\":[\"@ember/application\",\"runLoadHooks\"]},\"ember-metal/set\":{\"default\":[\"@ember/object\",\"set\"],\"setProperties\":[\"@ember/object\",\"setProperties\"],\"trySet\":[\"@ember/object\",\"trySet\"]},\"ember-metal/utils\":{\"aliasMethod\":[\"@ember/object\",\"aliasMethod\"],\"assert\":[\"@ember/debug\",\"assert\"],\"cacheFor\":[\"@ember/object/internals\",\"cacheFor\"],\"copy\":[\"@ember/object/internals\",\"copy\"],\"guidFor\":[\"@ember/object/internals\",\"guidFor\"]},\"ember-object\":{\"default\":[\"@ember/object\"]},\"ember-owner/get\":{\"default\":[\"@ember/application\",\"getOwner\"]},\"ember-owner/set\":{\"default\":[\"@ember/application\",\"setOwner\"]},\"ember-platform\":{\"assign\":[\"@ember/polyfills\",\"assign\"],\"create\":[\"@ember/polyfills\",\"create\"],\"hasAccessors\":[\"@ember/polyfills\",\"hasPropertyAccessors\"],\"keys\":[\"@ember/polyfills\",\"keys\"]},\"ember-route\":{\"default\":[\"@ember/routing/route\"]},\"ember-router\":{\"default\":[\"@ember/routing/router\"]},\"ember-runloop\":{\"default\":[\"@ember/runloop\",\"run\"],\"begin\":[\"@ember/runloop\",\"begin\"],\"bind\":[\"@ember/runloop\",\"bind\"],\"cancel\":[\"@ember/runloop\",\"cancel\"],\"debounce\":[\"@ember/runloop\",\"debounce\"],\"end\":[\"@ember/runloop\",\"end\"],\"join\":[\"@ember/runloop\",\"join\"],\"later\":[\"@ember/runloop\",\"later\"],\"next\":[\"@ember/runloop\",\"next\"],\"once\":[\"@ember/runloop\",\"once\"],\"schedule\":[\"@ember/runloop\",\"schedule\"],\"scheduleOnce\":[\"@ember/runloop\",\"scheduleOnce\"],\"throttle\":[\"@ember/runloop\",\"throttle\"]},\"ember-service\":{\"default\":[\"@ember/service\"]},\"ember-service/inject\":{\"default\":[\"@ember/service\",\"inject\"]},\"ember-string\":{\"camelize\":[\"@ember/string\",\"camelize\"],\"capitalize\":[\"@ember/string\",\"capitalize\"],\"classify\":[\"@ember/string\",\"classify\"],\"dasherize\":[\"@ember/string\",\"dasherize\"],\"decamelize\":[\"@ember/string\",\"decamelize\"],\"fmt\":[\"@ember/string\",\"fmt\"],\"htmlSafe\":[\"@ember/string\",\"htmlSafe\"],\"loc\":[\"@ember/string\",\"loc\"],\"underscore\":[\"@ember/string\",\"underscore\"],\"w\":[\"@ember/string\",\"w\"]},\"ember-utils\":{\"isBlank\":[\"@ember/utils\",\"isBlank\"],\"isEmpty\":[\"@ember/utils\",\"isEmpty\"],\"isNone\":[\"@ember/utils\",\"isNone\"],\"isPresent\":[\"@ember/utils\",\"isPresent\"],\"tryInvoke\":[\"@ember/utils\",\"tryInvoke\"],\"typeOf\":[\"@ember/utils\",\"typeOf\"]},\"ember-computed\":{\"default\":[\"@ember/object\",\"computed\"],\"empty\":[\"@ember/object/computed\",\"empty\"],\"notEmpty\":[\"@ember/object/computed\",\"notEmpty\"],\"none\":[\"@ember/object/computed\",\"none\"],\"not\":[\"@ember/object/computed\",\"not\"],\"bool\":[\"@ember/object/computed\",\"bool\"],\"match\":[\"@ember/object/computed\",\"match\"],\"equal\":[\"@ember/object/computed\",\"equal\"],\"gt\":[\"@ember/object/computed\",\"gt\"],\"gte\":[\"@ember/object/computed\",\"gte\"],\"lt\":[\"@ember/object/computed\",\"lt\"],\"lte\":[\"@ember/object/computed\",\"lte\"],\"alias\":[\"@ember/object/computed\",\"alias\"],\"oneWay\":[\"@ember/object/computed\",\"oneWay\"],\"reads\":[\"@ember/object/computed\",\"reads\"],\"readOnly\":[\"@ember/object/computed\",\"readOnly\"],\"deprecatingAlias\":[\"@ember/object/computed\",\"deprecatingAlias\"],\"and\":[\"@ember/object/computed\",\"and\"],\"or\":[\"@ember/object/computed\",\"or\"],\"collect\":[\"@ember/object/computed\",\"collect\"],\"sum\":[\"@ember/object/computed\",\"sum\"],\"min\":[\"@ember/object/computed\",\"min\"],\"max\":[\"@ember/object/computed\",\"max\"],\"map\":[\"@ember/object/computed\",\"map\"],\"sort\":[\"@ember/object/computed\",\"sort\"],\"setDiff\":[\"@ember/object/computed\",\"setDiff\"],\"mapBy\":[\"@ember/object/computed\",\"mapBy\"],\"mapProperty\":[\"@ember/object/computed\",\"mapProperty\"],\"filter\":[\"@ember/object/computed\",\"filter\"],\"filterBy\":[\"@ember/object/computed\",\"filterBy\"],\"filterProperty\":[\"@ember/object/computed\",\"filterProperty\"],\"uniq\":[\"@ember/object/computed\",\"uniq\"],\"union\":[\"@ember/object/computed\",\"union\"],\"intersect\":[\"@ember/object/computed\",\"intersect\"]},\"ember-test/adapter\":{\"default\":[\"@ember/test/adapter\"]}};\n    \n    Object.defineProperty(values, '__esModule', {\n      value: true\n    });\n\n    return values;\n  });\n})();","(function() {\n/* globals define, Ember, jQuery */\n\n  function processEmberShims() {\n    var shims = {\n      'ember-application': {\n        'default': Ember.Application\n      },\n      'ember-array': {\n        'default': Ember.Array\n      },\n      'ember-array/mutable': {\n        'default': Ember.MutableArray\n      },\n      'ember-array/utils': {\n        'A':            Ember.A,\n        'isEmberArray': Ember.isArray,\n        'wrap':         Ember.makeArray\n      },\n      'ember-component': {\n        'default': Ember.Component\n      },\n      'ember-components/checkbox': {\n        'default': Ember.Checkbox\n      },\n      'ember-components/text-area': {\n        'default': Ember.TextArea\n      },\n      'ember-components/text-field': {\n        'default': Ember.TextField\n      },\n      'ember-controller': {\n        'default': Ember.Controller\n      },\n      'ember-controller/inject': {\n        'default': Ember.inject.controller\n      },\n      'ember-controller/proxy': {\n        'default': Ember.ArrayProxy\n      },\n      'ember-controllers/sortable': {\n        'default': Ember.SortableMixin\n      },\n      'ember-debug': {\n        'log':      Ember.debug,\n        'inspect':  Ember.inspect,\n        'run':      Ember.runInDebug,\n        'warn':     Ember.warn\n      },\n      'ember-debug/container-debug-adapter': {\n        'default': Ember.ContainerDebugAdapter\n      },\n      'ember-debug/data-adapter': {\n        'default': Ember.DataAdapter\n      },\n      'ember-deprecations': {\n        'deprecate':      Ember.deprecate,\n        'deprecateFunc':  Ember.deprecateFunc\n      },\n      'ember-enumerable': {\n        'default': Ember.Enumerable\n      },\n      'ember-evented': {\n        'default': Ember.Evented\n      },\n      'ember-evented/on': {\n        'default': Ember.on\n      },\n      'ember-globals-resolver': {\n        'default': Ember.DefaultResolver\n      },\n      'ember-helper': {\n        'default':  Ember.Helper,\n        'helper':   Ember.Helper && Ember.Helper.helper\n      },\n      'ember-instrumentation': {\n        'instrument':   Ember.Instrumentation.instrument,\n        'reset':        Ember.Instrumentation.reset,\n        'subscribe':    Ember.Instrumentation.subscribe,\n        'unsubscribe':  Ember.Instrumentation.unsubscribe\n      },\n      'ember-locations/hash': {\n        'default': Ember.HashLocation\n      },\n      'ember-locations/history': {\n        'default': Ember.HistoryLocation\n      },\n      'ember-locations/none': {\n        'default': Ember.NoneLocation\n      },\n      'ember-map': {\n        'default':      Ember.Map,\n        'withDefault':  Ember.MapWithDefault\n      },\n      'ember-metal/destroy': {\n        'default': Ember.destroy\n      },\n      'ember-metal/events': {\n        'addListener':    Ember.addListener,\n        'removeListener': Ember.removeListener,\n        'send':           Ember.sendEvent\n      },\n      'ember-metal/get': {\n        'default': Ember.get,\n        'getProperties': Ember.getProperties\n      },\n      'ember-metal/mixin': {\n        'default': Ember.Mixin\n      },\n      'ember-metal/observer': {\n        'default':        Ember.observer,\n        'addObserver':    Ember.addObserver,\n        'removeObserver': Ember.removeObserver\n      },\n      'ember-metal/on-load': {\n        'default':  Ember.onLoad,\n        'run':      Ember.runLoadHooks\n      },\n      'ember-metal/set': {\n        'default':        Ember.set,\n        'setProperties':  Ember.setProperties,\n        'trySet':         Ember.trySet\n      },\n      'ember-metal/utils': {\n        'aliasMethod':  Ember.aliasMethod,\n        'assert':       Ember.assert,\n        'cacheFor':     Ember.cacheFor,\n        'copy':         Ember.copy,\n        'guidFor':      Ember.guidFor\n      },\n      'ember-object': {\n        'default': Ember.Object\n      },\n      'ember-owner/get': {\n        'default': Ember.getOwner\n      },\n      'ember-owner/set': {\n        'default': Ember.setOwner\n      },\n      'ember-platform': {\n        'assign':         Ember.assign || Ember.merge,\n        'create':         Ember.create,\n        'defineProperty': Ember.platform.defineProperty,\n        'hasAccessors':   Ember.platform.hasPropertyAccessors,\n        'keys':           Ember.keys\n      },\n      'ember-route': {\n        'default': Ember.Route\n      },\n      'ember-router': {\n        'default': Ember.Router\n      },\n      'ember-runloop': {\n        'default':      Ember.run,\n        'begin':        Ember.run.begin,\n        'bind':         Ember.run.bind,\n        'cancel':       Ember.run.cancel,\n        'debounce':     Ember.run.debounce,\n        'end':          Ember.run.end,\n        'join':         Ember.run.join,\n        'later':        Ember.run.later,\n        'next':         Ember.run.next,\n        'once':         Ember.run.once,\n        'schedule':     Ember.run.schedule,\n        'scheduleOnce': Ember.run.scheduleOnce,\n        'throttle':     Ember.run.throttle\n      },\n      'ember-service': {\n        'default': Ember.Service\n      },\n      'ember-service/inject': {\n        'default': Ember.inject.service\n      },\n      'ember-set/ordered': {\n        'default': Ember.OrderedSet\n      },\n      'ember-string': {\n        'camelize':     Ember.String.camelize,\n        'capitalize':   Ember.String.capitalize,\n        'classify':     Ember.String.classify,\n        'dasherize':    Ember.String.dasherize,\n        'decamelize':   Ember.String.decamelize,\n        'fmt':          Ember.String.fmt,\n        'htmlSafe':     Ember.String.htmlSafe,\n        'loc':          Ember.String.loc,\n        'underscore':   Ember.String.underscore,\n        'w':            Ember.String.w\n      },\n      'ember-utils': {\n        'isBlank':    Ember.isBlank,\n        'isEmpty':    Ember.isEmpty,\n        'isNone':     Ember.isNone,\n        'isPresent':  Ember.isPresent,\n        'tryInvoke':  Ember.tryInvoke,\n        'typeOf':     Ember.typeOf\n      }\n    };\n\n    // populate `ember/computed` named exports\n    shims['ember-computed'] = {\n      'default': Ember.computed\n    };\n    var computedMacros = [\n      \"empty\",\"notEmpty\", \"none\", \"not\", \"bool\", \"match\",\n      \"equal\", \"gt\", \"gte\", \"lt\", \"lte\", \"alias\", \"oneWay\",\n      \"reads\", \"readOnly\", \"deprecatingAlias\",\n      \"and\", \"or\", \"collect\", \"sum\", \"min\", \"max\",\n      \"map\", \"sort\", \"setDiff\", \"mapBy\", \"mapProperty\",\n      \"filter\", \"filterBy\", \"filterProperty\", \"uniq\",\n      \"union\", \"intersect\"\n    ];\n    for (var i = 0, l = computedMacros.length; i < l; i++) {\n      var key = computedMacros[i];\n      shims['ember-computed'][key] = Ember.computed[key];\n    }\n\n    for (var moduleName in shims) {\n      generateModule(moduleName, shims[moduleName], true);\n    }\n  }\n\n  function processTestShims() {\n    if (Ember.Test) {\n      var testShims = {\n        'ember-test': {\n          'default': Ember.Test\n        },\n        'ember-test/adapter': {\n          'default': Ember.Test.Adapter\n        },\n        'ember-test/qunit-adapter': {\n          'default': Ember.Test.QUnitAdapter\n        }\n      };\n\n      for (var moduleName in testShims) {\n        generateModule(moduleName, testShims[moduleName]);\n      }\n    }\n  }\n\n  function generateModule(name, values, deprecated) {\n    define(name, ['ember-cli-shims/deprecations'], function(deprecations) {\n      'use strict';\n\n      if (deprecated) {\n        var moduleDeprecations = deprecations[name];\n\n        var message = 'Importing from the `' + name + '` module has been deprecated. ';\n        if (moduleDeprecations) {\n          message += 'Please use the new module imports:\\n\\n';\n          Object.keys(moduleDeprecations).forEach(function(key) {\n            var newImport = moduleDeprecations[key];\n            if (newImport[1]) {\n              message += 'import { ' + newImport[1] + ' } from \\'' + newImport[0] + '\\'\\n';\n            } else {\n              var importName = Ember.String.classify(newImport[0].split('/').pop());\n              message += 'import ' + importName + ' from \\'' + newImport[0] + '\\'\\n';\n            }\n          });\n          message += '\\n';\n\n        } else {\n          message += 'Please use globals instead.';\n        }\n\n        Ember.deprecate(message, false, {\n          id: 'ember-cli-shims.deprecated-shims',\n          until: '3.0.0',\n          url: 'https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md'\n        });\n      }\n\n      Object.defineProperty(values, '__esModule', {\n        value: true\n      });\n\n      return values;\n    });\n  }\n\n  generateModule('ember', { default: Ember });\n  processEmberShims();\n  processTestShims();\n  generateModule('jquery', { 'default': self.jQuery });\n  generateModule('rsvp', { 'default': Ember.RSVP });\n})();\n","/* globals define */\n\nfunction createDeprecatedModule(moduleId) {\n  define(moduleId, ['exports', 'ember-resolver/resolver', 'ember'], function(exports, Resolver, Ember) {\n    Ember['default'].deprecate(\n      'Usage of `' + moduleId + '` module is deprecated, please update to `ember-resolver`.',\n      false,\n      { id: 'ember-resolver.legacy-shims', until: '3.0.0' }\n    );\n\n    exports['default'] = Resolver['default'];\n  });\n}\n\ncreateDeprecatedModule('ember/resolver');\ncreateDeprecatedModule('resolver');\n","define('ember-ajax/-private/promise', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  /**\n   * AJAX Promise\n   *\n   * Sub-class of RSVP Promise that passes the XHR property on to the\n   * child promise\n   *\n   * @extends RSVP.Promise\n   * @private\n   */\n  class AJAXPromise extends Ember.RSVP.Promise {\n    /**\n     * Overriding `.then` to add XHR to child promise\n     *\n     * @public\n     * @return {AJAXPromise} child promise\n     */\n    then() {\n      const child = super.then(...arguments);\n\n      child.xhr = this.xhr;\n\n      return child;\n    }\n  }\n  exports.default = AJAXPromise;\n});","define('ember-ajax/-private/utils/get-header', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getHeader;\n\n\n  /**\n   * Do a case-insensitive lookup of an HTTP header\n   *\n   * @function getHeader\n   * @private\n   * @param {Object} headers\n   * @param {string} name\n   * @return {string}\n   */\n  function getHeader(headers, name) {\n    if (Ember.isNone(headers) || Ember.isNone(name)) {\n      return; // ask for nothing, get nothing.\n    }\n\n    const matchedKey = Ember.A(Object.keys(headers)).find(key => {\n      return key.toLowerCase() === name.toLowerCase();\n    });\n\n    return headers[matchedKey];\n  }\n});","define('ember-ajax/-private/utils/is-fastboot', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  /* global FastBoot */\n  const isFastBoot = typeof FastBoot !== 'undefined';\n  exports.default = isFastBoot;\n});","define('ember-ajax/-private/utils/is-string', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = isString;\n  function isString(object) {\n    return typeof object === 'string';\n  }\n});","define('ember-ajax/-private/utils/parse-response-headers', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = parseResponseHeaders;\n  const CRLF = exports.CRLF = '\\u000d\\u000a';\n\n  function parseResponseHeaders(headersString) {\n    const headers = {};\n\n    if (!headersString) {\n      return headers;\n    }\n\n    return headersString.split(CRLF).reduce((hash, header) => {\n      let [field, ...value] = header.split(':');\n\n      field = field.trim();\n      value = value.join(':').trim();\n\n      if (value) {\n        hash[field] = value;\n      }\n\n      return hash;\n    }, headers);\n  }\n});","define('ember-ajax/-private/utils/url-helpers', ['exports', 'require', 'ember-ajax/-private/utils/is-fastboot'], function (exports, _require2, _isFastboot) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseURL = parseURL;\n  exports.isFullURL = isFullURL;\n  exports.haveSameHost = haveSameHost;\n  /* eslint-env browser, node */\n\n  const completeUrlRegex = /^(http|https)/;\n\n  /*\n   * Isomorphic URL parsing\n   * Borrowed from\n   * http://www.sitepoint.com/url-parsing-isomorphic-javascript/\n   */\n  const isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n  const url = function () {\n    if (_isFastboot.default) {\n      // ember-fastboot-server provides the node url module as URL global\n      return URL;\n    }\n\n    if (isNode) {\n      return (0, _require2.default)('url');\n    }\n\n    return document.createElement('a');\n  }();\n\n  /**\n   * Parse a URL string into an object that defines its structure\n   *\n   * The returned object will have the following properties:\n   *\n   *   href: the full URL\n   *   protocol: the request protocol\n   *   hostname: the target for the request\n   *   port: the port for the request\n   *   pathname: any URL after the host\n   *   search: query parameters\n   *   hash: the URL hash\n   *\n   * @function parseURL\n   * @private\n   * @param {string} str The string to parse\n   * @return {Object} URL structure\n   */\n  function parseURL(str) {\n    let fullObject;\n\n    if (isNode || _isFastboot.default) {\n      fullObject = url.parse(str);\n    } else {\n      url.href = str;\n      fullObject = url;\n    }\n\n    const desiredProps = {};\n    desiredProps.href = fullObject.href;\n    desiredProps.protocol = fullObject.protocol;\n    desiredProps.hostname = fullObject.hostname;\n    desiredProps.port = fullObject.port;\n    desiredProps.pathname = fullObject.pathname;\n    desiredProps.search = fullObject.search;\n    desiredProps.hash = fullObject.hash;\n    return desiredProps;\n  }\n\n  function isFullURL(url) {\n    return url.match(completeUrlRegex);\n  }\n\n  function haveSameHost(a, b) {\n    a = parseURL(a);\n    b = parseURL(b);\n\n    return a.protocol === b.protocol && a.hostname === b.hostname && a.port === b.port;\n  }\n});","define('ember-ajax/ajax-request', ['exports', 'ember-ajax/mixins/ajax-request'], function (exports, _ajaxRequest) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Object.extend(_ajaxRequest.default);\n});","define('ember-ajax/errors', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.AjaxError = AjaxError;\n  exports.InvalidError = InvalidError;\n  exports.UnauthorizedError = UnauthorizedError;\n  exports.ForbiddenError = ForbiddenError;\n  exports.BadRequestError = BadRequestError;\n  exports.NotFoundError = NotFoundError;\n  exports.TimeoutError = TimeoutError;\n  exports.AbortError = AbortError;\n  exports.ConflictError = ConflictError;\n  exports.ServerError = ServerError;\n  exports.isAjaxError = isAjaxError;\n  exports.isUnauthorizedError = isUnauthorizedError;\n  exports.isForbiddenError = isForbiddenError;\n  exports.isInvalidError = isInvalidError;\n  exports.isBadRequestError = isBadRequestError;\n  exports.isNotFoundError = isNotFoundError;\n  exports.isTimeoutError = isTimeoutError;\n  exports.isAbortError = isAbortError;\n  exports.isConflictError = isConflictError;\n  exports.isServerError = isServerError;\n  exports.isSuccess = isSuccess;\n\n\n  /**\n   * @class AjaxError\n   * @public\n   * @extends Ember.Error\n   */\n  function AjaxError(payload, message = 'Ajax operation failed', status) {\n    Ember.Error.call(this, message);\n\n    this.payload = payload;\n    this.status = status;\n  }\n\n  AjaxError.prototype = Object.create(Ember.Error.prototype);\n\n  /**\n   * @class InvalidError\n   * @public\n   * @extends AjaxError\n   */\n  function InvalidError(payload) {\n    AjaxError.call(this, payload, 'Request was rejected because it was invalid', 422);\n  }\n\n  InvalidError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class UnauthorizedError\n   * @public\n   * @extends AjaxError\n   */\n  function UnauthorizedError(payload) {\n    AjaxError.call(this, payload, 'Ajax authorization failed', 401);\n  }\n\n  UnauthorizedError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class ForbiddenError\n   * @public\n   * @extends AjaxError\n   */\n  function ForbiddenError(payload) {\n    AjaxError.call(this, payload, 'Request was rejected because user is not permitted to perform this operation.', 403);\n  }\n\n  ForbiddenError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class BadRequestError\n   * @public\n   * @extends AjaxError\n   */\n  function BadRequestError(payload) {\n    AjaxError.call(this, payload, 'Request was formatted incorrectly.', 400);\n  }\n\n  BadRequestError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class NotFoundError\n   * @public\n   * @extends AjaxError\n   */\n  function NotFoundError(payload) {\n    AjaxError.call(this, payload, 'Resource was not found.', 404);\n  }\n\n  NotFoundError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class TimeoutError\n   * @public\n   * @extends AjaxError\n   */\n  function TimeoutError() {\n    AjaxError.call(this, null, 'The ajax operation timed out', -1);\n  }\n\n  TimeoutError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class AbortError\n   * @public\n   * @extends AjaxError\n   */\n  function AbortError() {\n    AjaxError.call(this, null, 'The ajax operation was aborted', 0);\n  }\n\n  AbortError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class ConflictError\n   * @public\n   * @extends AjaxError\n   */\n  function ConflictError(payload) {\n    AjaxError.call(this, payload, 'The ajax operation failed due to a conflict', 409);\n  }\n\n  ConflictError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * @class ServerError\n   * @public\n   * @extends AjaxError\n   */\n  function ServerError(payload, status) {\n    AjaxError.call(this, payload, 'Request was rejected due to server error', status);\n  }\n\n  ServerError.prototype = Object.create(AjaxError.prototype);\n\n  /**\n   * Checks if the given error is or inherits from AjaxError\n   *\n   * @method isAjaxError\n   * @public\n   * @param  {Error} error\n   * @return {Boolean}\n   */\n  function isAjaxError(error) {\n    return error instanceof AjaxError;\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents an\n   * unauthorized request error\n   *\n   * @method isUnauthorizedError\n   * @public\n   * @param  {Number | AjaxError} error\n   * @return {Boolean}\n   */\n  function isUnauthorizedError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof UnauthorizedError;\n    } else {\n      return error === 401;\n    }\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents a forbidden\n   * request error\n   *\n   * @method isForbiddenError\n   * @public\n   * @param  {Number | AjaxError} error\n   * @return {Boolean}\n   */\n  function isForbiddenError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof ForbiddenError;\n    } else {\n      return error === 403;\n    }\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents an invalid\n   * request error\n   *\n   * @method isInvalidError\n   * @public\n   * @param  {Number | AjaxError} error\n   * @return {Boolean}\n   */\n  function isInvalidError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof InvalidError;\n    } else {\n      return error === 422;\n    }\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents a bad request\n   * error\n   *\n   * @method isBadRequestError\n   * @public\n   * @param  {Number | AjaxError} error\n   * @return {Boolean}\n   */\n  function isBadRequestError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof BadRequestError;\n    } else {\n      return error === 400;\n    }\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents a\n   * \"not found\" error\n   *\n   * @method isNotFoundError\n   * @public\n   * @param  {Number | AjaxError} error\n   * @return {Boolean}\n   */\n  function isNotFoundError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof NotFoundError;\n    } else {\n      return error === 404;\n    }\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents a\n   * \"timeout\" error\n   *\n   * @method isTimeoutError\n   * @public\n   * @param  {AjaxError} error\n   * @return {Boolean}\n   */\n  function isTimeoutError(error) {\n    return error instanceof TimeoutError;\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents an\n   * \"abort\" error\n   *\n   * @method isAbortError\n   * @public\n   * @param  {AjaxError} error\n   * @return {Boolean}\n   */\n  function isAbortError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof AbortError;\n    } else {\n      return error === 0;\n    }\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents a\n   * conflict error\n   *\n   * @method isConflictError\n   * @public\n   * @param  {Number | AjaxError} error\n   * @return {Boolean}\n   */\n  function isConflictError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof ConflictError;\n    } else {\n      return error === 409;\n    }\n  }\n\n  /**\n   * Checks if the given status code or AjaxError object represents a server error\n   *\n   * @method isServerError\n   * @public\n   * @param  {Number | AjaxError} error\n   * @return {Boolean}\n   */\n  function isServerError(error) {\n    if (isAjaxError(error)) {\n      return error instanceof ServerError;\n    } else {\n      return error >= 500 && error < 600;\n    }\n  }\n\n  /**\n   * Checks if the given status code represents a successful request\n   *\n   * @method isSuccess\n   * @public\n   * @param  {Number} status\n   * @return {Boolean}\n   */\n  function isSuccess(status) {\n    const s = parseInt(status, 10);\n\n    return s >= 200 && s < 300 || s === 304;\n  }\n});","define('ember-ajax/index', ['exports', 'ember-ajax/request'], function (exports, _request) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _request.default;\n    }\n  });\n});","define('ember-ajax/mixins/ajax-request', ['exports', 'ember-ajax/errors', 'ember-ajax/utils/ajax', 'ember-ajax/-private/utils/parse-response-headers', 'ember-ajax/-private/utils/get-header', 'ember-ajax/-private/utils/url-helpers', 'ember-ajax/-private/utils/is-string', 'ember-ajax/-private/promise'], function (exports, _errors, _ajax, _parseResponseHeaders, _getHeader, _urlHelpers, _isString, _promise) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  const { Logger, Test, testing } = Ember;\n  const JSONContentType = /^application\\/(?:vnd\\.api\\+)?json/i;\n\n  function isJSONContentType(header) {\n    if (!(0, _isString.default)(header)) {\n      return false;\n    }\n    return !!header.match(JSONContentType);\n  }\n\n  function isJSONStringifyable(method, { contentType, data, headers }) {\n    if (method === 'GET') {\n      return false;\n    }\n\n    if (!isJSONContentType(contentType) && !isJSONContentType((0, _getHeader.default)(headers, 'Content-Type'))) {\n      return false;\n    }\n\n    if (typeof data !== 'object') {\n      return false;\n    }\n\n    return true;\n  }\n\n  function startsWithSlash(string) {\n    return string.charAt(0) === '/';\n  }\n\n  function endsWithSlash(string) {\n    return string.charAt(string.length - 1) === '/';\n  }\n\n  function removeLeadingSlash(string) {\n    return string.substring(1);\n  }\n\n  function stripSlashes(path) {\n    // make sure path starts with `/`\n    if (startsWithSlash(path)) {\n      path = removeLeadingSlash(path);\n    }\n\n    // remove end `/`\n    if (endsWithSlash(path)) {\n      path = path.slice(0, -1);\n    }\n    return path;\n  }\n\n  let pendingRequestCount = 0;\n  if (testing) {\n    Test.registerWaiter(function () {\n      return pendingRequestCount === 0;\n    });\n  }\n\n  /**\n   * AjaxRequest Mixin\n   *\n   * @public\n   * @mixin\n   */\n  exports.default = Ember.Mixin.create({\n    /**\n     * The default value for the request `contentType`\n     *\n     * For now, defaults to the same value that jQuery would assign.  In the\n     * future, the default value will be for JSON requests.\n     * @property {string} contentType\n     * @public\n     * @default\n     */\n    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n\n    /**\n     * Headers to include on the request\n     *\n     * Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary\n     * headers can be set as key/value pairs on the `RESTAdapter`'s `headers`\n     * object and Ember Data will send them along with each ajax request.\n     *\n     * ```javascript\n     * // app/services/ajax.js\n     * import AjaxService from 'ember-ajax/services/ajax';\n     *\n     * export default AjaxService.extend({\n     *   headers: {\n     *     'API_KEY': 'secret key',\n     *     'ANOTHER_HEADER': 'Some header value'\n     *   }\n     * });\n     * ```\n     *\n     * `headers` can also be used as a computed property to support dynamic\n     * headers.\n     *\n     * ```javascript\n     * // app/services/ajax.js\n     * import Ember from 'ember';\n     * import AjaxService from 'ember-ajax/services/ajax';\n     *\n     * const {\n     *   computed,\n     *   get,\n     *   inject: { service }\n     * } = Ember;\n     *\n     * export default AjaxService.extend({\n     *   session: service(),\n     *   headers: computed('session.authToken', function() {\n     *     return {\n     *       'API_KEY': get(this, 'session.authToken'),\n     *       'ANOTHER_HEADER': 'Some header value'\n     *     };\n     *   })\n     * });\n     * ```\n     *\n     * In some cases, your dynamic headers may require data from some object\n     * outside of Ember's observer system (for example `document.cookie`). You\n     * can use the `volatile` function to set the property into a non-cached mode\n     * causing the headers to be recomputed with every request.\n     *\n     * ```javascript\n     * // app/services/ajax.js\n     * import Ember from 'ember';\n     * import AjaxService from 'ember-ajax/services/ajax';\n     *\n     * const {\n     *   computed,\n     *   get,\n     *   inject: { service }\n     * } = Ember;\n     *\n     * export default AjaxService.extend({\n     *   session: service(),\n     *   headers: computed('session.authToken', function() {\n     *     return {\n     *       'API_KEY': get(document.cookie.match(/apiKey\\=([^;]*)/), '1'),\n     *       'ANOTHER_HEADER': 'Some header value'\n     *     };\n     *   }).volatile()\n     * });\n     * ```\n     *\n     * @property {Object} headers\n     * @public\n     * @default\n     */\n    headers: {},\n\n    /**\n     * Make an AJAX request, ignoring the raw XHR object and dealing only with\n     * the response\n     *\n     * @method request\n     * @public\n     * @param {string} url The url to make a request to\n     * @param {Object} options The options for the request\n     * @return {Promise} The result of the request\n     */\n    request(url, options) {\n      const hash = this.options(url, options);\n      const internalPromise = this._makeRequest(hash);\n\n      const ajaxPromise = new _promise.default((resolve, reject) => {\n        internalPromise.then(({ response }) => {\n          resolve(response);\n        }).catch(({ response }) => {\n          reject(response);\n        });\n      }, `ember-ajax: ${hash.type} ${hash.url} response`);\n\n      ajaxPromise.xhr = internalPromise.xhr;\n\n      return ajaxPromise;\n    },\n\n    /**\n     * Make an AJAX request, returning the raw XHR object along with the response\n     *\n     * @method raw\n     * @public\n     * @param {string} url The url to make a request to\n     * @param {Object} options The options for the request\n     * @return {Promise} The result of the request\n     */\n    raw(url, options) {\n      const hash = this.options(url, options);\n      return this._makeRequest(hash);\n    },\n\n    /**\n     * Shared method to actually make an AJAX request\n     *\n     * @method _makeRequest\n     * @private\n     * @param {Object} hash The options for the request\n     * @param {string} hash.url The URL to make the request to\n     * @return {Promise} The result of the request\n     */\n    _makeRequest(hash) {\n      const method = hash.method || hash.type || 'GET';\n      const requestData = { method, type: method, url: hash.url };\n\n      if (isJSONStringifyable(method, hash)) {\n        hash.data = JSON.stringify(hash.data);\n      }\n\n      pendingRequestCount = pendingRequestCount + 1;\n\n      const jqXHR = (0, _ajax.default)(hash);\n\n      const promise = new _promise.default((resolve, reject) => {\n        jqXHR.done((payload, textStatus, jqXHR) => {\n          const response = this.handleResponse(jqXHR.status, (0, _parseResponseHeaders.default)(jqXHR.getAllResponseHeaders()), payload, requestData);\n\n          if ((0, _errors.isAjaxError)(response)) {\n            Ember.run.join(null, reject, { payload, textStatus, jqXHR, response });\n          } else {\n            Ember.run.join(null, resolve, { payload, textStatus, jqXHR, response });\n          }\n        }).fail((jqXHR, textStatus, errorThrown) => {\n          Ember.runInDebug(function () {\n            const message = `The server returned an empty string for ${requestData.type} ${requestData.url}, which cannot be parsed into a valid JSON. Return either null or {}.`;\n            const validJSONString = !(textStatus === 'parsererror' && jqXHR.responseText === '');\n\n            (true && Ember.warn(message, validJSONString, {\n              id: 'ds.adapter.returned-empty-string-as-JSON'\n            }));\n          });\n\n          const payload = this.parseErrorResponse(jqXHR.responseText) || errorThrown;\n          let response;\n\n          if (errorThrown instanceof Error) {\n            response = errorThrown;\n          } else if (textStatus === 'timeout') {\n            response = new _errors.TimeoutError();\n          } else if (textStatus === 'abort') {\n            response = new _errors.AbortError();\n          } else {\n            response = this.handleResponse(jqXHR.status, (0, _parseResponseHeaders.default)(jqXHR.getAllResponseHeaders()), payload, requestData);\n          }\n\n          Ember.run.join(null, reject, { payload, textStatus, jqXHR, errorThrown, response });\n        }).always(() => {\n          pendingRequestCount = pendingRequestCount - 1;\n        });\n      }, `ember-ajax: ${hash.type} ${hash.url}`);\n\n      promise.xhr = jqXHR;\n\n      return promise;\n    },\n\n    /**\n     * calls `request()` but forces `options.type` to `POST`\n     *\n     * @method post\n     * @public\n     * @param {string} url The url to make a request to\n     * @param {Object} options The options for the request\n     * @return {Promise} The result of the request\n     */\n    post(url, options) {\n      return this.request(url, this._addTypeToOptionsFor(options, 'POST'));\n    },\n\n    /**\n     * calls `request()` but forces `options.type` to `PUT`\n     *\n     * @method put\n     * @public\n     * @param {string} url The url to make a request to\n     * @param {Object} options The options for the request\n     * @return {Promise} The result of the request\n     */\n    put(url, options) {\n      return this.request(url, this._addTypeToOptionsFor(options, 'PUT'));\n    },\n\n    /**\n     * calls `request()` but forces `options.type` to `PATCH`\n     *\n     * @method patch\n     * @public\n     * @param {string} url The url to make a request to\n     * @param {Object} options The options for the request\n     * @return {Promise} The result of the request\n     */\n    patch(url, options) {\n      return this.request(url, this._addTypeToOptionsFor(options, 'PATCH'));\n    },\n\n    /**\n     * calls `request()` but forces `options.type` to `DELETE`\n     *\n     * @method del\n     * @public\n     * @param {string} url The url to make a request to\n     * @param {Object} options The options for the request\n     * @return {Promise} The result of the request\n     */\n    del(url, options) {\n      return this.request(url, this._addTypeToOptionsFor(options, 'DELETE'));\n    },\n\n    /**\n     * calls `request()` but forces `options.type` to `DELETE`\n     *\n     * Alias for `del()`\n     *\n     * @method delete\n     * @public\n     * @param {string} url The url to make a request to\n     * @param {Object} options The options for the request\n     * @return {Promise} The result of the request\n     */\n    delete() {\n      return this.del(...arguments);\n    },\n\n    /**\n     * Wrap the `.get` method so that we issue a warning if\n     *\n     * Since `.get` is both an AJAX pattern _and_ an Ember pattern, we want to try\n     * to warn users when they try using `.get` to make a request\n     *\n     * @method get\n     * @public\n     */\n    get(url) {\n      if (arguments.length > 1 || url.indexOf('/') !== -1) {\n        throw new Ember.Error('It seems you tried to use `.get` to make a request! Use the `.request` method instead.');\n      }\n      return this._super(...arguments);\n    },\n\n    /**\n     * Manipulates the options hash to include the HTTP method on the type key\n     *\n     * @method _addTypeToOptionsFor\n     * @private\n     * @param {Object} options The original request options\n     * @param {string} method The method to enforce\n     * @return {Object} The new options, with the method set\n     */\n    _addTypeToOptionsFor(options, method) {\n      options = options || {};\n      options.type = method;\n      return options;\n    },\n\n    /**\n     * Get the full \"headers\" hash, combining the service-defined headers with\n     * the ones provided for the request\n     *\n     * @method _getFullHeadersHash\n     * @private\n     * @param {Object} headers\n     * @return {Object}\n     */\n    _getFullHeadersHash(headers) {\n      const classHeaders = Ember.get(this, 'headers');\n      const _headers = Ember.merge({}, classHeaders);\n      return Ember.merge(_headers, headers);\n    },\n\n    /**\n     * @method options\n     * @private\n     * @param {string} url\n     * @param {Object} options\n     * @return {Object}\n     */\n    options(url, options = {}) {\n      options = Ember.merge({}, options);\n      options.url = this._buildURL(url, options);\n      options.type = options.type || 'GET';\n      options.dataType = options.dataType || 'json';\n      options.contentType = Ember.isEmpty(options.contentType) ? Ember.get(this, 'contentType') : options.contentType;\n\n      if (this._shouldSendHeaders(options)) {\n        options.headers = this._getFullHeadersHash(options.headers);\n      } else {\n        options.headers = options.headers || {};\n      }\n\n      return options;\n    },\n\n    /**\n     * Build a URL for a request\n     *\n     * If the provided `url` is deemed to be a complete URL, it will be returned\n     * directly.  If it is not complete, then the segment provided will be combined\n     * with the `host` and `namespace` options of the request class to create the\n     * full URL.\n     *\n     * @private\n     * @param {string} url the url, or url segment, to request\n     * @param {Object} [options={}] the options for the request being made\n     * @param {string} [options.host] the host to use for this request\n     * @returns {string} the URL to make a request to\n     */\n    _buildURL(url, options = {}) {\n      if ((0, _urlHelpers.isFullURL)(url)) {\n        return url;\n      }\n\n      const urlParts = [];\n\n      let host = options.host || Ember.get(this, 'host');\n      if (host) {\n        host = stripSlashes(host);\n      }\n      urlParts.push(host);\n\n      let namespace = options.namespace || Ember.get(this, 'namespace');\n      if (namespace) {\n        namespace = stripSlashes(namespace);\n        urlParts.push(namespace);\n      }\n\n      // If the URL has already been constructed (presumably, by Ember Data), then we should just leave it alone\n      const hasNamespaceRegex = new RegExp(`^(/)?${namespace}`);\n      if (hasNamespaceRegex.test(url)) {\n        return url;\n      }\n\n      // *Only* remove a leading slash -- we need to maintain a trailing slash for\n      // APIs that differentiate between it being and not being present\n      if (startsWithSlash(url)) {\n        url = removeLeadingSlash(url);\n      }\n      urlParts.push(url);\n\n      return urlParts.join('/');\n    },\n\n    /**\n     * Takes an ajax response, and returns the json payload or an error.\n     *\n     * By default this hook just returns the json payload passed to it.\n     * You might want to override it in two cases:\n     *\n     * 1. Your API might return useful results in the response headers.\n     *    Response headers are passed in as the second argument.\n     *\n     * 2. Your API might return errors as successful responses with status code\n     *    200 and an Errors text or object.\n     *\n     * @method handleResponse\n     * @private\n     * @param  {Number} status\n     * @param  {Object} headers\n     * @param  {Object} payload\n     * @param  {Object} requestData the original request information\n     * @return {Object | AjaxError} response\n     */\n    handleResponse(status, headers, payload, requestData) {\n      if (this.isSuccess(status, headers, payload)) {\n        return payload;\n      }\n\n      // Allow overriding of error payload\n      payload = this.normalizeErrorResponse(status, headers, payload);\n\n      return this._createCorrectError(status, headers, payload, requestData);\n    },\n\n    _createCorrectError(status, headers, payload, requestData) {\n      let error;\n\n      if (this.isUnauthorizedError(status, headers, payload)) {\n        error = new _errors.UnauthorizedError(payload);\n      } else if (this.isForbiddenError(status, headers, payload)) {\n        error = new _errors.ForbiddenError(payload);\n      } else if (this.isInvalidError(status, headers, payload)) {\n        error = new _errors.InvalidError(payload);\n      } else if (this.isBadRequestError(status, headers, payload)) {\n        error = new _errors.BadRequestError(payload);\n      } else if (this.isNotFoundError(status, headers, payload)) {\n        error = new _errors.NotFoundError(payload);\n      } else if (this.isAbortError(status, headers, payload)) {\n        error = new _errors.AbortError(payload);\n      } else if (this.isConflictError(status, headers, payload)) {\n        error = new _errors.ConflictError(payload);\n      } else if (this.isServerError(status, headers, payload)) {\n        error = new _errors.ServerError(payload, status);\n      } else {\n        const detailedMessage = this.generateDetailedMessage(status, headers, payload, requestData);\n\n        error = new _errors.AjaxError(payload, detailedMessage, status);\n      }\n\n      return error;\n    },\n\n    /**\n     * Match the host to a provided array of strings or regexes that can match to a host\n     *\n     * @method matchHosts\n     * @private\n     * @param {string} host the host you are sending too\n     * @param {RegExp | string} matcher a string or regex that you can match the host to.\n     * @returns {Boolean} if the host passed the matcher\n     */\n    _matchHosts(host, matcher) {\n      if (matcher.constructor === RegExp) {\n        return matcher.test(host);\n      } else if (typeof matcher === 'string') {\n        return matcher === host;\n      } else {\n        Logger.warn('trustedHosts only handles strings or regexes.', matcher, 'is neither.');\n        return false;\n      }\n    },\n\n    /**\n     * Determine whether the headers should be added for this request\n     *\n     * This hook is used to help prevent sending headers to every host, regardless\n     * of the destination, since this could be a security issue if authentication\n     * tokens are accidentally leaked to third parties.\n     *\n     * To avoid that problem, subclasses should utilize the `headers` computed\n     * property to prevent authentication from being sent to third parties, or\n     * implement this hook for more fine-grain control over when headers are sent.\n     *\n     * By default, the headers are sent if the host of the request matches the\n     * `host` property designated on the class.\n     *\n     * @method _shouldSendHeaders\n     * @private\n     * @property {Object} hash request options hash\n     * @returns {Boolean} whether or not headers should be sent\n     */\n    _shouldSendHeaders({ url, host }) {\n      url = url || '';\n      host = host || Ember.get(this, 'host') || '';\n\n      const trustedHosts = Ember.get(this, 'trustedHosts') || Ember.A();\n      const { hostname } = (0, _urlHelpers.parseURL)(url);\n\n      // Add headers on relative URLs\n      if (!(0, _urlHelpers.isFullURL)(url)) {\n        return true;\n      } else if (trustedHosts.find(matcher => this._matchHosts(hostname, matcher))) {\n        return true;\n      }\n\n      // Add headers on matching host\n      return (0, _urlHelpers.haveSameHost)(url, host);\n    },\n\n    /**\n     * Generates a detailed (\"friendly\") error message, with plenty\n     * of information for debugging (good luck!)\n     *\n     * @method generateDetailedMessage\n     * @private\n     * @param  {Number} status\n     * @param  {Object} headers\n     * @param  {Object} payload\n     * @param  {Object} requestData the original request information\n     * @return {Object} request information\n     */\n    generateDetailedMessage(status, headers, payload, requestData) {\n      let shortenedPayload;\n      const payloadContentType = (0, _getHeader.default)(headers, 'Content-Type') || 'Empty Content-Type';\n\n      if (payloadContentType.toLowerCase() === 'text/html' && payload.length > 250) {\n        shortenedPayload = '[Omitted Lengthy HTML]';\n      } else {\n        shortenedPayload = JSON.stringify(payload);\n      }\n\n      const requestDescription = `${requestData.type} ${requestData.url}`;\n      const payloadDescription = `Payload (${payloadContentType})`;\n\n      return [`Ember AJAX Request ${requestDescription} returned a ${status}`, payloadDescription, shortenedPayload].join('\\n');\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a an authorized error.\n     *\n     * @method isUnauthorizedError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isUnauthorizedError(status) {\n      return (0, _errors.isUnauthorizedError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a forbidden error.\n     *\n     * @method isForbiddenError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isForbiddenError(status) {\n      return (0, _errors.isForbiddenError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a an invalid error.\n     *\n     * @method isInvalidError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isInvalidError(status) {\n      return (0, _errors.isInvalidError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a bad request error.\n     *\n     * @method isBadRequestError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isBadRequestError(status) {\n      return (0, _errors.isBadRequestError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a \"not found\" error.\n     *\n     * @method isNotFoundError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isNotFoundError(status) {\n      return (0, _errors.isNotFoundError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is an \"abort\" error.\n     *\n     * @method isAbortError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isAbortError(status) {\n      return (0, _errors.isAbortError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a \"conflict\" error.\n     *\n     * @method isConflictError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isConflictError(status) {\n      return (0, _errors.isConflictError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a server error.\n     *\n     * @method isServerError\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isServerError(status) {\n      return (0, _errors.isServerError)(status);\n    },\n\n    /**\n     * Default `handleResponse` implementation uses this hook to decide if the\n     * response is a success.\n     *\n     * @method isSuccess\n     * @private\n     * @param {Number} status\n     * @param {Object} headers\n     * @param {Object} payload\n     * @return {Boolean}\n     */\n    isSuccess(status) {\n      return (0, _errors.isSuccess)(status);\n    },\n\n    /**\n     * @method parseErrorResponse\n     * @private\n     * @param {string} responseText\n     * @return {Object}\n     */\n    parseErrorResponse(responseText) {\n      try {\n        return JSON.parse(responseText);\n      } catch (e) {\n        return responseText;\n      }\n    },\n\n    /**\n     * Can be overwritten to allow re-formatting of error messages\n     *\n     * @method normalizeErrorResponse\n     * @private\n     * @param  {Number} status\n     * @param  {Object} headers\n     * @param  {Object} payload\n     * @return {*} error response\n     */\n    normalizeErrorResponse(status, headers, payload) {\n      return payload;\n    }\n  });\n});","define('ember-ajax/mixins/ajax-support', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Mixin.create({\n    /**\n     * The AJAX service to send requests through\n     *\n     * @property {AjaxService} ajaxService\n     * @public\n     */\n    ajaxService: Ember.inject.service('ajax'),\n\n    /**\n     * @property {string} host\n     * @public\n     */\n    host: Ember.computed.alias('ajaxService.host'),\n\n    /**\n     * @property {string} namespace\n     * @public\n     */\n    namespace: Ember.computed.alias('ajaxService.namespace'),\n\n    /**\n     * @property {object} headers\n     * @public\n     */\n    headers: Ember.computed.alias('ajaxService.headers'),\n\n    ajax(url) {\n      const augmentedOptions = this.ajaxOptions(...arguments);\n\n      return this.get('ajaxService').request(url, augmentedOptions);\n    }\n  });\n});","define('ember-ajax/mixins/legacy/normalize-error-response', ['exports', 'ember-ajax/-private/utils/is-string'], function (exports, _isString) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  function isObject(object) {\n    return typeof object === 'object';\n  }\n\n  exports.default = Ember.Mixin.create({\n    /**\n     * Normalize the error from the server into the same format\n     *\n     * The format we normalize to is based on the JSON API specification.  The\n     * return value should be an array of objects that match the format they\n     * describe. More details about the object format can be found\n     * [here](http://jsonapi.org/format/#error-objects)\n     *\n     * The basics of the format are as follows:\n     *\n     * ```javascript\n     * [\n     *   {\n     *     status: 'The status code for the error',\n     *     title: 'The human-readable title of the error'\n     *     detail: 'The human-readable details of the error'\n     *   }\n     * ]\n     * ```\n     *\n     * In cases where the server returns an array, then there should be one item\n     * in the array for each of the payload.  If your server returns a JSON API\n     * formatted payload already, it will just be returned directly.\n     *\n     * If your server returns something other than a JSON API format, it's\n     * suggested that you override this method to convert your own errors into the\n     * one described above.\n     *\n     * @method normalizeErrorResponse\n     * @private\n     * @param  {Number} status\n     * @param  {Object} headers\n     * @param  {Object} payload\n     * @return {Array} An array of JSON API-formatted error objects\n     */\n    normalizeErrorResponse(status, headers, payload) {\n      payload = Ember.isNone(payload) ? {} : payload;\n\n      if (Ember.isArray(payload.errors)) {\n        return payload.errors.map(function (error) {\n          if (isObject(error)) {\n            const ret = Ember.merge({}, error);\n            ret.status = `${error.status}`;\n            return ret;\n          } else {\n            return {\n              status: `${status}`,\n              title: error\n            };\n          }\n        });\n      } else if (Ember.isArray(payload)) {\n        return payload.map(function (error) {\n          if (isObject(error)) {\n            return {\n              status: `${status}`,\n              title: error.title || 'The backend responded with an error',\n              detail: error\n            };\n          } else {\n            return {\n              status: `${status}`,\n              title: `${error}`\n            };\n          }\n        });\n      } else if ((0, _isString.default)(payload)) {\n        return [{\n          status: `${status}`,\n          title: payload\n        }];\n      } else {\n        return [{\n          status: `${status}`,\n          title: payload.title || 'The backend responded with an error',\n          detail: payload\n        }];\n      }\n    }\n  });\n});","define('ember-ajax/raw', ['exports', 'ember-ajax/ajax-request'], function (exports, _ajaxRequest) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = raw;\n\n\n  /**\n   * Same as `request` except it resolves an object with\n   *\n   *   {response, textStatus, jqXHR}\n   *\n   * Useful if you need access to the jqXHR object for headers, etc.\n   *\n   * @public\n   */\n  function raw() {\n    const ajax = new _ajaxRequest.default();\n    return ajax.raw(...arguments);\n  }\n});","define('ember-ajax/request', ['exports', 'ember-ajax/ajax-request'], function (exports, _ajaxRequest) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = request;\n\n\n  /**\n   * Helper function that allows you to use the default `ember-ajax` to make\n   * requests without using the service.\n   *\n   * Note: Unlike `ic-ajax`'s `request` helper function, this will *not* return a\n   * jqXHR object in the error handler.  If you need jqXHR, you can use the `raw`\n   * function instead.\n   *\n   * @public\n   */\n  function request() {\n    const ajax = new _ajaxRequest.default();\n    return ajax.request(...arguments);\n  }\n});","define('ember-ajax/services/ajax', ['exports', 'ember-ajax/mixins/ajax-request'], function (exports, _ajaxRequest) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Service.extend(_ajaxRequest.default);\n});","define('ember-ajax/utils/ajax', ['exports', 'ember-ajax/-private/utils/is-fastboot'], function (exports, _isFastboot) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _isFastboot.default ? najax : Ember.$.ajax;\n});","define('ember-cli-app-version/initializer-factory', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = initializerFactory;\n\n\n  const {\n    String: { classify },\n    libraries\n  } = Ember;\n\n  function initializerFactory(name, version) {\n    let registered = false;\n\n    return function () {\n      if (!registered && name && version) {\n        var appName = classify(name);\n        libraries.register(appName, version);\n        registered = true;\n      }\n    };\n  }\n});","define(\"ember-cli-app-version/utils/regexp\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const versionRegExp = exports.versionRegExp = /\\d[.]\\d[.]\\d/;\n  const shaRegExp = exports.shaRegExp = /[a-z\\d]{8}/;\n});","define('ember-inflector/index', ['exports', 'ember-inflector/lib/system', 'ember-inflector/lib/ext/string'], function (exports, _system) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultRules = exports.singularize = exports.pluralize = undefined;\n\n\n  _system.Inflector.defaultRules = _system.defaultRules;\n\n  Object.defineProperty(Ember, 'Inflector', {\n    get() {\n      Ember.deprecate(`Ember.Inflector is deprecated. Please explicitly: import Inflector from 'ember-inflector';`, false, {\n        id: 'ember-inflector.globals',\n        until: '3.0.0'\n      });\n\n      return _system.Inflector;\n    }\n  });\n\n  Object.defineProperty(Ember.String, 'singularize', {\n    get() {\n      Ember.deprecate(`Ember.String.singularize() is deprecated. Please explicitly: import { singularize } from 'ember-inflector';`, false, {\n        id: 'ember-inflector.globals',\n        until: '3.0.0'\n      });\n\n      return _system.singularize;\n    }\n  });\n\n  Object.defineProperty(Ember.String, 'pluralize', {\n    get() {\n      Ember.deprecate(`Ember.String.pluralize() is deprecated. Please explicitly: import { pluralize } from 'ember-inflector';`, false, {\n        id: 'ember-inflector.globals',\n        until: '3.0.0'\n      });\n\n      return _system.pluralize;\n    }\n  });\n\n  exports.default = _system.Inflector;\n  exports.pluralize = _system.pluralize;\n  exports.singularize = _system.singularize;\n  exports.defaultRules = _system.defaultRules;\n});","define('ember-inflector/lib/ext/string', ['ember-inflector/lib/system/string'], function (_string) {\n  'use strict';\n\n  if (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.String) {\n    /**\n      See {{#crossLink \"Ember.String/pluralize\"}}{{/crossLink}}\n       @method pluralize\n      @for String\n    */\n    Object.defineProperty(String.prototype, 'pluralize', {\n      get() {\n        Ember.deprecate(`String.prototype.pluralize() is deprecated. Please explicitly: import { pluralize } from 'ember-inflector';`, false, {\n          id: 'ember-inflector.globals',\n          until: '3.0.0'\n        });\n\n        return function () {\n          return (0, _string.pluralize)(this);\n        };\n      }\n    });\n\n    /**\n      See {{#crossLink \"Ember.String/singularize\"}}{{/crossLink}}\n       @method singularize\n      @for String\n    */\n    Object.defineProperty(String.prototype, 'singularize', {\n      get() {\n        Ember.deprecate(`String.prototype.singularize() is deprecated. Please explicitly: import { singularize } from 'ember-inflector';`, false, {\n          id: 'ember-inflector.globals',\n          until: '3.0.0'\n        });\n\n        return function () {\n          return (0, _string.singularize)(this);\n        };\n      }\n    });\n  }\n});","define('ember-inflector/lib/helpers/pluralize', ['exports', 'ember-inflector', 'ember-inflector/lib/utils/make-helper'], function (exports, _emberInflector, _makeHelper) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = (0, _makeHelper.default)(function (params, hash) {\n    let count,\n        word,\n        withoutCount = false;\n\n    if (params.length === 1) {\n      word = params[0];\n      return (0, _emberInflector.pluralize)(word);\n    } else {\n      count = params[0];\n      word = params[1];\n\n      if (hash[\"without-count\"]) {\n        withoutCount = hash[\"without-count\"];\n      }\n\n      if (parseFloat(count) !== 1) {\n        word = (0, _emberInflector.pluralize)(word);\n      }\n\n      return withoutCount ? word : count + \" \" + word;\n    }\n  });\n});","define('ember-inflector/lib/helpers/singularize', ['exports', 'ember-inflector', 'ember-inflector/lib/utils/make-helper'], function (exports, _emberInflector, _makeHelper) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = (0, _makeHelper.default)(function (params) {\n    return (0, _emberInflector.singularize)(params[0]);\n  });\n});","define(\"ember-inflector/lib/system\", [\"exports\", \"ember-inflector/lib/system/inflector\", \"ember-inflector/lib/system/string\", \"ember-inflector/lib/system/inflections\"], function (exports, _inflector, _string, _inflections) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultRules = exports.pluralize = exports.singularize = exports.Inflector = undefined;\n\n\n  _inflector.default.inflector = new _inflector.default(_inflections.default);\n\n  exports.Inflector = _inflector.default;\n  exports.singularize = _string.singularize;\n  exports.pluralize = _string.pluralize;\n  exports.defaultRules = _inflections.default;\n});","define('ember-inflector/lib/system/inflections', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    plurals: [[/$/, 's'], [/s$/i, 's'], [/^(ax|test)is$/i, '$1es'], [/(octop|vir)us$/i, '$1i'], [/(octop|vir)i$/i, '$1i'], [/(alias|status|bonus)$/i, '$1es'], [/(bu)s$/i, '$1ses'], [/(buffal|tomat)o$/i, '$1oes'], [/([ti])um$/i, '$1a'], [/([ti])a$/i, '$1a'], [/sis$/i, 'ses'], [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'], [/(hive)$/i, '$1s'], [/([^aeiouy]|qu)y$/i, '$1ies'], [/(x|ch|ss|sh)$/i, '$1es'], [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'], [/^(m|l)ouse$/i, '$1ice'], [/^(m|l)ice$/i, '$1ice'], [/^(ox)$/i, '$1en'], [/^(oxen)$/i, '$1'], [/(quiz)$/i, '$1zes']],\n\n    singular: [[/s$/i, ''], [/(ss)$/i, '$1'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'], [/(^analy)(sis|ses)$/i, '$1sis'], [/([^f])ves$/i, '$1fe'], [/(hive)s$/i, '$1'], [/(tive)s$/i, '$1'], [/([lr])ves$/i, '$1f'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/(x|ch|ss|sh)es$/i, '$1'], [/^(m|l)ice$/i, '$1ouse'], [/(bus)(es)?$/i, '$1'], [/(o)es$/i, '$1'], [/(shoe)s$/i, '$1'], [/(cris|test)(is|es)$/i, '$1is'], [/^(a)x[ie]s$/i, '$1xis'], [/(octop|vir)(us|i)$/i, '$1us'], [/(alias|status|bonus)(es)?$/i, '$1'], [/^(ox)en/i, '$1'], [/(vert|ind)ices$/i, '$1ex'], [/(matr)ices$/i, '$1ix'], [/(quiz)zes$/i, '$1'], [/(database)s$/i, '$1']],\n\n    irregularPairs: [['person', 'people'], ['man', 'men'], ['child', 'children'], ['sex', 'sexes'], ['move', 'moves'], ['cow', 'kine'], ['zombie', 'zombies']],\n\n    uncountable: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'jeans', 'police']\n  };\n});","define('ember-inflector/lib/system/inflector', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var capitalize = Ember.String.capitalize;\n\n  var BLANK_REGEX = /^\\s*$/;\n  var LAST_WORD_DASHED_REGEX = /([\\w/-]+[_/\\s-])([a-z\\d]+$)/;\n  var LAST_WORD_CAMELIZED_REGEX = /([\\w/\\s-]+)([A-Z][a-z\\d]*$)/;\n  var CAMELIZED_REGEX = /[A-Z][a-z\\d]*$/;\n\n  function loadUncountable(rules, uncountable) {\n    for (var i = 0, length = uncountable.length; i < length; i++) {\n      rules.uncountable[uncountable[i].toLowerCase()] = true;\n    }\n  }\n\n  function loadIrregular(rules, irregularPairs) {\n    var pair;\n\n    for (var i = 0, length = irregularPairs.length; i < length; i++) {\n      pair = irregularPairs[i];\n\n      //pluralizing\n      rules.irregular[pair[0].toLowerCase()] = pair[1];\n      rules.irregular[pair[1].toLowerCase()] = pair[1];\n\n      //singularizing\n      rules.irregularInverse[pair[1].toLowerCase()] = pair[0];\n      rules.irregularInverse[pair[0].toLowerCase()] = pair[0];\n    }\n  }\n\n  /**\n    Inflector.Ember provides a mechanism for supplying inflection rules for your\n    application. Ember includes a default set of inflection rules, and provides an\n    API for providing additional rules.\n  \n    Examples:\n  \n    Creating an inflector with no rules.\n  \n    ```js\n    var inflector = new Ember.Inflector();\n    ```\n  \n    Creating an inflector with the default ember ruleset.\n  \n    ```js\n    var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\n  \n    inflector.pluralize('cow'); //=> 'kine'\n    inflector.singularize('kine'); //=> 'cow'\n    ```\n  \n    Creating an inflector and adding rules later.\n  \n    ```javascript\n    var inflector = Ember.Inflector.inflector;\n  \n    inflector.pluralize('advice'); // => 'advices'\n    inflector.uncountable('advice');\n    inflector.pluralize('advice'); // => 'advice'\n  \n    inflector.pluralize('formula'); // => 'formulas'\n    inflector.irregular('formula', 'formulae');\n    inflector.pluralize('formula'); // => 'formulae'\n  \n    // you would not need to add these as they are the default rules\n    inflector.plural(/$/, 's');\n    inflector.singular(/s$/i, '');\n    ```\n  \n    Creating an inflector with a nondefault ruleset.\n  \n    ```javascript\n    var rules = {\n      plurals:  [\n        [ /$/, 's' ]\n      ],\n      singular: [\n        [ /\\s$/, '' ]\n      ],\n      irregularPairs: [\n        [ 'cow', 'kine' ]\n      ],\n      uncountable: [ 'fish' ]\n    };\n  \n    var inflector = new Ember.Inflector(rules);\n    ```\n  \n    @class Inflector\n    @namespace Ember\n  */\n  function Inflector(ruleSet) {\n    ruleSet = ruleSet || {};\n    ruleSet.uncountable = ruleSet.uncountable || makeDictionary();\n    ruleSet.irregularPairs = ruleSet.irregularPairs || makeDictionary();\n\n    var rules = this.rules = {\n      plurals: ruleSet.plurals || [],\n      singular: ruleSet.singular || [],\n      irregular: makeDictionary(),\n      irregularInverse: makeDictionary(),\n      uncountable: makeDictionary()\n    };\n\n    loadUncountable(rules, ruleSet.uncountable);\n    loadIrregular(rules, ruleSet.irregularPairs);\n\n    this.enableCache();\n  }\n\n  if (!Object.create && !Object.create(null).hasOwnProperty) {\n    throw new Error(\"This browser does not support Object.create(null), please polyfil with es5-sham: http://git.io/yBU2rg\");\n  }\n\n  function makeDictionary() {\n    var cache = Object.create(null);\n    cache['_dict'] = null;\n    delete cache['_dict'];\n    return cache;\n  }\n\n  Inflector.prototype = {\n    /**\n      @public\n       As inflections can be costly, and commonly the same subset of words are repeatedly\n      inflected an optional cache is provided.\n       @method enableCache\n    */\n    enableCache: function () {\n      this.purgeCache();\n\n      this.singularize = function (word) {\n        this._cacheUsed = true;\n        return this._sCache[word] || (this._sCache[word] = this._singularize(word));\n      };\n\n      this.pluralize = function (word) {\n        this._cacheUsed = true;\n        return this._pCache[word] || (this._pCache[word] = this._pluralize(word));\n      };\n    },\n\n    /**\n      @public\n       @method purgedCache\n    */\n    purgeCache: function () {\n      this._cacheUsed = false;\n      this._sCache = makeDictionary();\n      this._pCache = makeDictionary();\n    },\n\n    /**\n      @public\n      disable caching\n       @method disableCache;\n    */\n    disableCache: function () {\n      this._sCache = null;\n      this._pCache = null;\n      this.singularize = function (word) {\n        return this._singularize(word);\n      };\n\n      this.pluralize = function (word) {\n        return this._pluralize(word);\n      };\n    },\n\n    /**\n      @method plural\n      @param {RegExp} regex\n      @param {String} string\n    */\n    plural: function (regex, string) {\n      if (this._cacheUsed) {\n        this.purgeCache();\n      }\n      this.rules.plurals.push([regex, string.toLowerCase()]);\n    },\n\n    /**\n      @method singular\n      @param {RegExp} regex\n      @param {String} string\n    */\n    singular: function (regex, string) {\n      if (this._cacheUsed) {\n        this.purgeCache();\n      }\n      this.rules.singular.push([regex, string.toLowerCase()]);\n    },\n\n    /**\n      @method uncountable\n      @param {String} regex\n    */\n    uncountable: function (string) {\n      if (this._cacheUsed) {\n        this.purgeCache();\n      }\n      loadUncountable(this.rules, [string.toLowerCase()]);\n    },\n\n    /**\n      @method irregular\n      @param {String} singular\n      @param {String} plural\n    */\n    irregular: function (singular, plural) {\n      if (this._cacheUsed) {\n        this.purgeCache();\n      }\n      loadIrregular(this.rules, [[singular, plural]]);\n    },\n\n    /**\n      @method pluralize\n      @param {String} word\n    */\n    pluralize: function (word) {\n      return this._pluralize(word);\n    },\n\n    _pluralize: function (word) {\n      return this.inflect(word, this.rules.plurals, this.rules.irregular);\n    },\n    /**\n      @method singularize\n      @param {String} word\n    */\n    singularize: function (word) {\n      return this._singularize(word);\n    },\n\n    _singularize: function (word) {\n      return this.inflect(word, this.rules.singular, this.rules.irregularInverse);\n    },\n\n    /**\n      @protected\n       @method inflect\n      @param {String} word\n      @param {Object} typeRules\n      @param {Object} irregular\n    */\n    inflect: function (word, typeRules, irregular) {\n      var inflection, substitution, result, lowercase, wordSplit, firstPhrase, lastWord, isBlank, isCamelized, rule, isUncountable;\n\n      isBlank = !word || BLANK_REGEX.test(word);\n\n      isCamelized = CAMELIZED_REGEX.test(word);\n      firstPhrase = \"\";\n\n      if (isBlank) {\n        return word;\n      }\n\n      lowercase = word.toLowerCase();\n      wordSplit = LAST_WORD_DASHED_REGEX.exec(word) || LAST_WORD_CAMELIZED_REGEX.exec(word);\n\n      if (wordSplit) {\n        firstPhrase = wordSplit[1];\n        lastWord = wordSplit[2].toLowerCase();\n      }\n\n      isUncountable = this.rules.uncountable[lowercase] || this.rules.uncountable[lastWord];\n\n      if (isUncountable) {\n        return word;\n      }\n\n      for (rule in irregular) {\n        if (lowercase.match(rule + \"$\")) {\n          substitution = irregular[rule];\n\n          if (isCamelized && irregular[lastWord]) {\n            substitution = capitalize(substitution);\n            rule = capitalize(rule);\n          }\n\n          return word.replace(new RegExp(rule, 'i'), substitution);\n        }\n      }\n\n      for (var i = typeRules.length, min = 0; i > min; i--) {\n        inflection = typeRules[i - 1];\n        rule = inflection[0];\n\n        if (rule.test(word)) {\n          break;\n        }\n      }\n\n      inflection = inflection || [];\n\n      rule = inflection[0];\n      substitution = inflection[1];\n\n      result = word.replace(rule, substitution);\n\n      return result;\n    }\n  };\n\n  exports.default = Inflector;\n});","define('ember-inflector/lib/system/string', ['exports', 'ember-inflector/lib/system/inflector'], function (exports, _inflector) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.singularize = exports.pluralize = undefined;\n\n\n  function pluralize(word) {\n    return _inflector.default.inflector.pluralize(word);\n  }\n\n  function singularize(word) {\n    return _inflector.default.inflector.singularize(word);\n  }\n\n  exports.pluralize = pluralize;\n  exports.singularize = singularize;\n});","define('ember-inflector/lib/utils/make-helper', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = makeHelper;\n  function makeHelper(helperFunction) {\n    if (Ember.Helper) {\n      return Ember.Helper.helper(helperFunction);\n    }\n    if (Ember.HTMLBars) {\n      return Ember.HTMLBars.makeBoundHelper(helperFunction);\n    }\n    return Ember.Handlebars.makeBoundHelper(helperFunction);\n  }\n});","define('ember-load-initializers/index', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (app, prefix) {\n    var initializerPrefix = prefix + '/initializers/';\n    var instanceInitializerPrefix = prefix + '/instance-initializers/';\n    var initializers = [];\n    var instanceInitializers = [];\n    // this is 2 pass because generally the first pass is the problem\n    // and is reduced, and resolveInitializer has potential to deopt\n    var moduleNames = Object.keys(requirejs._eak_seen);\n    for (var i = 0; i < moduleNames.length; i++) {\n      var moduleName = moduleNames[i];\n      if (moduleName.lastIndexOf(initializerPrefix, 0) === 0) {\n        initializers.push(moduleName);\n      } else if (moduleName.lastIndexOf(instanceInitializerPrefix, 0) === 0) {\n        instanceInitializers.push(moduleName);\n      }\n    }\n    registerInitializers(app, initializers);\n    registerInstanceInitializers(app, instanceInitializers);\n  };\n\n  function resolveInitializer(moduleName) {\n    var module = require(moduleName, null, null, true);\n    if (!module) {\n      throw new Error(moduleName + ' must export an initializer.');\n    }\n    var initializer = module['default'];\n    if (!initializer.name) {\n      initializer.name = moduleName.slice(moduleName.lastIndexOf('/') + 1);\n    }\n    return initializer;\n  }\n\n  function registerInitializers(app, moduleNames) {\n    for (var i = 0; i < moduleNames.length; i++) {\n      app.initializer(resolveInitializer(moduleNames[i]));\n    }\n  }\n\n  function registerInstanceInitializers(app, moduleNames) {\n    for (var i = 0; i < moduleNames.length; i++) {\n      app.instanceInitializer(resolveInitializer(moduleNames[i]));\n    }\n  }\n});","/*\n * This is a stub file, it must be on disk b/c babel-plugin-debug-macros\n * does not strip the module require when the transpiled variable usage is\n * stripped.\n */\ndefine(\"ember-resolver/features\", [], function () {\n  \"use strict\";\n});","define('ember-resolver/index', ['exports', 'ember-resolver/resolvers/classic'], function (exports, _classic) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _classic.default;\n    }\n  });\n});","define('ember-resolver/resolver', ['exports', 'ember-resolver/resolvers/classic'], function (exports, _classic) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _classic.default;\n    }\n  });\n});","define('ember-resolver/resolvers/classic/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/index'], function (exports, _index) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  const { ContainerDebugAdapter } = Ember;\n\n  function getPod(type, key, prefix) {\n    let match = key.match(new RegExp('^/?' + prefix + '/(.+)/' + type + '$'));\n    if (match !== null) {\n      return match[1];\n    }\n  }\n\n  /*\n   * This module defines a subclass of Ember.ContainerDebugAdapter that adds\n   * support for resolving from modules.\n   *\n   */\n  exports.default = ContainerDebugAdapter.extend({\n    _moduleRegistry: null,\n\n    init() {\n      this._super(...arguments);\n\n      if (!this._moduleRegistry) {\n        this._moduleRegistry = new _index.ModuleRegistry();\n      }\n    },\n\n    /**\n        The container of the application being debugged.\n        This property will be injected\n        on creation.\n         @property container\n        @default null\n        */\n\n    /**\n        The resolver instance of the application\n        being debugged. This property will be injected\n        on creation.\n         @property resolver\n        @default null\n        */\n\n    /**\n        Returns true if it is possible to catalog a list of available\n        classes in the resolver for a given type.\n         @method canCatalogEntriesByType\n        @param {string} type The type. e.g. \"model\", \"controller\", \"route\"\n        @return {boolean} whether a list is available for this type.\n        */\n    canCatalogEntriesByType(type) {\n      if (type === 'model') {\n        return true;\n      }\n      return this._super(...arguments);\n    },\n\n    /**\n        Returns the available classes a given type.\n         @method catalogEntriesByType\n        @param {string} type The type. e.g. \"model\", \"controller\", \"route\"\n        @return {Array} An array of classes.\n        */\n    catalogEntriesByType(type) {\n      let moduleNames = this._moduleRegistry.moduleNames();\n      let types = Ember.A();\n\n      let prefix = this.namespace.modulePrefix;\n\n      for (let i = 0, l = moduleNames.length; i < l; i++) {\n        let key = moduleNames[i];\n\n        if (key.indexOf(type) !== -1) {\n          // Check if it's a pod module\n          let name = getPod(type, key, this.namespace.podModulePrefix || prefix);\n          if (!name) {\n            // Not pod\n            name = key.split(type + 's/').pop();\n\n            // Support for different prefix (such as ember-cli addons).\n            // Uncomment the code below when\n            // https://github.com/ember-cli/ember-resolver/pull/80 is merged.\n\n            //let match = key.match('^/?(.+)/' + type);\n            //if (match && match[1] !== prefix) {\n            // Different prefix such as an addon\n            //name = match[1] + '@' + name;\n            //}\n          }\n          types.addObject(name);\n        }\n      }\n      return types;\n    }\n  });\n});","define('ember-resolver/resolvers/classic/index', ['exports', 'ember-resolver/utils/class-factory', 'ember-resolver/utils/make-dictionary'], function (exports, _classFactory, _makeDictionary) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ModuleRegistry = undefined;\n\n\n  if (typeof requirejs.entries === 'undefined') {\n    requirejs.entries = requirejs._eak_seen;\n  } /* globals requirejs, require */\n\n  class ModuleRegistry {\n    constructor(entries) {\n      this._entries = entries || requirejs.entries;\n    }\n    moduleNames() {\n      return Object.keys(this._entries);\n    }\n    has(moduleName) {\n      return moduleName in this._entries;\n    }\n    get(moduleName) {\n      return require(moduleName);\n    }\n  }\n\n  exports.ModuleRegistry = ModuleRegistry;\n  /*\n   * This module defines a subclass of Ember.DefaultResolver that adds two\n   * important features:\n   *\n   *  1) The resolver makes the container aware of es6 modules via the AMD\n   *     output. The loader's _moduleEntries is consulted so that classes can be\n   *     resolved directly via the module loader, without needing a manual\n   *     `import`.\n   *  2) is able to provide injections to classes that implement `extend`\n   *     (as is typical with Ember).\n   */\n\n  const {\n    underscore,\n    classify,\n    dasherize\n  } = Ember.String;\n  const {\n    get,\n    DefaultResolver\n  } = Ember;\n\n  function parseName(fullName) {\n    if (fullName.parsedName === true) {\n      return fullName;\n    }\n\n    let prefix, type, name;\n    let fullNameParts = fullName.split('@');\n\n    // HTMLBars uses helper:@content-helper which collides\n    // with ember-cli namespace detection.\n    // This will be removed in a future release of HTMLBars.\n    if (fullName !== 'helper:@content-helper' && fullNameParts.length === 2) {\n      let prefixParts = fullNameParts[0].split(':');\n\n      if (prefixParts.length === 2) {\n        prefix = prefixParts[1];\n        type = prefixParts[0];\n        name = fullNameParts[1];\n      } else {\n        let nameParts = fullNameParts[1].split(':');\n\n        prefix = fullNameParts[0];\n        type = nameParts[0];\n        name = nameParts[1];\n      }\n\n      if (type === 'template' && prefix.lastIndexOf('components/', 0) === 0) {\n        name = `components/${name}`;\n        prefix = prefix.slice(11);\n      }\n    } else {\n      fullNameParts = fullName.split(':');\n      type = fullNameParts[0];\n      name = fullNameParts[1];\n    }\n\n    let fullNameWithoutType = name;\n    let namespace = get(this, 'namespace');\n    let root = namespace;\n\n    return {\n      parsedName: true,\n      fullName: fullName,\n      prefix: prefix || this.prefix({ type: type }),\n      type: type,\n      fullNameWithoutType: fullNameWithoutType,\n      name: name,\n      root: root,\n      resolveMethodName: \"resolve\" + classify(type)\n    };\n  }\n\n  function resolveOther(parsedName) {\n    Ember.assert('`modulePrefix` must be defined', this.namespace.modulePrefix);\n\n    let normalizedModuleName = this.findModuleName(parsedName);\n\n    if (normalizedModuleName) {\n      let defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);\n\n      if (defaultExport === undefined) {\n        throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);\n      }\n\n      if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {\n        defaultExport = (0, _classFactory.default)(defaultExport);\n      }\n\n      return defaultExport;\n    } else {\n      return this._super(parsedName);\n    }\n  }\n\n  // Ember.DefaultResolver docs:\n  //   https://github.com/emberjs/ember.js/blob/master/packages/ember-application/lib/system/resolver.js\n  const Resolver = DefaultResolver.extend({\n    resolveOther,\n    parseName,\n    resolveTemplate: resolveOther,\n    pluralizedTypes: null,\n    moduleRegistry: null,\n\n    makeToString(factory, fullName) {\n      return '' + this.namespace.modulePrefix + '@' + fullName + ':';\n    },\n\n    shouldWrapInClassFactory() /* module, parsedName */{\n      return false;\n    },\n\n    init() {\n      this._super();\n      this.moduleBasedResolver = true;\n\n      if (!this._moduleRegistry) {\n        this._moduleRegistry = new ModuleRegistry();\n      }\n\n      this._normalizeCache = (0, _makeDictionary.default)();\n\n      this.pluralizedTypes = this.pluralizedTypes || (0, _makeDictionary.default)();\n\n      if (!this.pluralizedTypes.config) {\n        this.pluralizedTypes.config = 'config';\n      }\n      this._deprecatedPodModulePrefix = false;\n    },\n\n    normalize(fullName) {\n      return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));\n    },\n\n    _normalize(fullName) {\n      // A) Convert underscores to dashes\n      // B) Convert camelCase to dash-case, except for helpers where we want to avoid shadowing camelCase expressions\n      // C) replace `.` with `/` in order to make nested controllers work in the following cases\n      //      1. `needs: ['posts/post']`\n      //      2. `{{render \"posts/post\"}}`\n      //      3. `this.render('posts/post')` from Route\n\n      let split = fullName.split(':');\n      if (split.length > 1) {\n        if (split[0] === 'helper') {\n          return split[0] + ':' + split[1].replace(/_/g, '-');\n        } else {\n          return split[0] + ':' + dasherize(split[1].replace(/\\./g, '/'));\n        }\n      } else {\n        return fullName;\n      }\n    },\n\n    pluralize(type) {\n      return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');\n    },\n\n    podBasedLookupWithPrefix(podPrefix, parsedName) {\n      let fullNameWithoutType = parsedName.fullNameWithoutType;\n\n      if (parsedName.type === 'template') {\n        fullNameWithoutType = fullNameWithoutType.replace(/^components\\//, '');\n      }\n\n      return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;\n    },\n\n    podBasedModuleName(parsedName) {\n      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;\n\n      return this.podBasedLookupWithPrefix(podPrefix, parsedName);\n    },\n\n    podBasedComponentsInSubdir(parsedName) {\n      let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;\n      podPrefix = podPrefix + '/components';\n\n      if (parsedName.type === 'component' || /^components/.test(parsedName.fullNameWithoutType)) {\n        return this.podBasedLookupWithPrefix(podPrefix, parsedName);\n      }\n    },\n\n    resolveEngine(parsedName) {\n      let engineName = parsedName.fullNameWithoutType;\n      let engineModule = engineName + '/engine';\n\n      if (this._moduleRegistry.has(engineModule)) {\n        return this._extractDefaultExport(engineModule);\n      }\n    },\n\n    resolveRouteMap(parsedName) {\n      let engineName = parsedName.fullNameWithoutType;\n      let engineRoutesModule = engineName + '/routes';\n\n      if (this._moduleRegistry.has(engineRoutesModule)) {\n        let routeMap = this._extractDefaultExport(engineRoutesModule);\n\n        Ember.assert(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`, routeMap.isRouteMap);\n\n        return routeMap;\n      }\n    },\n\n    mainModuleName(parsedName) {\n      // if router:main or adapter:main look for a module with just the type first\n      let tmpModuleName = parsedName.prefix + '/' + parsedName.type;\n\n      if (parsedName.fullNameWithoutType === 'main') {\n        return tmpModuleName;\n      }\n    },\n\n    defaultModuleName(parsedName) {\n      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;\n    },\n\n    prefix(parsedName) {\n      let tmpPrefix = this.namespace.modulePrefix;\n\n      if (this.namespace[parsedName.type + 'Prefix']) {\n        tmpPrefix = this.namespace[parsedName.type + 'Prefix'];\n      }\n\n      return tmpPrefix;\n    },\n\n    /**\n      A listing of functions to test for moduleName's based on the provided\n     `parsedName`. This allows easy customization of additional module based\n     lookup patterns.\n      @property moduleNameLookupPatterns\n     @returns {Ember.Array}\n     */\n    moduleNameLookupPatterns: Ember.computed(function () {\n      return [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName];\n    }).readOnly(),\n\n    findModuleName(parsedName, loggingDisabled) {\n      let moduleNameLookupPatterns = this.get('moduleNameLookupPatterns');\n      let moduleName;\n\n      for (let index = 0, length = moduleNameLookupPatterns.length; index < length; index++) {\n        let item = moduleNameLookupPatterns[index];\n\n        let tmpModuleName = item.call(this, parsedName);\n\n        // allow treat all dashed and all underscored as the same thing\n        // supports components with dashes and other stuff with underscores.\n        if (tmpModuleName) {\n          tmpModuleName = this.chooseModuleName(tmpModuleName, parsedName);\n        }\n\n        if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {\n          moduleName = tmpModuleName;\n        }\n\n        if (!loggingDisabled) {\n          this._logLookup(moduleName, parsedName, tmpModuleName);\n        }\n\n        if (moduleName) {\n          return moduleName;\n        }\n      }\n    },\n\n    chooseModuleName(moduleName, parsedName) {\n      let underscoredModuleName = underscore(moduleName);\n\n      if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {\n        throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);\n      }\n\n      if (this._moduleRegistry.has(moduleName)) {\n        return moduleName;\n      } else if (this._moduleRegistry.has(underscoredModuleName)) {\n        return underscoredModuleName;\n      }\n      // workaround for dasherized partials:\n      // something/something/-something => something/something/_something\n      let partializedModuleName = moduleName.replace(/\\/-([^/]*)$/, '/_$1');\n\n      if (this._moduleRegistry.has(partializedModuleName)) {\n        Ember.deprecate('Modules should not contain underscores. ' + 'Attempted to lookup \"' + moduleName + '\" which ' + 'was not found. Please rename \"' + partializedModuleName + '\" ' + 'to \"' + moduleName + '\" instead.', false, { id: 'ember-resolver.underscored-modules', until: '3.0.0' });\n\n        return partializedModuleName;\n      }\n\n      Ember.runInDebug(() => {\n        let isCamelCaseHelper = parsedName.type === 'helper' && /[a-z]+[A-Z]+/.test(moduleName);\n        if (isCamelCaseHelper) {\n          this._camelCaseHelperWarnedNames = this._camelCaseHelperWarnedNames || [];\n          let alreadyWarned = this._camelCaseHelperWarnedNames.indexOf(parsedName.fullName) > -1;\n          if (!alreadyWarned && this._moduleRegistry.has(dasherize(moduleName))) {\n            this._camelCaseHelperWarnedNames.push(parsedName.fullName);\n            Ember.warn('Attempted to lookup \"' + parsedName.fullName + '\" which ' + 'was not found. In previous versions of ember-resolver, a bug would have ' + 'caused the module at \"' + dasherize(moduleName) + '\" to be ' + 'returned for this camel case helper name. This has been fixed. ' + 'Use the dasherized name to resolve the module that would have been ' + 'returned in previous versions.', false, { id: 'ember-resolver.camelcase-helper-names', until: '3.0.0' });\n          }\n        }\n      });\n    },\n\n    // used by Ember.DefaultResolver.prototype._logLookup\n    lookupDescription(fullName) {\n      let parsedName = this.parseName(fullName);\n\n      let moduleName = this.findModuleName(parsedName, true);\n\n      return moduleName;\n    },\n\n    // only needed until 1.6.0-beta.2 can be required\n    _logLookup(found, parsedName, description) {\n      if (!Ember.ENV.LOG_MODULE_RESOLVER && !parsedName.root.LOG_RESOLVER) {\n        return;\n      }\n\n      let padding;\n      let symbol = found ? '[✓]' : '[ ]';\n\n      if (parsedName.fullName.length > 60) {\n        padding = '.';\n      } else {\n        padding = new Array(60 - parsedName.fullName.length).join('.');\n      }\n\n      if (!description) {\n        description = this.lookupDescription(parsedName);\n      }\n\n      if (console && console.info) {\n        // eslint-disable-next-line no-console\n        console.info(symbol, parsedName.fullName, padding, description);\n      }\n    },\n\n    knownForType(type) {\n      let moduleKeys = this._moduleRegistry.moduleNames();\n\n      let items = (0, _makeDictionary.default)();\n      for (let index = 0, length = moduleKeys.length; index < length; index++) {\n        let moduleName = moduleKeys[index];\n        let fullname = this.translateToContainerFullname(type, moduleName);\n\n        if (fullname) {\n          items[fullname] = true;\n        }\n      }\n\n      return items;\n    },\n\n    translateToContainerFullname(type, moduleName) {\n      let prefix = this.prefix({ type });\n\n      // Note: using string manipulation here rather than regexes for better performance.\n      // pod modules\n      // '^' + prefix + '/(.+)/' + type + '$'\n      let podPrefix = prefix + '/';\n      let podSuffix = '/' + type;\n      let start = moduleName.indexOf(podPrefix);\n      let end = moduleName.indexOf(podSuffix);\n\n      if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {\n        return type + ':' + moduleName.slice(start + podPrefix.length, end);\n      }\n\n      // non-pod modules\n      // '^' + prefix + '/' + pluralizedType + '/(.+)$'\n      let pluralizedType = this.pluralize(type);\n      let nonPodPrefix = prefix + '/' + pluralizedType + '/';\n\n      if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {\n        return type + ':' + moduleName.slice(nonPodPrefix.length);\n      }\n    },\n\n    _extractDefaultExport(normalizedModuleName) {\n      let module = require(normalizedModuleName, null, null, true /* force sync */);\n\n      if (module && module['default']) {\n        module = module['default'];\n      }\n\n      return module;\n    }\n  });\n\n  Resolver.reopenClass({\n    moduleBasedResolver: true\n  });\n\n  exports.default = Resolver;\n});","define('ember-resolver/utils/class-factory', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = classFactory;\n  function classFactory(klass) {\n    return {\n      create(injections) {\n        if (typeof klass.extend === 'function') {\n          return klass.extend(injections);\n        } else {\n          return klass;\n        }\n      }\n    };\n  }\n});","define('ember-resolver/utils/make-dictionary', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = makeDictionary;\n  function makeDictionary() {\n    let cache = Object.create(null);\n    cache['_dict'] = null;\n    delete cache['_dict'];\n    return cache;\n  }\n});","define('ember-welcome-page/components/welcome-page', ['exports', 'ember-welcome-page/templates/components/welcome-page'], function (exports, _welcomePage) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Component.extend({\n    layout: _welcomePage.default,\n\n    emberVersion: Ember.computed(function () {\n      let [major, minor] = Ember.VERSION.split(\".\");\n\n      return `${major}.${minor}.0`;\n    })\n  });\n});","define(\"ember-welcome-page/templates/components/welcome-page\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports.__esModule = true;\n  exports.default = Ember.HTMLBars.template({ \"id\": \"D2iezqDS\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"id\\\",\\\"ember-welcome-page-id-selector\\\"],[10,\\\"data-ember-version\\\",[26,[[18,\\\"emberVersion\\\"]]]],[7],[0,\\\"\\\\n  \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"columns\\\"],[7],[0,\\\"\\\\n    \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"tomster\\\"],[7],[0,\\\"\\\\n      \\\"],[6,\\\"img\\\"],[9,\\\"src\\\",\\\"ember-welcome-page/images/construction.png\\\"],[9,\\\"alt\\\",\\\"Under construction\\\"],[7],[8],[0,\\\"\\\\n    \\\"],[8],[0,\\\"\\\\n    \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"welcome\\\"],[7],[0,\\\"\\\\n      \\\"],[6,\\\"h2\\\"],[9,\\\"id\\\",\\\"title\\\"],[7],[0,\\\"Congratulations, you made it!\\\"],[8],[0,\\\"\\\\n\\\\n      \\\"],[6,\\\"p\\\"],[7],[0,\\\"You’ve officially spun up your very first Ember app :-)\\\"],[8],[0,\\\"\\\\n      \\\"],[6,\\\"p\\\"],[7],[0,\\\"You’ve got one more decision to make: what do you want to do next? We’d suggest one of the following to help you get going:\\\"],[8],[0,\\\"\\\\n      \\\"],[6,\\\"ol\\\"],[7],[0,\\\"\\\\n        \\\"],[6,\\\"li\\\"],[7],[6,\\\"a\\\"],[10,\\\"href\\\",[26,[\\\"https://guides.emberjs.com/v\\\",[18,\\\"emberVersion\\\"],\\\"/getting-started/quick-start/\\\"]]],[7],[0,\\\"Quick Start\\\"],[8],[0,\\\" - a quick introduction to how Ember works. Learn about defining your first route, writing a UI component and deploying your application.\\\"],[8],[0,\\\"\\\\n        \\\"],[6,\\\"li\\\"],[7],[6,\\\"a\\\"],[10,\\\"href\\\",[26,[\\\"https://guides.emberjs.com/v\\\",[18,\\\"emberVersion\\\"],\\\"/tutorial/ember-cli/\\\"]]],[7],[0,\\\"Ember Guides\\\"],[8],[0,\\\" - this is our more thorough, hands-on intro to Ember. Your crash course in Ember philosophy, background and some in-depth discussion of how things work (and why they work the way they do).\\\"],[8],[0,\\\"\\\\n      \\\"],[8],[0,\\\"\\\\n      \\\"],[6,\\\"p\\\"],[7],[0,\\\"If you run into problems, you can check \\\"],[6,\\\"a\\\"],[9,\\\"href\\\",\\\"http://stackoverflow.com/questions/tagged/ember.js\\\"],[7],[0,\\\"Stack Overflow\\\"],[8],[0,\\\" or \\\"],[6,\\\"a\\\"],[9,\\\"href\\\",\\\"http://discuss.emberjs.com/\\\"],[7],[0,\\\"our forums\\\"],[8],[0,\\\"  for ideas and answers—someone’s probably been through the same thing and already posted an answer.  If not, you can post your \\\"],[6,\\\"strong\\\"],[7],[0,\\\"own\\\"],[8],[0,\\\" question. People love to help new Ember developers get started, and our community is incredibly supportive \\\"],[8],[0,\\\"\\\\n    \\\"],[8],[0,\\\"\\\\n  \\\"],[8],[0,\\\"\\\\n    \\\"],[6,\\\"p\\\"],[9,\\\"class\\\",\\\"postscript\\\"],[7],[0,\\\"To remove this welcome message, remove the \\\"],[6,\\\"code\\\"],[7],[0,\\\"{{welcome-page}}\\\"],[8],[0,\\\" component from your \\\"],[6,\\\"code\\\"],[7],[0,\\\"application.hbs\\\"],[8],[0,\\\" file.\\\"],[6,\\\"br\\\"],[7],[8],[0,\\\"You'll see this page update soon after!\\\"],[8],[0,\\\"\\\\n\\\"],[8],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"ember-welcome-page/templates/components/welcome-page.hbs\" } });\n});","define('ember-data/-debug/index', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.instrument = instrument;\n  function instrument(method) {\n    return method();\n  }\n\n  /*\n    Assert that `addedRecord` has a valid type so it can be added to the\n    relationship of the `record`.\n  \n    The assert basically checks if the `addedRecord` can be added to the\n    relationship (specified via `relationshipMeta`) of the `record`.\n  \n    This utility should only be used internally, as both record parameters must\n    be an InternalModel and the `relationshipMeta` needs to be the meta\n    information about the relationship, retrieved via\n    `record.relationshipFor(key)`.\n  \n    @method assertPolymorphicType\n    @param {InternalModel} internalModel\n    @param {RelationshipMeta} relationshipMeta retrieved via\n           `record.relationshipFor(key)`\n    @param {InternalModel} addedRecord record which\n           should be added/set for the relationship\n  */\n  var assertPolymorphicType = void 0;\n\n  if (true) {\n    var checkPolymorphic = function checkPolymorphic(modelClass, addedModelClass) {\n      if (modelClass.__isMixin) {\n        //TODO Need to do this in order to support mixins, should convert to public api\n        //once it exists in Ember\n        return modelClass.__mixin.detect(addedModelClass.PrototypeMixin);\n      }\n      if (Ember.MODEL_FACTORY_INJECTIONS) {\n        modelClass = modelClass.superclass;\n      }\n      return modelClass.detect(addedModelClass);\n    };\n\n    exports.assertPolymorphicType = assertPolymorphicType = function assertPolymorphicType(parentInternalModel, relationshipMeta, addedInternalModel) {\n      var addedModelName = addedInternalModel.modelName;\n      var parentModelName = parentInternalModel.modelName;\n      var key = relationshipMeta.key;\n      var relationshipModelName = relationshipMeta.type;\n      var relationshipClass = parentInternalModel.store.modelFor(relationshipModelName);\n      var assertionMessage = `You cannot add a record of modelClass '${addedModelName}' to the '${parentModelName}.${key}' relationship (only '${relationshipModelName}' allowed)`;\n\n      (true && !(checkPolymorphic(relationshipClass, addedInternalModel.modelClass)) && Ember.assert(assertionMessage, checkPolymorphic(relationshipClass, addedInternalModel.modelClass)));\n    };\n  }\n\n  exports.assertPolymorphicType = assertPolymorphicType;\n});","define('ember-data/-private', ['exports', 'ember-inflector', 'ember-data/-debug', 'ember-data/version'], function (exports, emberInflector, emberData_Debug, VERSION) { 'use strict';\n\nVERSION = 'default' in VERSION ? VERSION['default'] : VERSION;\n\n/**\n  A `PromiseArray` is an object that acts like both an `Ember.Array`\n  and a promise. When the promise is resolved the resulting value\n  will be set to the `PromiseArray`'s `content` property. This makes\n  it easy to create data bindings with the `PromiseArray` that will be\n  updated when the promise resolves.\n\n  For more information see the [Ember.PromiseProxyMixin\n  documentation](/api/classes/Ember.PromiseProxyMixin.html).\n\n  Example\n\n  ```javascript\n  let promiseArray = DS.PromiseArray.create({\n    promise: $.getJSON('/some/remote/data.json')\n  });\n\n  promiseArray.get('length'); // 0\n\n  promiseArray.then(function() {\n    promiseArray.get('length'); // 100\n  });\n  ```\n\n  @class PromiseArray\n  @namespace DS\n  @extends Ember.ArrayProxy\n  @uses Ember.PromiseProxyMixin\n*/\nvar PromiseArray = Ember.ArrayProxy.extend(Ember.PromiseProxyMixin, {\n  meta: Ember.computed.reads('content.meta')\n});\n\n/**\n  A `PromiseObject` is an object that acts like both an `Ember.Object`\n  and a promise. When the promise is resolved, then the resulting value\n  will be set to the `PromiseObject`'s `content` property. This makes\n  it easy to create data bindings with the `PromiseObject` that will\n  be updated when the promise resolves.\n\n  For more information see the [Ember.PromiseProxyMixin\n  documentation](/api/classes/Ember.PromiseProxyMixin.html).\n\n  Example\n\n  ```javascript\n  let promiseObject = DS.PromiseObject.create({\n    promise: $.getJSON('/some/remote/data.json')\n  });\n\n  promiseObject.get('name'); // null\n\n  promiseObject.then(function() {\n    promiseObject.get('name'); // 'Tomster'\n  });\n  ```\n\n  @class PromiseObject\n  @namespace DS\n  @extends Ember.ObjectProxy\n  @uses Ember.PromiseProxyMixin\n*/\nvar PromiseObject = Ember.ObjectProxy.extend(Ember.PromiseProxyMixin);\n\nfunction promiseObject(promise, label) {\n  return PromiseObject.create({\n    promise: Ember.RSVP.Promise.resolve(promise, label)\n  });\n}\n\nfunction promiseArray(promise, label) {\n  return PromiseArray.create({\n    promise: Ember.RSVP.Promise.resolve(promise, label)\n  });\n}\n\n/**\n  A PromiseManyArray is a PromiseArray that also proxies certain method calls\n  to the underlying manyArray.\n  Right now we proxy:\n\n    * `reload()`\n    * `createRecord()`\n    * `on()`\n    * `one()`\n    * `trigger()`\n    * `off()`\n    * `has()`\n\n  @class PromiseManyArray\n  @namespace DS\n  @extends Ember.ArrayProxy\n*/\n\nfunction proxyToContent(method) {\n  return function () {\n    return Ember.get(this, 'content')[method](...arguments);\n  };\n}\n\nvar PromiseManyArray = PromiseArray.extend({\n  reload() {\n    (true && !(Ember.get(this, 'content')) && Ember.assert('You are trying to reload an async manyArray before it has been created', Ember.get(this, 'content')));\n\n    this.set('promise', this.get('content').reload());\n    return this;\n  },\n\n  createRecord: proxyToContent('createRecord'),\n\n  on: proxyToContent('on'),\n\n  one: proxyToContent('one'),\n\n  trigger: proxyToContent('trigger'),\n\n  off: proxyToContent('off'),\n\n  has: proxyToContent('has')\n});\n\n/**\n@module ember-data\n*/\n\n/**\n  Holds validation errors for a given record, organized by attribute names.\n\n  Every `DS.Model` has an `errors` property that is an instance of\n  `DS.Errors`. This can be used to display validation error\n  messages returned from the server when a `record.save()` rejects.\n\n  For Example, if you had a `User` model that looked like this:\n\n  ```app/models/user.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    username: DS.attr('string'),\n    email: DS.attr('string')\n  });\n  ```\n  And you attempted to save a record that did not validate on the backend:\n\n  ```javascript\n  let user = store.createRecord('user', {\n    username: 'tomster',\n    email: 'invalidEmail'\n  });\n  user.save();\n  ```\n\n  Your backend would be expected to return an error response that described\n  the problem, so that error messages can be generated on the app.\n\n  API responses will be translated into instances of `DS.Errors` differently,\n  depending on the specific combination of adapter and serializer used. You\n  may want to check the documentation or the source code of the libraries\n  that you are using, to know how they expect errors to be communicated.\n\n  Errors can be displayed to the user by accessing their property name\n  to get an array of all the error objects for that property. Each\n  error object is a JavaScript object with two keys:\n\n  - `message` A string containing the error message from the backend\n  - `attribute` The name of the property associated with this error message\n\n  ```handlebars\n  <label>Username: {{input value=username}} </label>\n  {{#each model.errors.username as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n\n  <label>Email: {{input value=email}} </label>\n  {{#each model.errors.email as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n  ```\n\n  You can also access the special `messages` property on the error\n  object to get an array of all the error strings.\n\n  ```handlebars\n  {{#each model.errors.messages as |message|}}\n    <div class=\"error\">\n      {{message}}\n    </div>\n  {{/each}}\n  ```\n\n  @class Errors\n  @namespace DS\n  @extends Ember.Object\n  @uses Ember.Enumerable\n  @uses Ember.Evented\n */\nvar Errors = Ember.ArrayProxy.extend(Ember.Evented, {\n  /**\n    Register with target handler\n     @method registerHandlers\n    @param {Object} target\n    @param {Function} becameInvalid\n    @param {Function} becameValid\n    @deprecated\n  */\n  registerHandlers(target, becameInvalid, becameValid) {\n    (true && !(false) && Ember.deprecate(`Record errors will no longer be evented.`, false, {\n      id: 'ds.errors.registerHandlers',\n      until: '3.0.0'\n    }));\n\n\n    this._registerHandlers(target, becameInvalid, becameValid);\n  },\n\n  /**\n    Register with target handler\n     @method _registerHandlers\n    @private\n  */\n  _registerHandlers(target, becameInvalid, becameValid) {\n    this.on('becameInvalid', target, becameInvalid);\n    this.on('becameValid', target, becameValid);\n  },\n\n  /**\n    @property errorsByAttributeName\n    @type {Ember.MapWithDefault}\n    @private\n  */\n  errorsByAttributeName: Ember.computed(function () {\n    return Ember.MapWithDefault.create({\n      defaultValue() {\n        return Ember.A();\n      }\n    });\n  }),\n\n  /**\n    Returns errors for a given attribute\n     ```javascript\n    let user = store.createRecord('user', {\n      username: 'tomster',\n      email: 'invalidEmail'\n    });\n    user.save().catch(function(){\n      user.get('errors').errorsFor('email'); // returns:\n      // [{attribute: \"email\", message: \"Doesn't look like a valid email.\"}]\n    });\n    ```\n     @method errorsFor\n    @param {String} attribute\n    @return {Array}\n  */\n  errorsFor(attribute) {\n    return Ember.get(this, 'errorsByAttributeName').get(attribute);\n  },\n\n  /**\n    An array containing all of the error messages for this\n    record. This is useful for displaying all errors to the user.\n     ```handlebars\n    {{#each model.errors.messages as |message|}}\n      <div class=\"error\">\n        {{message}}\n      </div>\n    {{/each}}\n    ```\n     @property messages\n    @type {Array}\n  */\n  messages: Ember.computed.mapBy('content', 'message'),\n\n  /**\n    @property content\n    @type {Array}\n    @private\n  */\n  content: Ember.computed(function () {\n    return Ember.A();\n  }),\n\n  /**\n    @method unknownProperty\n    @private\n  */\n  unknownProperty(attribute) {\n    var errors = this.errorsFor(attribute);\n    if (Ember.isEmpty(errors)) {\n      return undefined;\n    }\n    return errors;\n  },\n\n  /**\n    Total number of errors.\n     @property length\n    @type {Number}\n    @readOnly\n  */\n\n  /**\n    @property isEmpty\n    @type {Boolean}\n    @readOnly\n  */\n  isEmpty: Ember.computed.not('length').readOnly(),\n\n  /**\n    Adds error messages to a given attribute and sends\n    `becameInvalid` event to the record.\n     Example:\n     ```javascript\n    if (!user.get('username') {\n      user.get('errors').add('username', 'This field is required');\n    }\n    ```\n     @method add\n    @param {String} attribute\n    @param {(Array|String)} messages\n    @deprecated\n  */\n  add(attribute, messages) {\n    (true && Ember.warn(`Interacting with a record errors object will no longer change the record state.`, false, {\n      id: 'ds.errors.add'\n    }));\n\n\n    var wasEmpty = Ember.get(this, 'isEmpty');\n\n    this._add(attribute, messages);\n\n    if (wasEmpty && !Ember.get(this, 'isEmpty')) {\n      this.trigger('becameInvalid');\n    }\n  },\n\n  /**\n    Adds error messages to a given attribute without sending event.\n     @method _add\n    @private\n  */\n  _add(attribute, messages) {\n    messages = this._findOrCreateMessages(attribute, messages);\n    this.addObjects(messages);\n    Ember.get(this, 'errorsByAttributeName').get(attribute).addObjects(messages);\n\n    this.notifyPropertyChange(attribute);\n  },\n\n  /**\n    @method _findOrCreateMessages\n    @private\n  */\n  _findOrCreateMessages(attribute, messages) {\n    var errors = this.errorsFor(attribute);\n    var messagesArray = Ember.makeArray(messages);\n    var _messages = new Array(messagesArray.length);\n\n    for (var i = 0; i < messagesArray.length; i++) {\n      var message = messagesArray[i];\n      var err = errors.findBy('message', message);\n      if (err) {\n        _messages[i] = err;\n      } else {\n        _messages[i] = {\n          attribute: attribute,\n          message: message\n        };\n      }\n    }\n\n    return _messages;\n  },\n\n  /**\n    Removes all error messages from the given attribute and sends\n    `becameValid` event to the record if there no more errors left.\n     Example:\n     ```app/models/user.js\n    import DS from 'ember-data';\n     export default DS.Model.extend({\n      email: DS.attr('string'),\n      twoFactorAuth: DS.attr('boolean'),\n      phone: DS.attr('string')\n    });\n    ```\n     ```app/routes/user/edit.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      actions: {\n        save: function(user) {\n          if (!user.get('twoFactorAuth')) {\n            user.get('errors').remove('phone');\n          }\n          user.save();\n        }\n      }\n    });\n    ```\n     @method remove\n    @param {String} attribute\n    @deprecated\n  */\n  remove(attribute) {\n    (true && Ember.warn(`Interacting with a record errors object will no longer change the record state.`, false, {\n      id: 'ds.errors.remove'\n    }));\n\n\n    if (Ember.get(this, 'isEmpty')) {\n      return;\n    }\n\n    this._remove(attribute);\n\n    if (Ember.get(this, 'isEmpty')) {\n      this.trigger('becameValid');\n    }\n  },\n\n  /**\n    Removes all error messages from the given attribute without sending event.\n     @method _remove\n    @private\n  */\n  _remove(attribute) {\n    if (Ember.get(this, 'isEmpty')) {\n      return;\n    }\n\n    var content = this.rejectBy('attribute', attribute);\n    Ember.set(this, 'content', content);\n    Ember.get(this, 'errorsByAttributeName').delete(attribute);\n\n    this.notifyPropertyChange(attribute);\n    this.notifyPropertyChange('length');\n  },\n\n  /**\n    Removes all error messages and sends `becameValid` event\n    to the record.\n     Example:\n     ```app/routes/user/edit.js\n  import Route from '@ember/routing/route';\n     export default Route.extend({\n      actions: {\n        retrySave: function(user) {\n          user.get('errors').clear();\n          user.save();\n        }\n      }\n    });\n    ```\n     @method clear\n    @deprecated\n  */\n  clear() {\n    (true && Ember.warn(`Interacting with a record errors object will no longer change the record state.`, false, {\n      id: 'ds.errors.clear'\n    }));\n\n\n    if (Ember.get(this, 'isEmpty')) {\n      return;\n    }\n\n    this._clear();\n    this.trigger('becameValid');\n  },\n\n  /**\n    Removes all error messages.\n    to the record.\n     @method _clear\n    @private\n  */\n  _clear() {\n    if (Ember.get(this, 'isEmpty')) {\n      return;\n    }\n\n    var errorsByAttributeName = Ember.get(this, 'errorsByAttributeName');\n    var attributes = Ember.A();\n\n    errorsByAttributeName.forEach(function (_, attribute) {\n      attributes.push(attribute);\n    });\n\n    errorsByAttributeName.clear();\n    attributes.forEach(function (attribute) {\n      this.notifyPropertyChange(attribute);\n    }, this);\n\n    Ember.ArrayProxy.prototype.clear.call(this);\n  },\n\n  /**\n    Checks if there is error messages for the given attribute.\n     ```app/routes/user/edit.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      actions: {\n        save: function(user) {\n          if (user.get('errors').has('email')) {\n            return alert('Please update your email before attempting to save.');\n          }\n          user.save();\n        }\n      }\n    });\n    ```\n     @method has\n    @param {String} attribute\n    @return {Boolean} true if there some errors on given attribute\n  */\n  has(attribute) {\n    return !Ember.isEmpty(this.errorsFor(attribute));\n  }\n});\n\nfunction isEnabled() {\n  return Ember.FEATURES.isEnabled(...arguments);\n}\n\n/*\n  This file encapsulates the various states that a record can transition\n  through during its lifecycle.\n*/\n/**\n  ### State\n\n  Each record has a `currentState` property that explicitly tracks what\n  state a record is in at any given time. For instance, if a record is\n  newly created and has not yet been sent to the adapter to be saved,\n  it would be in the `root.loaded.created.uncommitted` state.  If a\n  record has had local modifications made to it that are in the\n  process of being saved, the record would be in the\n  `root.loaded.updated.inFlight` state. (This state paths will be\n  explained in more detail below.)\n\n  Events are sent by the record or its store to the record's\n  `currentState` property. How the state reacts to these events is\n  dependent on which state it is in. In some states, certain events\n  will be invalid and will cause an exception to be raised.\n\n  States are hierarchical and every state is a substate of the\n  `RootState`. For example, a record can be in the\n  `root.deleted.uncommitted` state, then transition into the\n  `root.deleted.inFlight` state. If a child state does not implement\n  an event handler, the state manager will attempt to invoke the event\n  on all parent states until the root state is reached. The state\n  hierarchy of a record is described in terms of a path string. You\n  can determine a record's current state by getting the state's\n  `stateName` property:\n\n  ```javascript\n  record.get('currentState.stateName');\n  //=> \"root.created.uncommitted\"\n   ```\n\n  The hierarchy of valid states that ship with ember data looks like\n  this:\n\n  ```text\n  * root\n    * deleted\n      * saved\n      * uncommitted\n      * inFlight\n    * empty\n    * loaded\n      * created\n        * uncommitted\n        * inFlight\n      * saved\n      * updated\n        * uncommitted\n        * inFlight\n    * loading\n  ```\n\n  The `DS.Model` states are themselves stateless. What that means is\n  that, the hierarchical states that each of *those* points to is a\n  shared data structure. For performance reasons, instead of each\n  record getting its own copy of the hierarchy of states, each record\n  points to this global, immutable shared instance. How does a state\n  know which record it should be acting on? We pass the record\n  instance into the state's event handlers as the first argument.\n\n  The record passed as the first parameter is where you should stash\n  state about the record if needed; you should never store data on the state\n  object itself.\n\n  ### Events and Flags\n\n  A state may implement zero or more events and flags.\n\n  #### Events\n\n  Events are named functions that are invoked when sent to a record. The\n  record will first look for a method with the given name on the\n  current state. If no method is found, it will search the current\n  state's parent, and then its grandparent, and so on until reaching\n  the top of the hierarchy. If the root is reached without an event\n  handler being found, an exception will be raised. This can be very\n  helpful when debugging new features.\n\n  Here's an example implementation of a state with a `myEvent` event handler:\n\n  ```javascript\n  aState: DS.State.create({\n    myEvent: function(manager, param) {\n      console.log(\"Received myEvent with\", param);\n    }\n  })\n  ```\n\n  To trigger this event:\n\n  ```javascript\n  record.send('myEvent', 'foo');\n  //=> \"Received myEvent with foo\"\n  ```\n\n  Note that an optional parameter can be sent to a record's `send()` method,\n  which will be passed as the second parameter to the event handler.\n\n  Events should transition to a different state if appropriate. This can be\n  done by calling the record's `transitionTo()` method with a path to the\n  desired state. The state manager will attempt to resolve the state path\n  relative to the current state. If no state is found at that path, it will\n  attempt to resolve it relative to the current state's parent, and then its\n  parent, and so on until the root is reached. For example, imagine a hierarchy\n  like this:\n\n      * created\n        * uncommitted <-- currentState\n        * inFlight\n      * updated\n        * inFlight\n\n  If we are currently in the `uncommitted` state, calling\n  `transitionTo('inFlight')` would transition to the `created.inFlight` state,\n  while calling `transitionTo('updated.inFlight')` would transition to\n  the `updated.inFlight` state.\n\n  Remember that *only events* should ever cause a state transition. You should\n  never call `transitionTo()` from outside a state's event handler. If you are\n  tempted to do so, create a new event and send that to the state manager.\n\n  #### Flags\n\n  Flags are Boolean values that can be used to introspect a record's current\n  state in a more user-friendly way than examining its state path. For example,\n  instead of doing this:\n\n  ```javascript\n  var statePath = record.get('stateManager.currentPath');\n  if (statePath === 'created.inFlight') {\n    doSomething();\n  }\n  ```\n\n  You can say:\n\n  ```javascript\n  if (record.get('isNew') && record.get('isSaving')) {\n    doSomething();\n  }\n  ```\n\n  If your state does not set a value for a given flag, the value will\n  be inherited from its parent (or the first place in the state hierarchy\n  where it is defined).\n\n  The current set of flags are defined below. If you want to add a new flag,\n  in addition to the area below, you will also need to declare it in the\n  `DS.Model` class.\n\n\n   * [isEmpty](DS.Model.html#property_isEmpty)\n   * [isLoading](DS.Model.html#property_isLoading)\n   * [isLoaded](DS.Model.html#property_isLoaded)\n   * [hasDirtyAttributes](DS.Model.html#property_hasDirtyAttributes)\n   * [isSaving](DS.Model.html#property_isSaving)\n   * [isDeleted](DS.Model.html#property_isDeleted)\n   * [isNew](DS.Model.html#property_isNew)\n   * [isValid](DS.Model.html#property_isValid)\n\n  @namespace DS\n  @class RootState\n*/\n\nfunction didSetProperty(internalModel, context) {\n  if (context.value === context.originalValue) {\n    delete internalModel._attributes[context.name];\n    internalModel.send('propertyWasReset', context.name);\n  } else if (context.value !== context.oldValue) {\n    internalModel.send('becomeDirty');\n  }\n\n  internalModel.updateRecordArrays();\n}\n\n// Implementation notes:\n//\n// Each state has a boolean value for all of the following flags:\n//\n// * isLoaded: The record has a populated `data` property. When a\n//   record is loaded via `store.find`, `isLoaded` is false\n//   until the adapter sets it. When a record is created locally,\n//   its `isLoaded` property is always true.\n// * isDirty: The record has local changes that have not yet been\n//   saved by the adapter. This includes records that have been\n//   created (but not yet saved) or deleted.\n// * isSaving: The record has been committed, but\n//   the adapter has not yet acknowledged that the changes have\n//   been persisted to the backend.\n// * isDeleted: The record was marked for deletion. When `isDeleted`\n//   is true and `isDirty` is true, the record is deleted locally\n//   but the deletion was not yet persisted. When `isSaving` is\n//   true, the change is in-flight. When both `isDirty` and\n//   `isSaving` are false, the change has persisted.\n// * isNew: The record was created on the client and the adapter\n//   did not yet report that it was successfully saved.\n// * isValid: The adapter did not report any server-side validation\n//   failures.\n\n// The dirty state is a abstract state whose functionality is\n// shared between the `created` and `updated` states.\n//\n// The deleted state shares the `isDirty` flag with the\n// subclasses of `DirtyState`, but with a very different\n// implementation.\n//\n// Dirty states have three child states:\n//\n// `uncommitted`: the store has not yet handed off the record\n//   to be saved.\n// `inFlight`: the store has handed off the record to be saved,\n//   but the adapter has not yet acknowledged success.\n// `invalid`: the record has invalid information and cannot be\n//   sent to the adapter yet.\n/**\n  @module ember-data\n*/\nvar DirtyState = {\n  initialState: 'uncommitted',\n\n  // FLAGS\n  isDirty: true,\n\n  // SUBSTATES\n\n  // When a record first becomes dirty, it is `uncommitted`.\n  // This means that there are local pending changes, but they\n  // have not yet begun to be saved, and are not invalid.\n  uncommitted: {\n    // EVENTS\n    didSetProperty,\n\n    //TODO(Igor) reloading now triggers a\n    //loadingData event, though it seems fine?\n    loadingData() {},\n\n    propertyWasReset(internalModel, name) {\n      if (!internalModel.hasChangedAttributes()) {\n        internalModel.send('rolledBack');\n      }\n    },\n\n    pushedData(internalModel) {\n      internalModel.updateChangedAttributes();\n\n      if (!internalModel.hasChangedAttributes()) {\n        internalModel.transitionTo('loaded.saved');\n      }\n    },\n\n    becomeDirty() {},\n\n    willCommit(internalModel) {\n      internalModel.transitionTo('inFlight');\n    },\n\n    reloadRecord(internalModel, resolve) {\n      resolve(internalModel.store._reloadRecord(internalModel));\n    },\n\n    rolledBack(internalModel) {\n      internalModel.transitionTo('loaded.saved');\n    },\n\n    becameInvalid(internalModel) {\n      internalModel.transitionTo('invalid');\n    },\n\n    rollback(internalModel) {\n      internalModel.rollbackAttributes();\n      internalModel.triggerLater('ready');\n    }\n  },\n\n  // Once a record has been handed off to the adapter to be\n  // saved, it is in the 'in flight' state. Changes to the\n  // record cannot be made during this window.\n  inFlight: {\n    // FLAGS\n    isSaving: true,\n\n    // EVENTS\n    didSetProperty,\n    becomeDirty() {},\n    pushedData() {},\n\n    unloadRecord: assertAgainstUnloadRecord,\n\n    // TODO: More robust semantics around save-while-in-flight\n    willCommit() {},\n\n    didCommit(internalModel) {\n      internalModel.transitionTo('saved');\n      internalModel.send('invokeLifecycleCallbacks', this.dirtyType);\n    },\n\n    becameInvalid(internalModel) {\n      internalModel.transitionTo('invalid');\n      internalModel.send('invokeLifecycleCallbacks');\n    },\n\n    becameError(internalModel) {\n      internalModel.transitionTo('uncommitted');\n      internalModel.triggerLater('becameError', internalModel);\n    }\n  },\n\n  // A record is in the `invalid` if the adapter has indicated\n  // the the record failed server-side invalidations.\n  invalid: {\n    // FLAGS\n    isValid: false,\n\n    // EVENTS\n    deleteRecord(internalModel) {\n      internalModel.transitionTo('deleted.uncommitted');\n    },\n\n    didSetProperty(internalModel, context) {\n      internalModel.removeErrorMessageFromAttribute(context.name);\n\n      didSetProperty(internalModel, context);\n\n      if (!internalModel.hasErrors()) {\n        this.becameValid(internalModel);\n      }\n    },\n\n    becameInvalid() {},\n    becomeDirty() {},\n    pushedData() {},\n\n    willCommit(internalModel) {\n      internalModel.clearErrorMessages();\n      internalModel.transitionTo('inFlight');\n    },\n\n    rolledBack(internalModel) {\n      internalModel.clearErrorMessages();\n      internalModel.transitionTo('loaded.saved');\n      internalModel.triggerLater('ready');\n    },\n\n    becameValid(internalModel) {\n      internalModel.transitionTo('uncommitted');\n    },\n\n    invokeLifecycleCallbacks(internalModel) {\n      internalModel.triggerLater('becameInvalid', internalModel);\n    }\n  }\n};\n\n// The created and updated states are created outside the state\n// chart so we can reopen their substates and add mixins as\n// necessary.\n\nfunction deepClone(object) {\n  var clone = {};\n  var value = void 0;\n\n  for (var prop in object) {\n    value = object[prop];\n    if (value && typeof value === 'object') {\n      clone[prop] = deepClone(value);\n    } else {\n      clone[prop] = value;\n    }\n  }\n\n  return clone;\n}\n\nfunction mixin(original, hash) {\n  for (var prop in hash) {\n    original[prop] = hash[prop];\n  }\n\n  return original;\n}\n\nfunction dirtyState(options) {\n  var newState = deepClone(DirtyState);\n  return mixin(newState, options);\n}\n\nvar createdState = dirtyState({\n  dirtyType: 'created',\n  // FLAGS\n  isNew: true\n});\n\ncreatedState.invalid.rolledBack = function (internalModel) {\n  internalModel.transitionTo('deleted.saved');\n};\n\ncreatedState.uncommitted.rolledBack = function (internalModel) {\n  internalModel.transitionTo('deleted.saved');\n};\n\nvar updatedState = dirtyState({\n  dirtyType: 'updated'\n});\n\nfunction createdStateDeleteRecord(internalModel) {\n  internalModel.transitionTo('deleted.saved');\n  internalModel.send('invokeLifecycleCallbacks');\n}\n\ncreatedState.uncommitted.deleteRecord = createdStateDeleteRecord;\n\ncreatedState.invalid.deleteRecord = createdStateDeleteRecord;\n\ncreatedState.uncommitted.rollback = function (internalModel) {\n  DirtyState.uncommitted.rollback.apply(this, arguments);\n  internalModel.transitionTo('deleted.saved');\n};\n\ncreatedState.uncommitted.pushedData = function (internalModel) {\n  internalModel.transitionTo('loaded.updated.uncommitted');\n  internalModel.triggerLater('didLoad');\n};\n\ncreatedState.uncommitted.propertyWasReset = function () {};\n\nfunction assertAgainstUnloadRecord(internalModel) {\n  (true && !(false) && Ember.assert(\"You can only unload a record which is not inFlight. `\" + internalModel + \"`\", false));\n}\n\nupdatedState.invalid.becameValid = function (internalModel) {\n  // we're eagerly transition into the loaded.saved state, even though we could\n  // be still dirty; but the setup hook of the loaded.saved state checks for\n  // dirty attributes and transitions into the corresponding dirty state\n  internalModel.transitionTo('loaded.saved');\n};\n\nupdatedState.inFlight.unloadRecord = assertAgainstUnloadRecord;\n\nupdatedState.uncommitted.deleteRecord = function (internalModel) {\n  internalModel.transitionTo('deleted.uncommitted');\n};\n\nvar RootState = {\n  // FLAGS\n  isEmpty: false,\n  isLoading: false,\n  isLoaded: false,\n  isDirty: false,\n  isSaving: false,\n  isDeleted: false,\n  isNew: false,\n  isValid: true,\n\n  // DEFAULT EVENTS\n\n  // Trying to roll back if you're not in the dirty state\n  // doesn't change your state. For example, if you're in the\n  // in-flight state, rolling back the record doesn't move\n  // you out of the in-flight state.\n  rolledBack() {},\n  unloadRecord(internalModel) {},\n\n  propertyWasReset() {},\n\n  // SUBSTATES\n\n  // A record begins its lifecycle in the `empty` state.\n  // If its data will come from the adapter, it will\n  // transition into the `loading` state. Otherwise, if\n  // the record is being created on the client, it will\n  // transition into the `created` state.\n  empty: {\n    isEmpty: true,\n\n    // EVENTS\n    loadingData(internalModel, promise) {\n      internalModel._loadingPromise = promise;\n      internalModel.transitionTo('loading');\n    },\n\n    loadedData(internalModel) {\n      internalModel.transitionTo('loaded.created.uncommitted');\n      internalModel.triggerLater('ready');\n    },\n\n    pushedData(internalModel) {\n      internalModel.transitionTo('loaded.saved');\n      internalModel.triggerLater('didLoad');\n      internalModel.triggerLater('ready');\n    }\n  },\n\n  // A record enters this state when the store asks\n  // the adapter for its data. It remains in this state\n  // until the adapter provides the requested data.\n  //\n  // Usually, this process is asynchronous, using an\n  // XHR to retrieve the data.\n  loading: {\n    // FLAGS\n    isLoading: true,\n\n    exit(internalModel) {\n      internalModel._loadingPromise = null;\n    },\n\n    // EVENTS\n    pushedData(internalModel) {\n      internalModel.transitionTo('loaded.saved');\n      internalModel.triggerLater('didLoad');\n      internalModel.triggerLater('ready');\n      //TODO this seems out of place here\n      internalModel.didCleanError();\n    },\n\n    becameError(internalModel) {\n      internalModel.triggerLater('becameError', internalModel);\n    },\n\n    notFound(internalModel) {\n      internalModel.transitionTo('empty');\n    }\n  },\n\n  // A record enters this state when its data is populated.\n  // Most of a record's lifecycle is spent inside substates\n  // of the `loaded` state.\n  loaded: {\n    initialState: 'saved',\n\n    // FLAGS\n    isLoaded: true,\n\n    //TODO(Igor) Reloading now triggers a loadingData event,\n    //but it should be ok?\n    loadingData() {},\n\n    // SUBSTATES\n\n    // If there are no local changes to a record, it remains\n    // in the `saved` state.\n    saved: {\n      setup(internalModel) {\n        if (internalModel.hasChangedAttributes()) {\n          internalModel.adapterDidDirty();\n        }\n      },\n\n      // EVENTS\n      didSetProperty,\n\n      pushedData() {},\n\n      becomeDirty(internalModel) {\n        internalModel.transitionTo('updated.uncommitted');\n      },\n\n      willCommit(internalModel) {\n        internalModel.transitionTo('updated.inFlight');\n      },\n\n      reloadRecord(internalModel, resolve) {\n        resolve(internalModel.store._reloadRecord(internalModel));\n      },\n\n      deleteRecord(internalModel) {\n        internalModel.transitionTo('deleted.uncommitted');\n      },\n\n      unloadRecord(internalModel) {},\n\n      didCommit() {},\n\n      // loaded.saved.notFound would be triggered by a failed\n      // `reload()` on an unchanged record\n      notFound() {}\n    },\n\n    // A record is in this state after it has been locally\n    // created but before the adapter has indicated that\n    // it has been saved.\n    created: createdState,\n\n    // A record is in this state if it has already been\n    // saved to the server, but there are new local changes\n    // that have not yet been saved.\n    updated: updatedState\n  },\n\n  // A record is in this state if it was deleted from the store.\n  deleted: {\n    initialState: 'uncommitted',\n    dirtyType: 'deleted',\n\n    // FLAGS\n    isDeleted: true,\n    isLoaded: true,\n    isDirty: true,\n\n    // TRANSITIONS\n    setup(internalModel) {\n      internalModel.updateRecordArrays();\n    },\n\n    // SUBSTATES\n\n    // When a record is deleted, it enters the `start`\n    // state. It will exit this state when the record\n    // starts to commit.\n    uncommitted: {\n\n      // EVENTS\n\n      willCommit(internalModel) {\n        internalModel.transitionTo('inFlight');\n      },\n\n      rollback(internalModel) {\n        internalModel.rollbackAttributes();\n        internalModel.triggerLater('ready');\n      },\n\n      pushedData() {},\n      becomeDirty() {},\n      deleteRecord() {},\n\n      rolledBack(internalModel) {\n        internalModel.transitionTo('loaded.saved');\n        internalModel.triggerLater('ready');\n      }\n    },\n\n    // After a record starts committing, but\n    // before the adapter indicates that the deletion\n    // has saved to the server, a record is in the\n    // `inFlight` substate of `deleted`.\n    inFlight: {\n      // FLAGS\n      isSaving: true,\n\n      // EVENTS\n\n      unloadRecord: assertAgainstUnloadRecord,\n\n      // TODO: More robust semantics around save-while-in-flight\n      willCommit() {},\n      didCommit(internalModel) {\n        internalModel.transitionTo('saved');\n\n        internalModel.send('invokeLifecycleCallbacks');\n      },\n\n      becameError(internalModel) {\n        internalModel.transitionTo('uncommitted');\n        internalModel.triggerLater('becameError', internalModel);\n      },\n\n      becameInvalid(internalModel) {\n        internalModel.transitionTo('invalid');\n        internalModel.triggerLater('becameInvalid', internalModel);\n      }\n    },\n\n    // Once the adapter indicates that the deletion has\n    // been saved, the record enters the `saved` substate\n    // of `deleted`.\n    saved: {\n      // FLAGS\n      isDirty: false,\n\n      setup(internalModel) {\n        internalModel.removeFromInverseRelationships();\n      },\n\n      invokeLifecycleCallbacks(internalModel) {\n        internalModel.triggerLater('didDelete', internalModel);\n        internalModel.triggerLater('didCommit', internalModel);\n      },\n\n      willCommit() {},\n      didCommit() {}\n    },\n\n    invalid: {\n      isValid: false,\n\n      didSetProperty(internalModel, context) {\n        internalModel.removeErrorMessageFromAttribute(context.name);\n\n        didSetProperty(internalModel, context);\n\n        if (!internalModel.hasErrors()) {\n          this.becameValid(internalModel);\n        }\n      },\n\n      becameInvalid() {},\n      becomeDirty() {},\n      deleteRecord() {},\n      willCommit() {},\n\n      rolledBack(internalModel) {\n        internalModel.clearErrorMessages();\n        internalModel.transitionTo('loaded.saved');\n        internalModel.triggerLater('ready');\n      },\n\n      becameValid(internalModel) {\n        internalModel.transitionTo('uncommitted');\n      }\n\n    }\n  },\n\n  invokeLifecycleCallbacks(internalModel, dirtyType) {\n    if (dirtyType === 'created') {\n      internalModel.triggerLater('didCreate', internalModel);\n    } else {\n      internalModel.triggerLater('didUpdate', internalModel);\n    }\n\n    internalModel.triggerLater('didCommit', internalModel);\n  }\n};\n\nfunction wireState(object, parent, name) {\n  // TODO: Use Object.create and copy instead\n  object = mixin(parent ? Object.create(parent) : {}, object);\n  object.parentState = parent;\n  object.stateName = name;\n\n  for (var prop in object) {\n    if (!object.hasOwnProperty(prop) || prop === 'parentState' || prop === 'stateName') {\n      continue;\n    }\n    if (typeof object[prop] === 'object') {\n      object[prop] = wireState(object[prop], object, name + '.' + prop);\n    }\n  }\n\n  return object;\n}\n\nvar RootState$1 = wireState(RootState, null, 'root');\n\n// All modelNames are dasherized internally. Changing this function may\n// require changes to other normalization hooks (such as typeForRoot).\n\n/**\n This method normalizes a modelName into the format Ember Data uses\n internally.\n\n  @method normalizeModelName\n  @public\n  @param {String} modelName\n  @return {String} normalizedModelName\n  @for DS\n*/\nfunction normalizeModelName(modelName) {\n  return Ember.String.dasherize(modelName);\n}\n\nfunction typeForRelationshipMeta(meta) {\n  var modelName = void 0;\n\n  modelName = meta.type || meta.key;\n  if (meta.kind === 'hasMany') {\n    modelName = emberInflector.singularize(normalizeModelName(modelName));\n  }\n  return modelName;\n}\n\nfunction relationshipFromMeta(meta) {\n  return {\n    key: meta.key,\n    kind: meta.kind,\n    type: typeForRelationshipMeta(meta),\n    options: meta.options,\n    name: meta.name,\n    parentType: meta.parentType,\n    isRelationship: true\n  };\n}\n\nvar relationshipsDescriptor = Ember.computed(function () {\n  var map = new Ember.MapWithDefault({\n    defaultValue() {\n      return [];\n    }\n  });\n\n  // Loop through each computed property on the class\n  this.eachComputedProperty((name, meta) => {\n    // If the computed property is a relationship, add\n    // it to the map.\n    if (meta.isRelationship) {\n      meta.key = name;\n      var relationshipsForType = map.get(typeForRelationshipMeta(meta));\n\n      relationshipsForType.push({\n        name: name,\n        kind: meta.kind\n      });\n    }\n  });\n\n  return map;\n}).readOnly();\n\nvar relatedTypesDescriptor = Ember.computed(function () {\n  var modelName = void 0;\n  var types = Ember.A();\n\n  // Loop through each computed property on the class,\n  // and create an array of the unique types involved\n  // in relationships\n  this.eachComputedProperty((name, meta) => {\n    if (meta.isRelationship) {\n      meta.key = name;\n      modelName = typeForRelationshipMeta(meta);\n\n      (true && !(modelName) && Ember.assert(`You specified a hasMany (${meta.type}) on ${meta.parentType} but ${meta.type} was not found.`, modelName));\n\n\n      if (!types.includes(modelName)) {\n        (true && !(!!modelName) && Ember.assert(`Trying to sideload ${name} on ${this.toString()} but the type doesn't exist.`, !!modelName));\n\n        types.push(modelName);\n      }\n    }\n  });\n\n  return types;\n}).readOnly();\n\nvar relationshipsByNameDescriptor = Ember.computed(function () {\n  var map = Ember.Map.create();\n\n  this.eachComputedProperty((name, meta) => {\n    if (meta.isRelationship) {\n      meta.key = name;\n      var relationship = relationshipFromMeta(meta);\n      relationship.type = typeForRelationshipMeta(meta);\n      map.set(name, relationship);\n    }\n  });\n\n  return map;\n}).readOnly();\n\n/**\n  @module ember-data\n*/\n\nfunction findPossibleInverses(type, inverseType, name, relationshipsSoFar) {\n  var possibleRelationships = relationshipsSoFar || [];\n\n  var relationshipMap = Ember.get(inverseType, 'relationships');\n  if (!relationshipMap) {\n    return possibleRelationships;\n  }\n\n  var relationships = relationshipMap.get(type.modelName).filter(relationship => {\n    var optionsForRelationship = inverseType.metaForProperty(relationship.name).options;\n\n    if (!optionsForRelationship.inverse && optionsForRelationship.inverse !== null) {\n      return true;\n    }\n\n    return name === optionsForRelationship.inverse;\n  });\n\n  if (relationships) {\n    possibleRelationships.push.apply(possibleRelationships, relationships);\n  }\n\n  //Recurse to support polymorphism\n  if (type.superclass) {\n    findPossibleInverses(type.superclass, inverseType, name, possibleRelationships);\n  }\n\n  return possibleRelationships;\n}\n\nfunction intersection(array1, array2) {\n  var result = [];\n  array1.forEach(element => {\n    if (array2.indexOf(element) >= 0) {\n      result.push(element);\n    }\n  });\n\n  return result;\n}\n\nvar RESERVED_MODEL_PROPS = ['currentState', 'data', 'store'];\n\nvar retrieveFromCurrentState = Ember.computed('currentState', function (key) {\n  return Ember.get(this._internalModel.currentState, key);\n}).readOnly();\n\n/**\n\n  The model class that all Ember Data records descend from.\n  This is the public API of Ember Data models. If you are using Ember Data\n  in your application, this is the class you should use.\n  If you are working on Ember Data internals, you most likely want to be dealing\n  with `InternalModel`\n\n  @class Model\n  @namespace DS\n  @extends Ember.Object\n  @uses Ember.Evented\n*/\nvar Model = Ember.Object.extend(Ember.Evented, {\n  _internalModel: null,\n  store: null,\n  __defineNonEnumerable(property) {\n    this[property.name] = property.descriptor.value;\n  },\n\n  /**\n    If this property is `true` the record is in the `empty`\n    state. Empty is the first state all records enter after they have\n    been created. Most records created by the store will quickly\n    transition to the `loading` state if data needs to be fetched from\n    the server or the `created` state if the record is created on the\n    client. A record can also enter the empty state if the adapter is\n    unable to locate the record.\n     @property isEmpty\n    @type {Boolean}\n    @readOnly\n  */\n  isEmpty: retrieveFromCurrentState,\n  /**\n    If this property is `true` the record is in the `loading` state. A\n    record enters this state when the store asks the adapter for its\n    data. It remains in this state until the adapter provides the\n    requested data.\n     @property isLoading\n    @type {Boolean}\n    @readOnly\n  */\n  isLoading: retrieveFromCurrentState,\n  /**\n    If this property is `true` the record is in the `loaded` state. A\n    record enters this state when its data is populated. Most of a\n    record's lifecycle is spent inside substates of the `loaded`\n    state.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.get('isLoaded'); // true\n     store.findRecord('model', 1).then(function(model) {\n      model.get('isLoaded'); // true\n    });\n    ```\n     @property isLoaded\n    @type {Boolean}\n    @readOnly\n  */\n  isLoaded: retrieveFromCurrentState,\n  /**\n    If this property is `true` the record is in the `dirty` state. The\n    record has local changes that have not yet been saved by the\n    adapter. This includes records that have been created (but not yet\n    saved) or deleted.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.get('hasDirtyAttributes'); // true\n     store.findRecord('model', 1).then(function(model) {\n      model.get('hasDirtyAttributes'); // false\n      model.set('foo', 'some value');\n      model.get('hasDirtyAttributes'); // true\n    });\n    ```\n     @since 1.13.0\n    @property hasDirtyAttributes\n    @type {Boolean}\n    @readOnly\n  */\n  hasDirtyAttributes: Ember.computed('currentState.isDirty', function () {\n    return this.get('currentState.isDirty');\n  }),\n  /**\n    If this property is `true` the record is in the `saving` state. A\n    record enters the saving state when `save` is called, but the\n    adapter has not yet acknowledged that the changes have been\n    persisted to the backend.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.get('isSaving'); // false\n    let promise = record.save();\n    record.get('isSaving'); // true\n    promise.then(function() {\n      record.get('isSaving'); // false\n    });\n    ```\n     @property isSaving\n    @type {Boolean}\n    @readOnly\n  */\n  isSaving: retrieveFromCurrentState,\n  /**\n    If this property is `true` the record is in the `deleted` state\n    and has been marked for deletion. When `isDeleted` is true and\n    `hasDirtyAttributes` is true, the record is deleted locally but the deletion\n    was not yet persisted. When `isSaving` is true, the change is\n    in-flight. When both `hasDirtyAttributes` and `isSaving` are false, the\n    change has persisted.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.get('isDeleted');    // false\n    record.deleteRecord();\n     // Locally deleted\n    record.get('isDeleted');           // true\n    record.get('hasDirtyAttributes');  // true\n    record.get('isSaving');            // false\n     // Persisting the deletion\n    let promise = record.save();\n    record.get('isDeleted');    // true\n    record.get('isSaving');     // true\n     // Deletion Persisted\n    promise.then(function() {\n      record.get('isDeleted');          // true\n      record.get('isSaving');           // false\n      record.get('hasDirtyAttributes'); // false\n    });\n    ```\n     @property isDeleted\n    @type {Boolean}\n    @readOnly\n  */\n  isDeleted: retrieveFromCurrentState,\n  /**\n    If this property is `true` the record is in the `new` state. A\n    record will be in the `new` state when it has been created on the\n    client and the adapter has not yet report that it was successfully\n    saved.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.get('isNew'); // true\n     record.save().then(function(model) {\n      model.get('isNew'); // false\n    });\n    ```\n     @property isNew\n    @type {Boolean}\n    @readOnly\n  */\n  isNew: retrieveFromCurrentState,\n  /**\n    If this property is `true` the record is in the `valid` state.\n     A record will be in the `valid` state when the adapter did not report any\n    server-side validation failures.\n     @property isValid\n    @type {Boolean}\n    @readOnly\n  */\n  isValid: retrieveFromCurrentState,\n  /**\n    If the record is in the dirty state this property will report what\n    kind of change has caused it to move into the dirty\n    state. Possible values are:\n     - `created` The record has been created by the client and not yet saved to the adapter.\n    - `updated` The record has been updated by the client and not yet saved to the adapter.\n    - `deleted` The record has been deleted by the client and not yet saved to the adapter.\n     Example\n     ```javascript\n    let record = store.createRecord('model');\n    record.get('dirtyType'); // 'created'\n    ```\n     @property dirtyType\n    @type {String}\n    @readOnly\n  */\n  dirtyType: retrieveFromCurrentState,\n\n  /**\n    If `true` the adapter reported that it was unable to save local\n    changes to the backend for any reason other than a server-side\n    validation error.\n     Example\n     ```javascript\n    record.get('isError'); // false\n    record.set('foo', 'valid value');\n    record.save().then(null, function() {\n      record.get('isError'); // true\n    });\n    ```\n     @property isError\n    @type {Boolean}\n    @readOnly\n  */\n  isError: false,\n\n  /**\n    If `true` the store is attempting to reload the record from the adapter.\n     Example\n     ```javascript\n    record.get('isReloading'); // false\n    record.reload();\n    record.get('isReloading'); // true\n    ```\n     @property isReloading\n    @type {Boolean}\n    @readOnly\n  */\n  isReloading: false,\n\n  /**\n    All ember models have an id property. This is an identifier\n    managed by an external source. These are always coerced to be\n    strings before being used internally. Note when declaring the\n    attributes for a model it is an error to declare an id\n    attribute.\n     ```javascript\n    let record = store.createRecord('model');\n    record.get('id'); // null\n     store.findRecord('model', 1).then(function(model) {\n      model.get('id'); // '1'\n    });\n    ```\n     @property id\n    @type {String}\n  */\n  id: null,\n\n  /**\n    @property currentState\n    @private\n    @type {Object}\n  */\n  currentState: RootState$1.empty,\n\n  /**\n    When the record is in the `invalid` state this object will contain\n    any errors returned by the adapter. When present the errors hash\n    contains keys corresponding to the invalid property names\n    and values which are arrays of Javascript objects with two keys:\n     - `message` A string containing the error message from the backend\n    - `attribute` The name of the property associated with this error message\n     ```javascript\n    record.get('errors.length'); // 0\n    record.set('foo', 'invalid value');\n    record.save().catch(function() {\n      record.get('errors').get('foo');\n      // [{message: 'foo should be a number.', attribute: 'foo'}]\n    });\n    ```\n     The `errors` property us useful for displaying error messages to\n    the user.\n     ```handlebars\n    <label>Username: {{input value=username}} </label>\n    {{#each model.errors.username as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    <label>Email: {{input value=email}} </label>\n    {{#each model.errors.email as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    ```\n      You can also access the special `messages` property on the error\n    object to get an array of all the error strings.\n     ```handlebars\n    {{#each model.errors.messages as |message|}}\n      <div class=\"error\">\n        {{message}}\n      </div>\n    {{/each}}\n    ```\n     @property errors\n    @type {DS.Errors}\n  */\n  errors: Ember.computed(function () {\n    var errors = Errors.create();\n\n    errors._registerHandlers(this._internalModel, function () {\n      this.send('becameInvalid');\n    }, function () {\n      this.send('becameValid');\n    });\n    return errors;\n  }).readOnly(),\n\n  /**\n    This property holds the `DS.AdapterError` object with which\n    last adapter operation was rejected.\n     @property adapterError\n    @type {DS.AdapterError}\n  */\n  adapterError: null,\n\n  /**\n    Create a JSON representation of the record, using the serialization\n    strategy of the store's adapter.\n    `serialize` takes an optional hash as a parameter, currently\n    supported options are:\n    - `includeId`: `true` if the record's ID should be included in the\n      JSON representation.\n     @method serialize\n    @param {Object} options\n    @return {Object} an object whose values are primitive JSON values only\n  */\n  serialize(options) {\n    return this._internalModel.createSnapshot().serialize(options);\n  },\n\n  /**\n    Use [DS.JSONSerializer](DS.JSONSerializer.html) to\n    get the JSON representation of a record.\n     `toJSON` takes an optional hash as a parameter, currently\n    supported options are:\n     - `includeId`: `true` if the record's ID should be included in the\n      JSON representation.\n     @method toJSON\n    @param {Object} options\n    @return {Object} A JSON representation of the object.\n  */\n  toJSON(options) {\n    // container is for lazy transform lookups\n    var serializer = this.store.serializerFor('-default');\n    var snapshot = this._internalModel.createSnapshot();\n\n    return serializer.serialize(snapshot, options);\n  },\n\n  /**\n    Fired when the record is ready to be interacted with,\n    that is either loaded from the server or created locally.\n     @event ready\n  */\n  ready: null,\n\n  /**\n    Fired when the record is loaded from the server.\n     @event didLoad\n  */\n  didLoad: null,\n\n  /**\n    Fired when the record is updated.\n     @event didUpdate\n  */\n  didUpdate: null,\n\n  /**\n    Fired when a new record is commited to the server.\n     @event didCreate\n  */\n  didCreate: null,\n\n  /**\n    Fired when the record is deleted.\n     @event didDelete\n  */\n  didDelete: null,\n\n  /**\n    Fired when the record becomes invalid.\n     @event becameInvalid\n  */\n  becameInvalid: null,\n\n  /**\n    Fired when the record enters the error state.\n     @event becameError\n  */\n  becameError: null,\n\n  /**\n    Fired when the record is rolled back.\n     @event rolledBack\n  */\n  rolledBack: null,\n\n  //TODO Do we want to deprecate these?\n  /**\n    @method send\n    @private\n    @param {String} name\n    @param {Object} context\n  */\n  send(name, context) {\n    return this._internalModel.send(name, context);\n  },\n\n  /**\n    @method transitionTo\n    @private\n    @param {String} name\n  */\n  transitionTo(name) {\n    return this._internalModel.transitionTo(name);\n  },\n\n  /**\n    Marks the record as deleted but does not save it. You must call\n    `save` afterwards if you want to persist it. You might use this\n    method if you want to allow the user to still `rollbackAttributes()`\n    after a delete was made.\n     Example\n     ```app/routes/model/delete.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      actions: {\n        softDelete() {\n          this.get('controller.model').deleteRecord();\n        },\n        confirm() {\n          this.get('controller.model').save();\n        },\n        undo() {\n          this.get('controller.model').rollbackAttributes();\n        }\n      }\n    });\n    ```\n     @method deleteRecord\n  */\n  deleteRecord() {\n    this._internalModel.deleteRecord();\n  },\n\n  /**\n    Same as `deleteRecord`, but saves the record immediately.\n     Example\n     ```app/routes/model/delete.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      actions: {\n        delete() {\n          this.get('controller.model').destroyRecord().then(function() {\n            controller.transitionToRoute('model.index');\n          });\n        }\n      }\n    });\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to your adapter via the snapshot\n     ```js\n    record.destroyRecord({ adapterOptions: { subscribe: false } });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default MyCustomAdapter.extend({\n      deleteRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    });\n    ```\n     @method destroyRecord\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  */\n  destroyRecord(options) {\n    this.deleteRecord();\n    return this.save(options);\n  },\n\n  /**\n    Unloads the record from the store. This will cause the record to be destroyed and freed up for garbage collection.\n     @method unloadRecord\n  */\n  unloadRecord() {\n    if (this.isDestroyed) {\n      return;\n    }\n    this._internalModel.unloadRecord();\n  },\n\n  /**\n    @method _notifyProperties\n    @private\n  */\n  _notifyProperties(keys) {\n    Ember.beginPropertyChanges();\n    var key = void 0;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      this.notifyPropertyChange(key);\n    }\n    Ember.endPropertyChanges();\n  },\n\n  /**\n    Returns an object, whose keys are changed properties, and value is\n    an [oldProp, newProp] array.\n     The array represents the diff of the canonical state with the local state\n    of the model. Note: if the model is created locally, the canonical state is\n    empty since the adapter hasn't acknowledged the attributes yet:\n     Example\n     ```app/models/mascot.js\n    import DS from 'ember-data';\n     export default DS.Model.extend({\n      name: DS.attr('string'),\n      isAdmin: DS.attr('boolean', {\n        defaultValue: false\n      })\n    });\n    ```\n     ```javascript\n    let mascot = store.createRecord('mascot');\n     mascot.changedAttributes(); // {}\n     mascot.set('name', 'Tomster');\n    mascot.changedAttributes(); // { name: [undefined, 'Tomster'] }\n     mascot.set('isAdmin', true);\n    mascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }\n     mascot.save().then(function() {\n      mascot.changedAttributes(); // {}\n       mascot.set('isAdmin', false);\n      mascot.changedAttributes(); // { isAdmin: [true, false] }\n    });\n    ```\n     @method changedAttributes\n    @return {Object} an object, whose keys are changed properties,\n      and value is an [oldProp, newProp] array.\n  */\n  changedAttributes() {\n    return this._internalModel.changedAttributes();\n  },\n\n  //TODO discuss with tomhuda about events/hooks\n  //Bring back as hooks?\n  /**\n    @method adapterWillCommit\n    @private\n  adapterWillCommit: function() {\n    this.send('willCommit');\n  },\n   /**\n    @method adapterDidDirty\n    @private\n  adapterDidDirty: function() {\n    this.send('becomeDirty');\n    this.updateRecordArraysLater();\n  },\n  */\n\n  /**\n    If the model `hasDirtyAttributes` this function will discard any unsaved\n    changes. If the model `isNew` it will be removed from the store.\n     Example\n     ```javascript\n    record.get('name'); // 'Untitled Document'\n    record.set('name', 'Doc 1');\n    record.get('name'); // 'Doc 1'\n    record.rollbackAttributes();\n    record.get('name'); // 'Untitled Document'\n    ```\n     @since 1.13.0\n    @method rollbackAttributes\n  */\n  rollbackAttributes() {\n    this._internalModel.rollbackAttributes();\n  },\n\n  /*\n    @method _createSnapshot\n    @private\n  */\n  _createSnapshot() {\n    return this._internalModel.createSnapshot();\n  },\n\n  toStringExtension() {\n    return Ember.get(this, 'id');\n  },\n\n  /**\n    Save the record and persist any changes to the record to an\n    external source via the adapter.\n     Example\n     ```javascript\n    record.set('name', 'Tomster');\n    record.save().then(function() {\n      // Success callback\n    }, function() {\n      // Error callback\n    });\n    ```\n    If you pass an object using the `adapterOptions` property of the options\n   argument it will be passed to your adapter via the snapshot.\n     ```js\n    record.save({ adapterOptions: { subscribe: false } });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default MyCustomAdapter.extend({\n      updateRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    });\n    ```\n     @method save\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  */\n  save(options) {\n    return PromiseObject.create({\n      promise: this._internalModel.save(options).then(() => this)\n    });\n  },\n\n  /**\n    Reload the record from the adapter.\n     This will only work if the record has already finished loading.\n     Example\n     ```app/routes/model/view.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      actions: {\n        reload() {\n          this.controller.get('model').reload().then(function(model) {\n            // do something with the reloaded model\n          });\n        }\n      }\n    });\n    ```\n     @method reload\n    @return {Promise} a promise that will be resolved with the record when the\n    adapter returns successfully or rejected if the adapter returns\n    with an error.\n  */\n  reload() {\n    return PromiseObject.create({\n      promise: this._internalModel.reload().then(() => this)\n    });\n  },\n\n  /**\n    Override the default event firing from Ember.Evented to\n    also call methods with the given name.\n     @method trigger\n    @private\n    @param {String} name\n  */\n  trigger(name) {\n    var fn = this[name];\n\n    if (typeof fn === 'function') {\n      var length = arguments.length;\n      var args = new Array(length - 1);\n\n      for (var i = 1; i < length; i++) {\n        args[i - 1] = arguments[i];\n      }\n      fn.apply(this, args);\n    }\n\n    this._super(...arguments);\n  },\n\n  attr() {\n    (true && !(false) && Ember.assert(\"The `attr` method is not available on DS.Model, a DS.Snapshot was probably expected. Are you passing a DS.Model instead of a DS.Snapshot to your serializer?\", false));\n  },\n\n  /**\n    Get the reference for the specified belongsTo relationship.\n     Example\n     ```app/models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n    ```\n     ```javascript\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n     // check if the user relationship is loaded\n    let isLoaded = userRef.value() !== null;\n     // get the record of the reference (null if not yet available)\n    let user = userRef.value();\n     // get the identifier of the reference\n    if (userRef.remoteType() === \"id\") {\n      let id = userRef.id();\n    } else if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n     // load user (via store.findRecord or store.findBelongsTo)\n    userRef.load().then(...)\n     // or trigger a reload\n    userRef.reload().then(...)\n     // provide data for reference\n    userRef.push({\n      type: 'user',\n      id: 1,\n      attributes: {\n        username: \"@user\"\n      }\n    }).then(function(user) {\n      userRef.value() === user;\n    });\n    ```\n     @method belongsTo\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {BelongsToReference} reference for this relationship\n  */\n  belongsTo(name) {\n    return this._internalModel.referenceFor('belongsTo', name);\n  },\n\n  /**\n    Get the reference for the specified hasMany relationship.\n     Example\n     ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      comments: DS.hasMany({ async: true })\n    });\n     let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          comments: {\n            data: [\n              { type: 'comment', id: 1 },\n              { type: 'comment', id: 2 }\n            ]\n          }\n        }\n      }\n    });\n    let commentsRef = blog.hasMany('comments');\n     // check if the comments are loaded already\n    let isLoaded = commentsRef.value() !== null;\n     // get the records of the reference (null if not yet available)\n    let comments = commentsRef.value();\n     // get the identifier of the reference\n    if (commentsRef.remoteType() === \"ids\") {\n      let ids = commentsRef.ids();\n    } else if (commentsRef.remoteType() === \"link\") {\n      let link = commentsRef.link();\n    }\n     // load comments (via store.findMany or store.findHasMany)\n    commentsRef.load().then(...)\n     // or trigger a reload\n    commentsRef.reload().then(...)\n     // provide data for reference\n    commentsRef.push([{ type: 'comment', id: 1 }, { type: 'comment', id: 2 }]).then(function(comments) {\n      commentsRef.value() === comments;\n    });\n    ```\n     @method hasMany\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {HasManyReference} reference for this relationship\n  */\n  hasMany(name) {\n    return this._internalModel.referenceFor('hasMany', name);\n  },\n\n  setId: Ember.observer('id', function () {\n    this._internalModel.setId(this.get('id'));\n  }),\n\n  /**\n   Provides info about the model for debugging purposes\n   by grouping the properties into more semantic groups.\n    Meant to be used by debugging tools such as the Chrome Ember Extension.\n    - Groups all attributes in \"Attributes\" group.\n   - Groups all belongsTo relationships in \"Belongs To\" group.\n   - Groups all hasMany relationships in \"Has Many\" group.\n   - Groups all flags in \"Flags\" group.\n   - Flags relationship CPs as expensive properties.\n    @method _debugInfo\n   @for DS.Model\n   @private\n   */\n  _debugInfo() {\n    var attributes = ['id'];\n    var relationships = {};\n    var expensiveProperties = [];\n\n    this.eachAttribute((name, meta) => attributes.push(name));\n\n    var groups = [{\n      name: 'Attributes',\n      properties: attributes,\n      expand: true\n    }];\n\n    this.eachRelationship((name, relationship) => {\n      var properties = relationships[relationship.kind];\n\n      if (properties === undefined) {\n        properties = relationships[relationship.kind] = [];\n        groups.push({\n          name: relationship.name,\n          properties,\n          expand: true\n        });\n      }\n      properties.push(name);\n      expensiveProperties.push(name);\n    });\n\n    groups.push({\n      name: 'Flags',\n      properties: ['isLoaded', 'hasDirtyAttributes', 'isSaving', 'isDeleted', 'isError', 'isNew', 'isValid']\n    });\n\n    return {\n      propertyInfo: {\n        // include all other mixins / properties (not just the grouped ones)\n        includeOtherProperties: true,\n        groups: groups,\n        // don't pre-calculate unless cached\n        expensiveProperties: expensiveProperties\n      }\n    };\n  },\n\n  notifyBelongsToChanged(key) {\n    this.notifyPropertyChange(key);\n  },\n  /**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n     The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, descriptor);\n   ```\n    - `name` the name of the current property in the iteration\n   - `descriptor` the meta object that describes this relationship\n    The relationship descriptor argument is an object with the following properties.\n    - **key** <span class=\"type\">String</span> the name of this relationship on the Model\n   - **kind** <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"\n   - **options** <span class=\"type\">Object</span> the original options hash passed when the relationship was declared\n   - **parentType** <span class=\"type\">DS.Model</span> the type of the Model that owns this relationship\n   - **type** <span class=\"type\">String</span> the type name of the related Model\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```app/serializers/application.js\n   import DS from 'ember-data';\n    export default DS.JSONSerializer.extend({\n    serialize: function(record, options) {\n      let json = {};\n       record.eachRelationship(function(name, descriptor) {\n        if (descriptor.kind === 'hasMany') {\n          let serializedHasManyName = name.toUpperCase() + '_IDS';\n          json[serializedHasManyName] = record.get(name).mapBy('id');\n        }\n      });\n       return json;\n    }\n  });\n   ```\n    @method eachRelationship\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  eachRelationship(callback, binding) {\n    this.constructor.eachRelationship(callback, binding);\n  },\n\n  relationshipFor(name) {\n    return Ember.get(this.constructor, 'relationshipsByName').get(name);\n  },\n\n  inverseFor(key) {\n    return this.constructor.inverseFor(key, this.store);\n  },\n\n  notifyHasManyAdded(key) {\n    //We need to notifyPropertyChange in the adding case because we need to make sure\n    //we fetch the newly added record in case it is unloaded\n    //TODO(Igor): Consider whether we could do this only if the record state is unloaded\n\n    //Goes away once hasMany is double promisified\n    this.notifyPropertyChange(key);\n  },\n\n  eachAttribute(callback, binding) {\n    this.constructor.eachAttribute(callback, binding);\n  }\n});\n\n/**\n @property data\n @private\n @type {Object}\n */\nObject.defineProperty(Model.prototype, 'data', {\n  get() {\n    return this._internalModel._data;\n  }\n});\n\n{\n  Model.reopen({\n    init() {\n      this._super(...arguments);\n\n      if (!this._internalModel) {\n        throw new Ember.Error('You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.');\n      }\n    }\n  });\n}\n\nModel.reopenClass({\n  isModel: true,\n\n  /**\n    Override the class' `create()` method to raise an error. This\n    prevents end users from inadvertently calling `create()` instead\n    of `createRecord()`. The store is still able to create instances\n    by calling the `_create()` method. To create an instance of a\n    `DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).\n     @method create\n    @private\n    @static\n  */\n  /**\n   Represents the model's class name as a string. This can be used to look up the model's class name through\n   `DS.Store`'s modelFor method.\n    `modelName` is generated for you by Ember Data. It will be a lowercased, dasherized string.\n   For example:\n    ```javascript\n   store.modelFor('post').modelName; // 'post'\n   store.modelFor('blog-post').modelName; // 'blog-post'\n   ```\n    The most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload\n   keys to underscore (instead of dasherized), you might use the following code:\n    ```javascript\n   import { underscore } from '@ember/string';\n    export default const PostSerializer = DS.RESTSerializer.extend({\n     payloadKeyFromModelName(modelName) {\n       return underscore(modelName);\n     }\n   });\n   ```\n   @property modelName\n   @type String\n   @readonly\n   @static\n  */\n  modelName: null,\n\n  /*\n   These class methods below provide relationship\n   introspection abilities about relationships.\n    A note about the computed properties contained here:\n    **These properties are effectively sealed once called for the first time.**\n   To avoid repeatedly doing expensive iteration over a model's fields, these\n   values are computed once and then cached for the remainder of the runtime of\n   your application.\n    If your application needs to modify a class after its initial definition\n   (for example, using `reopen()` to add additional attributes), make sure you\n   do it before using your model with the store, which uses these properties\n   extensively.\n   */\n\n  /**\n   For a given relationship name, returns the model type of the relationship.\n    For example, if you define a model like this:\n    ```app/models/post.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      comments: DS.hasMany('comment')\n    });\n   ```\n    Calling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.\n    @method typeForRelationship\n   @static\n   @param {String} name the name of the relationship\n   @param {store} store an instance of DS.Store\n   @return {DS.Model} the type of the relationship, or undefined\n   */\n  typeForRelationship(name, store) {\n    var relationship = Ember.get(this, 'relationshipsByName').get(name);\n    return relationship && store.modelFor(relationship.type);\n  },\n\n  inverseMap: Ember.computed(function () {\n    return Object.create(null);\n  }),\n\n  /**\n   Find the relationship which is the inverse of the one asked for.\n    For example, if you define models like this:\n    ```app/models/post.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      comments: DS.hasMany('message')\n    });\n   ```\n    ```app/models/message.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      owner: DS.belongsTo('post')\n    });\n   ```\n    ``` js\n   store.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }\n   store.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }\n   ```\n    @method inverseFor\n   @static\n   @param {String} name the name of the relationship\n   @param {DS.Store} store\n   @return {Object} the inverse relationship, or null\n   */\n  inverseFor(name, store) {\n    var inverseMap = Ember.get(this, 'inverseMap');\n    if (inverseMap[name] !== undefined) {\n      return inverseMap[name];\n    } else {\n      var relationship = Ember.get(this, 'relationshipsByName').get(name);\n      if (!relationship) {\n        inverseMap[name] = null;\n        return null;\n      }\n\n      var options = relationship.options;\n      if (options && options.inverse === null) {\n        // populate the cache with a miss entry so we can skip getting and going\n        // through `relationshipsByName`\n        inverseMap[name] = null;\n        return null;\n      }\n\n      return inverseMap[name] = this._findInverseFor(name, store);\n    }\n  },\n\n  //Calculate the inverse, ignoring the cache\n  _findInverseFor(name, store) {\n\n    var inverseType = this.typeForRelationship(name, store);\n    if (!inverseType) {\n      return null;\n    }\n\n    var propertyMeta = this.metaForProperty(name);\n    //If inverse is manually specified to be null, like  `comments: DS.hasMany('message', { inverse: null })`\n    var options = propertyMeta.options;\n    if (options.inverse === null) {\n      return null;\n    }\n\n    var inverseName = void 0,\n        inverseKind = void 0,\n        inverse = void 0;\n\n    //If inverse is specified manually, return the inverse\n    if (options.inverse) {\n      inverseName = options.inverse;\n      inverse = Ember.get(inverseType, 'relationshipsByName').get(inverseName);\n\n      (true && !(!Ember.isNone(inverse)) && Ember.assert(\"We found no inverse relationships by the name of '\" + inverseName + \"' on the '\" + inverseType.modelName + \"' model. This is most likely due to a missing attribute on your model definition.\", !Ember.isNone(inverse)));\n\n\n      inverseKind = inverse.kind;\n    } else {\n      //No inverse was specified manually, we need to use a heuristic to guess one\n      if (propertyMeta.parentType && propertyMeta.type === propertyMeta.parentType.modelName) {\n        (true && Ember.warn(`Detected a reflexive relationship by the name of '${name}' without an inverse option. Look at https://guides.emberjs.com/current/models/relationships/#toc_reflexive-relations for how to explicitly specify inverses.`, false, {\n          id: 'ds.model.reflexive-relationship-without-inverse'\n        }));\n      }\n\n      var possibleRelationships = findPossibleInverses(this, inverseType, name);\n\n      if (possibleRelationships.length === 0) {\n        return null;\n      }\n\n      var filteredRelationships = possibleRelationships.filter(possibleRelationship => {\n        var optionsForRelationship = inverseType.metaForProperty(possibleRelationship.name).options;\n        return name === optionsForRelationship.inverse;\n      });\n\n      (true && !(filteredRelationships.length < 2) && Ember.assert(\"You defined the '\" + name + \"' relationship on \" + this + \", but you defined the inverse relationships of type \" + inverseType.toString() + \" multiple times. Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses\", filteredRelationships.length < 2));\n\n\n      if (filteredRelationships.length === 1) {\n        possibleRelationships = filteredRelationships;\n      }\n\n      (true && !(possibleRelationships.length === 1) && Ember.assert(\"You defined the '\" + name + \"' relationship on \" + this + \", but multiple possible inverse relationships of type \" + this + \" were found on \" + inverseType + \". Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses\", possibleRelationships.length === 1));\n\n\n      inverseName = possibleRelationships[0].name;\n      inverseKind = possibleRelationships[0].kind;\n    }\n\n    return {\n      type: inverseType,\n      name: inverseName,\n      kind: inverseKind\n    };\n  },\n\n  /**\n   The model's relationships as a map, keyed on the type of the\n   relationship. The value of each entry is an array containing a descriptor\n   for each relationship with that type, describing the name of the relationship\n   as well as the type.\n    For example, given the following model definition:\n    ```app/models/blog.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      users: DS.hasMany('user'),\n      owner: DS.belongsTo('user'),\n      posts: DS.hasMany('post')\n    });\n   ```\n    This computed property would return a map describing these\n   relationships, like this:\n    ```javascript\n   import Ember from 'ember';\n   import Blog from 'app/models/blog';\n   import User from 'app/models/user';\n   import Post from 'app/models/post';\n    let relationships = Ember.get(Blog, 'relationships');\n   relationships.get(User);\n   //=> [ { name: 'users', kind: 'hasMany' },\n   //     { name: 'owner', kind: 'belongsTo' } ]\n   relationships.get(Post);\n   //=> [ { name: 'posts', kind: 'hasMany' } ]\n   ```\n    @property relationships\n   @static\n   @type Ember.Map\n   @readOnly\n   */\n\n  relationships: relationshipsDescriptor,\n\n  /**\n   A hash containing lists of the model's relationships, grouped\n   by the relationship kind. For example, given a model with this\n   definition:\n    ```app/models/blog.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      users: DS.hasMany('user'),\n      owner: DS.belongsTo('user'),\n       posts: DS.hasMany('post')\n    });\n   ```\n    This property would contain the following:\n    ```javascript\n   import Ember from 'ember';\n   import Blog from 'app/models/blog';\n    let relationshipNames = Ember.get(Blog, 'relationshipNames');\n   relationshipNames.hasMany;\n   //=> ['users', 'posts']\n   relationshipNames.belongsTo;\n   //=> ['owner']\n   ```\n    @property relationshipNames\n   @static\n   @type Object\n   @readOnly\n   */\n  relationshipNames: Ember.computed(function () {\n    var names = {\n      hasMany: [],\n      belongsTo: []\n    };\n\n    this.eachComputedProperty((name, meta) => {\n      if (meta.isRelationship) {\n        names[meta.kind].push(name);\n      }\n    });\n\n    return names;\n  }),\n\n  /**\n   An array of types directly related to a model. Each type will be\n   included once, regardless of the number of relationships it has with\n   the model.\n    For example, given a model with this definition:\n    ```app/models/blog.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      users: DS.hasMany('user'),\n      owner: DS.belongsTo('user'),\n       posts: DS.hasMany('post')\n    });\n   ```\n    This property would contain the following:\n    ```javascript\n   import Ember from 'ember';\n   import Blog from 'app/models/blog';\n    let relatedTypes = Ember.get(Blog, 'relatedTypes');\n   //=> [ User, Post ]\n   ```\n    @property relatedTypes\n   @static\n   @type Ember.Array\n   @readOnly\n   */\n  relatedTypes: relatedTypesDescriptor,\n\n  /**\n   A map whose keys are the relationships of a model and whose values are\n   relationship descriptors.\n    For example, given a model with this\n   definition:\n    ```app/models/blog.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      users: DS.hasMany('user'),\n      owner: DS.belongsTo('user'),\n       posts: DS.hasMany('post')\n    });\n   ```\n    This property would contain the following:\n    ```javascript\n   import Ember from 'ember';\n   import Blog from 'app/models/blog';\n    let relationshipsByName = Ember.get(Blog, 'relationshipsByName');\n   relationshipsByName.get('users');\n   //=> { key: 'users', kind: 'hasMany', type: 'user', options: Object, isRelationship: true }\n   relationshipsByName.get('owner');\n   //=> { key: 'owner', kind: 'belongsTo', type: 'user', options: Object, isRelationship: true }\n   ```\n    @property relationshipsByName\n   @static\n   @type Ember.Map\n   @readOnly\n   */\n  relationshipsByName: relationshipsByNameDescriptor,\n\n  /**\n   A map whose keys are the fields of the model and whose values are strings\n   describing the kind of the field. A model's fields are the union of all of its\n   attributes and relationships.\n    For example:\n    ```app/models/blog.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      users: DS.hasMany('user'),\n      owner: DS.belongsTo('user'),\n       posts: DS.hasMany('post'),\n       title: DS.attr('string')\n    });\n   ```\n    ```js\n   import Ember from 'ember';\n   import Blog from 'app/models/blog';\n    let fields = Ember.get(Blog, 'fields');\n   fields.forEach(function(kind, field) {\n      console.log(field, kind);\n    });\n    // prints:\n   // users, hasMany\n   // owner, belongsTo\n   // posts, hasMany\n   // title, attribute\n   ```\n    @property fields\n   @static\n   @type Ember.Map\n   @readOnly\n   */\n  fields: Ember.computed(function () {\n    var map = Ember.Map.create();\n\n    this.eachComputedProperty((name, meta) => {\n      if (meta.isRelationship) {\n        map.set(name, meta.kind);\n      } else if (meta.isAttribute) {\n        map.set(name, 'attribute');\n      }\n    });\n\n    return map;\n  }).readOnly(),\n\n  /**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n    @method eachRelationship\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  eachRelationship(callback, binding) {\n    Ember.get(this, 'relationshipsByName').forEach((relationship, name) => {\n      callback.call(binding, name, relationship);\n    });\n  },\n\n  /**\n   Given a callback, iterates over each of the types related to a model,\n   invoking the callback with the related type's class. Each type will be\n   returned just once, regardless of how many different relationships it has\n   with a model.\n    @method eachRelatedType\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  eachRelatedType(callback, binding) {\n    var relationshipTypes = Ember.get(this, 'relatedTypes');\n\n    for (var i = 0; i < relationshipTypes.length; i++) {\n      var type = relationshipTypes[i];\n      callback.call(binding, type);\n    }\n  },\n\n  determineRelationshipType(knownSide, store) {\n    var knownKey = knownSide.key;\n    var knownKind = knownSide.kind;\n    var inverse = this.inverseFor(knownKey, store);\n    // let key;\n    var otherKind = void 0;\n\n    if (!inverse) {\n      return knownKind === 'belongsTo' ? 'oneToNone' : 'manyToNone';\n    }\n\n    // key = inverse.name;\n    otherKind = inverse.kind;\n\n    if (otherKind === 'belongsTo') {\n      return knownKind === 'belongsTo' ? 'oneToOne' : 'manyToOne';\n    } else {\n      return knownKind === 'belongsTo' ? 'oneToMany' : 'manyToMany';\n    }\n  },\n\n  /**\n   A map whose keys are the attributes of the model (properties\n   described by DS.attr) and whose values are the meta object for the\n   property.\n    Example\n    ```app/models/person.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n      birthday: DS.attr('date')\n    });\n   ```\n    ```javascript\n   import Ember from 'ember';\n   import Person from 'app/models/person';\n    let attributes = Ember.get(Person, 'attributes')\n    attributes.forEach(function(meta, name) {\n      console.log(name, meta);\n    });\n    // prints:\n   // firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n   ```\n    @property attributes\n   @static\n   @type {Ember.Map}\n   @readOnly\n   */\n  attributes: Ember.computed(function () {\n    var map = Ember.Map.create();\n\n    this.eachComputedProperty((name, meta) => {\n      if (meta.isAttribute) {\n        (true && !(name !== 'id') && Ember.assert(\"You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from \" + this.toString(), name !== 'id'));\n\n\n        meta.name = name;\n        map.set(name, meta);\n      }\n    });\n\n    return map;\n  }).readOnly(),\n\n  /**\n   A map whose keys are the attributes of the model (properties\n   described by DS.attr) and whose values are type of transformation\n   applied to each attribute. This map does not include any\n   attributes that do not have an transformation type.\n    Example\n    ```app/models/person.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n      firstName: DS.attr(),\n      lastName: DS.attr('string'),\n      birthday: DS.attr('date')\n    });\n   ```\n    ```javascript\n   import Ember from 'ember';\n   import Person from 'app/models/person';\n    let transformedAttributes = Ember.get(Person, 'transformedAttributes')\n    transformedAttributes.forEach(function(field, type) {\n      console.log(field, type);\n    });\n    // prints:\n   // lastName string\n   // birthday date\n   ```\n    @property transformedAttributes\n   @static\n   @type {Ember.Map}\n   @readOnly\n   */\n  transformedAttributes: Ember.computed(function () {\n    var map = Ember.Map.create();\n\n    this.eachAttribute((key, meta) => {\n      if (meta.type) {\n        map.set(key, meta.type);\n      }\n    });\n\n    return map;\n  }).readOnly(),\n\n  /**\n   Iterates through the attributes of the model, calling the passed function on each\n   attribute.\n    The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, meta);\n   ```\n    - `name` the name of the current property in the iteration\n   - `meta` the meta object for the attribute property in the iteration\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```javascript\n   import DS from 'ember-data';\n    let Person = DS.Model.extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n      birthday: DS.attr('date')\n    });\n    Person.eachAttribute(function(name, meta) {\n      console.log(name, meta);\n    });\n    // prints:\n   // firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n   ```\n    @method eachAttribute\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */\n  eachAttribute(callback, binding) {\n    Ember.get(this, 'attributes').forEach((meta, name) => {\n      callback.call(binding, name, meta);\n    });\n  },\n\n  /**\n   Iterates through the transformedAttributes of the model, calling\n   the passed function on each attribute. Note the callback will not be\n   called for any attributes that do not have an transformation type.\n    The callback method you provide should have the following signature (all\n   parameters are optional):\n    ```javascript\n   function(name, type);\n   ```\n    - `name` the name of the current property in the iteration\n   - `type` a string containing the name of the type of transformed\n   applied to the attribute\n    Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n    Example\n    ```javascript\n   import DS from 'ember-data';\n    let Person = DS.Model.extend({\n      firstName: DS.attr(),\n      lastName: DS.attr('string'),\n      birthday: DS.attr('date')\n    });\n    Person.eachTransformedAttribute(function(name, type) {\n      console.log(name, type);\n    });\n    // prints:\n   // lastName string\n   // birthday date\n   ```\n    @method eachTransformedAttribute\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */\n  eachTransformedAttribute(callback, binding) {\n    Ember.get(this, 'transformedAttributes').forEach((type, name) => {\n      callback.call(binding, name, type);\n    });\n  }\n});\n\nif (isEnabled('ds-rollback-attribute')) {\n  Model.reopen({\n    /**\n      Discards any unsaved changes to the given attribute. This feature is not enabled by default. You must enable `ds-rollback-attribute` and be running a canary build.\n       Example\n       ```javascript\n      record.get('name'); // 'Untitled Document'\n      record.set('name', 'Doc 1');\n      record.get('name'); // 'Doc 1'\n      record.rollbackAttribute('name');\n      record.get('name'); // 'Untitled Document'\n      ```\n       @method rollbackAttribute\n    */\n    rollbackAttribute(attributeName) {\n      if (attributeName in this._internalModel._attributes) {\n        this.set(attributeName, this._internalModel.lastAcknowledgedValue(attributeName));\n      }\n    }\n  });\n}\n\n{\n  Model.reopen({\n    // This is a temporary solution until we refactor DS.Model to not\n    // rely on the data property.\n    willMergeMixin(props) {\n      var constructor = this.constructor;\n      (true && !(!intersection(Object.keys(props), RESERVED_MODEL_PROPS)[0]) && Ember.assert('`' + intersection(Object.keys(props), RESERVED_MODEL_PROPS)[0] + '` is a reserved property name on DS.Model objects. Please choose a different property name for ' + constructor.toString(), !intersection(Object.keys(props), RESERVED_MODEL_PROPS)[0]));\n      (true && !(Object.keys(props).indexOf('id') === -1) && Ember.assert(\"You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: DS.attr('<type>')` from \" + constructor.toString(), Object.keys(props).indexOf('id') === -1));\n    },\n\n    /**\n     This Ember.js hook allows an object to be notified when a property\n     is defined.\n      In this case, we use it to be notified when an Ember Data user defines a\n     belongs-to relationship. In that case, we need to set up observers for\n     each one, allowing us to track relationship changes and automatically\n     reflect changes in the inverse has-many array.\n      This hook passes the class being set up, as well as the key and value\n     being defined. So, for example, when the user does this:\n      ```javascript\n     DS.Model.extend({\n      parent: DS.belongsTo('user')\n    });\n     ```\n      This hook would be called with \"parent\" as the key and the computed\n     property returned by `DS.belongsTo` as the value.\n      @method didDefineProperty\n     @param {Object} proto\n     @param {String} key\n     @param {Ember.ComputedProperty} value\n     */\n    didDefineProperty(proto, key, value) {\n      // Check if the value being set is a computed property.\n      if (value instanceof Ember.ComputedProperty) {\n\n        // If it is, get the metadata for the relationship. This is\n        // populated by the `DS.belongsTo` helper when it is creating\n        // the computed property.\n        var meta = value.meta();\n\n        /*\n          This is buggy because if the parent has never been looked up\n          via `modelFor` it will not have `modelName` set.\n         */\n        meta.parentType = proto.constructor;\n      }\n    }\n  });\n}\n\nvar SOURCE_POINTER_REGEXP = /^\\/?data\\/(attributes|relationships)\\/(.*)/;\nvar SOURCE_POINTER_PRIMARY_REGEXP = /^\\/?data/;\nvar PRIMARY_ATTRIBUTE_KEY = 'base';\n\n/**\n  A `DS.AdapterError` is used by an adapter to signal that an error occurred\n  during a request to an external API. It indicates a generic error, and\n  subclasses are used to indicate specific error states. The following\n  subclasses are provided:\n\n  - `DS.InvalidError`\n  - `DS.TimeoutError`\n  - `DS.AbortError`\n  - `DS.UnauthorizedError`\n  - `DS.ForbiddenError`\n  - `DS.NotFoundError`\n  - `DS.ConflictError`\n  - `DS.ServerError`\n\n  To create a custom error to signal a specific error state in communicating\n  with an external API, extend the `DS.AdapterError`. For example if the\n  external API exclusively used HTTP `503 Service Unavailable` to indicate\n  it was closed for maintenance:\n\n  ```app/adapters/maintenance-error.js\n  import DS from 'ember-data';\n\n  export default DS.AdapterError.extend({ message: \"Down for maintenance.\" });\n  ```\n\n  This error would then be returned by an adapter's `handleResponse` method:\n\n  ```app/adapters/application.js\n  import DS from 'ember-data';\n  import MaintenanceError from './maintenance-error';\n\n  export default DS.JSONAPIAdapter.extend({\n    handleResponse(status) {\n      if (503 === status) {\n        return new MaintenanceError();\n      }\n\n      return this._super(...arguments);\n    }\n  });\n  ```\n\n  And can then be detected in an application and used to send the user to an\n  `under-maintenance` route:\n\n  ```app/routes/application.js\n  import Route from '@ember/routing/route';\n  import MaintenanceError from '../adapters/maintenance-error';\n\n  export default Route.extend({\n    actions: {\n      error(error, transition) {\n        if (error instanceof MaintenanceError) {\n          this.transitionTo('under-maintenance');\n          return;\n        }\n\n        // ...other error handling logic\n      }\n    }\n  });\n  ```\n\n  @class AdapterError\n  @namespace DS\n*/\nfunction AdapterError(errors, message = 'Adapter operation failed') {\n  this.isAdapterError = true;\n  Ember.Error.call(this, message);\n\n  this.errors = errors || [{\n    title: 'Adapter Error',\n    detail: message\n  }];\n}\n\nfunction extendFn(ErrorClass) {\n  return function ({ message: defaultMessage } = {}) {\n    return extend(ErrorClass, defaultMessage);\n  };\n}\n\nfunction extend(ParentErrorClass, defaultMessage) {\n  var ErrorClass = function (errors, message) {\n    (true && !(Array.isArray(errors || [])) && Ember.assert('`AdapterError` expects json-api formatted errors array.', Array.isArray(errors || [])));\n\n    ParentErrorClass.call(this, errors, message || defaultMessage);\n  };\n  ErrorClass.prototype = Object.create(ParentErrorClass.prototype);\n  ErrorClass.extend = extendFn(ErrorClass);\n\n  return ErrorClass;\n}\n\nAdapterError.prototype = Object.create(Ember.Error.prototype);\n\nAdapterError.extend = extendFn(AdapterError);\n\n/**\n  A `DS.InvalidError` is used by an adapter to signal the external API\n  was unable to process a request because the content was not\n  semantically correct or meaningful per the API. Usually this means a\n  record failed some form of server side validation. When a promise\n  from an adapter is rejected with a `DS.InvalidError` the record will\n  transition to the `invalid` state and the errors will be set to the\n  `errors` property on the record.\n\n  For Ember Data to correctly map errors to their corresponding\n  properties on the model, Ember Data expects each error to be\n  a valid json-api error object with a `source/pointer` that matches\n  the property name. For example if you had a Post model that\n  looked like this.\n\n  ```app/models/post.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    title: DS.attr('string'),\n    content: DS.attr('string')\n  });\n  ```\n\n  To show an error from the server related to the `title` and\n  `content` properties your adapter could return a promise that\n  rejects with a `DS.InvalidError` object that looks like this:\n\n  ```app/adapters/post.js\n  import RSVP from 'RSVP';\n  import DS from 'ember-data';\n\n  export default DS.RESTAdapter.extend({\n    updateRecord() {\n      // Fictional adapter that always rejects\n      return RSVP.reject(new DS.InvalidError([\n        {\n          detail: 'Must be unique',\n          source: { pointer: '/data/attributes/title' }\n        },\n        {\n          detail: 'Must not be blank',\n          source: { pointer: '/data/attributes/content'}\n        }\n      ]));\n    }\n  });\n  ```\n\n  Your backend may use different property names for your records the\n  store will attempt extract and normalize the errors using the\n  serializer's `extractErrors` method before the errors get added to\n  the the model. As a result, it is safe for the `InvalidError` to\n  wrap the error payload unaltered.\n\n  @class InvalidError\n  @namespace DS\n*/\nvar InvalidError = extend(AdapterError, 'The adapter rejected the commit because it was invalid');\n\n/**\n  A `DS.TimeoutError` is used by an adapter to signal that a request\n  to the external API has timed out. I.e. no response was received from\n  the external API within an allowed time period.\n\n  An example use case would be to warn the user to check their internet\n  connection if an adapter operation has timed out:\n\n  ```app/routes/application.js\n  import Route from '@ember/routing/route';\n  import DS from 'ember-data';\n\n  const { TimeoutError } = DS;\n\n  export default Route.extend({\n    actions: {\n      error(error, transition) {\n        if (error instanceof TimeoutError) {\n          // alert the user\n          alert('Are you still connected to the internet?');\n          return;\n        }\n\n        // ...other error handling logic\n      }\n    }\n  });\n  ```\n\n  @class TimeoutError\n  @namespace DS\n*/\nvar TimeoutError = extend(AdapterError, 'The adapter operation timed out');\n\n/**\n  A `DS.AbortError` is used by an adapter to signal that a request to\n  the external API was aborted. For example, this can occur if the user\n  navigates away from the current page after a request to the external API\n  has been initiated but before a response has been received.\n\n  @class AbortError\n  @namespace DS\n*/\nvar AbortError = extend(AdapterError, 'The adapter operation was aborted');\n\n/**\n  A `DS.UnauthorizedError` equates to a HTTP `401 Unauthorized` response\n  status. It is used by an adapter to signal that a request to the external\n  API was rejected because authorization is required and has failed or has not\n  yet been provided.\n\n  An example use case would be to redirect the user to a log in route if a\n  request is unauthorized:\n\n  ```app/routes/application.js\n  import Route from '@ember/routing/route';\n  import DS from 'ember-data';\n\n  const { UnauthorizedError } = DS;\n\n  export default Route.extend({\n    actions: {\n      error(error, transition) {\n        if (error instanceof UnauthorizedError) {\n          // go to the sign in route\n          this.transitionTo('login');\n          return;\n        }\n\n        // ...other error handling logic\n      }\n    }\n  });\n  ```\n\n  @class UnauthorizedError\n  @namespace DS\n*/\nvar UnauthorizedError = extend(AdapterError, 'The adapter operation is unauthorized');\n\n/**\n  A `DS.ForbiddenError` equates to a HTTP `403 Forbidden` response status.\n  It is used by an adapter to signal that a request to the external API was\n  valid but the server is refusing to respond to it. If authorization was\n  provided and is valid, then the authenticated user does not have the\n  necessary permissions for the request.\n\n  @class ForbiddenError\n  @namespace DS\n*/\nvar ForbiddenError = extend(AdapterError, 'The adapter operation is forbidden');\n\n/**\n  A `DS.NotFoundError` equates to a HTTP `404 Not Found` response status.\n  It is used by an adapter to signal that a request to the external API\n  was rejected because the resource could not be found on the API.\n\n  An example use case would be to detect if the user has entered a route\n  for a specific model that does not exist. For example:\n\n  ```app/routes/post.js\n  import Route from '@ember/routing/route';\n  import DS from 'ember-data';\n\n  const { NotFoundError } = DS;\n\n  export default Route.extend({\n    model(params) {\n      return this.get('store').findRecord('post', params.post_id);\n    },\n\n    actions: {\n      error(error, transition) {\n        if (error instanceof NotFoundError) {\n          // redirect to a list of all posts instead\n          this.transitionTo('posts');\n        } else {\n          // otherwise let the error bubble\n          return true;\n        }\n      }\n    }\n  });\n  ```\n\n  @class NotFoundError\n  @namespace DS\n*/\nvar NotFoundError = extend(AdapterError, 'The adapter could not find the resource');\n\n/**\n  A `DS.ConflictError` equates to a HTTP `409 Conflict` response status.\n  It is used by an adapter to indicate that the request could not be processed\n  because of a conflict in the request. An example scenario would be when\n  creating a record with a client generated id but that id is already known\n  to the external API.\n\n  @class ConflictError\n  @namespace DS\n*/\nvar ConflictError = extend(AdapterError, 'The adapter operation failed due to a conflict');\n\n/**\n  A `DS.ServerError` equates to a HTTP `500 Internal Server Error` response\n  status. It is used by the adapter to indicate that a request has failed\n  because of an error in the external API.\n\n  @class ServerError\n  @namespace DS\n*/\nvar ServerError = extend(AdapterError, 'The adapter operation failed due to a server error');\n\n/**\n  Convert an hash of errors into an array with errors in JSON-API format.\n\n  ```javascript\n  import DS from 'ember-data';\n\n  const { errorsHashToArray } = DS;\n\n  let errors = {\n    base: 'Invalid attributes on saving this record',\n    name: 'Must be present',\n    age: ['Must be present', 'Must be a number']\n  };\n\n  let errorsArray = errorsHashToArray(errors);\n  // [\n  //   {\n  //     title: \"Invalid Document\",\n  //     detail: \"Invalid attributes on saving this record\",\n  //     source: { pointer: \"/data\" }\n  //   },\n  //   {\n  //     title: \"Invalid Attribute\",\n  //     detail: \"Must be present\",\n  //     source: { pointer: \"/data/attributes/name\" }\n  //   },\n  //   {\n  //     title: \"Invalid Attribute\",\n  //     detail: \"Must be present\",\n  //     source: { pointer: \"/data/attributes/age\" }\n  //   },\n  //   {\n  //     title: \"Invalid Attribute\",\n  //     detail: \"Must be a number\",\n  //     source: { pointer: \"/data/attributes/age\" }\n  //   }\n  // ]\n  ```\n\n  @method errorsHashToArray\n  @public\n  @namespace\n  @for DS\n  @param {Object} errors hash with errors as properties\n  @return {Array} array of errors in JSON-API format\n*/\nfunction errorsHashToArray(errors) {\n  var out = [];\n\n  if (Ember.isPresent(errors)) {\n    Object.keys(errors).forEach(key => {\n      var messages = Ember.makeArray(errors[key]);\n      for (var i = 0; i < messages.length; i++) {\n        var title = 'Invalid Attribute';\n        var pointer = `/data/attributes/${key}`;\n        if (key === PRIMARY_ATTRIBUTE_KEY) {\n          title = 'Invalid Document';\n          pointer = `/data`;\n        }\n        out.push({\n          title: title,\n          detail: messages[i],\n          source: {\n            pointer: pointer\n          }\n        });\n      }\n    });\n  }\n\n  return out;\n}\n\n/**\n  Convert an array of errors in JSON-API format into an object.\n\n  ```javascript\n  import DS from 'ember-data';\n\n  const { errorsArrayToHash } = DS;\n\n  let errorsArray = [\n    {\n      title: 'Invalid Attribute',\n      detail: 'Must be present',\n      source: { pointer: '/data/attributes/name' }\n    },\n    {\n      title: 'Invalid Attribute',\n      detail: 'Must be present',\n      source: { pointer: '/data/attributes/age' }\n    },\n    {\n      title: 'Invalid Attribute',\n      detail: 'Must be a number',\n      source: { pointer: '/data/attributes/age' }\n    }\n  ];\n\n  let errors = errorsArrayToHash(errorsArray);\n  // {\n  //   \"name\": [\"Must be present\"],\n  //   \"age\":  [\"Must be present\", \"must be a number\"]\n  // }\n  ```\n\n  @method errorsArrayToHash\n  @public\n  @namespace\n  @for DS\n  @param {Array} errors array of errors in JSON-API format\n  @return {Object}\n*/\nfunction errorsArrayToHash(errors) {\n  var out = {};\n\n  if (Ember.isPresent(errors)) {\n    errors.forEach(error => {\n      if (error.source && error.source.pointer) {\n        var key = error.source.pointer.match(SOURCE_POINTER_REGEXP);\n\n        if (key) {\n          key = key[2];\n        } else if (error.source.pointer.search(SOURCE_POINTER_PRIMARY_REGEXP) !== -1) {\n          key = PRIMARY_ATTRIBUTE_KEY;\n        }\n\n        if (key) {\n          out[key] = out[key] || [];\n          out[key].push(error.detail || error.title);\n        }\n      }\n    });\n  }\n\n  return out;\n}\n\nvar EmberOrderedSet = Ember.OrderedSet;\n\nfunction OrderedSet() {\n  this._super$constructor();\n}\n\nOrderedSet.create = function () {\n  var Constructor = this;\n  return new Constructor();\n};\n\nOrderedSet.prototype = Object.create(EmberOrderedSet.prototype);\nOrderedSet.prototype.constructor = OrderedSet;\nOrderedSet.prototype._super$constructor = EmberOrderedSet;\n\nOrderedSet.prototype.addWithIndex = function (obj, idx) {\n  var guid = Ember.guidFor(obj);\n  var presenceSet = this.presenceSet;\n  var list = this.list;\n\n  if (presenceSet[guid] === true) {\n    return;\n  }\n\n  presenceSet[guid] = true;\n\n  if (idx === undefined || idx === null) {\n    list.push(obj);\n  } else {\n    list.splice(idx, 0, obj);\n  }\n\n  this.size += 1;\n\n  return this;\n};\n\n/*\n  This method normalizes a link to an \"links object\". If the passed link is\n  already an object it's returned without any modifications.\n\n  See http://jsonapi.org/format/#document-links for more information.\n\n  @method _normalizeLink\n  @private\n  @param {String} link\n  @return {Object|null}\n  @for DS\n*/\nfunction _normalizeLink(link) {\n  switch (typeof link) {\n    case 'object':\n      return link;\n    case 'string':\n      return { href: link };\n  }\n  return null;\n}\n\nclass Relationship {\n  constructor(store, internalModel, inverseKey, relationshipMeta) {\n    var async = relationshipMeta.options.async;\n    var polymorphic = relationshipMeta.options.polymorphic;\n    this.members = new OrderedSet();\n    this.canonicalMembers = new OrderedSet();\n    this.store = store;\n    this.key = relationshipMeta.key;\n    this.inverseKey = inverseKey;\n    this.internalModel = internalModel;\n    this.isAsync = typeof async === 'undefined' ? true : async;\n    this.isPolymorphic = typeof polymorphic === 'undefined' ? true : polymorphic;\n    this.relationshipMeta = relationshipMeta;\n    //This probably breaks for polymorphic relationship in complex scenarios, due to\n    //multiple possible modelNames\n    this.inverseKeyForImplicit = this.internalModel.modelName + this.key;\n    this.linkPromise = null;\n    this.meta = null;\n    this.hasData = false;\n    this.hasLoaded = false;\n    this.__inverseMeta = undefined;\n  }\n\n  _inverseIsAsync() {\n    var inverseMeta = this._inverseMeta;\n    if (!inverseMeta) {\n      return false;\n    }\n\n    var inverseAsync = inverseMeta.options.async;\n    return typeof inverseAsync === 'undefined' ? true : inverseAsync;\n  }\n\n  _inverseIsSync() {\n    var inverseMeta = this._inverseMeta;\n    if (!inverseMeta) {\n      return false;\n    }\n\n    var inverseAsync = inverseMeta.options.async;\n    return typeof inverseAsync === 'undefined' ? false : !inverseAsync;\n  }\n\n  get _inverseMeta() {\n    if (this.__inverseMeta === undefined) {\n      var inverseMeta = null;\n\n      if (this.inverseKey) {\n        var inverseModelClass = this.store.modelFor(this.relationshipMeta.type);\n        var inverseRelationships = Ember.get(inverseModelClass, 'relationshipsByName');\n        inverseMeta = inverseRelationships.get(this.inverseKey);\n      }\n\n      this.__inverseMeta = inverseMeta;\n    }\n\n    return this.__inverseMeta;\n  }\n\n  get parentType() {\n    return this.internalModel.modelName;\n  }\n\n  internalModelDidDematerialize() {\n    if (!this.inverseKey) {\n      return;\n    }\n\n    this.forAllMembers(inverseInternalModel => {\n      var relationship = inverseInternalModel._relationships.get(this.inverseKey);\n      relationship.inverseDidDematerialize(this.internalModel);\n    });\n  }\n\n  inverseDidDematerialize(inverseInternalModel) {\n    if (!this.isAsync) {\n      // unloading inverse of a sync relationship is treated as a client-side\n      // delete, so actually remove the models don't merely invalidate the cp\n      // cache.\n      this.removeInternalModelFromOwn(inverseInternalModel);\n      this.removeCanonicalInternalModelFromOwn(inverseInternalModel);\n    }\n  }\n\n  updateMeta(meta) {\n    this.meta = meta;\n  }\n\n  clear() {\n\n    var members = this.members.list;\n    while (members.length > 0) {\n      var member = members[0];\n      this.removeInternalModel(member);\n    }\n\n    var canonicalMembers = this.canonicalMembers.list;\n    while (canonicalMembers.length > 0) {\n      var _member = canonicalMembers[0];\n      this.removeCanonicalInternalModel(_member);\n    }\n  }\n\n  removeAllInternalModelsFromOwn() {\n    this.members.clear();\n    this.internalModel.updateRecordArrays();\n  }\n\n  removeAllCanonicalInternalModelsFromOwn() {\n    this.canonicalMembers.clear();\n    this.flushCanonicalLater();\n  }\n\n  removeInternalModels(internalModels) {\n    internalModels.forEach(internalModel => this.removeInternalModel(internalModel));\n  }\n\n  addInternalModels(internalModels, idx) {\n    internalModels.forEach(internalModel => {\n      this.addInternalModel(internalModel, idx);\n      if (idx !== undefined) {\n        idx++;\n      }\n    });\n  }\n\n  addCanonicalInternalModels(internalModels, idx) {\n    for (var i = 0; i < internalModels.length; i++) {\n      if (idx !== undefined) {\n        this.addCanonicalInternalModel(internalModels[i], i + idx);\n      } else {\n        this.addCanonicalInternalModel(internalModels[i]);\n      }\n    }\n  }\n\n  addCanonicalInternalModel(internalModel, idx) {\n    if (!this.canonicalMembers.has(internalModel)) {\n      this.canonicalMembers.add(internalModel);\n      this.setupInverseRelationship(internalModel);\n    }\n    this.flushCanonicalLater();\n    this.setHasData(true);\n  }\n\n  setupInverseRelationship(internalModel) {\n    if (this.inverseKey) {\n      var relationships = internalModel._relationships;\n      var relationshipExisted = relationships.has(this.inverseKey);\n      var relationship = relationships.get(this.inverseKey);\n      if (relationshipExisted || this.isPolymorphic) {\n        // if we have only just initialized the inverse relationship, then it\n        // already has this.internalModel in its canonicalMembers, so skip the\n        // unnecessary work.  The exception to this is polymorphic\n        // relationships whose members are determined by their inverse, as those\n        // relationships cannot efficiently find their inverse payloads.\n        relationship.addCanonicalInternalModel(this.internalModel);\n      }\n    } else {\n      var _relationships = internalModel._implicitRelationships;\n      var _relationship = _relationships[this.inverseKeyForImplicit];\n      if (!_relationship) {\n        _relationship = _relationships[this.inverseKeyForImplicit] = new Relationship(this.store, internalModel, this.key, { options: { async: this.isAsync }, type: this.parentType });\n      }\n      _relationship.addCanonicalInternalModel(this.internalModel);\n    }\n  }\n\n  removeCanonicalInternalModels(internalModels, idx) {\n    for (var i = 0; i < internalModels.length; i++) {\n      if (idx !== undefined) {\n        this.removeCanonicalInternalModel(internalModels[i], i + idx);\n      } else {\n        this.removeCanonicalInternalModel(internalModels[i]);\n      }\n    }\n  }\n\n  removeCanonicalInternalModel(internalModel, idx) {\n    if (this.canonicalMembers.has(internalModel)) {\n      this.removeCanonicalInternalModelFromOwn(internalModel);\n      if (this.inverseKey) {\n        this.removeCanonicalInternalModelFromInverse(internalModel);\n      } else {\n        if (internalModel._implicitRelationships[this.inverseKeyForImplicit]) {\n          internalModel._implicitRelationships[this.inverseKeyForImplicit].removeCanonicalInternalModel(this.internalModel);\n        }\n      }\n    }\n    this.flushCanonicalLater();\n  }\n\n  addInternalModel(internalModel, idx) {\n    if (!this.members.has(internalModel)) {\n      this.members.addWithIndex(internalModel, idx);\n      this.notifyRecordRelationshipAdded(internalModel, idx);\n      if (this.inverseKey) {\n        internalModel._relationships.get(this.inverseKey).addInternalModel(this.internalModel);\n      } else {\n        if (!internalModel._implicitRelationships[this.inverseKeyForImplicit]) {\n          internalModel._implicitRelationships[this.inverseKeyForImplicit] = new Relationship(this.store, internalModel, this.key, { options: { async: this.isAsync }, type: this.parentType });\n        }\n        internalModel._implicitRelationships[this.inverseKeyForImplicit].addInternalModel(this.internalModel);\n      }\n      this.internalModel.updateRecordArrays();\n    }\n    this.setHasData(true);\n  }\n\n  removeInternalModel(internalModel) {\n    if (this.members.has(internalModel)) {\n      this.removeInternalModelFromOwn(internalModel);\n      if (this.inverseKey) {\n        this.removeInternalModelFromInverse(internalModel);\n      } else {\n        if (internalModel._implicitRelationships[this.inverseKeyForImplicit]) {\n          internalModel._implicitRelationships[this.inverseKeyForImplicit].removeInternalModel(this.internalModel);\n        }\n      }\n    }\n  }\n\n  removeInternalModelFromInverse(internalModel) {\n    var inverseRelationship = internalModel._relationships.get(this.inverseKey);\n    //Need to check for existence, as the record might unloading at the moment\n    if (inverseRelationship) {\n      inverseRelationship.removeInternalModelFromOwn(this.internalModel);\n    }\n  }\n\n  removeInternalModelFromOwn(internalModel) {\n    this.members.delete(internalModel);\n    this.internalModel.updateRecordArrays();\n  }\n\n  removeCanonicalInternalModelFromInverse(internalModel) {\n    var inverseRelationship = internalModel._relationships.get(this.inverseKey);\n    //Need to check for existence, as the record might unloading at the moment\n    if (inverseRelationship) {\n      inverseRelationship.removeCanonicalInternalModelFromOwn(this.internalModel);\n    }\n  }\n\n  removeCanonicalInternalModelFromOwn(internalModel) {\n    this.canonicalMembers.delete(internalModel);\n    this.flushCanonicalLater();\n  }\n\n  /*\n    Call this method once a record deletion has been persisted\n    to purge it from BOTH current and canonical state of all\n    relationships.\n     @method removeCompletelyFromInverse\n    @private\n   */\n  removeCompletelyFromInverse() {\n    if (!this.inverseKey) {\n      return;\n    }\n\n    // we actually want a union of members and canonicalMembers\n    // they should be disjoint but currently are not due to a bug\n    var seen = Object.create(null);\n    var internalModel = this.internalModel;\n\n    var unload = inverseInternalModel => {\n      var id = Ember.guidFor(inverseInternalModel);\n\n      if (seen[id] === undefined) {\n        var relationship = inverseInternalModel._relationships.get(this.inverseKey);\n        relationship.removeCompletelyFromOwn(internalModel);\n        seen[id] = true;\n      }\n    };\n\n    this.members.forEach(unload);\n    this.canonicalMembers.forEach(unload);\n\n    if (!this.isAsync) {\n      this.clear();\n    }\n  }\n\n  forAllMembers(callback) {\n    var seen = Object.create(null);\n\n    for (var i = 0; i < this.members.list.length; i++) {\n      var inverseInternalModel = this.members.list[i];\n      var id = Ember.guidFor(inverseInternalModel);\n      if (!seen[id]) {\n        seen[id] = true;\n        callback(inverseInternalModel);\n      }\n    }\n\n    for (var _i = 0; _i < this.canonicalMembers.list.length; _i++) {\n      var _inverseInternalModel = this.canonicalMembers.list[_i];\n      var _id = Ember.guidFor(_inverseInternalModel);\n      if (!seen[_id]) {\n        seen[_id] = true;\n        callback(_inverseInternalModel);\n      }\n    }\n  }\n\n  /*\n    Removes the given internalModel from BOTH canonical AND current state.\n     This method is useful when either a deletion or a rollback on a new record\n    needs to entirely purge itself from an inverse relationship.\n   */\n  removeCompletelyFromOwn(internalModel) {\n    this.canonicalMembers.delete(internalModel);\n    this.members.delete(internalModel);\n    this.internalModel.updateRecordArrays();\n  }\n\n  flushCanonical() {\n    var list = this.members.list;\n    this.willSync = false;\n    //a hack for not removing new internalModels\n    //TODO remove once we have proper diffing\n    var newInternalModels = [];\n    for (var i = 0; i < list.length; i++) {\n      if (list[i].isNew()) {\n        newInternalModels.push(list[i]);\n      }\n    }\n\n    //TODO(Igor) make this less abysmally slow\n    this.members = this.canonicalMembers.copy();\n    for (var _i2 = 0; _i2 < newInternalModels.length; _i2++) {\n      this.members.add(newInternalModels[_i2]);\n    }\n  }\n\n  flushCanonicalLater() {\n    if (this.willSync) {\n      return;\n    }\n    this.willSync = true;\n    this.store._updateRelationshipState(this);\n  }\n\n  updateLink(link, initial) {\n    (true && Ember.warn(`You pushed a record of type '${this.internalModel.modelName}' with a relationship '${this.key}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload.`, this.isAsync || this.hasData, {\n      id: 'ds.store.push-link-for-sync-relationship'\n    }));\n    (true && !(typeof link === 'string' || link === null) && Ember.assert(`You have pushed a record of type '${this.internalModel.modelName}' with '${this.key}' as a link, but the value of that link is not a string.`, typeof link === 'string' || link === null));\n\n\n    this.link = link;\n    this.linkPromise = null;\n\n    if (!initial) {\n      this.internalModel.notifyPropertyChange(this.key);\n    }\n  }\n\n  findLink() {\n    if (this.linkPromise) {\n      return this.linkPromise;\n    } else {\n      var promise = this.fetchLink();\n      this.linkPromise = promise;\n      return promise.then(result => result);\n    }\n  }\n\n  updateInternalModelsFromAdapter(internalModels) {\n    this.setHasData(true);\n    //TODO(Igor) move this to a proper place\n    //TODO Once we have adapter support, we need to handle updated and canonical changes\n    this.computeChanges(internalModels);\n  }\n\n  notifyRecordRelationshipAdded() {}\n\n  /*\n   `hasData` for a relationship is a flag to indicate if we consider the\n   content of this relationship \"known\". Snapshots uses this to tell the\n   difference between unknown (`undefined`) or empty (`null`). The reason for\n   this is that we wouldn't want to serialize unknown relationships as `null`\n   as that might overwrite remote state.\n    All relationships for a newly created (`store.createRecord()`) are\n   considered known (`hasData === true`).\n   */\n  setHasData(value) {\n    this.hasData = value;\n  }\n\n  /*\n   `hasLoaded` is a flag to indicate if we have gotten data from the adapter or\n   not when the relationship has a link.\n    This is used to be able to tell when to fetch the link and when to return\n   the local data in scenarios where the local state is considered known\n   (`hasData === true`).\n    Updating the link will automatically set `hasLoaded` to `false`.\n   */\n  setHasLoaded(value) {\n    this.hasLoaded = value;\n  }\n\n  /*\n   `push` for a relationship allows the store to push a JSON API Relationship\n   Object onto the relationship. The relationship will then extract and set the\n   meta, data and links of that relationship.\n    `push` use `updateMeta`, `updateData` and `updateLink` to update the state\n   of the relationship.\n   */\n  push(payload, initial) {\n\n    var hasData = false;\n    var hasLink = false;\n\n    if (payload.meta) {\n      this.updateMeta(payload.meta);\n    }\n\n    if (payload.data !== undefined) {\n      hasData = true;\n      this.updateData(payload.data, initial);\n    }\n\n    if (payload.links && payload.links.related) {\n      var relatedLink = _normalizeLink(payload.links.related);\n      if (relatedLink && relatedLink.href && relatedLink.href !== this.link) {\n        hasLink = true;\n        this.updateLink(relatedLink.href, initial);\n      }\n    }\n\n    /*\n     Data being pushed into the relationship might contain only data or links,\n     or a combination of both.\n      If we got data we want to set both hasData and hasLoaded to true since\n     this would indicate that we should prefer the local state instead of\n     trying to fetch the link or call findRecord().\n      If we have no data but a link is present we want to set hasLoaded to false\n     without modifying the hasData flag. This will ensure we fetch the updated\n     link next time the relationship is accessed.\n     */\n    if (hasData) {\n      this.setHasData(true);\n      this.setHasLoaded(true);\n    } else if (hasLink) {\n      this.setHasLoaded(false);\n    }\n  }\n\n  updateData() {}\n\n  destroy() {}\n}\n\nfunction _bind(fn, ...args) {\n\n  return function () {\n    return fn.apply(undefined, args);\n  };\n}\n\nfunction _guard(promise, test) {\n  var guarded = promise['finally'](function () {\n    if (!test()) {\n      guarded._subscribers.length = 0;\n    }\n  });\n\n  return guarded;\n}\n\nfunction _objectIsAlive(object) {\n  return !(Ember.get(object, \"isDestroyed\") || Ember.get(object, \"isDestroying\"));\n}\n\n/**\n  @namespace\n  @method diffArray\n  @private\n  @param {Array} oldArray the old array\n  @param {Array} newArray the new array\n  @return {hash} {\n      firstChangeIndex: <integer>,  // null if no change\n      addedCount: <integer>,        // 0 if no change\n      removedCount: <integer>       // 0 if no change\n    }\n*/\nfunction diffArray(oldArray, newArray) {\n  var oldLength = oldArray.length;\n  var newLength = newArray.length;\n\n  var shortestLength = Math.min(oldLength, newLength);\n  var firstChangeIndex = null; // null signifies no changes\n\n  // find the first change\n  for (var i = 0; i < shortestLength; i++) {\n    // compare each item in the array\n    if (oldArray[i] !== newArray[i]) {\n      firstChangeIndex = i;\n      break;\n    }\n  }\n\n  if (firstChangeIndex === null && newLength !== oldLength) {\n    // no change found in the overlapping block\n    // and array lengths differ,\n    // so change starts at end of overlap\n    firstChangeIndex = shortestLength;\n  }\n\n  var addedCount = 0;\n  var removedCount = 0;\n  if (firstChangeIndex !== null) {\n    // we found a change, find the end of the change\n    var unchangedEndBlockLength = shortestLength - firstChangeIndex;\n    // walk back from the end of both arrays until we find a change\n    for (var _i = 1; _i <= shortestLength; _i++) {\n      // compare each item in the array\n      if (oldArray[oldLength - _i] !== newArray[newLength - _i]) {\n        unchangedEndBlockLength = _i - 1;\n        break;\n      }\n    }\n    addedCount = newLength - unchangedEndBlockLength - firstChangeIndex;\n    removedCount = oldLength - unchangedEndBlockLength - firstChangeIndex;\n  }\n\n  return {\n    firstChangeIndex,\n    addedCount,\n    removedCount\n  };\n}\n\n/**\n  A `ManyArray` is a `MutableArray` that represents the contents of a has-many\n  relationship.\n\n  The `ManyArray` is instantiated lazily the first time the relationship is\n  requested.\n\n  ### Inverses\n\n  Often, the relationships in Ember Data applications will have\n  an inverse. For example, imagine the following models are\n  defined:\n\n  ```app/models/post.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    comments: DS.hasMany('comment')\n  });\n  ```\n\n  ```app/models/comment.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    post: DS.belongsTo('post')\n  });\n  ```\n\n  If you created a new instance of `App.Post` and added\n  a `App.Comment` record to its `comments` has-many\n  relationship, you would expect the comment's `post`\n  property to be set to the post that contained\n  the has-many.\n\n  We call the record to which a relationship belongs the\n  relationship's _owner_.\n\n  @class ManyArray\n  @namespace DS\n  @extends Ember.Object\n  @uses Ember.MutableArray, Ember.Evented\n*/\nvar ManyArray = Ember.Object.extend(Ember.MutableArray, Ember.Evented, {\n  init() {\n    this._super(...arguments);\n\n    /**\n    The loading state of this array\n     @property {Boolean} isLoaded\n    */\n    this.isLoaded = false;\n    this.length = 0;\n\n    /**\n    Used for async `hasMany` arrays\n    to keep track of when they will resolve.\n     @property {Ember.RSVP.Promise} promise\n    @private\n    */\n    this.promise = null;\n\n    /**\n    Metadata associated with the request for async hasMany relationships.\n     Example\n     Given that the server returns the following JSON payload when fetching a\n    hasMany relationship:\n     ```js\n    {\n      \"comments\": [{\n        \"id\": 1,\n        \"comment\": \"This is the first comment\",\n      }, {\n    // ...\n      }],\n       \"meta\": {\n        \"page\": 1,\n        \"total\": 5\n      }\n    }\n    ```\n     You can then access the metadata via the `meta` property:\n     ```js\n    post.get('comments').then(function(comments) {\n      var meta = comments.get('meta');\n     // meta.page => 1\n    // meta.total => 5\n    });\n    ```\n     @property {Object} meta\n    @public\n    */\n    this.meta = this.meta || null;\n\n    /**\n    `true` if the relationship is polymorphic, `false` otherwise.\n     @property {Boolean} isPolymorphic\n    @private\n    */\n    this.isPolymorphic = this.isPolymorphic || false;\n\n    /**\n    The relationship which manages this array.\n     @property {ManyRelationship} relationship\n    @private\n    */\n    this.relationship = this.relationship || null;\n\n    this.currentState = [];\n    this.flushCanonical(false);\n  },\n\n  objectAt(index) {\n    var internalModel = this.currentState[index];\n    if (internalModel === undefined) {\n      return;\n    }\n\n    return internalModel.getRecord();\n  },\n\n  flushCanonical(isInitialized = true) {\n    // It’s possible the parent side of the relationship may have been unloaded by this point\n    if (!_objectIsAlive(this)) {\n      return;\n    }\n    var toSet = this.canonicalState;\n\n    //a hack for not removing new records\n    //TODO remove once we have proper diffing\n    var newInternalModels = this.currentState.filter(\n    // only add new internalModels which are not yet in the canonical state of this\n    // relationship (a new internalModel can be in the canonical state if it has\n    // been 'acknowleged' to be in the relationship via a store.push)\n    internalModel => internalModel.isNew() && toSet.indexOf(internalModel) === -1);\n    toSet = toSet.concat(newInternalModels);\n\n    // diff to find changes\n    var diff = diffArray(this.currentState, toSet);\n\n    if (diff.firstChangeIndex !== null) {\n      // it's null if no change found\n      // we found a change\n      this.arrayContentWillChange(diff.firstChangeIndex, diff.removedCount, diff.addedCount);\n      this.set('length', toSet.length);\n      this.currentState = toSet;\n      this.arrayContentDidChange(diff.firstChangeIndex, diff.removedCount, diff.addedCount);\n      if (isInitialized && diff.addedCount > 0) {\n        //notify only on additions\n        //TODO only notify if unloaded\n        this.relationship.notifyHasManyChanged();\n      }\n    }\n  },\n\n  internalReplace(idx, amt, objects) {\n    if (!objects) {\n      objects = [];\n    }\n    this.arrayContentWillChange(idx, amt, objects.length);\n    this.currentState.splice.apply(this.currentState, [idx, amt].concat(objects));\n    this.set('length', this.currentState.length);\n    this.arrayContentDidChange(idx, amt, objects.length);\n  },\n\n  //TODO(Igor) optimize\n  _removeInternalModels(internalModels) {\n    for (var i = 0; i < internalModels.length; i++) {\n      var index = this.currentState.indexOf(internalModels[i]);\n      this.internalReplace(index, 1);\n    }\n  },\n\n  //TODO(Igor) optimize\n  _addInternalModels(internalModels, idx) {\n    if (idx === undefined) {\n      idx = this.currentState.length;\n    }\n    this.internalReplace(idx, 0, internalModels);\n  },\n\n  replace(idx, amt, objects) {\n    var internalModels = void 0;\n    if (amt > 0) {\n      internalModels = this.currentState.slice(idx, idx + amt);\n      this.get('relationship').removeInternalModels(internalModels);\n    }\n    if (objects) {\n      this.get('relationship').addInternalModels(objects.map(obj => obj._internalModel), idx);\n    }\n  },\n\n  /**\n    Reloads all of the records in the manyArray. If the manyArray\n    holds a relationship that was originally fetched using a links url\n    Ember Data will revisit the original links url to repopulate the\n    relationship.\n     If the manyArray holds the result of a `store.query()` reload will\n    re-run the original query.\n     Example\n     ```javascript\n    var user = store.peekRecord('user', 1)\n    user.login().then(function() {\n      user.get('permissions').then(function(permissions) {\n        return permissions.reload();\n      });\n    });\n    ```\n     @method reload\n    @public\n  */\n  reload() {\n    return this.relationship.reload();\n  },\n\n  /**\n    Saves all of the records in the `ManyArray`.\n     Example\n     ```javascript\n    store.findRecord('inbox', 1).then(function(inbox) {\n      inbox.get('messages').then(function(messages) {\n        messages.forEach(function(message) {\n          message.set('isRead', true);\n        });\n        messages.save()\n      });\n    });\n    ```\n     @method save\n    @return {DS.PromiseArray} promise\n  */\n  save() {\n    var manyArray = this;\n    var promiseLabel = 'DS: ManyArray#save ' + Ember.get(this, 'type');\n    var promise = Ember.RSVP.all(this.invoke(\"save\"), promiseLabel).then(() => manyArray, null, 'DS: ManyArray#save return ManyArray');\n\n    return PromiseArray.create({ promise });\n  },\n\n  /**\n    Create a child record within the owner\n     @method createRecord\n    @private\n    @param {Object} hash\n    @return {DS.Model} record\n  */\n  createRecord(hash) {\n    var store = Ember.get(this, 'store');\n    var type = Ember.get(this, 'type');\n\n    (true && !(!Ember.get(this, 'isPolymorphic')) && Ember.assert(`You cannot add '${type.modelName}' records to this polymorphic relationship.`, !Ember.get(this, 'isPolymorphic')));\n\n    var record = store.createRecord(type.modelName, hash);\n    this.pushObject(record);\n\n    return record;\n  }\n});\n\nclass ManyRelationship extends Relationship {\n  constructor(store, internalModel, inverseKey, relationshipMeta) {\n    super(store, internalModel, inverseKey, relationshipMeta);\n    this.belongsToType = relationshipMeta.type;\n    this.canonicalState = [];\n    this.isPolymorphic = relationshipMeta.options.polymorphic;\n    // The ManyArray for this relationship\n    this._manyArray = null;\n    // The previous ManyArray for this relationship.  It will be destroyed when\n    // we create a new many array, but in the interim it will be updated if\n    // inverse internal models are unloaded.\n    this._retainedManyArray = null;\n    this.__loadingPromise = null;\n  }\n\n  get _loadingPromise() {\n    return this.__loadingPromise;\n  }\n  _updateLoadingPromise(promise, content) {\n    if (this.__loadingPromise) {\n      if (content) {\n        this.__loadingPromise.set('content', content);\n      }\n      this.__loadingPromise.set('promise', promise);\n    } else {\n      this.__loadingPromise = PromiseManyArray.create({\n        promise,\n        content\n      });\n    }\n\n    return this.__loadingPromise;\n  }\n\n  get manyArray() {\n    (true && !(this._manyArray === null || this._retainedManyArray === null) && Ember.assert(`Error: relationship ${this.parentType}:${this.key} has both many array and retained many array`, this._manyArray === null || this._retainedManyArray === null));\n\n\n    if (!this._manyArray) {\n      this._manyArray = ManyArray.create({\n        canonicalState: this.canonicalState,\n        store: this.store,\n        relationship: this,\n        type: this.store.modelFor(this.belongsToType),\n        record: this.internalModel,\n        meta: this.meta,\n        isPolymorphic: this.isPolymorphic\n      });\n\n      if (this._retainedManyArray !== null) {\n        this._retainedManyArray.destroy();\n        this._retainedManyArray = null;\n      }\n    }\n\n    return this._manyArray;\n  }\n\n  removeInverseRelationships() {\n    super.removeInverseRelationships();\n    if (this._manyArray) {\n      this._manyArray.destroy();\n      this._manyArray = null;\n    }\n\n    if (this._loadingPromise) {\n      this._loadingPromise.destroy();\n    }\n  }\n\n  updateMeta(meta) {\n    super.updateMeta(meta);\n    if (this._manyArray) {\n      this._manyArray.set('meta', meta);\n    }\n  }\n\n  addCanonicalInternalModel(internalModel, idx) {\n    if (this.canonicalMembers.has(internalModel)) {\n      return;\n    }\n    if (idx !== undefined) {\n      this.canonicalState.splice(idx, 0, internalModel);\n    } else {\n      this.canonicalState.push(internalModel);\n    }\n    super.addCanonicalInternalModel(internalModel, idx);\n  }\n\n  inverseDidDematerialize(inverseInternalModel) {\n    super.inverseDidDematerialize(inverseInternalModel);\n    if (this.isAsync) {\n      if (this._manyArray) {\n        this._retainedManyArray = this._manyArray;\n        this._manyArray = null;\n      }\n      this._removeInternalModelFromManyArray(this._retainedManyArray, inverseInternalModel);\n    }\n    this.notifyHasManyChanged();\n  }\n\n  addInternalModel(internalModel, idx) {\n    if (this.members.has(internalModel)) {\n      return;\n    }\n\n    emberData_Debug.assertPolymorphicType(this.internalModel, this.relationshipMeta, internalModel);\n    super.addInternalModel(internalModel, idx);\n    // make lazy later\n    this.manyArray._addInternalModels([internalModel], idx);\n  }\n\n  removeCanonicalInternalModelFromOwn(internalModel, idx) {\n    var i = idx;\n    if (!this.canonicalMembers.has(internalModel)) {\n      return;\n    }\n    if (i === undefined) {\n      i = this.canonicalState.indexOf(internalModel);\n    }\n    if (i > -1) {\n      this.canonicalState.splice(i, 1);\n    }\n    super.removeCanonicalInternalModelFromOwn(internalModel, idx);\n  }\n\n  removeAllCanonicalInternalModelsFromOwn() {\n    super.removeAllCanonicalInternalModelsFromOwn();\n    this.canonicalMembers.clear();\n    this.canonicalState.splice(0, this.canonicalState.length);\n  }\n\n  removeCompletelyFromOwn(internalModel) {\n    super.removeCompletelyFromOwn(internalModel);\n\n    var canonicalIndex = this.canonicalState.indexOf(internalModel);\n\n    if (canonicalIndex !== -1) {\n      this.canonicalState.splice(canonicalIndex, 1);\n    }\n\n    var manyArray = this._manyArray;\n\n    if (manyArray) {\n      var idx = manyArray.currentState.indexOf(internalModel);\n\n      if (idx !== -1) {\n        manyArray.internalReplace(idx, 1);\n      }\n    }\n  }\n\n  flushCanonical() {\n    if (this._manyArray) {\n      this._manyArray.flushCanonical();\n    }\n    super.flushCanonical();\n  }\n\n  removeInternalModelFromOwn(internalModel, idx) {\n    if (!this.members.has(internalModel)) {\n      return;\n    }\n    super.removeInternalModelFromOwn(internalModel, idx);\n    // note that ensuring the many array is created, via `this.manyArray`\n    // (instead of `this._manyArray`) is intentional.\n    //\n    // Because we're removing from local, and not canonical, state, it is\n    // important that the many array is initialized now with those changes,\n    // otherwise it will be initialized with canonical state and we'll have\n    // lost the fact that this internalModel was removed.\n    this._removeInternalModelFromManyArray(this.manyArray, internalModel, idx);\n    this._removeInternalModelFromManyArray(this._retainedManyArray, internalModel, idx);\n  }\n\n  removeAllInternalModelsFromOwn() {\n    super.removeAllInternalModelsFromOwn();\n    // as with removeInternalModelFromOwn, we make sure the many array is\n    // instantiated, or we'll lose local removals, as we're not updating\n    // canonical state here.\n    this.manyArray.clear();\n    if (this._retainedManyArray) {\n      this._retainedManyArray.clear();\n    }\n  }\n\n  _removeInternalModelFromManyArray(manyArray, internalModel, idx) {\n    if (manyArray === null) {\n      return;\n    }\n\n    if (idx !== undefined) {\n      //TODO(Igor) not used currently, fix\n      manyArray.currentState.removeAt(idx);\n    } else {\n      manyArray._removeInternalModels([internalModel]);\n    }\n  }\n\n  notifyRecordRelationshipAdded(internalModel, idx) {\n    this.internalModel.notifyHasManyAdded(this.key, internalModel, idx);\n  }\n\n  reload() {\n    var manyArray = this.manyArray;\n    var manyArrayLoadedState = manyArray.get('isLoaded');\n\n    if (this._loadingPromise) {\n      if (this._loadingPromise.get('isPending')) {\n        return this._loadingPromise;\n      }\n      if (this._loadingPromise.get('isRejected')) {\n        manyArray.set('isLoaded', manyArrayLoadedState);\n      }\n    }\n\n    var promise = void 0;\n    if (this.link) {\n      promise = this.fetchLink();\n    } else {\n      promise = this.store._scheduleFetchMany(manyArray.currentState).then(() => manyArray);\n    }\n\n    this._updateLoadingPromise(promise);\n    return this._loadingPromise;\n  }\n\n  computeChanges(internalModels = []) {\n    var members = this.canonicalMembers;\n    var internalModelsToRemove = [];\n    var internalModelSet = setForArray(internalModels);\n\n    members.forEach(member => {\n      if (internalModelSet.has(member)) {\n        return;\n      }\n\n      internalModelsToRemove.push(member);\n    });\n\n    this.removeCanonicalInternalModels(internalModelsToRemove);\n\n    for (var i = 0, l = internalModels.length; i < l; i++) {\n      var internalModel = internalModels[i];\n      this.removeCanonicalInternalModel(internalModel);\n      this.addCanonicalInternalModel(internalModel, i);\n    }\n  }\n\n  setInitialInternalModels(internalModels) {\n    if (Array.isArray(internalModels) === false || internalModels.length === 0) {\n      return;\n    }\n\n    for (var i = 0; i < internalModels.length; i++) {\n      var internalModel = internalModels[i];\n      if (this.canonicalMembers.has(internalModel)) {\n        continue;\n      }\n\n      this.canonicalMembers.add(internalModel);\n      this.members.add(internalModel);\n      this.setupInverseRelationship(internalModel);\n    }\n\n    this.canonicalState = this.canonicalMembers.toArray();\n  }\n\n  fetchLink() {\n    return this.store.findHasMany(this.internalModel, this.link, this.relationshipMeta).then(records => {\n      if (records.hasOwnProperty('meta')) {\n        this.updateMeta(records.meta);\n      }\n      this.store._backburner.join(() => {\n        this.updateInternalModelsFromAdapter(records);\n        this.manyArray.set('isLoaded', true);\n        this.setHasData(true);\n      });\n      return this.manyArray;\n    });\n  }\n\n  findRecords() {\n    var manyArray = this.manyArray;\n    var internalModels = manyArray.currentState;\n\n    //TODO CLEANUP\n    return this.store.findMany(internalModels).then(() => {\n      if (!manyArray.get('isDestroyed')) {\n        //Goes away after the manyArray refactor\n        manyArray.set('isLoaded', true);\n      }\n      return manyArray;\n    });\n  }\n\n  notifyHasManyChanged() {\n    this.internalModel.notifyHasManyAdded(this.key);\n  }\n\n  getRecords() {\n    //TODO(Igor) sync server here, once our syncing is not stupid\n    var manyArray = this.manyArray;\n    if (this.isAsync) {\n      var promise = void 0;\n      if (this.link) {\n        if (this.hasLoaded) {\n          promise = this.findRecords();\n        } else {\n          promise = this.findLink().then(() => this.findRecords());\n        }\n      } else {\n        promise = this.findRecords();\n      }\n      return this._updateLoadingPromise(promise, manyArray);\n    } else {\n      (true && !(manyArray.isEvery('isEmpty', false)) && Ember.assert(`You looked up the '${this.key}' relationship on a '${this.internalModel.type.modelName}' with id ${this.internalModel.id} but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async ('DS.hasMany({ async: true })')`, manyArray.isEvery('isEmpty', false)));\n\n      //TODO(Igor) WTF DO I DO HERE?\n      // TODO @runspired equal WTFs to Igor\n\n      if (!manyArray.get('isDestroyed')) {\n        manyArray.set('isLoaded', true);\n      }\n      return manyArray;\n    }\n  }\n\n  updateData(data, initial) {\n    var internalModels = this.store._pushResourceIdentifiers(this, data);\n    if (initial) {\n      this.setInitialInternalModels(internalModels);\n    } else {\n      this.updateInternalModelsFromAdapter(internalModels);\n    }\n  }\n\n  destroy() {\n    super.destroy();\n    var manyArray = this._manyArray;\n    if (manyArray) {\n      manyArray.destroy();\n      this._manyArray = null;\n    }\n\n    var proxy = this.__loadingPromise;\n\n    if (proxy) {\n      proxy.destroy();\n      this.__loadingPromise = null;\n    }\n  }\n}\n\nfunction setForArray(array) {\n  var set = new OrderedSet();\n\n  if (array) {\n    for (var i = 0, l = array.length; i < l; i++) {\n      set.add(array[i]);\n    }\n  }\n\n  return set;\n}\n\nclass BelongsToRelationship extends Relationship {\n  constructor(store, internalModel, inverseKey, relationshipMeta) {\n    super(store, internalModel, inverseKey, relationshipMeta);\n    this.internalModel = internalModel;\n    this.key = relationshipMeta.key;\n    this.inverseInternalModel = null;\n    this.canonicalState = null;\n  }\n\n  setInternalModel(internalModel) {\n    if (internalModel) {\n      this.addInternalModel(internalModel);\n    } else if (this.inverseInternalModel) {\n      this.removeInternalModel(this.inverseInternalModel);\n    }\n    this.setHasData(true);\n    this.setHasLoaded(true);\n  }\n\n  setCanonicalInternalModel(internalModel) {\n    if (internalModel) {\n      this.addCanonicalInternalModel(internalModel);\n    } else if (this.canonicalState) {\n      this.removeCanonicalInternalModel(this.canonicalState);\n    }\n    this.flushCanonicalLater();\n  }\n\n  setInitialCanonicalInternalModel(internalModel) {\n    if (!internalModel) {\n      return;\n    }\n\n    // When we initialize a belongsTo relationship, we want to avoid work like\n    // notifying our internalModel that we've \"changed\" and excessive thrash on\n    // setting up inverse relationships\n    this.canonicalMembers.add(internalModel);\n    this.members.add(internalModel);\n    this.inverseInternalModel = this.canonicalState = internalModel;\n    this.setupInverseRelationship(internalModel);\n  }\n\n  addCanonicalInternalModel(internalModel) {\n    if (this.canonicalMembers.has(internalModel)) {\n      return;\n    }\n\n    if (this.canonicalState) {\n      this.removeCanonicalInternalModel(this.canonicalState);\n    }\n\n    this.canonicalState = internalModel;\n    super.addCanonicalInternalModel(internalModel);\n  }\n\n  inverseDidDematerialize() {\n    super.inverseDidDematerialize(this.inverseInternalModel);\n    this.notifyBelongsToChanged();\n  }\n\n  removeCompletelyFromOwn(internalModel) {\n    super.removeCompletelyFromOwn(internalModel);\n\n    if (this.canonicalState === internalModel) {\n      this.canonicalState = null;\n    }\n\n    if (this.inverseInternalModel === internalModel) {\n      this.inverseInternalModel = null;\n      this.notifyBelongsToChanged();\n    }\n  }\n\n  removeCompletelyFromInverse() {\n    super.removeCompletelyFromInverse();\n\n    this.inverseInternalModel = null;\n  }\n\n  flushCanonical() {\n    //temporary fix to not remove newly created records if server returned null.\n    //TODO remove once we have proper diffing\n    if (this.inverseInternalModel && this.inverseInternalModel.isNew() && !this.canonicalState) {\n      return;\n    }\n    if (this.inverseInternalModel !== this.canonicalState) {\n      this.inverseInternalModel = this.canonicalState;\n      this.notifyBelongsToChanged();\n    }\n\n    super.flushCanonical();\n  }\n\n  addInternalModel(internalModel) {\n    if (this.members.has(internalModel)) {\n      return;\n    }\n\n    emberData_Debug.assertPolymorphicType(this.internalModel, this.relationshipMeta, internalModel);\n\n    if (this.inverseInternalModel) {\n      this.removeInternalModel(this.inverseInternalModel);\n    }\n\n    this.inverseInternalModel = internalModel;\n    super.addInternalModel(internalModel);\n    this.notifyBelongsToChanged();\n  }\n\n  setRecordPromise(newPromise) {\n    var content = newPromise.get && newPromise.get('content');\n    (true && !(content !== undefined) && Ember.assert(\"You passed in a promise that did not originate from an EmberData relationship. You can only pass promises that come from a belongsTo or hasMany relationship to the get call.\", content !== undefined));\n\n    this.setInternalModel(content ? content._internalModel : content);\n  }\n\n  removeInternalModelFromOwn(internalModel) {\n    if (!this.members.has(internalModel)) {\n      return;\n    }\n    this.inverseInternalModel = null;\n    super.removeInternalModelFromOwn(internalModel);\n    this.notifyBelongsToChanged();\n  }\n\n  removeAllInternalModelsFromOwn() {\n    super.removeAllInternalModelsFromOwn();\n    this.inverseInternalModel = null;\n    this.notifyBelongsToChanged();\n  }\n\n  notifyBelongsToChanged() {\n    this.internalModel.notifyBelongsToChanged(this.key);\n  }\n\n  removeCanonicalInternalModelFromOwn(internalModel) {\n    if (!this.canonicalMembers.has(internalModel)) {\n      return;\n    }\n    this.canonicalState = null;\n    super.removeCanonicalInternalModelFromOwn(internalModel);\n  }\n\n  removeAllCanonicalInternalModelsFromOwn() {\n    super.removeAllCanonicalInternalModelsFromOwn();\n    this.canonicalState = null;\n  }\n\n  findRecord() {\n    if (this.inverseInternalModel) {\n      return this.store._findByInternalModel(this.inverseInternalModel);\n    } else {\n      return Ember.RSVP.Promise.resolve(null);\n    }\n  }\n\n  fetchLink() {\n    return this.store.findBelongsTo(this.internalModel, this.link, this.relationshipMeta).then(internalModel => {\n      if (internalModel) {\n        this.addInternalModel(internalModel);\n      }\n      return internalModel;\n    });\n  }\n\n  getRecord() {\n    //TODO(Igor) flushCanonical here once our syncing is not stupid\n    if (this.isAsync) {\n      var promise = void 0;\n      if (this.link) {\n        if (this.hasLoaded) {\n          promise = this.findRecord();\n        } else {\n          promise = this.findLink().then(() => this.findRecord());\n        }\n      } else {\n        promise = this.findRecord();\n      }\n\n      return PromiseObject.create({\n        promise: promise,\n        content: this.inverseInternalModel ? this.inverseInternalModel.getRecord() : null\n      });\n    } else {\n      if (this.inverseInternalModel === null) {\n        return null;\n      }\n      var toReturn = this.inverseInternalModel.getRecord();\n      (true && !(toReturn === null || !toReturn.get('isEmpty')) && Ember.assert(\"You looked up the '\" + this.key + \"' relationship on a '\" + this.internalModel.modelName + \"' with id \" + this.internalModel.id + \" but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (`DS.belongsTo({ async: true })`)\", toReturn === null || !toReturn.get('isEmpty')));\n\n      return toReturn;\n    }\n  }\n\n  reload() {\n    // TODO handle case when reload() is triggered multiple times\n\n    if (this.link) {\n      return this.fetchLink();\n    }\n\n    // reload record, if it is already loaded\n    if (this.inverseInternalModel && this.inverseInternalModel.hasRecord) {\n      return this.inverseInternalModel.getRecord().reload();\n    }\n\n    return this.findRecord();\n  }\n\n  updateData(data, initial) {\n    (true && !(data === null || data.id !== undefined && data.type !== undefined) && Ember.assert(`Ember Data expected the data for the ${this.key} relationship on a ${this.internalModel.toString()} to be in a JSON API format and include an \\`id\\` and \\`type\\` property but it found ${Ember.inspect(data)}. Please check your serializer and make sure it is serializing the relationship payload into a JSON API format.`, data === null || data.id !== undefined && data.type !== undefined));\n\n    var internalModel = this.store._pushResourceIdentifier(this, data);\n    if (initial) {\n      this.setInitialCanonicalInternalModel(internalModel);\n    } else {\n      this.setCanonicalInternalModel(internalModel);\n    }\n  }\n}\n\nfunction shouldFindInverse(relationshipMeta) {\n  var options = relationshipMeta.options;\n  return !(options && options.inverse === null);\n}\n\nfunction createRelationshipFor(internalModel, relationshipMeta, store) {\n  var inverseKey = void 0;\n  var inverse = null;\n\n  if (shouldFindInverse(relationshipMeta)) {\n    inverse = internalModel.type.inverseFor(relationshipMeta.key, store);\n  } else {\n    internalModel.type.typeForRelationship(relationshipMeta.key, store);\n  }\n\n  if (inverse) {\n    inverseKey = inverse.name;\n  }\n\n  if (relationshipMeta.kind === 'hasMany') {\n    return new ManyRelationship(store, internalModel, inverseKey, relationshipMeta);\n  } else {\n    return new BelongsToRelationship(store, internalModel, inverseKey, relationshipMeta);\n  }\n}\n\nclass Relationships {\n  constructor(internalModel) {\n    this.internalModel = internalModel;\n    this.initializedRelationships = Object.create(null);\n  }\n\n  // TODO @runspired deprecate this as it was never truly a record instance\n  get record() {\n    return this.internalModel;\n  }\n\n  has(key) {\n    return !!this.initializedRelationships[key];\n  }\n\n  forEach(cb) {\n    var rels = this.initializedRelationships;\n    Object.keys(rels).forEach(name => {\n      cb(name, rels[name]);\n    });\n  }\n\n  get(key) {\n    var relationships = this.initializedRelationships;\n    var relationship = relationships[key];\n    var internalModel = this.internalModel;\n\n    if (!relationship) {\n      var relationshipsByName = Ember.get(internalModel.type, 'relationshipsByName');\n      var rel = relationshipsByName.get(key);\n\n      if (!rel) {\n        return undefined;\n      }\n\n      var relationshipPayload = internalModel.store._relationshipsPayloads.get(internalModel.modelName, internalModel.id, key);\n\n      relationship = relationships[key] = createRelationshipFor(internalModel, rel, internalModel.store);\n\n      if (relationshipPayload) {\n        relationship.push(relationshipPayload, true);\n      }\n    }\n\n    return relationship;\n  }\n}\n\n/**\n  @class Snapshot\n  @namespace DS\n  @private\n  @constructor\n  @param {DS.Model} internalModel The model to create a snapshot from\n*/\n/**\n  @module ember-data\n*/\n\nclass Snapshot {\n  constructor(internalModel, options = {}) {\n    this._attributes = Object.create(null);\n    this._belongsToRelationships = Object.create(null);\n    this._belongsToIds = Object.create(null);\n    this._hasManyRelationships = Object.create(null);\n    this._hasManyIds = Object.create(null);\n    this._internalModel = internalModel;\n\n    var record = internalModel.getRecord();\n\n    /**\n     The underlying record for this snapshot. Can be used to access methods and\n     properties defined on the record.\n      Example\n      ```javascript\n     let json = snapshot.record.toJSON();\n     ```\n      @property record\n     @type {DS.Model}\n     */\n    this.record = record;\n    record.eachAttribute(keyName => this._attributes[keyName] = Ember.get(record, keyName));\n\n    /**\n     The id of the snapshot's underlying record\n      Example\n      ```javascript\n     // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n     postSnapshot.id; // => '1'\n     ```\n      @property id\n     @type {String}\n     */\n    this.id = internalModel.id;\n\n    /**\n     A hash of adapter options\n     @property adapterOptions\n     @type {Object}\n     */\n    this.adapterOptions = options.adapterOptions;\n    this.include = options.include;\n\n    /**\n     The name of the type of the underlying record for this snapshot, as a string.\n      @property modelName\n     @type {String}\n     */\n    this.modelName = internalModel.modelName;\n\n    this._changedAttributes = record.changedAttributes();\n  }\n\n  /**\n   The type of the underlying record for this snapshot, as a DS.Model.\n    @property type\n   @type {DS.Model}\n   */\n  get type() {\n    // TODO @runspired we should deprecate this in favor of modelClass but only once\n    // we've cleaned up the internals enough that a public change to follow suite is\n    // uncontroversial.\n    return this._internalModel.modelClass;\n  }\n\n  /**\n   Returns the value of an attribute.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postSnapshot.attr('author'); // => 'Tomster'\n   postSnapshot.attr('title'); // => 'Ember.js rocks'\n   ```\n    Note: Values are loaded eagerly and cached when the snapshot is created.\n    @method attr\n   @param {String} keyName\n   @return {Object} The attribute value or undefined\n   */\n  attr(keyName) {\n    if (keyName in this._attributes) {\n      return this._attributes[keyName];\n    }\n    throw new Ember.Error(\"Model '\" + Ember.inspect(this.record) + \"' has no attribute named '\" + keyName + \"' defined.\");\n  }\n\n  /**\n   Returns all attributes and their corresponding values.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }\n   ```\n    @method attributes\n   @return {Object} All attributes of the current snapshot\n   */\n  attributes() {\n    return Ember.copy(this._attributes);\n  }\n\n  /**\n   Returns all changed attributes and their old and new values.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\n   postModel.set('title', 'Ember.js rocks!');\n   postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }\n   ```\n    @method changedAttributes\n   @return {Object} All changed attributes of the current snapshot\n   */\n  changedAttributes() {\n    var changedAttributes = Object.create(null);\n    var changedAttributeKeys = Object.keys(this._changedAttributes);\n\n    for (var i = 0, length = changedAttributeKeys.length; i < length; i++) {\n      var key = changedAttributeKeys[i];\n      changedAttributes[key] = Ember.copy(this._changedAttributes[key]);\n    }\n\n    return changedAttributes;\n  }\n\n  /**\n   Returns the current value of a belongsTo relationship.\n    `belongsTo` takes an optional hash of options as a second parameter,\n   currently supported options are:\n    - `id`: set to `true` if you only want the ID of the related record to be\n   returned.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, title: 'Hello World' });\n   // store.createRecord('comment', { body: 'Lorem ipsum', post: post });\n   commentSnapshot.belongsTo('post'); // => DS.Snapshot\n   commentSnapshot.belongsTo('post', { id: true }); // => '1'\n    // store.push('comment', { id: 1, body: 'Lorem ipsum' });\n   commentSnapshot.belongsTo('post'); // => undefined\n   ```\n    Calling `belongsTo` will return a new Snapshot as long as there's any known\n   data for the relationship available, such as an ID. If the relationship is\n   known but unset, `belongsTo` will return `null`. If the contents of the\n   relationship is unknown `belongsTo` will return `undefined`.\n    Note: Relationships are loaded lazily and cached upon first access.\n    @method belongsTo\n   @param {String} keyName\n   @param {Object} [options]\n   @return {(DS.Snapshot|String|null|undefined)} A snapshot or ID of a known\n   relationship or null if the relationship is known but unset. undefined\n   will be returned if the contents of the relationship is unknown.\n   */\n  belongsTo(keyName, options) {\n    var id = options && options.id;\n    var relationship = void 0,\n        inverseInternalModel = void 0,\n        hasData = void 0;\n    var result = void 0;\n\n    if (id && keyName in this._belongsToIds) {\n      return this._belongsToIds[keyName];\n    }\n\n    if (!id && keyName in this._belongsToRelationships) {\n      return this._belongsToRelationships[keyName];\n    }\n\n    relationship = this._internalModel._relationships.get(keyName);\n    if (!(relationship && relationship.relationshipMeta.kind === 'belongsTo')) {\n      throw new Ember.Error(\"Model '\" + Ember.inspect(this.record) + \"' has no belongsTo relationship named '\" + keyName + \"' defined.\");\n    }\n\n    hasData = Ember.get(relationship, 'hasData');\n    inverseInternalModel = Ember.get(relationship, 'inverseInternalModel');\n\n    if (hasData) {\n      if (inverseInternalModel && !inverseInternalModel.isDeleted()) {\n        if (id) {\n          result = Ember.get(inverseInternalModel, 'id');\n        } else {\n          result = inverseInternalModel.createSnapshot();\n        }\n      } else {\n        result = null;\n      }\n    }\n\n    if (id) {\n      this._belongsToIds[keyName] = result;\n    } else {\n      this._belongsToRelationships[keyName] = result;\n    }\n\n    return result;\n  }\n\n  /**\n   Returns the current value of a hasMany relationship.\n    `hasMany` takes an optional hash of options as a second parameter,\n   currently supported options are:\n    - `ids`: set to `true` if you only want the IDs of the related records to be\n   returned.\n    Example\n    ```javascript\n   // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });\n   postSnapshot.hasMany('comments'); // => [DS.Snapshot, DS.Snapshot]\n   postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']\n    // store.push('post', { id: 1, title: 'Hello World' });\n   postSnapshot.hasMany('comments'); // => undefined\n   ```\n    Note: Relationships are loaded lazily and cached upon first access.\n    @method hasMany\n   @param {String} keyName\n   @param {Object} [options]\n   @return {(Array|undefined)} An array of snapshots or IDs of a known\n   relationship or an empty array if the relationship is known but unset.\n   undefined will be returned if the contents of the relationship is unknown.\n   */\n  hasMany(keyName, options) {\n    var ids = options && options.ids;\n    var relationship = void 0,\n        members = void 0,\n        hasData = void 0;\n    var results = void 0;\n\n    if (ids && keyName in this._hasManyIds) {\n      return this._hasManyIds[keyName];\n    }\n\n    if (!ids && keyName in this._hasManyRelationships) {\n      return this._hasManyRelationships[keyName];\n    }\n\n    relationship = this._internalModel._relationships.get(keyName);\n    if (!(relationship && relationship.relationshipMeta.kind === 'hasMany')) {\n      throw new Ember.Error(\"Model '\" + Ember.inspect(this.record) + \"' has no hasMany relationship named '\" + keyName + \"' defined.\");\n    }\n\n    hasData = Ember.get(relationship, 'hasData');\n    members = Ember.get(relationship, 'members');\n\n    if (hasData) {\n      results = [];\n      members.forEach(member => {\n        if (!member.isDeleted()) {\n          if (ids) {\n            results.push(member.id);\n          } else {\n            results.push(member.createSnapshot());\n          }\n        }\n      });\n    }\n\n    if (ids) {\n      this._hasManyIds[keyName] = results;\n    } else {\n      this._hasManyRelationships[keyName] = results;\n    }\n\n    return results;\n  }\n\n  /**\n    Iterates through all the attributes of the model, calling the passed\n    function on each attribute.\n     Example\n     ```javascript\n    snapshot.eachAttribute(function(name, meta) {\n      // ...\n    });\n    ```\n     @method eachAttribute\n    @param {Function} callback the callback to execute\n    @param {Object} [binding] the value to which the callback's `this` should be bound\n  */\n  eachAttribute(callback, binding) {\n    this.record.eachAttribute(callback, binding);\n  }\n\n  /**\n    Iterates through all the relationships of the model, calling the passed\n    function on each relationship.\n     Example\n     ```javascript\n    snapshot.eachRelationship(function(name, relationship) {\n      // ...\n    });\n    ```\n     @method eachRelationship\n    @param {Function} callback the callback to execute\n    @param {Object} [binding] the value to which the callback's `this` should be bound\n  */\n  eachRelationship(callback, binding) {\n    this.record.eachRelationship(callback, binding);\n  }\n\n  /**\n    Serializes the snapshot using the serializer for the model.\n     Example\n     ```app/adapters/application.js\n    import DS from 'ember-data';\n     export default DS.Adapter.extend({\n      createRecord(store, type, snapshot) {\n        var data = snapshot.serialize({ includeId: true });\n        var url = `/${type.modelName}`;\n         return fetch(url, {\n          method: 'POST',\n          body: data,\n        }).then((response) => response.json())\n      }\n    });\n    ```\n     @method serialize\n    @param {Object} options\n    @return {Object} an object whose values are primitive JSON values only\n   */\n  serialize(options) {\n    return this.record.store.serializerFor(this.modelName).serialize(this, options);\n  }\n}\n\n/*\n  Check if the passed model has a `type` attribute or a relationship named `type`.\n\n  @method modelHasAttributeOrRelationshipNamedType\n  @param modelClass\n */\nfunction modelHasAttributeOrRelationshipNamedType(modelClass) {\n  return Ember.get(modelClass, 'attributes').has('type') || Ember.get(modelClass, 'relationshipsByName').has('type');\n}\n\n/*\n  ember-container-inject-owner is a new feature in Ember 2.3 that finally provides a public\n  API for looking items up.  This function serves as a super simple polyfill to avoid\n  triggering deprecations.\n */\nfunction getOwner(context) {\n  var owner = void 0;\n\n  if (Ember.getOwner) {\n    owner = Ember.getOwner(context);\n  } else if (context.container) {\n    owner = context.container;\n  }\n\n  if (owner && owner.lookupFactory && !owner._lookupFactory) {\n    // `owner` is a container, we are just making this work\n    owner._lookupFactory = function () {\n      return owner.lookupFactory(...arguments);\n    };\n\n    owner.register = function () {\n      var registry = owner.registry || owner._registry || owner;\n\n      return registry.register(...arguments);\n    };\n  }\n\n  return owner;\n}\n\nvar Reference = function (store, internalModel) {\n  this.store = store;\n  this.internalModel = internalModel;\n};\n\nReference.prototype = {\n  constructor: Reference\n};\n\n/**\n   An RecordReference is a low level API that allows users and\n   addon author to perform meta-operations on a record.\n\n   @class RecordReference\n   @namespace DS\n*/\nvar RecordReference = function (store, internalModel) {\n  this._super$constructor(store, internalModel);\n  this.type = internalModel.modelName;\n  this._id = internalModel.id;\n};\n\nRecordReference.prototype = Object.create(Reference.prototype);\nRecordReference.prototype.constructor = RecordReference;\nRecordReference.prototype._super$constructor = Reference;\n\n/**\n   The `id` of the record that this reference refers to.\n\n   Together, the `type` and `id` properties form a composite key for\n   the identity map.\n\n   Example\n\n   ```javascript\n   let userRef = store.getReference('user', 1);\n\n   userRef.id(); // '1'\n   ```\n\n   @method id\n   @return {String} The id of the record.\n*/\nRecordReference.prototype.id = function () {\n  return this._id;\n};\n\n/**\n   How the reference will be looked up when it is loaded: Currently\n   this always return `identity` to signifying that a record will be\n   loaded by the `type` and `id`.\n\n   Example\n\n   ```javascript\n   const userRef = store.getReference('user', 1);\n\n   userRef.remoteType(); // 'identity'\n   ```\n\n   @method remoteType\n   @return {String} 'identity'\n*/\nRecordReference.prototype.remoteType = function () {\n  return 'identity';\n};\n\n/**\n  This API allows you to provide a reference with new data. The\n  simplest usage of this API is similar to `store.push`: you provide a\n  normalized hash of data and the object represented by the reference\n  will update.\n\n  If you pass a promise to `push`, Ember Data will not ask the adapter\n  for the data if another attempt to fetch it is made in the\n  interim. When the promise resolves, the underlying object is updated\n  with the new data, and the promise returned by *this function* is resolved\n  with that object.\n\n  For example, `recordReference.push(promise)` will be resolved with a\n  record.\n\n   Example\n\n   ```javascript\n   let userRef = store.getReference('user', 1);\n\n   // provide data for reference\n   userRef.push({ data: { id: 1, username: \"@user\" }}).then(function(user) {\n     userRef.value() === user;\n   });\n   ```\n\n  @method push\n  @param {Promise|Object}\n  @return Promise<record> a promise for the value (record or relationship)\n*/\nRecordReference.prototype.push = function (objectOrPromise) {\n  return Ember.RSVP.resolve(objectOrPromise).then(data => {\n    return this.store.push(data);\n  });\n};\n\n/**\n  If the entity referred to by the reference is already loaded, it is\n  present as `reference.value`. Otherwise the value returned by this function\n  is `null`.\n\n   Example\n\n   ```javascript\n   let userRef = store.getReference('user', 1);\n\n   userRef.value(); // user\n   ```\n\n   @method value\n   @return {DS.Model} the record for this RecordReference\n*/\nRecordReference.prototype.value = function () {\n  if (this.internalModel.hasRecord) {\n    return this.internalModel.getRecord();\n  }\n  return null;\n};\n\n/**\n   Triggers a fetch for the backing entity based on its `remoteType`\n   (see `remoteType` definitions per reference type).\n\n   Example\n\n   ```javascript\n   let userRef = store.getReference('user', 1);\n\n   // load user (via store.find)\n   userRef.load().then(...)\n   ```\n\n   @method load\n   @return {Promise<record>} the record for this RecordReference\n*/\nRecordReference.prototype.load = function () {\n  return this.store.findRecord(this.type, this._id);\n};\n\n/**\n   Reloads the record if it is already loaded. If the record is not\n   loaded it will load the record via `store.findRecord`\n\n   Example\n\n   ```javascript\n   let userRef = store.getReference('user', 1);\n\n   // or trigger a reload\n   userRef.reload().then(...)\n   ```\n\n   @method reload\n   @return {Promise<record>} the record for this RecordReference\n*/\nRecordReference.prototype.reload = function () {\n  var record = this.value();\n  if (record) {\n    return record.reload();\n  }\n\n  return this.load();\n};\n\n/**\n   A BelongsToReference is a low level API that allows users and\n   addon author to perform meta-operations on a belongs-to\n   relationship.\n\n   @class BelongsToReference\n   @namespace DS\n   @extends DS.Reference\n*/\nvar BelongsToReference = function (store, parentInternalModel, belongsToRelationship) {\n  this._super$constructor(store, parentInternalModel);\n  this.belongsToRelationship = belongsToRelationship;\n  this.type = belongsToRelationship.relationshipMeta.type;\n  this.parent = parentInternalModel.recordReference;\n\n  // TODO inverse\n};\n\nBelongsToReference.prototype = Object.create(Reference.prototype);\nBelongsToReference.prototype.constructor = BelongsToReference;\nBelongsToReference.prototype._super$constructor = Reference;\n\n/**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n\n   Example\n\n   ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      type: 'blog',\n      id: 1,\n      relationships: {\n        user: {\n          data: { type: 'user', id: 1 }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n\n    // get the identifier of the reference\n    if (userRef.remoteType() === \"id\") {\n      let id = userRef.id();\n    } else if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n    ```\n\n   @method remoteType\n   @return {String} The name of the remote type. This should either be \"link\" or \"id\"\n*/\nBelongsToReference.prototype.remoteType = function () {\n  if (this.belongsToRelationship.link) {\n    return \"link\";\n  }\n\n  return \"id\";\n};\n\n/**\n   The `id` of the record that this reference refers to. Together, the\n   `type()` and `id()` methods form a composite key for the identity\n   map. This can be used to access the id of an async relationship\n   without triggering a fetch that would normally happen if you\n   attempted to use `record.get('relationship.id')`.\n\n   Example\n\n   ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n\n    // get the identifier of the reference\n    if (userRef.remoteType() === \"id\") {\n      let id = userRef.id();\n    }\n    ```\n\n   @method id\n   @return {String} The id of the record in this belongsTo relationship.\n*/\nBelongsToReference.prototype.id = function () {\n  var inverseInternalModel = this.belongsToRelationship.inverseInternalModel;\n  return inverseInternalModel && inverseInternalModel.id;\n};\n\n/**\n   The link Ember Data will use to fetch or reload this belongs-to\n   relationship.\n\n   Example\n\n   ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: '/articles/1/author'\n            }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n\n    // get the identifier of the reference\n    if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n    ```\n\n   @method link\n   @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.\n*/\nBelongsToReference.prototype.link = function () {\n  return this.belongsToRelationship.link;\n};\n\n/**\n   The meta data for the belongs-to relationship.\n\n   Example\n\n   ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: {\n                href: '/articles/1/author',\n                meta: {\n                  lastUpdated: 1458014400000\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n\n    let userRef = blog.belongsTo('user');\n\n    userRef.meta() // { lastUpdated: 1458014400000 }\n    ```\n\n   @method meta\n   @return {Object} The meta information for the belongs-to relationship.\n*/\nBelongsToReference.prototype.meta = function () {\n  return this.belongsToRelationship.meta;\n};\n\n/**\n   `push` can be used to update the data in the relationship and Ember\n   Data will treat the new data as the conanical value of this\n   relationship on the backend.\n\n   Example\n\n    ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n\n    // provide data for reference\n    userRef.push({\n      data: {\n        type: 'user',\n        id: 1,\n        attributes: {\n          username: \"@user\"\n        }\n      }\n    }).then(function(user) {\n      userRef.value() === user;\n    });\n    ```\n\n   @method push\n   @param {Object|Promise} objectOrPromise a promise that resolves to a JSONAPI document object describing the new value of this relationship.\n   @return {Promise<record>} A promise that resolves with the new value in this belongs-to relationship.\n*/\nBelongsToReference.prototype.push = function (objectOrPromise) {\n  return Ember.RSVP.resolve(objectOrPromise).then(data => {\n    var record = void 0;\n\n    if (data instanceof Model) {\n      if (isEnabled('ds-overhaul-references')) {\n        (true && !(false) && Ember.deprecate(\"BelongsToReference#push(DS.Model) is deprecated. Update relationship via `model.set('relationshipName', value)` instead.\", false, {\n          id: 'ds.references.belongs-to.push-record',\n          until: '4.0.0'\n        }));\n      }\n      record = data;\n    } else {\n      record = this.store.push(data);\n    }\n\n    emberData_Debug.assertPolymorphicType(this.internalModel, this.belongsToRelationship.relationshipMeta, record._internalModel);\n\n    this.belongsToRelationship.setCanonicalInternalModel(record._internalModel);\n\n    return record;\n  });\n};\n\n/**\n   `value()` synchronously returns the current value of the belongs-to\n   relationship. Unlike `record.get('relationshipName')`, calling\n   `value()` on a reference does not trigger a fetch if the async\n   relationship is not yet loaded. If the relationship is not loaded\n   it will always return `null`.\n\n   Example\n\n    ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n\n    userRef.value(); // null\n\n    // provide data for reference\n    userRef.push({\n      data: {\n        type: 'user',\n        id: 1,\n        attributes: {\n          username: \"@user\"\n        }\n      }\n    }).then(function(user) {\n      userRef.value(); // user\n    });\n    ```\n\n   @method value\n   @return {DS.Model} the record in this relationship\n*/\nBelongsToReference.prototype.value = function () {\n  var inverseInternalModel = this.belongsToRelationship.inverseInternalModel;\n\n  if (inverseInternalModel && inverseInternalModel.isLoaded()) {\n    return inverseInternalModel.getRecord();\n  }\n\n  return null;\n};\n\n/**\n   Loads a record in a belongs to relationship if it is not already\n   loaded. If the relationship is already loaded this method does not\n   trigger a new load.\n\n   Example\n\n    ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n\n    userRef.value(); // null\n\n    userRef.load().then(function(user) {\n      userRef.value() === user\n    });\n    ```\n\n   @method load\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship.\n*/\nBelongsToReference.prototype.load = function () {\n  if (this.remoteType() === \"id\") {\n    return this.belongsToRelationship.getRecord();\n  }\n\n  if (this.remoteType() === \"link\") {\n    return this.belongsToRelationship.findLink().then(internalModel => {\n      return this.value();\n    });\n  }\n};\n\n/**\n   Triggers a reload of the value in this relationship. If the\n   remoteType is `\"link\"` Ember Data will use the relationship link to\n   reload the relationship. Otherwise it will reload the record by its\n   id.\n\n   Example\n\n    ```javascript\n    // models/blog.js\n    export default DS.Model.extend({\n      user: DS.belongsTo({ async: true })\n    });\n\n    let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n    let userRef = blog.belongsTo('user');\n\n    userRef.reload().then(function(user) {\n      userRef.value() === user\n    });\n    ```\n\n   @method reload\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship after the reload has completed.\n*/\nBelongsToReference.prototype.reload = function () {\n  return this.belongsToRelationship.reload().then(internalModel => {\n    return this.value();\n  });\n};\n\n/**\n   A HasManyReference is a low level API that allows users and addon\n   author to perform meta-operations on a has-many relationship.\n\n   @class HasManyReference\n   @namespace DS\n*/\nvar HasManyReference = function (store, parentInternalModel, hasManyRelationship) {\n  this._super$constructor(store, parentInternalModel);\n  this.hasManyRelationship = hasManyRelationship;\n  this.type = hasManyRelationship.relationshipMeta.type;\n  this.parent = parentInternalModel.recordReference;\n\n  // TODO inverse\n};\n\nHasManyReference.prototype = Object.create(Reference.prototype);\nHasManyReference.prototype.constructor = HasManyReference;\nHasManyReference.prototype._super$constructor = Reference;\n\n/**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   // get the identifier of the reference\n   if (commentsRef.remoteType() === \"ids\") {\n     let ids = commentsRef.ids();\n   } else if (commentsRef.remoteType() === \"link\") {\n     let link = commentsRef.link();\n   }\n   ```\n\n   @method remoteType\n   @return {String} The name of the remote type. This should either be \"link\" or \"ids\"\n*/\nHasManyReference.prototype.remoteType = function () {\n  if (this.hasManyRelationship.link) {\n    return \"link\";\n  }\n\n  return \"ids\";\n};\n\n/**\n   The link Ember Data will use to fetch or reload this has-many\n   relationship.\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           links: {\n             related: '/posts/1/comments'\n           }\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.link(); // '/posts/1/comments'\n   ```\n\n   @method link\n   @return {String} The link Ember Data will use to fetch or reload this has-many relationship.\n*/\nHasManyReference.prototype.link = function () {\n  return this.hasManyRelationship.link;\n};\n\n/**\n   `ids()` returns an array of the record ids in this relationship.\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.ids(); // ['1']\n   ```\n\n   @method ids\n   @return {Array} The ids in this has-many relationship\n*/\nHasManyReference.prototype.ids = function () {\n  var members = this.hasManyRelationship.members.toArray();\n\n  return members.map(function (internalModel) {\n    return internalModel.id;\n  });\n};\n\n/**\n   The meta data for the has-many relationship.\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           links: {\n             related: {\n               href: '/posts/1/comments',\n               meta: {\n                 count: 10\n               }\n             }\n           }\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.meta(); // { count: 10 }\n   ```\n\n   @method meta\n   @return {Object} The meta information for the has-many relationship.\n*/\nHasManyReference.prototype.meta = function () {\n  return this.hasManyRelationship.meta;\n};\n\n/**\n   `push` can be used to update the data in the relationship and Ember\n   Data will treat the new data as the canonical value of this\n   relationship on the backend.\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.ids(); // ['1']\n\n   commentsRef.push([\n     [{ type: 'comment', id: 2 }],\n     [{ type: 'comment', id: 3 }],\n   ])\n\n   commentsRef.ids(); // ['2', '3']\n   ```\n\n   @method push\n   @param {Array|Promise} objectOrPromise a promise that resolves to a JSONAPI document object describing the new value of this relationship.\n   @return {DS.ManyArray}\n*/\nHasManyReference.prototype.push = function (objectOrPromise) {\n  return Ember.RSVP.resolve(objectOrPromise).then(payload => {\n    var array = payload;\n\n    if (isEnabled(\"ds-overhaul-references\")) {\n      (true && !(!Array.isArray(payload)) && Ember.deprecate(\"HasManyReference#push(array) is deprecated. Push a JSON-API document instead.\", !Array.isArray(payload), {\n        id: 'ds.references.has-many.push-array',\n        until: '4.0.0'\n      }));\n    }\n\n    var useLegacyArrayPush = true;\n    if (typeof payload === \"object\" && payload.data) {\n      array = payload.data;\n      useLegacyArrayPush = array.length && array[0].data;\n\n      if (isEnabled('ds-overhaul-references')) {\n        (true && !(!useLegacyArrayPush) && Ember.deprecate(\"HasManyReference#push() expects a valid JSON-API document.\", !useLegacyArrayPush, {\n          id: 'ds.references.has-many.push-invalid-json-api',\n          until: '4.0.0'\n        }));\n      }\n    }\n\n    if (!isEnabled('ds-overhaul-references')) {\n      useLegacyArrayPush = true;\n    }\n\n    var internalModels = void 0;\n    if (useLegacyArrayPush) {\n      internalModels = array.map(obj => {\n        var record = this.store.push(obj);\n\n        {\n          var relationshipMeta = this.hasManyRelationship.relationshipMeta;\n          emberData_Debug.assertPolymorphicType(this.internalModel, relationshipMeta, record._internalModel);\n        }\n\n        return record._internalModel;\n      });\n    } else {\n      var records = this.store.push(payload);\n      internalModels = Ember.A(records).mapBy('_internalModel');\n\n      {\n        internalModels.forEach(internalModel => {\n          var relationshipMeta = this.hasManyRelationship.relationshipMeta;\n          emberData_Debug.assertPolymorphicType(this.internalModel, relationshipMeta, internalModel);\n        });\n      }\n    }\n\n    this.hasManyRelationship.computeChanges(internalModels);\n\n    return this.hasManyRelationship.manyArray;\n  });\n};\n\nHasManyReference.prototype._isLoaded = function () {\n  var hasData = Ember.get(this.hasManyRelationship, 'hasData');\n  if (!hasData) {\n    return false;\n  }\n\n  var members = this.hasManyRelationship.members.toArray();\n\n  return members.every(function (internalModel) {\n    return internalModel.isLoaded() === true;\n  });\n};\n\n/**\n   `value()` synchronously returns the current value of the has-many\n    relationship. Unlike `record.get('relationshipName')`, calling\n    `value()` on a reference does not trigger a fetch if the async\n    relationship is not yet loaded. If the relationship is not loaded\n    it will always return `null`.\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   post.get('comments').then(function(comments) {\n     commentsRef.value() === comments\n   })\n   ```\n\n   @method value\n   @return {DS.ManyArray}\n*/\nHasManyReference.prototype.value = function () {\n  if (this._isLoaded()) {\n    return this.hasManyRelationship.manyArray;\n  }\n\n  return null;\n};\n\n/**\n   Loads the relationship if it is not already loaded.  If the\n   relationship is already loaded this method does not trigger a new\n   load.\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.load().then(function(comments) {\n     //...\n   });\n   ```\n\n   @method load\n   @return {Promise} a promise that resolves with the ManyArray in\n   this has-many relationship.\n*/\nHasManyReference.prototype.load = function () {\n  if (!this._isLoaded()) {\n    return this.hasManyRelationship.getRecords();\n  }\n\n  return Ember.RSVP.resolve(this.hasManyRelationship.manyArray);\n};\n\n/**\n   Reloads this has-many relationship.\n\n   Example\n\n   ```app/models/post.js\n   export default DS.Model.extend({\n     comments: DS.hasMany({ async: true })\n   });\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.reload().then(function(comments) {\n     //...\n   });\n   ```\n\n   @method reload\n   @return {Promise} a promise that resolves with the ManyArray in this has-many relationship.\n*/\nHasManyReference.prototype.reload = function () {\n  return this.hasManyRelationship.reload();\n};\n\nvar emberAssign = Ember.assign || Ember.merge;\n\n/*\n  The TransitionChainMap caches the `state.enters`, `state.setups`, and final state reached\n  when transitioning from one state to another, so that future transitions can replay the\n  transition without needing to walk the state tree, collect these hook calls and determine\n   the state to transition into.\n\n   A future optimization would be to build a single chained method out of the collected enters\n   and setups. It may also be faster to do a two level cache (from: { to }) instead of caching based\n   on a key that adds the two together.\n */\nvar TransitionChainMap = Object.create(null);\n\nvar _extractPivotNameCache = Object.create(null);\nvar _splitOnDotCache = Object.create(null);\n\nfunction splitOnDot(name) {\n  return _splitOnDotCache[name] || (_splitOnDotCache[name] = name.split('.'));\n}\n\nfunction extractPivotName(name) {\n  return _extractPivotNameCache[name] || (_extractPivotNameCache[name] = splitOnDot(name)[0]);\n}\n\nfunction areAllModelsUnloaded(internalModels) {\n  for (var i = 0; i < internalModels.length; ++i) {\n    var record = internalModels[i]._record;\n    if (record && !(record.get('isDestroyed') || record.get('isDestroying'))) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Handle dematerialization for relationship `rel`.  In all cases, notify the\n// relatinoship of the dematerialization: this is done so the relationship can\n// notify its inverse which needs to update state\n//\n// If the inverse is sync, unloading this record is treated as a client-side\n// delete, so we remove the inverse records from this relationship to\n// disconnect the graph.  Because it's not async, we don't need to keep around\n// the internalModel as an id-wrapper for references and because the graph is\n// disconnected we can actually destroy the internalModel when checking for\n// orphaned models.\nfunction destroyRelationship(rel) {\n  rel.internalModelDidDematerialize();\n\n  if (rel._inverseIsSync()) {\n    // disconnect the graph so that the sync inverse relationship does not\n    // prevent us from cleaning up during `_cleanupOrphanedInternalModels`\n    rel.removeAllInternalModelsFromOwn();\n    rel.removeAllCanonicalInternalModelsFromOwn();\n  }\n}\n// this (and all heimdall instrumentation) will be stripped by a babel transform\n//  https://github.com/heimdalljs/babel5-plugin-strip-heimdall\n\n\nvar InternalModelReferenceId = 1;\nvar nextBfsId = 1;\n\n/*\n  `InternalModel` is the Model class that we use internally inside Ember Data to represent models.\n  Internal ED methods should only deal with `InternalModel` objects. It is a fast, plain Javascript class.\n\n  We expose `DS.Model` to application code, by materializing a `DS.Model` from `InternalModel` lazily, as\n  a performance optimization.\n\n  `InternalModel` should never be exposed to application code. At the boundaries of the system, in places\n  like `find`, `push`, etc. we convert between Models and InternalModels.\n\n  We need to make sure that the properties from `InternalModel` are correctly exposed/proxied on `Model`\n  if they are needed.\n\n  @private\n  @class InternalModel\n*/\nclass InternalModel {\n  constructor(modelName, id, store, data) {\n    this.id = id;\n\n    // this ensure ordered set can quickly identify this as unique\n    this[Ember.GUID_KEY] = InternalModelReferenceId++ + 'internal-model';\n\n    this.store = store;\n    this.modelName = modelName;\n    this._loadingPromise = null;\n    this._record = null;\n    this._isDestroyed = false;\n    this.isError = false;\n    this._isUpdatingRecordArrays = false; // used by the recordArrayManager\n\n    // During dematerialization we don't want to rematerialize the record.  The\n    // reason this might happen is that dematerialization removes records from\n    // record arrays,  and Ember arrays will always `objectAt(0)` and\n    // `objectAt(len - 1)` to test whether or not `firstObject` or `lastObject`\n    // have changed.\n    this._isDematerializing = false;\n    this._scheduledDestroy = null;\n\n    this.resetRecord();\n\n    if (data) {\n      this.__data = data;\n    }\n\n    // caches for lazy getters\n    this._modelClass = null;\n    this.__deferredTriggers = null;\n    this.__recordArrays = null;\n    this._references = null;\n    this._recordReference = null;\n    this.__relationships = null;\n    this.__implicitRelationships = null;\n\n    // Used during the mark phase of unloading to avoid checking the same internal\n    // model twice in the same scan\n    this._bfsId = 0;\n  }\n\n  get modelClass() {\n    return this._modelClass || (this._modelClass = this.store._modelFor(this.modelName));\n  }\n\n  get type() {\n    return this.modelClass;\n  }\n\n  get recordReference() {\n    if (this._recordReference === null) {\n      this._recordReference = new RecordReference(this.store, this);\n    }\n    return this._recordReference;\n  }\n\n  get _recordArrays() {\n    if (this.__recordArrays === null) {\n      this.__recordArrays = OrderedSet.create();\n    }\n    return this.__recordArrays;\n  }\n\n  get references() {\n    if (this._references === null) {\n      this._references = Object.create(null);\n    }\n    return this._references;\n  }\n\n  get _deferredTriggers() {\n    if (this.__deferredTriggers === null) {\n      this.__deferredTriggers = [];\n    }\n    return this.__deferredTriggers;\n  }\n\n  get _attributes() {\n    if (this.__attributes === null) {\n      this.__attributes = Object.create(null);\n    }\n    return this.__attributes;\n  }\n\n  set _attributes(v) {\n    this.__attributes = v;\n  }\n\n  get _relationships() {\n    if (this.__relationships === null) {\n      this.__relationships = new Relationships(this);\n    }\n\n    return this.__relationships;\n  }\n\n  get _inFlightAttributes() {\n    if (this.__inFlightAttributes === null) {\n      this.__inFlightAttributes = Object.create(null);\n    }\n    return this.__inFlightAttributes;\n  }\n\n  set _inFlightAttributes(v) {\n    this.__inFlightAttributes = v;\n  }\n\n  get _data() {\n    if (this.__data === null) {\n      this.__data = Object.create(null);\n    }\n    return this.__data;\n  }\n\n  set _data(v) {\n    this.__data = v;\n  }\n\n  /*\n   implicit relationships are relationship which have not been declared but the inverse side exists on\n   another record somewhere\n   For example if there was\n    ```app/models/comment.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n   name: DS.attr()\n   })\n   ```\n    but there is also\n    ```app/models/post.js\n   import DS from 'ember-data';\n    export default DS.Model.extend({\n   name: DS.attr(),\n   comments: DS.hasMany('comment')\n   })\n   ```\n    would have a implicit post relationship in order to be do things like remove ourselves from the post\n   when we are deleted\n  */\n  get _implicitRelationships() {\n    if (this.__implicitRelationships === null) {\n      this.__implicitRelationships = Object.create(null);\n    }\n    return this.__implicitRelationships;\n  }\n\n  isHiddenFromRecordArrays() {\n    // During dematerialization we don't want to rematerialize the record.\n    // recordWasDeleted can cause other records to rematerialize because it\n    // removes the internal model from the array and Ember arrays will always\n    // `objectAt(0)` and `objectAt(len -1)` to check whether `firstObject` or\n    // `lastObject` have changed.  When this happens we don't want those\n    // models to rematerialize their records.\n\n    return this._isDematerializing || this.isDestroyed || this.currentState.stateName === 'root.deleted.saved' || this.isEmpty();\n  }\n\n  isEmpty() {\n    return this.currentState.isEmpty;\n  }\n\n  isLoading() {\n    return this.currentState.isLoading;\n  }\n\n  isLoaded() {\n    return this.currentState.isLoaded;\n  }\n\n  hasDirtyAttributes() {\n    return this.currentState.hasDirtyAttributes;\n  }\n\n  isSaving() {\n    return this.currentState.isSaving;\n  }\n\n  isDeleted() {\n    return this.currentState.isDeleted;\n  }\n\n  isNew() {\n    return this.currentState.isNew;\n  }\n\n  isValid() {\n    return this.currentState.isValid;\n  }\n\n  dirtyType() {\n    return this.currentState.dirtyType;\n  }\n\n  getRecord(properties) {\n    if (!this._record && !this._isDematerializing) {\n\n      // lookupFactory should really return an object that creates\n      // instances with the injections applied\n      var createOptions = {\n        store: this.store,\n        _internalModel: this,\n        id: this.id,\n        currentState: this.currentState,\n        isError: this.isError,\n        adapterError: this.error\n      };\n\n      if (typeof properties === 'object' && properties !== null) {\n        emberAssign(createOptions, properties);\n      }\n\n      if (Ember.setOwner) {\n        // ensure that `getOwner(this)` works inside a model instance\n        Ember.setOwner(createOptions, getOwner(this.store));\n      } else {\n        createOptions.container = this.store.container;\n      }\n\n      this._record = this.store.modelFactoryFor(this.modelName).create(createOptions);\n\n      this._triggerDeferredTriggers();\n    }\n\n    return this._record;\n  }\n\n  resetRecord() {\n    this._record = null;\n    this.isReloading = false;\n    this.error = null;\n    this.currentState = RootState$1.empty;\n    this.__attributes = null;\n    this.__inFlightAttributes = null;\n    this._data = null;\n  }\n\n  dematerializeRecord() {\n    if (this._record) {\n      this._isDematerializing = true;\n      this._record.destroy();\n      this.destroyRelationships();\n      this.updateRecordArrays();\n      this.resetRecord();\n    }\n  }\n\n  deleteRecord() {\n    this.send('deleteRecord');\n  }\n\n  save(options) {\n    var promiseLabel = \"DS: Model#save \" + this;\n    var resolver = Ember.RSVP.defer(promiseLabel);\n\n    this.store.scheduleSave(this, resolver, options);\n    return resolver.promise;\n  }\n\n  startedReloading() {\n    this.isReloading = true;\n    if (this.hasRecord) {\n      Ember.set(this._record, 'isReloading', true);\n    }\n  }\n\n  finishedReloading() {\n    this.isReloading = false;\n    if (this.hasRecord) {\n      Ember.set(this._record, 'isReloading', false);\n    }\n  }\n\n  reload() {\n    this.startedReloading();\n    var internalModel = this;\n    var promiseLabel = \"DS: Model#reload of \" + this;\n\n    return new Ember.RSVP.Promise(function (resolve) {\n      internalModel.send('reloadRecord', resolve);\n    }, promiseLabel).then(function () {\n      internalModel.didCleanError();\n      return internalModel;\n    }, function (error) {\n      internalModel.didError(error);\n      throw error;\n    }, \"DS: Model#reload complete, update flags\").finally(function () {\n      internalModel.finishedReloading();\n      internalModel.updateRecordArrays();\n    });\n  }\n\n  /**\n    Computes the set of internal models reachable from `this` across exactly one\n    relationship.\n     @return {Array} An array containing the internal models that `this` belongs\n    to or has many.\n  */\n  _directlyRelatedInternalModels() {\n    var array = [];\n\n    this._relationships.forEach((name, rel) => {\n      array = array.concat(rel.members.list, rel.canonicalMembers.list);\n    });\n    return array;\n  }\n\n  /**\n    Computes the set of internal models reachable from this internal model.\n     Reachability is determined over the relationship graph (ie a graph where\n    nodes are internal models and edges are belongs to or has many\n    relationships).\n     @return {Array} An array including `this` and all internal models reachable\n    from `this`.\n  */\n  _allRelatedInternalModels() {\n    var array = [];\n    var queue = [];\n    var bfsId = nextBfsId++;\n    queue.push(this);\n    this._bfsId = bfsId;\n    while (queue.length > 0) {\n      var node = queue.shift();\n      array.push(node);\n      var related = node._directlyRelatedInternalModels();\n      for (var i = 0; i < related.length; ++i) {\n        var internalModel = related[i];\n        (true && !(internalModel._bfsId <= bfsId) && Ember.assert('Internal Error: seen a future bfs iteration', internalModel._bfsId <= bfsId));\n\n        if (internalModel._bfsId < bfsId) {\n          queue.push(internalModel);\n          internalModel._bfsId = bfsId;\n        }\n      }\n    }\n    return array;\n  }\n\n  /**\n    Unload the record for this internal model. This will cause the record to be\n    destroyed and freed up for garbage collection. It will also do a check\n    for cleaning up internal models.\n     This check is performed by first computing the set of related internal\n    models. If all records in this set are unloaded, then the entire set is\n    destroyed. Otherwise, nothing in the set is destroyed.\n     This means that this internal model will be freed up for garbage collection\n    once all models that refer to it via some relationship are also unloaded.\n  */\n  unloadRecord() {\n    if (this.isDestroyed) {\n      return;\n    }\n    this.send('unloadRecord');\n    this.dematerializeRecord();\n\n    if (this._scheduledDestroy === null) {\n      // TODO: use run.schedule once we drop 1.13\n      if (!Ember.run.currentRunLoop) {\n        (true && !(Ember.testing) && Ember.assert('You have turned on testing mode, which disabled the run-loop\\'s autorun.\\n                  You will need to wrap any code with asynchronous side-effects in a run', Ember.testing));\n      }\n      this._scheduledDestroy = Ember.run.backburner.schedule('destroy', this, '_checkForOrphanedInternalModels');\n    }\n  }\n\n  hasScheduledDestroy() {\n    return !!this._scheduledDestroy;\n  }\n\n  cancelDestroy() {\n    (true && !(!this.isDestroyed) && Ember.assert(`You cannot cancel the destruction of an InternalModel once it has already been destroyed`, !this.isDestroyed));\n\n\n    this._isDematerializing = false;\n    Ember.run.cancel(this._scheduledDestroy);\n    this._scheduledDestroy = null;\n  }\n\n  // typically, we prefer to async destroy this lets us batch cleanup work.\n  // Unfortunately, some scenarios where that is not possible. Such as:\n  //\n  // ```js\n  // const record = store.find(‘record’, 1);\n  // record.unloadRecord();\n  // store.createRecord(‘record’, 1);\n  // ```\n  //\n  // In those scenarios, we make that model's cleanup work, sync.\n  //\n  destroySync() {\n    if (this._isDematerializing) {\n      this.cancelDestroy();\n    }\n    this._checkForOrphanedInternalModels();\n    if (this.isDestroyed || this.isDestroying) {\n      return;\n    }\n\n    // just in-case we are not one of the orphaned, we should still\n    // still destroy ourselves\n    this.destroy();\n  }\n\n  _checkForOrphanedInternalModels() {\n    this._isDematerializing = false;\n    this._scheduledDestroy = null;\n    if (this.isDestroyed) {\n      return;\n    }\n\n    this._cleanupOrphanedInternalModels();\n  }\n\n  _cleanupOrphanedInternalModels() {\n    var relatedInternalModels = this._allRelatedInternalModels();\n    if (areAllModelsUnloaded(relatedInternalModels)) {\n      for (var i = 0; i < relatedInternalModels.length; ++i) {\n        var internalModel = relatedInternalModels[i];\n        if (!internalModel.isDestroyed) {\n          internalModel.destroy();\n        }\n      }\n    }\n  }\n\n  eachRelationship(callback, binding) {\n    return this.modelClass.eachRelationship(callback, binding);\n  }\n\n  destroy() {\n    (true && !(!this._record || this._record.get('isDestroyed') || this._record.get('isDestroying')) && Ember.assert(\"Cannot destroy an internalModel while its record is materialized\", !this._record || this._record.get('isDestroyed') || this._record.get('isDestroying')));\n\n\n    this.store._internalModelDestroyed(this);\n\n    this._relationships.forEach((name, rel) => rel.destroy());\n\n    this._isDestroyed = true;\n  }\n\n  eachAttribute(callback, binding) {\n    return this.modelClass.eachAttribute(callback, binding);\n  }\n\n  inverseFor(key) {\n    return this.modelClass.inverseFor(key);\n  }\n\n  setupData(data) {\n    this.store._internalModelDidReceiveRelationshipData(this.modelName, this.id, data.relationships);\n\n    var changedKeys = void 0;\n\n    if (this.hasRecord) {\n      changedKeys = this._changedKeys(data.attributes);\n    }\n\n    emberAssign(this._data, data.attributes);\n    this.pushedData();\n\n    if (this.hasRecord) {\n      this._record._notifyProperties(changedKeys);\n    }\n  }\n\n  get isDestroyed() {\n    return this._isDestroyed;\n  }\n\n  get hasRecord() {\n    return !!this._record;\n  }\n\n  /*\n    @method createSnapshot\n    @private\n  */\n  createSnapshot(options) {\n    return new Snapshot(this, options);\n  }\n\n  /*\n    @method loadingData\n    @private\n    @param {Promise} promise\n  */\n  loadingData(promise) {\n    this.send('loadingData', promise);\n  }\n\n  /*\n    @method loadedData\n    @private\n  */\n  loadedData() {\n    this.send('loadedData');\n  }\n\n  /*\n    @method notFound\n    @private\n  */\n  notFound() {\n    this.send('notFound');\n  }\n\n  /*\n    @method pushedData\n    @private\n  */\n  pushedData() {\n    this.send('pushedData');\n  }\n\n  flushChangedAttributes() {\n    this._inFlightAttributes = this._attributes;\n    this._attributes = null;\n  }\n\n  hasChangedAttributes() {\n    return this.__attributes !== null && Object.keys(this.__attributes).length > 0;\n  }\n\n  /*\n    Checks if the attributes which are considered as changed are still\n    different to the state which is acknowledged by the server.\n     This method is needed when data for the internal model is pushed and the\n    pushed data might acknowledge dirty attributes as confirmed.\n     @method updateChangedAttributes\n    @private\n   */\n  updateChangedAttributes() {\n    var changedAttributes = this.changedAttributes();\n    var changedAttributeNames = Object.keys(changedAttributes);\n    var attrs = this._attributes;\n\n    for (var i = 0, length = changedAttributeNames.length; i < length; i++) {\n      var attribute = changedAttributeNames[i];\n      var data = changedAttributes[attribute];\n      var oldData = data[0];\n      var newData = data[1];\n\n      if (oldData === newData) {\n        delete attrs[attribute];\n      }\n    }\n  }\n\n  /*\n    Returns an object, whose keys are changed properties, and value is an\n    [oldProp, newProp] array.\n     @method changedAttributes\n    @private\n  */\n  changedAttributes() {\n    var oldData = this._data;\n    var currentData = this._attributes;\n    var inFlightData = this._inFlightAttributes;\n    var newData = emberAssign(Ember.copy(inFlightData), currentData);\n    var diffData = Object.create(null);\n    var newDataKeys = Object.keys(newData);\n\n    for (var i = 0, length = newDataKeys.length; i < length; i++) {\n      var key = newDataKeys[i];\n      diffData[key] = [oldData[key], newData[key]];\n    }\n\n    return diffData;\n  }\n\n  /*\n    @method adapterWillCommit\n    @private\n  */\n  adapterWillCommit() {\n    this.send('willCommit');\n  }\n\n  /*\n    @method adapterDidDirty\n    @private\n  */\n  adapterDidDirty() {\n    this.send('becomeDirty');\n    this.updateRecordArrays();\n  }\n\n  /*\n    @method send\n    @private\n    @param {String} name\n    @param {Object} context\n  */\n  send(name, context) {\n    var currentState = this.currentState;\n\n    if (!currentState[name]) {\n      this._unhandledEvent(currentState, name, context);\n    }\n\n    return currentState[name](this, context);\n  }\n\n  notifyHasManyAdded(key, record, idx) {\n    if (this.hasRecord) {\n      this._record.notifyHasManyAdded(key, record, idx);\n    }\n  }\n\n  notifyBelongsToChanged(key, record) {\n    if (this.hasRecord) {\n      this._record.notifyBelongsToChanged(key, record);\n    }\n  }\n\n  notifyPropertyChange(key) {\n    if (this.hasRecord) {\n      this._record.notifyPropertyChange(key);\n    }\n  }\n\n  rollbackAttributes() {\n    var dirtyKeys = void 0;\n    if (this.hasChangedAttributes()) {\n      dirtyKeys = Object.keys(this._attributes);\n      this._attributes = null;\n    }\n\n    if (Ember.get(this, 'isError')) {\n      this._inFlightAttributes = null;\n      this.didCleanError();\n    }\n\n    if (this.isNew()) {\n      this.removeFromInverseRelationships();\n    }\n\n    if (this.isValid()) {\n      this._inFlightAttributes = null;\n    }\n\n    this.send('rolledBack');\n\n    if (dirtyKeys && dirtyKeys.length > 0) {\n      this._record._notifyProperties(dirtyKeys);\n    }\n  }\n\n  /*\n    @method transitionTo\n    @private\n    @param {String} name\n  */\n  transitionTo(name) {\n    // POSSIBLE TODO: Remove this code and replace with\n    // always having direct reference to state objects\n\n    var pivotName = extractPivotName(name);\n    var state = this.currentState;\n    var transitionMapId = `${state.stateName}->${name}`;\n\n    do {\n      if (state.exit) {\n        state.exit(this);\n      }\n      state = state.parentState;\n    } while (!state[pivotName]);\n\n    var setups = void 0;\n    var enters = void 0;\n    var i = void 0;\n    var l = void 0;\n    var map = TransitionChainMap[transitionMapId];\n\n    if (map) {\n      setups = map.setups;\n      enters = map.enters;\n      state = map.state;\n    } else {\n      setups = [];\n      enters = [];\n\n      var path = splitOnDot(name);\n\n      for (i = 0, l = path.length; i < l; i++) {\n        state = state[path[i]];\n\n        if (state.enter) {\n          enters.push(state);\n        }\n        if (state.setup) {\n          setups.push(state);\n        }\n      }\n\n      TransitionChainMap[transitionMapId] = { setups, enters, state };\n    }\n\n    for (i = 0, l = enters.length; i < l; i++) {\n      enters[i].enter(this);\n    }\n\n    this.currentState = state;\n    if (this.hasRecord) {\n      Ember.set(this._record, 'currentState', state);\n    }\n\n    for (i = 0, l = setups.length; i < l; i++) {\n      setups[i].setup(this);\n    }\n\n    this.updateRecordArrays();\n  }\n\n  _unhandledEvent(state, name, context) {\n    var errorMessage = \"Attempted to handle event `\" + name + \"` \";\n    errorMessage += \"on \" + String(this) + \" while in state \";\n    errorMessage += state.stateName + \". \";\n\n    if (context !== undefined) {\n      errorMessage += \"Called with \" + Ember.inspect(context) + \".\";\n    }\n\n    throw new Ember.Error(errorMessage);\n  }\n\n  triggerLater(...args) {\n    if (this._deferredTriggers.push(args) !== 1) {\n      return;\n    }\n\n    this.store._updateInternalModel(this);\n  }\n\n  _triggerDeferredTriggers() {\n    //TODO: Before 1.0 we want to remove all the events that happen on the pre materialized record,\n    //but for now, we queue up all the events triggered before the record was materialized, and flush\n    //them once we have the record\n    if (!this.hasRecord) {\n      return;\n    }\n    var triggers = this._deferredTriggers;\n    var record = this._record;\n    var trigger = record.trigger;\n    for (var i = 0, l = triggers.length; i < l; i++) {\n      trigger.apply(record, triggers[i]);\n    }\n\n    triggers.length = 0;\n  }\n\n  /*\n   This method should only be called by records in the `isNew()` state OR once the record\n   has been deleted and that deletion has been persisted.\n    It will remove this record from any associated relationships.\n     @method removeFromInverseRelationships\n    @private\n   */\n  removeFromInverseRelationships() {\n    this._relationships.forEach((name, rel) => {\n      rel.removeCompletelyFromInverse();\n      rel.clear();\n    });\n\n    var implicitRelationships = this._implicitRelationships;\n    this.__implicitRelationships = null;\n\n    Object.keys(implicitRelationships).forEach(key => {\n      var rel = implicitRelationships[key];\n\n      rel.removeCompletelyFromInverse();\n      rel.clear();\n    });\n  }\n\n  /*\n    Notify all inverses that this internalModel has been dematerialized\n    and destroys any ManyArrays.\n   */\n  destroyRelationships() {\n    var relationships = this._relationships;\n    relationships.forEach((name, rel) => destroyRelationship(rel));\n\n    var implicitRelationships = this._implicitRelationships;\n    this.__implicitRelationships = null;\n    Object.keys(implicitRelationships).forEach(key => {\n      var rel = implicitRelationships[key];\n      destroyRelationship(rel);\n    });\n  }\n\n  /*\n    When a find request is triggered on the store, the user can optionally pass in\n    attributes and relationships to be preloaded. These are meant to behave as if they\n    came back from the server, except the user obtained them out of band and is informing\n    the store of their existence. The most common use case is for supporting client side\n    nested URLs, such as `/posts/1/comments/2` so the user can do\n    `store.findRecord('comment', 2, { preload: { post: 1 } })` without having to fetch the post.\n     Preloaded data can be attributes and relationships passed in either as IDs or as actual\n    models.\n     @method preloadData\n    @private\n    @param {Object} preload\n  */\n  preloadData(preload) {\n    //TODO(Igor) consider the polymorphic case\n    Object.keys(preload).forEach(key => {\n      var preloadValue = Ember.get(preload, key);\n      var relationshipMeta = this.modelClass.metaForProperty(key);\n      if (relationshipMeta.isRelationship) {\n        this._preloadRelationship(key, preloadValue);\n      } else {\n        this._data[key] = preloadValue;\n      }\n    });\n  }\n\n  _preloadRelationship(key, preloadValue) {\n    var relationshipMeta = this.modelClass.metaForProperty(key);\n    var modelClass = relationshipMeta.type;\n    if (relationshipMeta.kind === 'hasMany') {\n      this._preloadHasMany(key, preloadValue, modelClass);\n    } else {\n      this._preloadBelongsTo(key, preloadValue, modelClass);\n    }\n  }\n\n  _preloadHasMany(key, preloadValue, modelClass) {\n    (true && !(Array.isArray(preloadValue)) && Ember.assert(\"You need to pass in an array to set a hasMany property on a record\", Array.isArray(preloadValue)));\n\n    var recordsToSet = new Array(preloadValue.length);\n\n    for (var i = 0; i < preloadValue.length; i++) {\n      var recordToPush = preloadValue[i];\n      recordsToSet[i] = this._convertStringOrNumberIntoInternalModel(recordToPush, modelClass);\n    }\n\n    //We use the pathway of setting the hasMany as if it came from the adapter\n    //because the user told us that they know this relationships exists already\n    this._relationships.get(key).updateInternalModelsFromAdapter(recordsToSet);\n  }\n\n  _preloadBelongsTo(key, preloadValue, modelClass) {\n    var internalModelToSet = this._convertStringOrNumberIntoInternalModel(preloadValue, modelClass);\n\n    //We use the pathway of setting the hasMany as if it came from the adapter\n    //because the user told us that they know this relationships exists already\n    this._relationships.get(key).setInternalModel(internalModelToSet);\n  }\n\n  _convertStringOrNumberIntoInternalModel(value, modelClass) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      return this.store._internalModelForId(modelClass, value);\n    }\n    if (value._internalModel) {\n      return value._internalModel;\n    }\n    return value;\n  }\n\n  /*\n    Used to notify the store to update FilteredRecordArray membership.\n     @method updateRecordArrays\n    @private\n  */\n  updateRecordArrays() {\n    this.store.recordArrayManager.recordDidChange(this);\n  }\n\n  setId(id) {\n    (true && !(this.id === null || this.id === id || this.isNew()) && Ember.assert('A record\\'s id cannot be changed once it is in the loaded state', this.id === null || this.id === id || this.isNew()));\n\n    this.id = id;\n    if (this._record.get('id') !== id) {\n      this._record.set('id', id);\n    }\n  }\n\n  didError(error) {\n    this.error = error;\n    this.isError = true;\n\n    if (this.hasRecord) {\n      this._record.setProperties({\n        isError: true,\n        adapterError: error\n      });\n    }\n  }\n\n  didCleanError() {\n    this.error = null;\n    this.isError = false;\n\n    if (this.hasRecord) {\n      this._record.setProperties({\n        isError: false,\n        adapterError: null\n      });\n    }\n  }\n\n  /*\n    If the adapter did not return a hash in response to a commit,\n    merge the changed attributes and relationships into the existing\n    saved data.\n     @method adapterDidCommit\n  */\n  adapterDidCommit(data) {\n    if (data) {\n      this.store._internalModelDidReceiveRelationshipData(this.modelName, this.id, data.relationships);\n\n      data = data.attributes;\n    }\n\n    this.didCleanError();\n    var changedKeys = this._changedKeys(data);\n\n    emberAssign(this._data, this._inFlightAttributes);\n    if (data) {\n      emberAssign(this._data, data);\n    }\n\n    this._inFlightAttributes = null;\n\n    this.send('didCommit');\n    this.updateRecordArrays();\n\n    if (!data) {\n      return;\n    }\n\n    this._record._notifyProperties(changedKeys);\n  }\n\n  addErrorMessageToAttribute(attribute, message) {\n    Ember.get(this.getRecord(), 'errors')._add(attribute, message);\n  }\n\n  removeErrorMessageFromAttribute(attribute) {\n    Ember.get(this.getRecord(), 'errors')._remove(attribute);\n  }\n\n  clearErrorMessages() {\n    Ember.get(this.getRecord(), 'errors')._clear();\n  }\n\n  hasErrors() {\n    var errors = Ember.get(this.getRecord(), 'errors');\n\n    return !Ember.isEmpty(errors);\n  }\n\n  // FOR USE DURING COMMIT PROCESS\n\n  /*\n    @method adapterDidInvalidate\n    @private\n  */\n  adapterDidInvalidate(errors) {\n    var attribute = void 0;\n\n    for (attribute in errors) {\n      if (errors.hasOwnProperty(attribute)) {\n        this.addErrorMessageToAttribute(attribute, errors[attribute]);\n      }\n    }\n\n    this.send('becameInvalid');\n\n    this._saveWasRejected();\n  }\n\n  /*\n    @method adapterDidError\n    @private\n  */\n  adapterDidError(error) {\n    this.send('becameError');\n    this.didError(error);\n    this._saveWasRejected();\n  }\n\n  _saveWasRejected() {\n    var keys = Object.keys(this._inFlightAttributes);\n    if (keys.length > 0) {\n      var attrs = this._attributes;\n      for (var i = 0; i < keys.length; i++) {\n        if (attrs[keys[i]] === undefined) {\n          attrs[keys[i]] = this._inFlightAttributes[keys[i]];\n        }\n      }\n    }\n    this._inFlightAttributes = null;\n  }\n\n  /*\n    Ember Data has 3 buckets for storing the value of an attribute on an internalModel.\n     `_data` holds all of the attributes that have been acknowledged by\n    a backend via the adapter. When rollbackAttributes is called on a model all\n    attributes will revert to the record's state in `_data`.\n     `_attributes` holds any change the user has made to an attribute\n    that has not been acknowledged by the adapter. Any values in\n    `_attributes` are have priority over values in `_data`.\n     `_inFlightAttributes`. When a record is being synced with the\n    backend the values in `_attributes` are copied to\n    `_inFlightAttributes`. This way if the backend acknowledges the\n    save but does not return the new state Ember Data can copy the\n    values from `_inFlightAttributes` to `_data`. Without having to\n    worry about changes made to `_attributes` while the save was\n    happenign.\n      Changed keys builds a list of all of the values that may have been\n    changed by the backend after a successful save.\n     It does this by iterating over each key, value pair in the payload\n    returned from the server after a save. If the `key` is found in\n    `_attributes` then the user has a local changed to the attribute\n    that has not been synced with the server and the key is not\n    included in the list of changed keys.\n  \n    If the value, for a key differs from the value in what Ember Data\n    believes to be the truth about the backend state (A merger of the\n    `_data` and `_inFlightAttributes` objects where\n    `_inFlightAttributes` has priority) then that means the backend\n    has updated the value and the key is added to the list of changed\n    keys.\n     @method _changedKeys\n    @private\n  */\n  _changedKeys(updates) {\n    var changedKeys = [];\n\n    if (updates) {\n      var original = void 0,\n          i = void 0,\n          value = void 0,\n          key = void 0;\n      var keys = Object.keys(updates);\n      var length = keys.length;\n      var hasAttrs = this.hasChangedAttributes();\n      var attrs = void 0;\n      if (hasAttrs) {\n        attrs = this._attributes;\n      }\n\n      original = emberAssign(Object.create(null), this._data);\n      original = emberAssign(original, this._inFlightAttributes);\n\n      for (i = 0; i < length; i++) {\n        key = keys[i];\n        value = updates[key];\n\n        // A value in _attributes means the user has a local change to\n        // this attributes. We never override this value when merging\n        // updates from the backend so we should not sent a change\n        // notification if the server value differs from the original.\n        if (hasAttrs === true && attrs[key] !== undefined) {\n          continue;\n        }\n\n        if (!Ember.isEqual(original[key], value)) {\n          changedKeys.push(key);\n        }\n      }\n    }\n\n    return changedKeys;\n  }\n\n  toString() {\n    return `<${this.modelName}:${this.id}>`;\n  }\n\n  referenceFor(kind, name) {\n    var reference = this.references[name];\n\n    if (!reference) {\n      var relationship = this._relationships.get(name);\n\n      {\n        var modelName = this.modelName;\n        (true && !(relationship) && Ember.assert(`There is no ${kind} relationship named '${name}' on a model of modelClass '${modelName}'`, relationship));\n\n\n        var actualRelationshipKind = relationship.relationshipMeta.kind;\n        (true && !(actualRelationshipKind === kind) && Ember.assert(`You tried to get the '${name}' relationship on a '${modelName}' via record.${kind}('${name}'), but the relationship is of kind '${actualRelationshipKind}'. Use record.${actualRelationshipKind}('${name}') instead.`, actualRelationshipKind === kind));\n      }\n\n      if (kind === \"belongsTo\") {\n        reference = new BelongsToReference(this.store, this, relationship);\n      } else if (kind === \"hasMany\") {\n        reference = new HasManyReference(this.store, this, relationship);\n      }\n\n      this.references[name] = reference;\n    }\n\n    return reference;\n  }\n}\n\nif (isEnabled('ds-rollback-attribute')) {\n  /*\n     Returns the latest truth for an attribute - the canonical value, or the\n     in-flight value.\n      @method lastAcknowledgedValue\n     @private\n  */\n  InternalModel.prototype.lastAcknowledgedValue = function lastAcknowledgedValue(key) {\n    if (key in this._inFlightAttributes) {\n      return this._inFlightAttributes[key];\n    } else {\n      return this._data[key];\n    }\n  };\n}\n\n/**\n `InternalModelMap` is a custom storage map for internalModels of a given modelName\n used by `IdentityMap`.\n\n It was extracted from an implicit pojo based \"internalModel map\" and preserves\n that interface while we work towards a more official API.\n\n @class InternalModelMap\n @private\n */\nclass InternalModelMap {\n  constructor(modelName) {\n    this.modelName = modelName;\n    this._idToModel = Object.create(null);\n    this._models = [];\n    this._metadata = null;\n  }\n\n  /**\n   *\n   * @param id\n   * @returns {InternalModel}\n   */\n  get(id) {\n    return this._idToModel[id];\n  }\n\n  has(id) {\n    return !!this._idToModel[id];\n  }\n\n  get length() {\n    return this._models.length;\n  }\n\n  set(id, internalModel) {\n    (true && !(id) && Ember.assert(`You cannot index an internalModel by an empty id'`, id));\n    (true && !(internalModel instanceof InternalModel) && Ember.assert(`You cannot set an index for an internalModel to something other than an internalModel`, internalModel instanceof InternalModel));\n    (true && !(this.contains(internalModel)) && Ember.assert(`You cannot set an index for an internalModel that is not in the InternalModelMap`, this.contains(internalModel)));\n    (true && !(!this.has(id) || this.get(id) === internalModel) && Ember.assert(`You cannot update the id index of an InternalModel once set. Attempted to update ${id}.`, !this.has(id) || this.get(id) === internalModel));\n\n\n    this._idToModel[id] = internalModel;\n  }\n\n  add(internalModel, id) {\n    (true && !(!this.contains(internalModel)) && Ember.assert(`You cannot re-add an already present InternalModel to the InternalModelMap.`, !this.contains(internalModel)));\n\n\n    if (id) {\n      this._idToModel[id] = internalModel;\n    }\n\n    this._models.push(internalModel);\n  }\n\n  remove(internalModel, id) {\n    delete this._idToModel[id];\n\n    var loc = this._models.indexOf(internalModel);\n\n    if (loc !== -1) {\n      this._models.splice(loc, 1);\n    }\n  }\n\n  contains(internalModel) {\n    return this._models.indexOf(internalModel) !== -1;\n  }\n\n  /**\n   An array of all models of this modelName\n   */\n  get models() {\n    return this._models;\n  }\n\n  /**\n   * meta information about internalModels\n   */\n  get metadata() {\n    return this._metadata || (this._metadata = Object.create(null));\n  }\n\n  /**\n   deprecated (and unsupported) way of accessing modelClass\n    @deprecated\n   */\n  get type() {\n    throw new Error('InternalModelMap.type is no longer available');\n  }\n\n  /**\n   Destroy all models in the internalModelTest and wipe metadata.\n    @method clear\n   */\n  clear() {\n    var models = this._models;\n    this._models = [];\n\n    for (var i = 0; i < models.length; i++) {\n      var model = models[i];\n      model.unloadRecord();\n    }\n\n    this._metadata = null;\n  }\n\n}\n\n/**\n `IdentityMap` is a custom storage map for records by modelName\n used by `DS.Store`.\n\n @class IdentityMap\n @private\n */\nclass IdentityMap {\n  constructor() {\n    this._map = Object.create(null);\n  }\n\n  /**\n   Retrieves the `InternalModelMap` for a given modelName,\n   creating one if one did not already exist. This is\n   similar to `getWithDefault` or `get` on a `MapWithDefault`\n    @method retrieve\n   @param modelName a previously normalized modelName\n   @returns {InternalModelMap} the InternalModelMap for the given modelName\n   */\n  retrieve(modelName) {\n    var map = this._map[modelName];\n\n    if (map === undefined) {\n      map = this._map[modelName] = new InternalModelMap(modelName);\n    }\n\n    return map;\n  }\n\n  /**\n   Clears the contents of all known `RecordMaps`, but does\n   not remove the InternalModelMap instances.\n    @method clear\n   */\n  clear() {\n    var map = this._map;\n    var keys = Object.keys(map);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      map[key].clear();\n    }\n  }\n}\n\n/*\n  This is a helper method that validates a JSON API top-level document\n\n  The format of a document is described here:\n  http://jsonapi.org/format/#document-top-level\n\n  @method validateDocumentStructure\n  @param {Object} doc JSON API document\n  @return {array} An array of errors found in the document structure\n*/\nfunction validateDocumentStructure(doc) {\n  var errors = [];\n  if (!doc || typeof doc !== 'object') {\n    errors.push('Top level of a JSON API document must be an object');\n  } else {\n    if (!('data' in doc) && !('errors' in doc) && !('meta' in doc)) {\n      errors.push('One or more of the following keys must be present: \"data\", \"errors\", \"meta\".');\n    } else {\n      if ('data' in doc && 'errors' in doc) {\n        errors.push('Top level keys \"errors\" and \"data\" cannot both be present in a JSON API document');\n      }\n    }\n    if ('data' in doc) {\n      if (!(doc.data === null || Array.isArray(doc.data) || typeof doc.data === 'object')) {\n        errors.push('data must be null, an object, or an array');\n      }\n    }\n    if ('meta' in doc) {\n      if (typeof doc.meta !== 'object') {\n        errors.push('meta must be an object');\n      }\n    }\n    if ('errors' in doc) {\n      if (!Array.isArray(doc.errors)) {\n        errors.push('errors must be an array');\n      }\n    }\n    if ('links' in doc) {\n      if (typeof doc.links !== 'object') {\n        errors.push('links must be an object');\n      }\n    }\n    if ('jsonapi' in doc) {\n      if (typeof doc.jsonapi !== 'object') {\n        errors.push('jsonapi must be an object');\n      }\n    }\n    if ('included' in doc) {\n      if (typeof doc.included !== 'object') {\n        errors.push('included must be an array');\n      }\n    }\n  }\n\n  return errors;\n}\n\n/*\n  This is a helper method that always returns a JSON-API Document.\n\n  @method normalizeResponseHelper\n  @param {DS.Serializer} serializer\n  @param {DS.Store} store\n  @param {subclass of DS.Model} modelClass\n  @param {Object} payload\n  @param {String|Number} id\n  @param {String} requestType\n  @return {Object} JSON-API Document\n*/\nfunction normalizeResponseHelper(serializer, store, modelClass, payload, id, requestType) {\n  var normalizedResponse = serializer.normalizeResponse(store, modelClass, payload, id, requestType);\n  var validationErrors = [];\n  {\n    validationErrors = validateDocumentStructure(normalizedResponse);\n  }\n  (true && !(Ember.isEmpty(validationErrors)) && Ember.assert(`normalizeResponse must return a valid JSON API document:\\n\\t* ${validationErrors.join('\\n\\t* ')}`, Ember.isEmpty(validationErrors)));\n\n\n  return normalizedResponse;\n}\n\nfunction serializerForAdapter(store, adapter, modelName) {\n  var serializer = adapter.serializer;\n\n  if (serializer === undefined) {\n    serializer = store.serializerFor(modelName);\n  }\n\n  if (serializer === null || serializer === undefined) {\n    serializer = {\n      extract(store, type, payload) {\n        return payload;\n      }\n    };\n  }\n\n  return serializer;\n}\n\n// TODO this is now VERY similar to the identity/internal-model map\n//  so we should probably generalize\nclass TypeCache {\n  constructor() {\n    this.types = Object.create(null);\n  }\n  get(modelName, id) {\n    var { types } = this;\n\n    if (types[modelName] !== undefined) {\n      return types[modelName][id];\n    }\n  }\n\n  set(modelName, id, payload) {\n    var { types } = this;\n    var typeMap = types[modelName];\n\n    if (typeMap === undefined) {\n      typeMap = types[modelName] = Object.create(null);\n    }\n\n    typeMap[id] = payload;\n  }\n\n  delete(modelName, id) {\n    var { types } = this;\n\n    if (types[modelName] !== undefined) {\n      delete types[modelName][id];\n    }\n  }\n}\n\n/**\n Manages the payloads for both sides of a single relationship, across all model\n instances.\n\n For example, with\n\n const User = DS.Model.extend({\n      hobbies: DS.hasMany('hobby')\n    });\n\n const Hobby = DS.Model.extend({\n      user: DS.belongsTo('user')\n    });\n\n let relationshipPayloads = new RelationshipPayloads('user', 'hobbies', 'hobby', 'user');\n\n let userPayload = {\n      data: {\n        id: 1,\n        type: 'user',\n        relationships: {\n          hobbies: {\n            data: [{\n              id: 2,\n              type: 'hobby',\n            }]\n          }\n        }\n      }\n    };\n\n // here we expect the payload of the individual relationship\n relationshipPayloads.push('user', 1, 'hobbies', userPayload.data.relationships.hobbies);\n\n relationshipPayloads.get('user', 1, 'hobbies');\n relationshipPayloads.get('hobby', 2, 'user');\n\n @class RelationshipPayloads\n @private\n */\nclass RelationshipPayloads {\n  constructor(relInfo) {\n    this._relInfo = relInfo;\n\n    // a map of id -> payloads for the left hand side of the relationship.\n    this.lhs_payloads = new TypeCache();\n    this.rhs_payloads = relInfo.isReflexive ? this.lhs_payloads : new TypeCache();\n\n    // When we push relationship payloads, just stash them in a queue until\n    // somebody actually asks for one of them.\n    //\n    // This is a queue of the relationship payloads that have been pushed for\n    // either side of this relationship\n    this._pendingPayloads = [];\n  }\n\n  /**\n   Get the payload for the relationship of an individual record.\n    This might return the raw payload as pushed into the store, or one computed\n   from the payload of the inverse relationship.\n    @method\n   */\n  get(modelName, id, relationshipName) {\n    this._flushPending();\n\n    if (this._isLHS(modelName, relationshipName)) {\n      return this.lhs_payloads.get(modelName, id);\n    } else {\n      (true && !(this._isRHS(modelName, relationshipName)) && Ember.assert(`${modelName}:${relationshipName} is not either side of this relationship, ${this._relInfo.lhs_key}<->${this._relInfo.rhs_key}`, this._isRHS(modelName, relationshipName)));\n\n      return this.rhs_payloads.get(modelName, id);\n    }\n  }\n\n  /**\n   Push a relationship payload for an individual record.\n    This will make the payload available later for both this relationship and its inverse.\n    @method\n   */\n  push(modelName, id, relationshipName, relationshipData) {\n    this._pendingPayloads.push([modelName, id, relationshipName, relationshipData]);\n  }\n\n  /**\n   Unload the relationship payload for an individual record.\n    This does not unload the inverse relationship payload.\n    @method\n   */\n  unload(modelName, id, relationshipName) {\n    this._flushPending();\n\n    if (this._isLHS(modelName, relationshipName)) {\n      delete this.lhs_payloads.delete(modelName, id);\n    } else {\n      (true && !(this._isRHS(modelName, relationshipName)) && Ember.assert(`${modelName}:${relationshipName} is not either side of this relationship, ${this._relInfo.lhs_baseModelName}:${this._relInfo.lhs_relationshipName}<->${this._relInfo.rhs_baseModelName}:${this._relInfo.rhs_relationshipName}`, this._isRHS(modelName, relationshipName)));\n\n      delete this.rhs_payloads.delete(modelName, id);\n    }\n  }\n\n  /**\n   @return {boolean} true iff `modelName` and `relationshipName` refer to the\n   left hand side of this relationship, as opposed to the right hand side.\n    @method\n   */\n  _isLHS(modelName, relationshipName) {\n    var relInfo = this._relInfo;\n    var isSelfReferential = relInfo.isSelfReferential;\n    var isRelationship = relationshipName === relInfo.lhs_relationshipName;\n\n    if (isRelationship === true) {\n      return isSelfReferential === true || // itself\n      modelName === relInfo.lhs_baseModelName || // base or non-polymorphic\n      relInfo.lhs_modelNames.indexOf(modelName) !== -1; // polymorphic\n    }\n\n    return false;\n  }\n\n  /**\n   @return {boolean} true iff `modelName` and `relationshipName` refer to the\n   right hand side of this relationship, as opposed to the left hand side.\n    @method\n   */\n  _isRHS(modelName, relationshipName) {\n    var relInfo = this._relInfo;\n    var isSelfReferential = relInfo.isSelfReferential;\n    var isRelationship = relationshipName === relInfo.rhs_relationshipName;\n\n    if (isRelationship === true) {\n      return isSelfReferential === true || // itself\n      modelName === relInfo.rhs_baseModelName || // base or non-polymorphic\n      relInfo.rhs_modelNames.indexOf(modelName) !== -1; // polymorphic\n    }\n\n    return false;\n  }\n\n  _flushPending() {\n    if (this._pendingPayloads.length === 0) {\n      return;\n    }\n\n    var payloadsToBeProcessed = this._pendingPayloads.splice(0, this._pendingPayloads.length);\n    for (var i = 0; i < payloadsToBeProcessed.length; ++i) {\n      var modelName = payloadsToBeProcessed[i][0];\n      var id = payloadsToBeProcessed[i][1];\n      var relationshipName = payloadsToBeProcessed[i][2];\n      var relationshipData = payloadsToBeProcessed[i][3];\n\n      // TODO: maybe delay this allocation slightly?\n      var inverseRelationshipData = {\n        data: {\n          id: id,\n          type: modelName\n        }\n      };\n\n      // start flushing this individual payload.  The logic is the same whether\n      // it's for the left hand side of the relationship or the right hand side,\n      // except the role of primary and inverse idToPayloads is reversed\n      //\n      var previousPayload = void 0;\n      var payloadMap = void 0;\n      var inversePayloadMap = void 0;\n      var inverseIsMany = void 0;\n\n      if (this._isLHS(modelName, relationshipName)) {\n        previousPayload = this.lhs_payloads.get(modelName, id);\n        payloadMap = this.lhs_payloads;\n        inversePayloadMap = this.rhs_payloads;\n        inverseIsMany = this._rhsRelationshipIsMany;\n      } else {\n        (true && !(this._isRHS(modelName, relationshipName)) && Ember.assert(`${modelName}:${relationshipName} is not either side of this relationship, ${this._relInfo.lhs_key}<->${this._relInfo.rhs_key}`, this._isRHS(modelName, relationshipName)));\n\n        previousPayload = this.rhs_payloads.get(modelName, id);\n        payloadMap = this.rhs_payloads;\n        inversePayloadMap = this.lhs_payloads;\n        inverseIsMany = this._lhsRelationshipIsMany;\n      }\n\n      // actually flush this individual payload\n      //\n      // We remove the previous inverse before populating our current one\n      // because we may have multiple payloads for the same relationship, in\n      // which case the last one wins.\n      //\n      // eg if user hasMany helicopters, and helicopter belongsTo user and we see\n      //\n      //  [{\n      //    data: {\n      //      id: 1,\n      //      type: 'helicopter',\n      //      relationships: {\n      //        user: {\n      //          id: 2,\n      //          type: 'user'\n      //        }\n      //      }\n      //    }\n      //  }, {\n      //    data: {\n      //      id: 1,\n      //      type: 'helicopter',\n      //      relationships: {\n      //        user: {\n      //          id: 4,\n      //          type: 'user'\n      //        }\n      //      }\n      //    }\n      //  }]\n      //\n      // Then we will initially have set user:2 as having helicopter:1, which we\n      // need to remove before adding helicopter:1 to user:4\n      //\n      // only remove relationship information before adding if there is relationshipData.data\n      // * null is considered new information \"empty\", and it should win\n      // * undefined is NOT considered new information, we should keep original state\n      // * anything else is considered new information, and it should win\n      if (relationshipData.data !== undefined) {\n        this._removeInverse(id, previousPayload, inversePayloadMap);\n      }\n      payloadMap.set(modelName, id, relationshipData);\n      this._populateInverse(relationshipData, inverseRelationshipData, inversePayloadMap, inverseIsMany);\n    }\n  }\n\n  /**\n   Populate the inverse relationship for `relationshipData`.\n    If `relationshipData` is an array (eg because the relationship is hasMany)\n   this means populate each inverse, otherwise populate only the single\n   inverse.\n    @private\n   @method\n   */\n  _populateInverse(relationshipData, inversePayload, inversePayloadMap, inverseIsMany) {\n    if (!relationshipData.data) {\n      // This id doesn't have an inverse, eg a belongsTo with a payload\n      // { data: null }, so there's nothing to populate\n      return;\n    }\n\n    if (Array.isArray(relationshipData.data)) {\n      for (var i = 0; i < relationshipData.data.length; ++i) {\n        var resourceIdentifier = relationshipData.data[i];\n        this._addToInverse(inversePayload, resourceIdentifier, inversePayloadMap, inverseIsMany);\n      }\n    } else {\n      var _resourceIdentifier = relationshipData.data;\n      this._addToInverse(inversePayload, _resourceIdentifier, inversePayloadMap, inverseIsMany);\n    }\n  }\n\n  /**\n   Actually add `inversePayload` to `inverseIdToPayloads`.  This is part of\n   `_populateInverse` after we've normalized the case of `relationshipData`\n   being either an array or a pojo.\n    We still have to handle the case that the *inverse* relationship payload may\n   be an array or pojo.\n    @private\n   @method\n   */\n  _addToInverse(inversePayload, resourceIdentifier, inversePayloadMap, inverseIsMany) {\n    var relInfo = this._relInfo;\n\n    if (relInfo.isReflexive && inversePayload.data.id === resourceIdentifier.id) {\n      // eg <user:1>.friends = [{ id: 1, type: 'user' }]\n      return;\n    }\n\n    var existingPayload = inversePayloadMap.get(resourceIdentifier.type, resourceIdentifier.id);\n    var existingData = existingPayload && existingPayload.data;\n\n    if (existingData) {\n      // There already is an inverse, either add or overwrite depehnding on\n      // whether the inverse is a many relationship or not\n      //\n      if (Array.isArray(existingData)) {\n        existingData.push(inversePayload.data);\n      } else {\n        inversePayloadMap.set(resourceIdentifier.type, resourceIdentifier.id, inversePayload);\n      }\n    } else {\n      // first time we're populating the inverse side\n      //\n      if (inverseIsMany) {\n        inversePayloadMap.set(resourceIdentifier.type, resourceIdentifier.id, {\n          data: [inversePayload.data]\n        });\n      } else {\n        inversePayloadMap.set(resourceIdentifier.type, resourceIdentifier.id, inversePayload);\n      }\n    }\n  }\n\n  get _lhsRelationshipIsMany() {\n    var meta = this._relInfo.lhs_relationshipMeta;\n    return meta !== null && meta.kind === 'hasMany';\n  }\n\n  get _rhsRelationshipIsMany() {\n    var meta = this._relInfo.rhs_relationshipMeta;\n    return meta !== null && meta.kind === 'hasMany';\n  }\n\n  /**\n   Remove the relationship in `previousPayload` from its inverse(s), because\n   this relationship payload has just been updated (eg because the same\n   relationship had multiple payloads pushed before the relationship was\n   initialized).\n    @method\n   */\n  _removeInverse(id, previousPayload, inversePayloadMap) {\n    var data = previousPayload && previousPayload.data;\n    if (!data) {\n      // either this is the first time we've seen a payload for this id, or its\n      // previous payload indicated that it had no inverse, eg a belongsTo\n      // relationship with payload { data: null }\n      //\n      // In either case there's nothing that needs to be removed from the\n      // inverse map of payloads\n      return;\n    }\n\n    if (Array.isArray(data)) {\n      // TODO: diff rather than removeall addall?\n      for (var i = 0; i < data.length; ++i) {\n        var resourceIdentifier = data[i];\n        this._removeFromInverse(id, resourceIdentifier, inversePayloadMap);\n      }\n    } else {\n      this._removeFromInverse(id, data, inversePayloadMap);\n    }\n  }\n\n  /**\n   Remove `id` from its inverse record with id `inverseId`.  If the inverse\n   relationship is a belongsTo, this means just setting it to null, if the\n   inverse relationship is a hasMany, then remove that id from its array of ids.\n    @method\n   */\n  _removeFromInverse(id, resourceIdentifier, inversePayloads) {\n    var inversePayload = inversePayloads.get(resourceIdentifier.type, resourceIdentifier.id);\n    var data = inversePayload && inversePayload.data;\n\n    if (!data) {\n      return;\n    }\n\n    if (Array.isArray(data)) {\n      inversePayload.data = data.filter(x => x.id !== id);\n    } else {\n      inversePayloads.set(resourceIdentifier.type, resourceIdentifier.id, {\n        data: null\n      });\n    }\n  }\n}\n\n/**\n  Manages relationship payloads for a given store, for uninitialized\n  relationships.  Acts as a single source of truth (of payloads) for both sides\n  of an uninitialized relationship so they can agree on the most up-to-date\n  payload received without needing too much eager processing when those payloads\n  are pushed into the store.\n\n  This minimizes the work spent on relationships that are never initialized.\n\n  Once relationships are initialized, their state is managed in a relationship\n  state object (eg BelongsToRelationship or ManyRelationship).\n\n\n  @example\n\n    let relationshipPayloadsManager = new RelationshipPayloadsManager(store);\n\n    const User = DS.Model.extend({\n      hobbies: DS.hasMany('hobby')\n    });\n\n    const Hobby = DS.Model.extend({\n      user: DS.belongsTo('user')\n    });\n\n    let userPayload = {\n      data: {\n        id: 1,\n        type: 'user',\n        relationships: {\n          hobbies: {\n            data: [{\n              id: 2,\n              type: 'hobby'\n            }]\n          }\n        }\n      },\n    };\n    relationshipPayloadsManager.push('user', 1, userPayload.data.relationships);\n\n    relationshipPayloadsManager.get('hobby', 2, 'user') === {\n      {\n        data: {\n          id: 1,\n          type: 'user'\n        }\n      }\n    }\n\n  @private\n  @class RelationshipPayloadsManager\n*/\n\n// import { DEBUG } from '@glimmer/env';\nclass RelationshipPayloadsManager {\n  constructor(store) {\n    this._store = store;\n    // cache of `RelationshipPayload`s\n    this._cache = Object.create(null);\n    this._inverseLookupCache = new TypeCache();\n  }\n\n  /**\n    Find the payload for the given relationship of the given model.\n     Returns the payload for the given relationship, whether raw or computed from\n    the payload of the inverse relationship.\n     @example\n       relationshipPayloadsManager.get('hobby', 2, 'user') === {\n        {\n          data: {\n            id: 1,\n            type: 'user'\n          }\n        }\n      }\n     @method\n  */\n  get(modelName, id, relationshipName) {\n    var relationshipPayloads = this._getRelationshipPayloads(modelName, relationshipName, false);\n    return relationshipPayloads && relationshipPayloads.get(modelName, id, relationshipName);\n  }\n\n  /**\n    Push a model's relationships payload into this cache.\n     @example\n       let userPayload = {\n        data: {\n          id: 1,\n          type: 'user',\n          relationships: {\n            hobbies: {\n              data: [{\n                id: 2,\n                type: 'hobby'\n              }]\n            }\n          }\n        },\n      };\n      relationshipPayloadsManager.push('user', 1, userPayload.data.relationships);\n     @method\n  */\n  push(modelName, id, relationshipsData) {\n    if (!relationshipsData) {\n      return;\n    }\n\n    Object.keys(relationshipsData).forEach(key => {\n      var relationshipPayloads = this._getRelationshipPayloads(modelName, key, true);\n      if (relationshipPayloads) {\n        relationshipPayloads.push(modelName, id, key, relationshipsData[key]);\n      }\n    });\n  }\n\n  /**\n    Unload a model's relationships payload.\n     @method\n  */\n  unload(modelName, id) {\n    var modelClass = this._store._modelFor(modelName);\n    var relationshipsByName = Ember.get(modelClass, 'relationshipsByName');\n    relationshipsByName.forEach((_, relationshipName) => {\n      var relationshipPayloads = this._getRelationshipPayloads(modelName, relationshipName, false);\n      if (relationshipPayloads) {\n        relationshipPayloads.unload(modelName, id, relationshipName);\n      }\n    });\n  }\n\n  /**\n    Find the RelationshipPayloads object for the given relationship.  The same\n    RelationshipPayloads object is returned for either side of a relationship.\n     @example\n       const User = DS.Model.extend({\n        hobbies: DS.hasMany('hobby')\n      });\n       const Hobby = DS.Model.extend({\n        user: DS.belongsTo('user')\n      });\n       relationshipPayloads.get('user', 'hobbies') === relationshipPayloads.get('hobby', 'user');\n     The signature has a somewhat large arity to avoid extra work, such as\n      a)  string manipulation & allocation with `modelName` and\n         `relationshipName`\n      b)  repeatedly getting `relationshipsByName` via `Ember.get`\n      @private\n    @method\n  */\n  _getRelationshipPayloads(modelName, relationshipName, init) {\n    var relInfo = this.getRelationshipInfo(modelName, relationshipName);\n\n    if (relInfo === null) {\n      return;\n    }\n\n    var cache = this._cache[relInfo.lhs_key];\n\n    if (!cache && init) {\n      return this._initializeRelationshipPayloads(relInfo);\n    }\n\n    return cache;\n  }\n\n  getRelationshipInfo(modelName, relationshipName) {\n    var inverseCache = this._inverseLookupCache;\n    var store = this._store;\n    var cached = inverseCache.get(modelName, relationshipName);\n\n    // CASE: We have a cached resolution (null if no relationship exists)\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    var modelClass = store._modelFor(modelName);\n    var relationshipsByName = Ember.get(modelClass, 'relationshipsByName');\n\n    // CASE: We don't have a relationship at all\n    if (!relationshipsByName.has(relationshipName)) {\n      inverseCache.set(modelName, relationshipName, null);\n      return null;\n    }\n\n    var inverseMeta = modelClass.inverseFor(relationshipName, store);\n    var relationshipMeta = relationshipsByName.get(relationshipName);\n    var selfIsPolymorphic = relationshipMeta.options !== undefined && relationshipMeta.options.polymorphic === true;\n    var inverseBaseModelName = relationshipMeta.type;\n\n    // CASE: We have no inverse\n    if (!inverseMeta) {\n      var _info = {\n        lhs_key: `${modelName}:${relationshipName}`,\n        lhs_modelNames: [modelName],\n        lhs_baseModelName: modelName,\n        lhs_relationshipName: relationshipName,\n        lhs_relationshipMeta: relationshipMeta,\n        lhs_isPolymorphic: selfIsPolymorphic,\n        rhs_key: '',\n        rhs_modelNames: [],\n        rhs_baseModelName: inverseBaseModelName,\n        rhs_relationshipName: '',\n        rhs_relationshipMeta: null,\n        rhs_isPolymorphic: false,\n        hasInverse: false,\n        isSelfReferential: false, // modelName === inverseBaseModelName,\n        isReflexive: false\n      };\n\n      inverseCache.set(modelName, relationshipName, _info);\n\n      return _info;\n    }\n\n    // CASE: We do have an inverse\n\n    var inverseRelationshipName = inverseMeta.name;\n    var inverseRelationshipMeta = Ember.get(inverseMeta.type, 'relationshipsByName').get(inverseRelationshipName);\n    var baseModelName = inverseRelationshipMeta.type;\n    var isSelfReferential = baseModelName === inverseBaseModelName;\n\n    // TODO we want to assert this but this breaks all of our shoddily written tests\n    /*\n    if (DEBUG) {\n      let inverseDoubleCheck = inverseMeta.type.inverseFor(inverseRelationshipName, store);\n       assert(`The ${inverseBaseModelName}:${inverseRelationshipName} relationship declares 'inverse: null', but it was resolved as the inverse for ${baseModelName}:${relationshipName}.`, inverseDoubleCheck);\n    }\n    */\n\n    // CASE: We may have already discovered the inverse for the baseModelName\n    // CASE: We have already discovered the inverse\n    cached = inverseCache.get(baseModelName, relationshipName) || inverseCache.get(inverseBaseModelName, inverseRelationshipName);\n    if (cached) {\n      // TODO this assert can be removed if the above assert is enabled\n      (true && !(cached.hasInverse !== false) && Ember.assert(`The ${inverseBaseModelName}:${inverseRelationshipName} relationship declares 'inverse: null', but it was resolved as the inverse for ${baseModelName}:${relationshipName}.`, cached.hasInverse !== false));\n\n\n      var isLHS = cached.lhs_baseModelName === baseModelName;\n      var modelNames = isLHS ? cached.lhs_modelNames : cached.rhs_modelNames;\n      // make this lookup easier in the future by caching the key\n      modelNames.push(modelName);\n      inverseCache.set(modelName, relationshipName, cached);\n\n      return cached;\n    }\n\n    var info = {\n      lhs_key: `${baseModelName}:${relationshipName}`,\n      lhs_modelNames: [modelName],\n      lhs_baseModelName: baseModelName,\n      lhs_relationshipName: relationshipName,\n      lhs_relationshipMeta: relationshipMeta,\n      lhs_isPolymorphic: selfIsPolymorphic,\n      rhs_key: `${inverseBaseModelName}:${inverseRelationshipName}`,\n      rhs_modelNames: [],\n      rhs_baseModelName: inverseBaseModelName,\n      rhs_relationshipName: inverseRelationshipName,\n      rhs_relationshipMeta: inverseRelationshipMeta,\n      rhs_isPolymorphic: inverseRelationshipMeta.options !== undefined && inverseRelationshipMeta.options.polymorphic === true,\n      hasInverse: true,\n      isSelfReferential,\n      isReflexive: isSelfReferential && relationshipName === inverseRelationshipName\n    };\n\n    // Create entries for the baseModelName as well as modelName to speed up\n    //  inverse lookups\n    inverseCache.set(baseModelName, relationshipName, info);\n    inverseCache.set(modelName, relationshipName, info);\n\n    // Greedily populate the inverse\n    inverseCache.set(inverseBaseModelName, inverseRelationshipName, info);\n\n    return info;\n  }\n\n  /**\n    Create the `RelationshipsPayload` for the relationship `modelName`, `relationshipName`, and its inverse.\n     @private\n    @method\n  */\n  _initializeRelationshipPayloads(relInfo) {\n    var lhsKey = relInfo.lhs_key;\n    var rhsKey = relInfo.rhs_key;\n    var existingPayloads = this._cache[lhsKey];\n\n    if (relInfo.hasInverse === true && relInfo.rhs_isPolymorphic === true) {\n      existingPayloads = this._cache[rhsKey];\n\n      if (existingPayloads !== undefined) {\n        this._cache[lhsKey] = existingPayloads;\n        return existingPayloads;\n      }\n    }\n\n    // populate the cache for both sides of the relationship, as they both use\n    // the same `RelationshipPayloads`.\n    //\n    // This works out better than creating a single common key, because to\n    // compute that key we would need to do work to look up the inverse\n    //\n    var cache = this._cache[lhsKey] = new RelationshipPayloads(relInfo);\n\n    if (relInfo.hasInverse === true) {\n      this._cache[rhsKey] = cache;\n    }\n\n    return cache;\n  }\n}\n\nfunction payloadIsNotBlank(adapterPayload) {\n  if (Array.isArray(adapterPayload)) {\n    return true;\n  } else {\n    return Object.keys(adapterPayload || {}).length;\n  }\n}\n\nfunction _find(adapter, store, modelClass, id, internalModel, options) {\n  var snapshot = internalModel.createSnapshot(options);\n  var { modelName } = internalModel;\n  var promise = adapter.findRecord(store, modelClass, id, snapshot);\n  var label = `DS: Handle Adapter#findRecord of '${modelName}' with id: '${id}'`;\n\n  promise = Ember.RSVP.Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n\n  return promise.then(adapterPayload => {\n    (true && !(payloadIsNotBlank(adapterPayload)) && Ember.assert(`You made a 'findRecord' request for a '${modelName}' with id '${id}', but the adapter's response did not have any data`, payloadIsNotBlank(adapterPayload)));\n\n    var serializer = serializerForAdapter(store, adapter, modelName);\n    var payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, id, 'findRecord');\n    (true && !(!Array.isArray(payload.data)) && Ember.assert(`Ember Data expected the primary data returned from a 'findRecord' response to be an object but instead it found an array.`, !Array.isArray(payload.data)));\n    (true && Ember.warn(`You requested a record of type '${modelName}' with id '${id}' but the adapter returned a payload with primary data having an id of '${payload.data.id}'. Use 'store.findRecord()' when the requested id is the same as the one returned by the adapter. In other cases use 'store.queryRecord()' instead https://emberjs.com/api/data/classes/DS.Store.html#method_queryRecord`, payload.data.id === id, {\n      id: 'ds.store.findRecord.id-mismatch'\n    }));\n\n\n    return store._push(payload);\n  }, error => {\n    internalModel.notFound();\n    if (internalModel.isEmpty()) {\n      internalModel.unloadRecord();\n    }\n\n    throw error;\n  }, `DS: Extract payload of '${modelName}'`);\n}\n\nfunction _findMany(adapter, store, modelName, ids, internalModels) {\n  var snapshots = Ember.A(internalModels).invoke('createSnapshot');\n  var modelClass = store.modelFor(modelName); // `adapter.findMany` gets the modelClass still\n  var promise = adapter.findMany(store, modelClass, ids, snapshots);\n  var label = `DS: Handle Adapter#findMany of '${modelName}'`;\n\n  if (promise === undefined) {\n    throw new Error('adapter.findMany returned undefined, this was very likely a mistake');\n  }\n\n  promise = Ember.RSVP.Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n\n  return promise.then(adapterPayload => {\n    (true && !(payloadIsNotBlank(adapterPayload)) && Ember.assert(`You made a 'findMany' request for '${modelName}' records with ids '[${ids}]', but the adapter's response did not have any data`, payloadIsNotBlank(adapterPayload)));\n\n    var serializer = serializerForAdapter(store, adapter, modelName);\n    var payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findMany');\n    return store._push(payload);\n  }, null, `DS: Extract payload of ${modelName}`);\n}\n\nfunction _findHasMany(adapter, store, internalModel, link, relationship) {\n  var snapshot = internalModel.createSnapshot();\n  var modelClass = store.modelFor(relationship.type);\n  var promise = adapter.findHasMany(store, snapshot, link, relationship);\n  var label = `DS: Handle Adapter#findHasMany of '${internalModel.modelName}' : '${relationship.type}'`;\n\n  promise = Ember.RSVP.Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n  promise = _guard(promise, _bind(_objectIsAlive, internalModel));\n\n  return promise.then(adapterPayload => {\n    (true && !(payloadIsNotBlank(adapterPayload)) && Ember.assert(`You made a 'findHasMany' request for a ${internalModel.modelName}'s '${relationship.key}' relationship, using link '${link}' , but the adapter's response did not have any data`, payloadIsNotBlank(adapterPayload)));\n\n    var serializer = serializerForAdapter(store, adapter, relationship.type);\n    var payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findHasMany');\n    var internalModelArray = store._push(payload);\n\n    internalModelArray.meta = payload.meta;\n    return internalModelArray;\n  }, null, `DS: Extract payload of '${internalModel.modelName}' : hasMany '${relationship.type}'`);\n}\n\nfunction _findBelongsTo(adapter, store, internalModel, link, relationship) {\n  var snapshot = internalModel.createSnapshot();\n  var modelClass = store.modelFor(relationship.type);\n  var promise = adapter.findBelongsTo(store, snapshot, link, relationship);\n  var label = `DS: Handle Adapter#findBelongsTo of ${internalModel.modelName} : ${relationship.type}`;\n\n  promise = Ember.RSVP.Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n  promise = _guard(promise, _bind(_objectIsAlive, internalModel));\n\n  return promise.then(adapterPayload => {\n    var serializer = serializerForAdapter(store, adapter, relationship.type);\n    var payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findBelongsTo');\n\n    if (!payload.data) {\n      return null;\n    }\n\n    return store._push(payload);\n  }, null, `DS: Extract payload of ${internalModel.modelName} : ${relationship.type}`);\n}\n\nfunction _findAll(adapter, store, modelName, sinceToken, options) {\n  var modelClass = store.modelFor(modelName); // adapter.findAll depends on the class\n  var recordArray = store.peekAll(modelName);\n  var snapshotArray = recordArray._createSnapshot(options);\n  var promise = adapter.findAll(store, modelClass, sinceToken, snapshotArray);\n  var label = \"DS: Handle Adapter#findAll of \" + modelClass;\n\n  promise = Ember.RSVP.Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n\n  return promise.then(adapterPayload => {\n    (true && !(payloadIsNotBlank(adapterPayload)) && Ember.assert(`You made a 'findAll' request for '${modelName}' records, but the adapter's response did not have any data`, payloadIsNotBlank(adapterPayload)));\n\n    var serializer = serializerForAdapter(store, adapter, modelName);\n    var payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'findAll');\n\n    store._push(payload);\n    store._didUpdateAll(modelName);\n\n    return recordArray;\n  }, null, 'DS: Extract payload of findAll ${modelName}');\n}\n\nfunction _query(adapter, store, modelName, query, recordArray) {\n  var modelClass = store.modelFor(modelName); // adapter.query needs the class\n\n  var promise = void 0;\n  if (adapter.query.length > 3) {\n    recordArray = recordArray || store.recordArrayManager.createAdapterPopulatedRecordArray(modelName, query);\n    promise = adapter.query(store, modelClass, query, recordArray);\n  } else {\n    promise = adapter.query(store, modelClass, query);\n  }\n\n  var label = `DS: Handle Adapter#query of ${modelClass}`;\n\n  promise = Ember.RSVP.Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n\n  return promise.then(adapterPayload => {\n    var serializer = serializerForAdapter(store, adapter, modelName);\n\n    var payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'query');\n\n    var internalModels = store._push(payload);\n\n    (true && !(Array.isArray(internalModels)) && Ember.assert('The response to store.query is expected to be an array but it was a single record. Please wrap your response in an array or use `store.queryRecord` to query for a single record.', Array.isArray(internalModels)));\n\n    if (recordArray) {\n      recordArray._setInternalModels(internalModels, payload);\n    } else {\n      recordArray = store.recordArrayManager.createAdapterPopulatedRecordArray(modelName, query, internalModels, payload);\n    }\n\n    return recordArray;\n  }, null, `DS: Extract payload of query ${modelName}`);\n}\n\nfunction _queryRecord(adapter, store, modelName, query) {\n  var modelClass = store.modelFor(modelName); // adapter.queryRecord needs the class\n  var promise = adapter.queryRecord(store, modelClass, query);\n  var label = `DS: Handle Adapter#queryRecord of ${modelName}`;\n\n  promise = Ember.RSVP.Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n\n  return promise.then(adapterPayload => {\n    var serializer = serializerForAdapter(store, adapter, modelName);\n    var payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, null, 'queryRecord');\n\n    (true && !(!Array.isArray(payload.data)) && Ember.assert(`Expected the primary data returned by the serializer for a 'queryRecord' response to be a single object or null but instead it was an array.`, !Array.isArray(payload.data), {\n      id: 'ds.store.queryRecord-array-response'\n    }));\n\n\n    return store._push(payload);\n  }, null, `DS: Extract payload of queryRecord ${modelName}`);\n}\n\n// Used by the store to normalize IDs entering the store.  Despite the fact\n// that developers may provide IDs as numbers (e.g., `store.findRecord('person', 1)`),\n// it is important that internally we use strings, since IDs may be serialized\n// and lose type information.  For example, Ember's router may put a record's\n// ID into the URL, and if we later try to deserialize that URL and find the\n// corresponding record, we will not know if it is a string or a number.\nfunction coerceId(id) {\n  if (id === null || id === undefined || id === '') {\n    return null;\n  }\n  if (typeof id === 'string') {\n    return id;\n  }\n  return '' + id;\n}\n\n/**\n  @module ember-data\n*/\n\n/**\n  @class SnapshotRecordArray\n  @namespace DS\n  @private\n  @constructor\n  @param {Array} snapshots An array of snapshots\n  @param {Object} meta\n*/\nclass SnapshotRecordArray {\n  constructor(recordArray, meta, options = {}) {\n    /**\n      An array of snapshots\n      @private\n      @property _snapshots\n      @type {Array}\n    */\n    this._snapshots = null;\n\n    /**\n      An array of records\n      @private\n      @property _recordArray\n      @type {Array}\n    */\n    this._recordArray = recordArray;\n\n    /**\n      Number of records in the array\n       Example\n       ```app/adapters/post.js\n      import DS from 'ember-data'\n       export default DS.JSONAPIAdapter.extend({\n        shouldReloadAll(store, snapshotRecordArray) {\n          return !snapshotRecordArray.length;\n        },\n      });\n      ```\n       @property length\n      @type {Number}\n    */\n    this.length = recordArray.get('length');\n\n    this._type = null;\n\n    /**\n      Meta objects for the record array.\n       Example\n       ```app/adapters/post.js\n      import DS from 'ember-data'\n       export default DS.JSONAPIAdapter.extend({\n        shouldReloadAll(store, snapshotRecordArray) {\n          var lastRequestTime = snapshotRecordArray.meta.lastRequestTime;\n          var twentyMinutes = 20 * 60 * 1000;\n          return Date.now() > lastRequestTime + twentyMinutes;\n        },\n      });\n      ```\n       @property meta\n      @type {Object}\n    */\n    this.meta = meta;\n\n    /**\n      A hash of adapter options passed into the store method for this request.\n       Example\n       ```app/adapters/post.js\n      import MyCustomAdapter from './custom-adapter';\n       export default MyCustomAdapter.extend({\n        findAll(store, type, sinceToken, snapshotRecordArray) {\n          if (snapshotRecordArray.adapterOptions.subscribe) {\n            // ...\n          }\n          // ...\n        }\n      });\n      ```\n       @property adapterOptions\n      @type {Object}\n    */\n    this.adapterOptions = options.adapterOptions;\n\n    /**\n      The relationships to include for this request.\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n       export default DS.Adapter.extend({\n        findAll(store, type, snapshotRecordArray) {\n          var url = `/${type.modelName}?include=${encodeURIComponent(snapshotRecordArray.include)}`;\n           return fetch(url).then((response) => response.json())\n        }\n      });\n       @property include\n      @type {String|Array}\n    */\n    this.include = options.include;\n  }\n\n  /**\n    The type of the underlying records for the snapshots in the array, as a DS.Model\n    @property type\n    @type {DS.Model}\n  */\n  get type() {\n    return this._type || (this._type = this._recordArray.get('type'));\n  }\n\n  /**\n    Get snapshots of the underlying record array\n     Example\n     ```app/adapters/post.js\n    import DS from 'ember-data'\n     export default DS.JSONAPIAdapter.extend({\n      shouldReloadAll(store, snapshotArray) {\n        var snapshots = snapshotArray.snapshots();\n         return snapshots.any(function(ticketSnapshot) {\n          var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt'), 'minutes');\n          if (timeDiff > 20) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      }\n    });\n    ```\n     @method snapshots\n    @return {Array} Array of snapshots\n  */\n  snapshots() {\n    if (this._snapshots !== null) {\n      return this._snapshots;\n    }\n\n    this._snapshots = this._recordArray._takeSnapshot();\n\n    return this._snapshots;\n  }\n}\n\n/**\n  @module ember-data\n*/\n\n/**\n  A record array is an array that contains records of a certain modelName. The record\n  array materializes records as needed when they are retrieved for the first\n  time. You should not create record arrays yourself. Instead, an instance of\n  `DS.RecordArray` or its subclasses will be returned by your application's store\n  in response to queries.\n\n  @class RecordArray\n  @namespace DS\n  @extends Ember.ArrayProxy\n  @uses Ember.Evented\n*/\n\nvar RecordArray = Ember.ArrayProxy.extend(Ember.Evented, {\n  init() {\n    this._super(...arguments);\n\n    /**\n      The array of client ids backing the record array. When a\n      record is requested from the record array, the record\n      for the client id at the same index is materialized, if\n      necessary, by the store.\n       @property content\n      @private\n      @type Ember.Array\n      */\n    this.set('content', this.content || null);\n\n    /**\n    The flag to signal a `RecordArray` is finished loading data.\n     Example\n     ```javascript\n    var people = store.peekAll('person');\n    people.get('isLoaded'); // true\n    ```\n     @property isLoaded\n    @type Boolean\n    */\n    this.isLoaded = this.isLoaded || false;\n    /**\n    The flag to signal a `RecordArray` is currently loading data.\n    Example\n    ```javascript\n    var people = store.peekAll('person');\n    people.get('isUpdating'); // false\n    people.update();\n    people.get('isUpdating'); // true\n    ```\n    @property isUpdating\n    @type Boolean\n    */\n    this.isUpdating = false;\n\n    /**\n    The store that created this record array.\n    @property store\n    @private\n    @type DS.Store\n    */\n    this.store = this.store || null;\n    this._updatingPromise = null;\n  },\n\n  replace() {\n    throw new Error(`The result of a server query (for all ${this.modelName} types) is immutable. To modify contents, use toArray()`);\n  },\n\n  /**\n   The modelClass represented by this record array.\n    @property type\n   @type DS.Model\n   */\n  type: Ember.computed('modelName', function () {\n    if (!this.modelName) {\n      return null;\n    }\n    return this.store._modelFor(this.modelName);\n  }).readOnly(),\n\n  /**\n    Retrieves an object from the content by index.\n     @method objectAtContent\n    @private\n    @param {Number} index\n    @return {DS.Model} record\n  */\n  objectAtContent(index) {\n    var internalModel = Ember.get(this, 'content').objectAt(index);\n    return internalModel && internalModel.getRecord();\n  },\n\n  /**\n    Used to get the latest version of all of the records in this array\n    from the adapter.\n     Example\n     ```javascript\n    var people = store.peekAll('person');\n    people.get('isUpdating'); // false\n     people.update().then(function() {\n      people.get('isUpdating'); // false\n    });\n     people.get('isUpdating'); // true\n    ```\n     @method update\n  */\n  update() {\n    if (Ember.get(this, 'isUpdating')) {\n      return this._updatingPromise;\n    }\n\n    this.set('isUpdating', true);\n\n    var updatingPromise = this._update().finally(() => {\n      this._updatingPromise = null;\n      if (this.get('isDestroying') || this.get('isDestroyed')) {\n        return;\n      }\n      this.set('isUpdating', false);\n    });\n\n    this._updatingPromise = updatingPromise;\n\n    return updatingPromise;\n  },\n\n  /*\n    Update this RecordArray and return a promise which resolves once the update\n    is finished.\n   */\n  _update() {\n    return this.store.findAll(this.modelName, { reload: true });\n  },\n\n  /**\n    Adds an internal model to the `RecordArray` without duplicates\n     @method _pushInternalModels\n    @private\n    @param {InternalModel} internalModel\n  */\n  _pushInternalModels(internalModels) {\n    // pushObjects because the internalModels._recordArrays set was already\n    // consulted for inclusion, so addObject and its on .contains call is not\n    // required.\n    Ember.get(this, 'content').pushObjects(internalModels);\n  },\n\n  /**\n    Removes an internalModel to the `RecordArray`.\n     @method removeInternalModel\n    @private\n    @param {InternalModel} internalModel\n  */\n  _removeInternalModels(internalModels) {\n    Ember.get(this, 'content').removeObjects(internalModels);\n  },\n\n  /**\n    Saves all of the records in the `RecordArray`.\n     Example\n     ```javascript\n    var messages = store.peekAll('message');\n    messages.forEach(function(message) {\n      message.set('hasBeenSeen', true);\n    });\n    messages.save();\n    ```\n     @method save\n    @return {DS.PromiseArray} promise\n  */\n  save() {\n    var promiseLabel = `DS: RecordArray#save ${this.modelName}`;\n    var promise = Ember.RSVP.Promise.all(this.invoke('save'), promiseLabel).then(() => this, null, 'DS: RecordArray#save return RecordArray');\n\n    return PromiseArray.create({ promise });\n  },\n\n  _dissociateFromOwnRecords() {\n    this.get('content').forEach(internalModel => {\n      var recordArrays = internalModel.__recordArrays;\n\n      if (recordArrays) {\n        recordArrays.delete(this);\n      }\n    });\n  },\n\n  /**\n    @method _unregisterFromManager\n    @private\n  */\n  _unregisterFromManager() {\n    this.manager.unregisterRecordArray(this);\n  },\n\n  willDestroy() {\n    this._unregisterFromManager();\n    this._dissociateFromOwnRecords();\n    // TODO: we should not do work during destroy:\n    //   * when objects are destroyed, they should simply be left to do\n    //   * if logic errors do to this, that logic needs to be more careful during\n    //    teardown (ember provides isDestroying/isDestroyed) for this reason\n    //   * the exception being: if an dominator has a reference to this object,\n    //     and must be informed to release e.g. e.g. removing itself from th\n    //     recordArrayMananger\n    Ember.set(this, 'content', null);\n    Ember.set(this, 'length', 0);\n    this._super(...arguments);\n  },\n\n  /*\n    @method _createSnapshot\n    @private\n  */\n  _createSnapshot(options) {\n    // this is private for users, but public for ember-data internals\n    return new SnapshotRecordArray(this, this.get('meta'), options);\n  },\n\n  /*\n    @method _takeSnapshot\n    @private\n  */\n  _takeSnapshot() {\n    return Ember.get(this, 'content').map(internalModel => internalModel.createSnapshot());\n  }\n});\n\n/**\n  Represents a list of records whose membership is determined by the\n  store. As records are created, loaded, or modified, the store\n  evaluates them to determine if they should be part of the record\n  array.\n\n  @class FilteredRecordArray\n  @namespace DS\n  @extends DS.RecordArray\n*/\nvar FilteredRecordArray = RecordArray.extend({\n  init() {\n    this._super(...arguments);\n\n    this.set('filterFunction', this.get('filterFunction') || null);\n    this.isLoaded = true;\n  },\n  /**\n    The filterFunction is a function used to test records from the store to\n    determine if they should be part of the record array.\n     Example\n     ```javascript\n    var allPeople = store.peekAll('person');\n    allPeople.mapBy('name'); // [\"Tom Dale\", \"Yehuda Katz\", \"Trek Glowacki\"]\n     var people = store.filter('person', function(person) {\n      if (person.get('name').match(/Katz$/)) { return true; }\n    });\n    people.mapBy('name'); // [\"Yehuda Katz\"]\n     var notKatzFilter = function(person) {\n      return !person.get('name').match(/Katz$/);\n    };\n    people.set('filterFunction', notKatzFilter);\n    people.mapBy('name'); // [\"Tom Dale\", \"Trek Glowacki\"]\n    ```\n     @method filterFunction\n    @param {DS.Model} record\n    @return {Boolean} `true` if the record should be in the array\n  */\n\n  replace() {\n    throw new Error(`The result of a client-side filter (on ${this.modelName}) is immutable.`);\n  },\n\n  /**\n    @method updateFilter\n    @private\n  */\n  _updateFilter() {\n    if (Ember.get(this, 'isDestroying') || Ember.get(this, 'isDestroyed')) {\n      return;\n    }\n    Ember.get(this, 'manager').updateFilter(this, this.modelName, Ember.get(this, 'filterFunction'));\n  },\n\n  updateFilter: Ember.observer('filterFunction', function () {\n    Ember.run.once(this, this._updateFilter);\n  })\n});\n\nfunction cloneNull(source) {\n  var clone = Object.create(null);\n  for (var key in source) {\n    clone[key] = source[key];\n  }\n  return clone;\n}\n\n/**\n  Represents an ordered list of records whose order and membership is\n  determined by the adapter. For example, a query sent to the adapter\n  may trigger a search on the server, whose results would be loaded\n  into an instance of the `AdapterPopulatedRecordArray`.\n\n  ---\n\n  If you want to update the array and get the latest records from the\n  adapter, you can invoke [`update()`](#method_update):\n\n  Example\n\n  ```javascript\n  // GET /users?isAdmin=true\n  var admins = store.query('user', { isAdmin: true });\n\n  admins.then(function() {\n    console.log(admins.get(\"length\")); // 42\n  });\n\n  // somewhere later in the app code, when new admins have been created\n  // in the meantime\n  //\n  // GET /users?isAdmin=true\n  admins.update().then(function() {\n    admins.get('isUpdating'); // false\n    console.log(admins.get(\"length\")); // 123\n  });\n\n  admins.get('isUpdating'); // true\n  ```\n\n  @class AdapterPopulatedRecordArray\n  @namespace DS\n  @extends DS.RecordArray\n*/\nvar AdapterPopulatedRecordArray = RecordArray.extend({\n  init() {\n    // yes we are touching `this` before super, but ArrayProxy has a bug that requires this.\n    this.set('content', this.get('content') || Ember.A());\n\n    this._super(...arguments);\n    this.query = this.query || null;\n    this.links = this.links || null;\n  },\n\n  replace() {\n    throw new Error(`The result of a server query (on ${this.modelName}) is immutable.`);\n  },\n\n  _update() {\n    var store = Ember.get(this, 'store');\n    var query = Ember.get(this, 'query');\n\n    return store._query(this.modelName, query, this);\n  },\n\n  /**\n    @method _setInternalModels\n    @param {Array} internalModels\n    @param {Object} payload normalized payload\n    @private\n  */\n  _setInternalModels(internalModels, payload) {\n\n    // TODO: initial load should not cause change events at all, only\n    // subsequent. This requires changing the public api of adapter.query, but\n    // hopefully we can do that soon.\n    this.get('content').setObjects(internalModels);\n\n    this.setProperties({\n      isLoaded: true,\n      isUpdating: false,\n      meta: cloneNull(payload.meta),\n      links: cloneNull(payload.links)\n    });\n\n    associateWithRecordArray(internalModels, this);\n\n    // TODO: should triggering didLoad event be the last action of the runLoop?\n    Ember.run.once(this, 'trigger', 'didLoad');\n  }\n});\n\n/**\n  @module ember-data\n*/\n\n/**\n  @class RecordArrayManager\n  @namespace DS\n  @private\n*/\nclass RecordArrayManager {\n  constructor(options) {\n    this.store = options.store;\n    this.isDestroying = false;\n    this.isDestroyed = false;\n    this._filteredRecordArrays = Object.create(null);\n    this._liveRecordArrays = Object.create(null);\n    this._pending = Object.create(null);\n    this._adapterPopulatedRecordArrays = [];\n  }\n\n  recordDidChange(internalModel) {\n    // TODO: change name\n    // TODO: track that it was also a change\n    this.internalModelDidChange(internalModel);\n  }\n\n  recordWasLoaded(internalModel) {\n    // TODO: change name\n    // TODO: track that it was also that it was first loaded\n    this.internalModelDidChange(internalModel);\n  }\n\n  internalModelDidChange(internalModel) {\n\n    var modelName = internalModel.modelName;\n\n    if (internalModel._pendingRecordArrayManagerFlush) {\n      return;\n    }\n\n    internalModel._pendingRecordArrayManagerFlush = true;\n\n    var pending = this._pending;\n    var models = pending[modelName] = pending[modelName] || [];\n    if (models.push(internalModel) !== 1) {\n      return;\n    }\n\n    Ember.run.schedule('actions', this, this._flush);\n  }\n\n  _flush() {\n\n    var pending = this._pending;\n    this._pending = Object.create(null);\n    var modelsToRemove = [];\n\n    for (var modelName in pending) {\n      var internalModels = pending[modelName];\n      for (var j = 0; j < internalModels.length; j++) {\n        var internalModel = internalModels[j];\n        // mark internalModels, so they can once again be processed by the\n        // recordArrayManager\n        internalModel._pendingRecordArrayManagerFlush = false;\n        // build up a set of models to ensure we have purged correctly;\n        if (internalModel.isHiddenFromRecordArrays()) {\n          modelsToRemove.push(internalModel);\n        }\n      }\n\n      // process filteredRecordArrays\n      if (this._filteredRecordArrays[modelName]) {\n        var recordArrays = this.filteredRecordArraysFor(modelName);\n        for (var i = 0; i < recordArrays.length; i++) {\n          this.updateFilterRecordArray(recordArrays[i], modelName, internalModels);\n        }\n      }\n\n      var array = this._liveRecordArrays[modelName];\n      if (array) {\n        // TODO: skip if it only changed\n        // process liveRecordArrays\n        this.updateLiveRecordArray(array, internalModels);\n      }\n\n      // process adapterPopulatedRecordArrays\n      if (modelsToRemove.length > 0) {\n        removeFromAdapterPopulatedRecordArrays(modelsToRemove);\n      }\n    }\n  }\n\n  updateLiveRecordArray(array, internalModels) {\n    return updateLiveRecordArray(array, internalModels);\n  }\n\n  /**\n    Update an individual filter.\n     @private\n    @method updateFilterRecordArray\n    @param {DS.FilteredRecordArray} array\n    @param {String} modelName\n    @param {Array} internalModels\n  */\n  updateFilterRecordArray(array, modelName, internalModels) {\n\n    var filter = Ember.get(array, 'filterFunction');\n\n    var shouldBeInAdded = [];\n    var shouldBeRemoved = [];\n\n    for (var i = 0; i < internalModels.length; i++) {\n      var internalModel = internalModels[i];\n      if (internalModel.isHiddenFromRecordArrays() === false && filter(internalModel.getRecord())) {\n        if (internalModel._recordArrays.has(array)) {\n          continue;\n        }\n        shouldBeInAdded.push(internalModel);\n        internalModel._recordArrays.add(array);\n      } else {\n        if (internalModel._recordArrays.delete(array)) {\n          shouldBeRemoved.push(internalModel);\n        }\n      }\n    }\n\n    if (shouldBeInAdded.length > 0) {\n      array._pushInternalModels(shouldBeInAdded);\n    }\n    if (shouldBeRemoved.length > 0) {\n      array._removeInternalModels(shouldBeRemoved);\n    }\n  }\n\n  // TODO: remove, utilize existing flush code but make it flush sync based on 1 modelName\n  _syncLiveRecordArray(array, modelName) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.syncLiveRecordArray expects modelName not modelClass as the second param`, typeof modelName === 'string'));\n\n    var hasNoPotentialDeletions = Object.keys(this._pending).length === 0;\n    var map = this.store._internalModelsFor(modelName);\n    var hasNoInsertionsOrRemovals = Ember.get(map, 'length') === Ember.get(array, 'length');\n\n    /*\n      Ideally the recordArrayManager has knowledge of the changes to be applied to\n      liveRecordArrays, and is capable of strategically flushing those changes and applying\n      small diffs if desired.  However, until we've refactored recordArrayManager, this dirty\n      check prevents us from unnecessarily wiping out live record arrays returned by peekAll.\n      */\n    if (hasNoPotentialDeletions && hasNoInsertionsOrRemovals) {\n      return;\n    }\n\n    var internalModels = this._visibleInternalModelsByType(modelName);\n    var modelsToAdd = [];\n    for (var i = 0; i < internalModels.length; i++) {\n      var internalModel = internalModels[i];\n      var recordArrays = internalModel._recordArrays;\n      if (recordArrays.has(array) === false) {\n        recordArrays.add(array);\n        modelsToAdd.push(internalModel);\n      }\n    }\n\n    array._pushInternalModels(modelsToAdd);\n  }\n\n  /**\n    This method is invoked if the `filterFunction` property is\n    changed on a `DS.FilteredRecordArray`.\n     It essentially re-runs the filter from scratch. This same\n    method is invoked when the filter is created in th first place.\n     @method updateFilter\n    @param {Array} array\n    @param {String} modelName\n    @param {Function} filter\n  */\n  updateFilter(array, modelName, filter) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.updateFilter expects modelName not modelClass as the second param, received ${modelName}`, typeof modelName === 'string'));\n\n    var modelMap = this.store._internalModelsFor(modelName);\n    var internalModels = modelMap.models;\n\n    this.updateFilterRecordArray(array, filter, internalModels);\n  }\n\n  _didUpdateAll(modelName) {\n    var recordArray = this._liveRecordArrays[modelName];\n    if (recordArray) {\n      Ember.set(recordArray, 'isUpdating', false);\n    }\n  }\n\n  /**\n    Get the `DS.RecordArray` for a modelName, which contains all loaded records of\n    given modelName.\n     @method liveRecordArrayFor\n    @param {String} modelName\n    @return {DS.RecordArray}\n  */\n  liveRecordArrayFor(modelName) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.liveRecordArrayFor expects modelName not modelClass as the param`, typeof modelName === 'string'));\n\n\n    var array = this._liveRecordArrays[modelName];\n\n    if (array) {\n      // if the array already exists, synchronize\n      this._syncLiveRecordArray(array, modelName);\n    } else {\n      // if the array is being newly created merely create it with its initial\n      // content already set. This prevents unneeded change events.\n      var internalModels = this._visibleInternalModelsByType(modelName);\n      array = this.createRecordArray(modelName, internalModels);\n      this._liveRecordArrays[modelName] = array;\n    }\n\n    return array;\n  }\n\n  _visibleInternalModelsByType(modelName) {\n    var all = this.store._internalModelsFor(modelName)._models;\n    var visible = [];\n    for (var i = 0; i < all.length; i++) {\n      var model = all[i];\n      if (model.isHiddenFromRecordArrays() === false) {\n        visible.push(model);\n      }\n    }\n    return visible;\n  }\n  /**\n    Get the `DS.RecordArray` for a modelName, which contains all loaded records of\n    given modelName.\n     @method filteredRecordArraysFor\n    @param {String} modelName\n    @return {DS.RecordArray}\n  */\n  filteredRecordArraysFor(modelName) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.filteredRecordArraysFor expects modelName not modelClass as the param`, typeof modelName === 'string'));\n\n\n    return this._filteredRecordArrays[modelName] || (this._filteredRecordArrays[modelName] = []);\n  }\n  /**\n    Create a `DS.RecordArray` for a modelName.\n     @method createRecordArray\n    @param {String} modelName\n    @param {Array} _content (optional|private)\n    @return {DS.RecordArray}\n  */\n  createRecordArray(modelName, content) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.createRecordArray expects modelName not modelClass as the param`, typeof modelName === 'string'));\n\n\n    var array = RecordArray.create({\n      modelName,\n      content: Ember.A(content || []),\n      store: this.store,\n      isLoaded: true,\n      manager: this\n    });\n\n    if (Array.isArray(content)) {\n      associateWithRecordArray(content, array);\n    }\n\n    return array;\n  }\n\n  /**\n    Create a `DS.FilteredRecordArray` for a modelName and register it for updates.\n     @method createFilteredRecordArray\n    @param {String} modelName\n    @param {Function} filter\n    @param {Object} query (optional\n    @return {DS.FilteredRecordArray}\n  */\n  createFilteredRecordArray(modelName, filter, query) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.createFilteredRecordArray expects modelName not modelClass as the first param, received ${modelName}`, typeof modelName === 'string'));\n\n    var array = FilteredRecordArray.create({\n      query,\n      modelName,\n      content: Ember.A(),\n      store: this.store,\n      manager: this,\n      filterFunction: filter\n    });\n\n    this.registerFilteredRecordArray(array, modelName, filter);\n\n    return array;\n  }\n\n  /**\n    Create a `DS.AdapterPopulatedRecordArray` for a modelName with given query.\n     @method createAdapterPopulatedRecordArray\n    @param {String} modelName\n    @param {Object} query\n    @return {DS.AdapterPopulatedRecordArray}\n  */\n  createAdapterPopulatedRecordArray(modelName, query, internalModels, payload) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.createAdapterPopulatedRecordArray expects modelName not modelClass as the first param, received ${modelName}`, typeof modelName === 'string'));\n\n\n    var array = void 0;\n    if (Array.isArray(internalModels)) {\n      array = AdapterPopulatedRecordArray.create({\n        modelName,\n        query: query,\n        content: Ember.A(internalModels),\n        store: this.store,\n        manager: this,\n        isLoaded: true,\n        isUpdating: false,\n        meta: cloneNull(payload.meta),\n        links: cloneNull(payload.links)\n      });\n\n      associateWithRecordArray(internalModels, array);\n    } else {\n      array = AdapterPopulatedRecordArray.create({\n        modelName,\n        query: query,\n        content: Ember.A(),\n        store: this.store,\n        manager: this\n      });\n    }\n\n    this._adapterPopulatedRecordArrays.push(array);\n\n    return array;\n  }\n\n  /**\n    Register a RecordArray for a given modelName to be backed by\n    a filter function. This will cause the array to update\n    automatically when records of that modelName change attribute\n    values or states.\n     @method registerFilteredRecordArray\n    @param {DS.RecordArray} array\n    @param {String} modelName\n    @param {Function} filter\n  */\n  registerFilteredRecordArray(array, modelName, filter) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`recordArrayManger.registerFilteredRecordArray expects modelName not modelClass as the second param, received ${modelName}`, typeof modelName === 'string'));\n\n\n    this.filteredRecordArraysFor(modelName).push(array);\n    this.updateFilter(array, modelName, filter);\n  }\n\n  /**\n    Unregister a RecordArray.\n    So manager will not update this array.\n     @method unregisterRecordArray\n    @param {DS.RecordArray} array\n  */\n  unregisterRecordArray(array) {\n\n    var modelName = array.modelName;\n\n    // unregister filtered record array\n    var recordArrays = this.filteredRecordArraysFor(modelName);\n    var removedFromFiltered = remove(recordArrays, array);\n\n    // remove from adapter populated record array\n    var removedFromAdapterPopulated = remove(this._adapterPopulatedRecordArrays, array);\n\n    if (!removedFromFiltered && !removedFromAdapterPopulated) {\n\n      var liveRecordArrayForType = this._liveRecordArrays[modelName];\n      // unregister live record array\n      if (liveRecordArrayForType) {\n        if (array === liveRecordArrayForType) {\n          delete this._liveRecordArrays[modelName];\n        }\n      }\n    }\n  }\n\n  willDestroy() {\n    Object.keys(this._filteredRecordArrays).forEach(modelName => flatten(this._filteredRecordArrays[modelName]).forEach(destroy));\n    Object.keys(this._liveRecordArrays).forEach(modelName => this._liveRecordArrays[modelName].destroy());\n    this._adapterPopulatedRecordArrays.forEach(destroy);\n    this.isDestroyed = true;\n  }\n\n  destroy() {\n    this.isDestroying = true;\n    Ember.run.schedule('actions', this, this.willDestroy);\n  }\n}\n\nfunction destroy(entry) {\n  entry.destroy();\n}\n\nfunction flatten(list) {\n  var length = list.length;\n  var result = [];\n\n  for (var i = 0; i < length; i++) {\n    result = result.concat(list[i]);\n  }\n\n  return result;\n}\n\nfunction remove(array, item) {\n  var index = array.indexOf(item);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n    return true;\n  }\n\n  return false;\n}\n\nfunction updateLiveRecordArray(array, internalModels) {\n  var modelsToAdd = [];\n  var modelsToRemove = [];\n\n  for (var i = 0; i < internalModels.length; i++) {\n    var internalModel = internalModels[i];\n    var isDeleted = internalModel.isHiddenFromRecordArrays();\n    var recordArrays = internalModel._recordArrays;\n\n    if (!isDeleted && !internalModel.isEmpty()) {\n      if (!recordArrays.has(array)) {\n        modelsToAdd.push(internalModel);\n        recordArrays.add(array);\n      }\n    }\n\n    if (isDeleted) {\n      modelsToRemove.push(internalModel);\n      recordArrays.delete(array);\n    }\n  }\n\n  if (modelsToAdd.length > 0) {\n    array._pushInternalModels(modelsToAdd);\n  }\n  if (modelsToRemove.length > 0) {\n    array._removeInternalModels(modelsToRemove);\n  }\n}\n\nfunction removeFromAdapterPopulatedRecordArrays(internalModels) {\n  for (var i = 0; i < internalModels.length; i++) {\n    var internalModel = internalModels[i];\n    var list = internalModel._recordArrays.list;\n\n    for (var j = 0; j < list.length; j++) {\n      // TODO: group by arrays, so we can batch remove\n      list[j]._removeInternalModels([internalModel]);\n    }\n\n    internalModel._recordArrays.clear();\n  }\n}\n\nfunction associateWithRecordArray(internalModels, array) {\n  for (var i = 0, l = internalModels.length; i < l; i++) {\n    var internalModel = internalModels[i];\n    internalModel._recordArrays.add(array);\n  }\n}\n\n/**\n  @module ember-data\n*/\n\nvar badIdFormatAssertion = '`id` passed to `findRecord()` has to be non-empty string or number';\n\nvar {\n  _Backburner: Backburner,\n  ENV\n} = Ember;\n\nvar { Promise } = Ember.RSVP;\n\n//Get the materialized model from the internalModel/promise that returns\n//an internal model and return it in a promiseObject. Useful for returning\n//from find methods\nfunction promiseRecord(internalModelPromise, label) {\n  var toReturn = internalModelPromise.then(internalModel => internalModel.getRecord());\n\n  return promiseObject(toReturn, label);\n}\n\nvar Store = void 0;\n\n// Implementors Note:\n//\n//   The variables in this file are consistently named according to the following\n//   scheme:\n//\n//   * +id+ means an identifier managed by an external source, provided inside\n//     the data provided by that source. These are always coerced to be strings\n//     before being used internally.\n//   * +clientId+ means a transient numerical identifier generated at runtime by\n//     the data store. It is important primarily because newly created objects may\n//     not yet have an externally generated id.\n//   * +internalModel+ means a record internalModel object, which holds metadata about a\n//     record, even if it has not yet been fully materialized.\n//   * +type+ means a DS.Model.\n\n/**\n  The store contains all of the data for records loaded from the server.\n  It is also responsible for creating instances of `DS.Model` that wrap\n  the individual data for a record, so that they can be bound to in your\n  Handlebars templates.\n\n  Define your application's store like this:\n\n  ```app/services/store.js\n  import DS from 'ember-data';\n\n  export default DS.Store.extend({\n  });\n  ```\n\n  Most Ember.js applications will only have a single `DS.Store` that is\n  automatically created by their `Ember.Application`.\n\n  You can retrieve models from the store in several ways. To retrieve a record\n  for a specific id, use `DS.Store`'s `findRecord()` method:\n\n  ```javascript\n  store.findRecord('person', 123).then(function (person) {\n  });\n  ```\n\n  By default, the store will talk to your backend using a standard\n  REST mechanism. You can customize how the store talks to your\n  backend by specifying a custom adapter:\n\n  ```app/adapters/application.js\n  import DS from 'ember-data';\n\n  export default DS.Adapter.extend({\n  });\n  ```\n\n  You can learn more about writing a custom adapter by reading the `DS.Adapter`\n  documentation.\n\n  ### Store createRecord() vs. push() vs. pushPayload()\n\n  The store provides multiple ways to create new record objects. They have\n  some subtle differences in their use which are detailed below:\n\n  [createRecord](#method_createRecord) is used for creating new\n  records on the client side. This will return a new record in the\n  `created.uncommitted` state. In order to persist this record to the\n  backend you will need to call `record.save()`.\n\n  [push](#method_push) is used to notify Ember Data's store of new or\n  updated records that exist in the backend. This will return a record\n  in the `loaded.saved` state. The primary use-case for `store#push` is\n  to notify Ember Data about record updates (full or partial) that happen\n  outside of the normal adapter methods (for example\n  [SSE](http://dev.w3.org/html5/eventsource/) or [Web\n  Sockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).\n\n  [pushPayload](#method_pushPayload) is a convenience wrapper for\n  `store#push` that will deserialize payloads if the\n  Serializer implements a `pushPayload` method.\n\n  Note: When creating a new record using any of the above methods\n  Ember Data will update `DS.RecordArray`s such as those returned by\n  `store#peekAll()` or `store#findAll()`. This means any\n  data bindings or computed properties that depend on the RecordArray\n  will automatically be synced to include the new or updated record\n  values.\n\n  @class Store\n  @namespace DS\n  @extends Ember.Service\n*/\nStore = Ember.Service.extend({\n\n  /**\n    @method init\n    @private\n  */\n  init() {\n    this._super(...arguments);\n    this._backburner = new Backburner(['normalizeRelationships', 'syncRelationships', 'finished']);\n    // internal bookkeeping; not observable\n    this.recordArrayManager = new RecordArrayManager({ store: this });\n    this._identityMap = new IdentityMap();\n    this._pendingSave = [];\n    this._modelFactoryCache = Object.create(null);\n    this._relationshipsPayloads = new RelationshipPayloadsManager(this);\n\n    /*\n      Ember Data uses several specialized micro-queues for organizing\n      and coalescing similar async work.\n       These queues are currently controlled by a flush scheduled into\n      ember-data's custom backburner instance.\n     */\n    // used for coalescing record save requests\n    this._pendingSave = [];\n    // used for coalescing relationship updates\n    this._updatedRelationships = [];\n    // used for coalescing relationship setup needs\n    this._pushedInternalModels = [];\n    // used for coalescing internal model updates\n    this._updatedInternalModels = [];\n\n    // used to keep track of all the find requests that need to be coalesced\n    this._pendingFetch = Ember.MapWithDefault.create({ defaultValue() {\n        return [];\n      } });\n\n    this._adapterCache = Object.create(null);\n    this._serializerCache = Object.create(null);\n  },\n\n  /**\n    The default adapter to use to communicate to a backend server or\n    other persistence layer. This will be overridden by an application\n    adapter if present.\n     If you want to specify `app/adapters/custom.js` as a string, do:\n     ```js\n    import DS from 'ember-data';\n     export default DS.Store.extend({\n      adapter: 'custom',\n    });\n    ```\n     @property adapter\n    @default '-json-api'\n    @type {String}\n  */\n  adapter: '-json-api',\n\n  /**\n    Returns a JSON representation of the record using a custom\n    type-specific serializer, if one exists.\n     The available options are:\n     * `includeId`: `true` if the record's ID should be included in\n      the JSON representation\n     @method serialize\n    @private\n    @deprecated\n    @param {DS.Model} record the record to serialize\n    @param {Object} options an options hash\n  */\n  serialize(record, options) {\n    if (isEnabled('ds-deprecate-store-serialize')) {\n      (true && !(false) && Ember.deprecate('Use of store.serialize is deprecated, use record.serialize instead.', false, {\n        id: 'ds.store.serialize',\n        until: '3.0'\n      }));\n    }\n    var snapshot = record._internalModel.createSnapshot();\n    return snapshot.serialize(options);\n  },\n\n  /**\n    This property returns the adapter, after resolving a possible\n    string key.\n     If the supplied `adapter` was a class, or a String property\n    path resolved to a class, this property will instantiate the\n    class.\n     This property is cacheable, so the same instance of a specified\n    adapter class should be used for the lifetime of the store.\n     @property defaultAdapter\n    @private\n    @return DS.Adapter\n  */\n  defaultAdapter: Ember.computed('adapter', function () {\n    var adapter = Ember.get(this, 'adapter');\n\n    (true && !(typeof adapter === 'string') && Ember.assert('You tried to set `adapter` property to an instance of `DS.Adapter`, where it should be a name', typeof adapter === 'string'));\n\n\n    return this.adapterFor(adapter);\n  }),\n\n  // .....................\n  // . CREATE NEW RECORD .\n  // .....................\n\n  /**\n    Create a new record in the current store. The properties passed\n    to this method are set on the newly created record.\n     To create a new instance of a `Post`:\n     ```js\n    store.createRecord('post', {\n      title: 'Rails is omakase'\n    });\n    ```\n     To create a new instance of a `Post` that has a relationship with a `User` record:\n     ```js\n    let user = this.store.peekRecord('user', 1);\n    store.createRecord('post', {\n      title: 'Rails is omakase',\n      user: user\n    });\n    ```\n     @method createRecord\n    @param {String} modelName\n    @param {Object} inputProperties a hash of properties to set on the\n      newly created record.\n    @return {DS.Model} record\n  */\n  createRecord(modelName, inputProperties) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's createRecord method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n    var normalizedModelName = normalizeModelName(modelName);\n    var properties = Ember.copy(inputProperties) || Object.create(null);\n\n    // If the passed properties do not include a primary key,\n    // give the adapter an opportunity to generate one. Typically,\n    // client-side ID generators will use something like uuid.js\n    // to avoid conflicts.\n\n    if (Ember.isNone(properties.id)) {\n      properties.id = this._generateId(normalizedModelName, properties);\n    }\n\n    // Coerce ID to a string\n    properties.id = coerceId(properties.id);\n\n    var internalModel = this._buildInternalModel(normalizedModelName, properties.id);\n    internalModel.loadedData();\n    var record = internalModel.getRecord(properties);\n\n    // TODO @runspired this should also be coalesced into some form of internalModel.setState()\n    internalModel.eachRelationship((key, descriptor) => {\n      if (properties[key] !== undefined) {\n        internalModel._relationships.get(key).setHasData(true);\n      }\n    });\n\n    return record;\n  },\n\n  /**\n    If possible, this method asks the adapter to generate an ID for\n    a newly created record.\n     @method _generateId\n    @private\n    @param {String} modelName\n    @param {Object} properties from the new record\n    @return {String} if the adapter can generate one, an ID\n  */\n  _generateId(modelName, properties) {\n    var adapter = this.adapterFor(modelName);\n\n    if (adapter && adapter.generateIdForRecord) {\n      return adapter.generateIdForRecord(this, modelName, properties);\n    }\n\n    return null;\n  },\n\n  // .................\n  // . DELETE RECORD .\n  // .................\n\n  /**\n    For symmetry, a record can be deleted via the store.\n     Example\n     ```javascript\n    let post = store.createRecord('post', {\n      title: 'Rails is omakase'\n    });\n     store.deleteRecord(post);\n    ```\n     @method deleteRecord\n    @param {DS.Model} record\n  */\n  deleteRecord(record) {\n    record.deleteRecord();\n  },\n\n  /**\n    For symmetry, a record can be unloaded via the store.\n    This will cause the record to be destroyed and freed up for garbage collection.\n     Example\n     ```javascript\n    store.findRecord('post', 1).then(function(post) {\n      store.unloadRecord(post);\n    });\n    ```\n     @method unloadRecord\n    @param {DS.Model} record\n  */\n  unloadRecord(record) {\n    record.unloadRecord();\n  },\n\n  // ................\n  // . FIND RECORDS .\n  // ................\n\n  /**\n    @method find\n    @param {String} modelName\n    @param {String|Integer} id\n    @param {Object} options\n    @return {Promise} promise\n    @private\n  */\n  find(modelName, id, options) {\n    // The default `model` hook in Route calls `find(modelName, id)`,\n    // that's why we have to keep this method around even though `findRecord` is\n    // the public way to get a record by modelName and id.\n    (true && !(arguments.length !== 1) && Ember.assert(`Using store.find(type) has been removed. Use store.findAll(modelName) to retrieve all records for a given type.`, arguments.length !== 1));\n    (true && !(!options) && Ember.assert(`Calling store.find(modelName, id, { preload: preload }) is no longer supported. Use store.findRecord(modelName, id, { preload: preload }) instead.`, !options));\n    (true && !(arguments.length === 2) && Ember.assert(`You need to pass the model name and id to the store's find method`, arguments.length === 2));\n    (true && !(typeof id === 'string' || typeof id === 'number') && Ember.assert(`You cannot pass '${id}' as id to the store's find method`, typeof id === 'string' || typeof id === 'number'));\n    (true && !(typeof id !== 'object') && Ember.assert(`Calling store.find() with a query object is no longer supported. Use store.query() instead.`, typeof id !== 'object'));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    return this.findRecord(normalizedModelName, id);\n  },\n\n  /**\n    This method returns a record for a given type and id combination.\n     The `findRecord` method will always resolve its promise with the same\n    object for a given type and `id`.\n     The `findRecord` method will always return a **promise** that will be\n    resolved with the record.\n     Example\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id);\n      }\n    });\n    ```\n     If the record is not yet available, the store will ask the adapter's `find`\n    method to find the necessary data. If the record is already present in the\n    store, it depends on the reload behavior _when_ the returned promise\n    resolves.\n     ### Preloading\n     You can optionally `preload` specific attributes and relationships that you know of\n    by passing them via the passed `options`.\n     For example, if your Ember route looks like `/posts/1/comments/2` and your API route\n    for the comment also looks like `/posts/1/comments/2` if you want to fetch the comment\n    without fetching the post you can pass in the post to the `findRecord` call:\n     ```javascript\n    store.findRecord('comment', 2, { preload: { post: 1 } });\n    ```\n     If you have access to the post model you can also pass the model itself:\n     ```javascript\n    store.findRecord('post', 1).then(function (myPostModel) {\n      store.findRecord('comment', 2, { post: myPostModel });\n    });\n    ```\n     ### Reloading\n     The reload behavior is configured either via the passed `options` hash or\n    the result of the adapter's `shouldReloadRecord`.\n     If `{ reload: true }` is passed or `adapter.shouldReloadRecord` evaluates\n    to `true`, then the returned promise resolves once the adapter returns\n    data, regardless if the requested record is already in the store:\n     ```js\n    store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n     // adapter#findRecord resolves with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n    store.findRecord('post', 1, { reload: true }).then(function(post) {\n      post.get('revision'); // 2\n    });\n    ```\n     If no reload is indicated via the abovementioned ways, then the promise\n    immediately resolves with the cached version in the store.\n     ### Background Reloading\n     Optionally, if `adapter.shouldBackgroundReloadRecord` evaluates to `true`,\n    then a background reload is started, which updates the records' data, once\n    it is available:\n     ```js\n    // app/adapters/post.js\n    import ApplicationAdapter from \"./application\";\n     export default ApplicationAdapter.extend({\n      shouldReloadRecord(store, snapshot) {\n        return false;\n      },\n       shouldBackgroundReloadRecord(store, snapshot) {\n        return true;\n      }\n    });\n     // ...\n     store.push({\n      data: {\n        id: 1,\n        type: 'post',\n        revision: 1\n      }\n    });\n     let blogPost = store.findRecord('post', 1).then(function(post) {\n      post.get('revision'); // 1\n    });\n     // later, once adapter#findRecord resolved with\n    // [\n    //   {\n    //     id: 1,\n    //     type: 'post',\n    //     revision: 2\n    //   }\n    // ]\n     blogPost.get('revision'); // 2\n    ```\n     If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findRecord`.\n     ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { backgroundReload: false });\n      }\n    });\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to you adapter via the snapshot\n     ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default MyCustomAdapter.extend({\n      findRecord(store, type, id, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    });\n    ```\n     See [peekRecord](#method_peekRecord) to get the cached version of a record.\n     ### Retrieving Related Model Records\n     If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](https://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findRecord()` to automatically retrieve additional records related to\n    the one you request by supplying an `include` parameter in the `options` object.\n     For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve a specific post we can have the server also return that post's\n    comments in the same request:\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: 'comments' });\n      }\n    });\n     ```\n    In this case, the post's comments would then be available in your template as\n    `model.comments`.\n     Multiple relationships can be requested using an `include` parameter consisting of a\n    comma-separated list (without white-space) while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the post's\n    comments and the authors of those comments the request would look like this:\n     ```app/routes/post.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model(params) {\n        return this.store.findRecord('post', params.post_id, { include: 'comments,comments.author' });\n      }\n    });\n     ```\n     @since 1.13.0\n    @method findRecord\n    @param {String} modelName\n    @param {(String|Integer)} id\n    @param {Object} options\n    @return {Promise} promise\n  */\n  findRecord(modelName, id, options) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's findRecord method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n    (true && !(typeof id === 'string' && id.length > 0 || typeof id === 'number' && !isNaN(id)) && Ember.assert(badIdFormatAssertion, typeof id === 'string' && id.length > 0 || typeof id === 'number' && !isNaN(id)));\n\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    var internalModel = this._internalModelForId(normalizedModelName, id);\n    options = options || {};\n\n    if (!this.hasRecordForId(normalizedModelName, id)) {\n      return this._findByInternalModel(internalModel, options);\n    }\n\n    var fetchedInternalModel = this._findRecord(internalModel, options);\n\n    return promiseRecord(fetchedInternalModel, `DS: Store#findRecord ${normalizedModelName} with id: ${id}`);\n  },\n\n  _findRecord(internalModel, options) {\n    // Refetch if the reload option is passed\n    if (options.reload) {\n      return this._scheduleFetch(internalModel, options);\n    }\n\n    var snapshot = internalModel.createSnapshot(options);\n    var adapter = this.adapterFor(internalModel.modelName);\n\n    // Refetch the record if the adapter thinks the record is stale\n    if (adapter.shouldReloadRecord(this, snapshot)) {\n      return this._scheduleFetch(internalModel, options);\n    }\n\n    if (options.backgroundReload === false) {\n      return Promise.resolve(internalModel);\n    }\n\n    // Trigger the background refetch if backgroundReload option is passed\n    if (options.backgroundReload || adapter.shouldBackgroundReloadRecord(this, snapshot)) {\n      this._scheduleFetch(internalModel, options);\n    }\n\n    // Return the cached record\n    return Promise.resolve(internalModel);\n  },\n\n  _findByInternalModel(internalModel, options = {}) {\n    if (options.preload) {\n      internalModel.preloadData(options.preload);\n    }\n\n    var fetchedInternalModel = this._findEmptyInternalModel(internalModel, options);\n\n    return promiseRecord(fetchedInternalModel, `DS: Store#findRecord ${internalModel.modelName} with id: ${internalModel.id}`);\n  },\n\n  _findEmptyInternalModel(internalModel, options) {\n    if (internalModel.isEmpty()) {\n      return this._scheduleFetch(internalModel, options);\n    }\n\n    //TODO double check about reloading\n    if (internalModel.isLoading()) {\n      return internalModel._loadingPromise;\n    }\n\n    return Promise.resolve(internalModel);\n  },\n\n  /**\n    This method makes a series of requests to the adapter's `find` method\n    and returns a promise that resolves once they are all loaded.\n     @private\n    @method findByIds\n    @param {String} modelName\n    @param {Array} ids\n    @return {Promise} promise\n  */\n  findByIds(modelName, ids) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's findByIds method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    var promises = new Array(ids.length);\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    for (var i = 0; i < ids.length; i++) {\n      promises[i] = this.findRecord(normalizedModelName, ids[i]);\n    }\n\n    return promiseArray(Ember.RSVP.all(promises).then(Ember.A, null, `DS: Store#findByIds of ${normalizedModelName} complete`));\n  },\n\n  /**\n    This method is called by `findRecord` if it discovers that a particular\n    type/id pair hasn't been loaded yet to kick off a request to the\n    adapter.\n     @method _fetchRecord\n    @private\n    @param {InternalModel} internalModel model\n    @return {Promise} promise\n   */\n  _fetchRecord(internalModel, options) {\n    var modelName = internalModel.modelName;\n    var adapter = this.adapterFor(modelName);\n\n    (true && !(adapter) && Ember.assert(`You tried to find a record but you have no adapter (for ${modelName})`, adapter));\n    (true && !(typeof adapter.findRecord === 'function') && Ember.assert(`You tried to find a record but your adapter (for ${modelName}) does not implement 'findRecord'`, typeof adapter.findRecord === 'function'));\n\n\n    return _find(adapter, this, internalModel.type, internalModel.id, internalModel, options);\n  },\n\n  _scheduleFetchMany(internalModels) {\n    var fetches = new Array(internalModels.length);\n\n    for (var i = 0; i < internalModels.length; i++) {\n      fetches[i] = this._scheduleFetch(internalModels[i]);\n    }\n\n    return Promise.all(fetches);\n  },\n\n  _scheduleFetch(internalModel, options) {\n    if (internalModel._loadingPromise) {\n      return internalModel._loadingPromise;\n    }\n\n    var { id, modelName } = internalModel;\n    var resolver = Ember.RSVP.defer(`Fetching ${modelName}' with id: ${id}`);\n    var pendingFetchItem = {\n      internalModel,\n      resolver,\n      options\n    };\n\n    var promise = resolver.promise;\n\n    internalModel.loadingData(promise);\n    if (this._pendingFetch.size === 0) {\n      Ember.run.schedule('afterRender', this, this.flushAllPendingFetches);\n    }\n\n    this._pendingFetch.get(modelName).push(pendingFetchItem);\n\n    return promise;\n  },\n\n  flushAllPendingFetches() {\n    if (this.isDestroyed || this.isDestroying) {\n      return;\n    }\n\n    this._pendingFetch.forEach(this._flushPendingFetchForType, this);\n    this._pendingFetch.clear();\n  },\n\n  _flushPendingFetchForType(pendingFetchItems, modelName) {\n    var store = this;\n    var adapter = store.adapterFor(modelName);\n    var shouldCoalesce = !!adapter.findMany && adapter.coalesceFindRequests;\n    var totalItems = pendingFetchItems.length;\n    var internalModels = new Array(totalItems);\n    var seeking = Object.create(null);\n\n    for (var _i = 0; _i < totalItems; _i++) {\n      var pendingItem = pendingFetchItems[_i];\n      var _internalModel = pendingItem.internalModel;\n      internalModels[_i] = _internalModel;\n      seeking[_internalModel.id] = pendingItem;\n    }\n\n    function _fetchRecord(recordResolverPair) {\n      var recordFetch = store._fetchRecord(recordResolverPair.internalModel, recordResolverPair.options); // TODO adapter options\n\n      recordResolverPair.resolver.resolve(recordFetch);\n    }\n\n    function handleFoundRecords(foundInternalModels, expectedInternalModels) {\n      // resolve found records\n      var found = Object.create(null);\n      for (var _i2 = 0, _l = foundInternalModels.length; _i2 < _l; _i2++) {\n        var _internalModel2 = foundInternalModels[_i2];\n        var _pair = seeking[_internalModel2.id];\n        found[_internalModel2.id] = _internalModel2;\n\n        if (_pair) {\n          var resolver = _pair.resolver;\n          resolver.resolve(_internalModel2);\n        }\n      }\n\n      // reject missing records\n      var missingInternalModels = [];\n\n      for (var _i3 = 0, _l2 = expectedInternalModels.length; _i3 < _l2; _i3++) {\n        var _internalModel3 = expectedInternalModels[_i3];\n\n        if (!found[_internalModel3.id]) {\n          missingInternalModels.push(_internalModel3);\n        }\n      }\n\n      if (missingInternalModels.length) {\n        (true && Ember.warn('Ember Data expected to find records with the following ids in the adapter response but they were missing: ' + Ember.inspect(missingInternalModels.map(r => r.id)), false, {\n          id: 'ds.store.missing-records-from-adapter'\n        }));\n\n        rejectInternalModels(missingInternalModels);\n      }\n    }\n\n    function rejectInternalModels(internalModels, error) {\n      for (var _i4 = 0, _l3 = internalModels.length; _i4 < _l3; _i4++) {\n        var _internalModel4 = internalModels[_i4];\n        var _pair2 = seeking[_internalModel4.id];\n\n        if (_pair2) {\n          _pair2.resolver.reject(error || new Error(`Expected: '${_internalModel4}' to be present in the adapter provided payload, but it was not found.`));\n        }\n      }\n    }\n\n    if (shouldCoalesce) {\n      // TODO: Improve records => snapshots => records => snapshots\n      //\n      // We want to provide records to all store methods and snapshots to all\n      // adapter methods. To make sure we're doing that we're providing an array\n      // of snapshots to adapter.groupRecordsForFindMany(), which in turn will\n      // return grouped snapshots instead of grouped records.\n      //\n      // But since the _findMany() finder is a store method we need to get the\n      // records from the grouped snapshots even though the _findMany() finder\n      // will once again convert the records to snapshots for adapter.findMany()\n      var snapshots = new Array(totalItems);\n      for (var _i5 = 0; _i5 < totalItems; _i5++) {\n        snapshots[_i5] = internalModels[_i5].createSnapshot();\n      }\n\n      var groups = adapter.groupRecordsForFindMany(this, snapshots);\n\n      for (var i = 0, l = groups.length; i < l; i++) {\n        var group = groups[i];\n        var totalInGroup = groups[i].length;\n        var ids = new Array(totalInGroup);\n        var groupedInternalModels = new Array(totalInGroup);\n\n        for (var j = 0; j < totalInGroup; j++) {\n          var internalModel = group[j]._internalModel;\n\n          groupedInternalModels[j] = internalModel;\n          ids[j] = internalModel.id;\n        }\n\n        if (totalInGroup > 1) {\n          (function (groupedInternalModels) {\n            _findMany(adapter, store, modelName, ids, groupedInternalModels).then(function (foundInternalModels) {\n              handleFoundRecords(foundInternalModels, groupedInternalModels);\n            }).catch(function (error) {\n              rejectInternalModels(groupedInternalModels, error);\n            });\n          })(groupedInternalModels);\n        } else if (ids.length === 1) {\n          var pair = seeking[groupedInternalModels[0].id];\n          _fetchRecord(pair);\n        } else {\n          (true && !(false) && Ember.assert(\"You cannot return an empty array from adapter's method groupRecordsForFindMany\", false));\n        }\n      }\n    } else {\n      for (var _i6 = 0; _i6 < totalItems; _i6++) {\n        _fetchRecord(pendingFetchItems[_i6]);\n      }\n    }\n  },\n\n  /**\n    Get the reference for the specified record.\n     Example\n     ```javascript\n    let userRef = store.getReference('user', 1);\n     // check if the user is loaded\n    let isLoaded = userRef.value() !== null;\n     // get the record of the reference (null if not yet available)\n    let user = userRef.value();\n     // get the identifier of the reference\n    if (userRef.remoteType() === 'id') {\n    let id = userRef.id();\n    }\n     // load user (via store.find)\n    userRef.load().then(...)\n     // or trigger a reload\n    userRef.reload().then(...)\n     // provide data for reference\n    userRef.push({ id: 1, username: '@user' }).then(function(user) {\n      userRef.value() === user;\n    });\n    ```\n     @method getReference\n    @param {String} modelName\n    @param {String|Integer} id\n    @since 2.5.0\n    @return {RecordReference}\n  */\n  getReference(modelName, id) {\n    var normalizedModelName = normalizeModelName(modelName);\n\n    return this._internalModelForId(normalizedModelName, id).recordReference;\n  },\n\n  /**\n    Get a record by a given type and ID without triggering a fetch.\n     This method will synchronously return the record if it is available in the store,\n    otherwise it will return `null`. A record is available if it has been fetched earlier, or\n    pushed manually into the store.\n     See [findRecord](#method_findRecord) if you would like to request this record from the backend.\n     _Note: This is a synchronous method and does not return a promise._\n     ```js\n    let post = store.peekRecord('post', 1);\n     post.get('id'); // 1\n    ```\n     @since 1.13.0\n    @method peekRecord\n    @param {String} modelName\n    @param {String|Integer} id\n    @return {DS.Model|null} record\n  */\n  peekRecord(modelName, id) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's peekRecord method`, Ember.isPresent(modelName)));\n    (true && !(Ember.isPresent(modelName) && Ember.isPresent(id)) && Ember.assert(`You need to pass both a model name and id to the store's peekRecord method`, Ember.isPresent(modelName) && Ember.isPresent(id)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    if (this.hasRecordForId(normalizedModelName, id)) {\n      return this._internalModelForId(normalizedModelName, id).getRecord();\n    } else {\n      return null;\n    }\n  },\n\n  /**\n    This method is called by the record's `reload` method.\n     This method calls the adapter's `find` method, which returns a promise. When\n    **that** promise resolves, `reloadRecord` will resolve the promise returned\n    by the record's `reload`.\n     @method reloadRecord\n    @private\n    @param {DS.Model} internalModel\n    @return {Promise} promise\n  */\n  _reloadRecord(internalModel) {\n    var { id, modelName } = internalModel;\n    var adapter = this.adapterFor(modelName);\n\n    (true && !(id) && Ember.assert(`You cannot reload a record without an ID`, id));\n    (true && !(adapter) && Ember.assert(`You tried to reload a record but you have no adapter (for ${modelName})`, adapter));\n    (true && !(typeof adapter.findRecord === 'function' || typeof adapter.find === 'function') && Ember.assert(`You tried to reload a record but your adapter does not implement 'findRecord'`, typeof adapter.findRecord === 'function' || typeof adapter.find === 'function'));\n\n\n    return this._scheduleFetch(internalModel);\n  },\n\n  /**\n   This method returns true if a record for a given modelName and id is already\n   loaded in the store. Use this function to know beforehand if a findRecord()\n   will result in a request or that it will be a cache hit.\n    Example\n    ```javascript\n   store.hasRecordForId('post', 1); // false\n   store.findRecord('post', 1).then(function() {\n     store.hasRecordForId('post', 1); // true\n   });\n   ```\n     @method hasRecordForId\n    @param {String} modelName\n    @param {(String|Integer)} id\n    @return {Boolean}\n  */\n  hasRecordForId(modelName, id) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's hasRecordForId method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    var trueId = coerceId(id);\n    var internalModel = this._internalModelsFor(normalizedModelName).get(trueId);\n\n    return !!internalModel && internalModel.isLoaded();\n  },\n\n  /**\n    Returns id record for a given type and ID. If one isn't already loaded,\n    it builds a new record and leaves it in the `empty` state.\n     @method recordForId\n    @private\n    @param {String} modelName\n    @param {(String|Integer)} id\n    @return {DS.Model} record\n  */\n  recordForId(modelName, id) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's recordForId method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    return this._internalModelForId(modelName, id).getRecord();\n  },\n\n  _internalModelForId(modelName, id) {\n    var trueId = coerceId(id);\n    var internalModel = this._internalModelsFor(modelName).get(trueId);\n\n    if (internalModel) {\n      if (internalModel.hasScheduledDestroy()) {\n        internalModel.destroySync();\n        return this._buildInternalModel(modelName, trueId);\n      } else {\n        return internalModel;\n      }\n    } else {\n      return this._buildInternalModel(modelName, trueId);\n    }\n  },\n\n  _internalModelDidReceiveRelationshipData(modelName, id, relationshipData) {\n    this._relationshipsPayloads.push(modelName, id, relationshipData);\n  },\n\n  _internalModelDestroyed(internalModel) {\n    this._removeFromIdMap(internalModel);\n    this._relationshipsPayloads.unload(internalModel.modelName, internalModel.id);\n  },\n\n  /**\n    @method findMany\n    @private\n    @param {Array} internalModels\n    @return {Promise} promise\n  */\n  findMany(internalModels) {\n    var finds = new Array(internalModels.length);\n\n    for (var i = 0; i < internalModels.length; i++) {\n      finds[i] = this._findEmptyInternalModel(internalModels[i]);\n    }\n\n    return Promise.all(finds);\n  },\n\n  /**\n    If a relationship was originally populated by the adapter as a link\n    (as opposed to a list of IDs), this method is called when the\n    relationship is fetched.\n     The link (which is usually a URL) is passed through unchanged, so the\n    adapter can make whatever request it wants.\n     The usual use-case is for the server to register a URL as a link, and\n    then use that URL in the future to make a request for the relationship.\n     @method findHasMany\n    @private\n    @param {InternalModel} internalModel\n    @param {any} link\n    @param {(Relationship)} relationship\n    @return {Promise} promise\n  */\n  findHasMany(internalModel, link, relationship) {\n    var adapter = this.adapterFor(internalModel.modelName);\n\n    (true && !(adapter) && Ember.assert(`You tried to load a hasMany relationship but you have no adapter (for ${internalModel.modelName})`, adapter));\n    (true && !(typeof adapter.findHasMany === 'function') && Ember.assert(`You tried to load a hasMany relationship from a specified 'link' in the original payload but your adapter does not implement 'findHasMany'`, typeof adapter.findHasMany === 'function'));\n\n\n    return _findHasMany(adapter, this, internalModel, link, relationship);\n  },\n\n  /**\n    @method findBelongsTo\n    @private\n    @param {InternalModel} internalModel\n    @param {any} link\n    @param {Relationship} relationship\n    @return {Promise} promise\n  */\n  findBelongsTo(internalModel, link, relationship) {\n    var adapter = this.adapterFor(internalModel.modelName);\n\n    (true && !(adapter) && Ember.assert(`You tried to load a belongsTo relationship but you have no adapter (for ${internalModel.modelName})`, adapter));\n    (true && !(typeof adapter.findBelongsTo === 'function') && Ember.assert(`You tried to load a belongsTo relationship from a specified 'link' in the original payload but your adapter does not implement 'findBelongsTo'`, typeof adapter.findBelongsTo === 'function'));\n\n\n    return _findBelongsTo(adapter, this, internalModel, link, relationship);\n  },\n\n  /**\n    This method delegates a query to the adapter. This is the one place where\n    adapter-level semantics are exposed to the application.\n     Each time this method is called a new request is made through the adapter.\n     Exposing queries this way seems preferable to creating an abstract query\n    language for all server-side queries, and then require all adapters to\n    implement them.\n     ---\n     If you do something like this:\n     ```javascript\n    store.query('person', { page: 1 });\n    ```\n     The call made to the server, using a Rails backend, will look something like this:\n     ```\n    Started GET \"/api/v1/person?page=1\"\n    Processing by Api::V1::PersonsController#index as HTML\n    Parameters: { \"page\"=>\"1\" }\n    ```\n     ---\n     If you do something like this:\n     ```javascript\n    store.query('person', { ids: [1, 2, 3] });\n    ```\n     The call to the server, using a Rails backend, will look something like this:\n     ```\n    Started GET \"/api/v1/person?ids%5B%5D=1&ids%5B%5D=2&ids%5B%5D=3\"\n    Processing by Api::V1::PersonsController#index as HTML\n    Parameters: { \"ids\" => [\"1\", \"2\", \"3\"] }\n    ```\n     This method returns a promise, which is resolved with an\n    [`AdapterPopulatedRecordArray`](https://emberjs.com/api/data/classes/DS.AdapterPopulatedRecordArray.html)\n    once the server returns.\n     @since 1.13.0\n    @method query\n    @param {String} modelName\n    @param {any} query an opaque query to be used by the adapter\n    @return {Promise} promise\n  */\n  query(modelName, query) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's query method`, Ember.isPresent(modelName)));\n    (true && !(query) && Ember.assert(`You need to pass a query hash to the store's query method`, query));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    var normalizedModelName = normalizeModelName(modelName);\n    return this._query(normalizedModelName, query);\n  },\n\n  _query(modelName, query, array) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's query method`, Ember.isPresent(modelName)));\n    (true && !(query) && Ember.assert(`You need to pass a query hash to the store's query method`, query));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n    var adapter = this.adapterFor(modelName);\n    (true && !(adapter) && Ember.assert(`You tried to load a query but you have no adapter (for ${modelName})`, adapter));\n    (true && !(typeof adapter.query === 'function') && Ember.assert(`You tried to load a query but your adapter does not implement 'query'`, typeof adapter.query === 'function'));\n\n\n    var pA = promiseArray(_query(adapter, this, modelName, query, array));\n\n    return pA;\n  },\n\n  /**\n    This method makes a request for one record, where the `id` is not known\n    beforehand (if the `id` is known, use [`findRecord`](#method_findRecord)\n    instead).\n     This method can be used when it is certain that the server will return a\n    single object for the primary data.\n     Each time this method is called a new request is made through the adapter.\n     Let's assume our API provides an endpoint for the currently logged in user\n    via:\n     ```\n    // GET /api/current_user\n    {\n      user: {\n        id: 1234,\n        username: 'admin'\n      }\n    }\n    ```\n     Since the specific `id` of the `user` is not known beforehand, we can use\n    `queryRecord` to get the user:\n     ```javascript\n    store.queryRecord('user', {}).then(function(user) {\n      let username = user.get('username');\n      console.log(`Currently logged in as ${username}`);\n    });\n    ```\n     The request is made through the adapters' `queryRecord`:\n     ```app/adapters/user.js\n    import $ from 'jquery';\n    import DS from 'ember-data';\n     export default DS.Adapter.extend({\n      queryRecord(modelName, query) {\n        return $.getJSON('/api/current_user');\n      }\n    });\n    ```\n     Note: the primary use case for `store.queryRecord` is when a single record\n    is queried and the `id` is not known beforehand. In all other cases\n    `store.query` and using the first item of the array is likely the preferred\n    way:\n     ```\n    // GET /users?username=unique\n    {\n      data: [{\n        id: 1234,\n        type: 'user',\n        attributes: {\n          username: \"unique\"\n        }\n      }]\n    }\n    ```\n     ```javascript\n    store.query('user', { username: 'unique' }).then(function(users) {\n      return users.get('firstObject');\n    }).then(function(user) {\n      let id = user.get('id');\n    });\n    ```\n     This method returns a promise, which resolves with the found record.\n     If the adapter returns no data for the primary data of the payload, then\n    `queryRecord` resolves with `null`:\n     ```\n    // GET /users?username=unique\n    {\n      data: null\n    }\n    ```\n     ```javascript\n    store.queryRecord('user', { username: 'unique' }).then(function(user) {\n      console.log(user); // null\n    });\n    ```\n     @since 1.13.0\n    @method queryRecord\n    @param {String} modelName\n    @param {any} query an opaque query to be used by the adapter\n    @return {Promise} promise which resolves with the found record or `null`\n  */\n  queryRecord(modelName, query) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's queryRecord method`, Ember.isPresent(modelName)));\n    (true && !(query) && Ember.assert(`You need to pass a query hash to the store's queryRecord method`, query));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    var adapter = this.adapterFor(normalizedModelName);\n\n    (true && !(adapter) && Ember.assert(`You tried to make a query but you have no adapter (for ${normalizedModelName})`, adapter));\n    (true && !(typeof adapter.queryRecord === 'function') && Ember.assert(`You tried to make a query but your adapter does not implement 'queryRecord'`, typeof adapter.queryRecord === 'function'));\n\n\n    return promiseObject(_queryRecord(adapter, this, modelName, query).then(internalModel => {\n      // the promise returned by store.queryRecord is expected to resolve with\n      // an instance of DS.Model\n      if (internalModel) {\n        return internalModel.getRecord();\n      }\n\n      return null;\n    }));\n  },\n\n  /**\n    `findAll` asks the adapter's `findAll` method to find the records for the\n    given type, and returns a promise which will resolve with all records of\n    this type present in the store, even if the adapter only returns a subset\n    of them.\n     ```app/routes/authors.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model(params) {\n        return this.store.findAll('author');\n      }\n    });\n    ```\n     _When_ the returned promise resolves depends on the reload behavior,\n    configured via the passed `options` hash and the result of the adapter's\n    `shouldReloadAll` method.\n     ### Reloading\n     If `{ reload: true }` is passed or `adapter.shouldReloadAll` evaluates to\n    `true`, then the returned promise resolves once the adapter returns data,\n    regardless if there are already records in the store:\n     ```js\n    store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n     // adapter#findAll resolves with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n    store.findAll('author', { reload: true }).then(function(authors) {\n      authors.getEach('id'); // ['first', 'second']\n    });\n    ```\n     If no reload is indicated via the abovementioned ways, then the promise\n    immediately resolves with all the records currently loaded in the store.\n     ### Background Reloading\n     Optionally, if `adapter.shouldBackgroundReloadAll` evaluates to `true`,\n    then a background reload is started. Once this resolves, the array with\n    which the promise resolves, is updated automatically so it contains all the\n    records in the store:\n     ```app/adapters/application.js\n    import DS from 'ember-data';\n    export default DS.Adapter.extend({\n      shouldReloadAll(store, snapshotsArray) {\n        return false;\n      },\n       shouldBackgroundReloadAll(store, snapshotsArray) {\n        return true;\n      }\n    });\n     // ...\n     store.push({\n      data: {\n        id: 'first',\n        type: 'author'\n      }\n    });\n     let allAuthors;\n    store.findAll('author').then(function(authors) {\n      authors.getEach('id'); // ['first']\n       allAuthors = authors;\n    });\n     // later, once adapter#findAll resolved with\n    // [\n    //   {\n    //     id: 'second',\n    //     type: 'author'\n    //   }\n    // ]\n     allAuthors.getEach('id'); // ['first', 'second']\n    ```\n     If you would like to force or prevent background reloading, you can set a\n    boolean value for `backgroundReload` in the options object for\n    `findAll`.\n     ```app/routes/post/edit.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model() {\n        return this.store.findAll('post', { backgroundReload: false });\n      }\n    });\n    ```\n     If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to you adapter via the `snapshotRecordArray`\n     ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model(params) {\n        return this.store.findAll('post', {\n          adapterOptions: { subscribe: false }\n        });\n      }\n    });\n    ```\n     ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n     export default MyCustomAdapter.extend({\n      findAll(store, type, sinceToken, snapshotRecordArray) {\n        if (snapshotRecordArray.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    });\n    ```\n     See [peekAll](#method_peekAll) to get an array of current records in the\n    store, without waiting until a reload is finished.\n     ### Retrieving Related Model Records\n     If you use an adapter such as Ember's default\n    [`JSONAPIAdapter`](https://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html)\n    that supports the [JSON API specification](http://jsonapi.org/) and if your server\n    endpoint supports the use of an\n    ['include' query parameter](http://jsonapi.org/format/#fetching-includes),\n    you can use `findAll()` to automatically retrieve additional records related to\n    those requested by supplying an `include` parameter in the `options` object.\n     For example, given a `post` model that has a `hasMany` relationship with a `comment`\n    model, when we retrieve all of the post records we can have the server also return\n    all of the posts' comments in the same request:\n     ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model() {\n        return this.store.findAll('post', { include: 'comments' });\n      }\n    });\n     ```\n    Multiple relationships can be requested using an `include` parameter consisting of a\n    comma-separated list (without white-space) while nested relationships can be specified\n    using a dot-separated sequence of relationship names. So to request both the posts'\n    comments and the authors of those comments the request would look like this:\n     ```app/routes/posts.js\n    import Route from '@ember/routing/route';\n     export default Route.extend({\n      model() {\n        return this.store.findAll('post', { include: 'comments,comments.author' });\n      }\n    });\n     ```\n     See [query](#method_query) to only get a subset of records from the server.\n     @since 1.13.0\n    @method findAll\n    @param {String} modelName\n    @param {Object} options\n    @return {Promise} promise\n  */\n  findAll(modelName, options) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's findAll method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n    var normalizedModelName = normalizeModelName(modelName);\n    var fetch = this._fetchAll(normalizedModelName, this.peekAll(normalizedModelName), options);\n\n    return fetch;\n  },\n\n  /**\n    @method _fetchAll\n    @private\n    @param {DS.Model} modelName\n    @param {DS.RecordArray} array\n    @return {Promise} promise\n  */\n  _fetchAll(modelName, array, options = {}) {\n    var adapter = this.adapterFor(modelName);\n    var sinceToken = this._internalModelsFor(modelName).metadata.since;\n\n    (true && !(adapter) && Ember.assert(`You tried to load all records but you have no adapter (for ${modelName})`, adapter));\n    (true && !(typeof adapter.findAll === 'function') && Ember.assert(`You tried to load all records but your adapter does not implement 'findAll'`, typeof adapter.findAll === 'function'));\n\n\n    if (options.reload) {\n      Ember.set(array, 'isUpdating', true);\n      return promiseArray(_findAll(adapter, this, modelName, sinceToken, options));\n    }\n\n    var snapshotArray = array._createSnapshot(options);\n\n    if (adapter.shouldReloadAll(this, snapshotArray)) {\n      Ember.set(array, 'isUpdating', true);\n      return promiseArray(_findAll(adapter, this, modelName, sinceToken, options));\n    }\n\n    if (options.backgroundReload === false) {\n      return promiseArray(Promise.resolve(array));\n    }\n\n    if (options.backgroundReload || adapter.shouldBackgroundReloadAll(this, snapshotArray)) {\n      Ember.set(array, 'isUpdating', true);\n      _findAll(adapter, this, modelName, sinceToken, options);\n    }\n\n    return promiseArray(Promise.resolve(array));\n  },\n\n  /**\n    @method _didUpdateAll\n    @param {String} modelName\n    @private\n  */\n  _didUpdateAll(modelName) {\n    this.recordArrayManager._didUpdateAll(modelName);\n  },\n\n  didUpdateAll(modelName) {\n    (true && !(false) && Ember.deprecate('didUpdateAll was documented as private and will be removed in the next version of Ember Data.', false, { id: 'ember-data.didUpdateAll', until: '2.17.0' }));\n\n    return this._didUpdateAll(modelName);\n  },\n\n  /**\n    This method returns a filtered array that contains all of the\n    known records for a given type in the store.\n     Note that because it's just a filter, the result will contain any\n    locally created records of the type, however, it will not make a\n    request to the backend to retrieve additional records. If you\n    would like to request all the records from the backend please use\n    [store.findAll](#method_findAll).\n     Also note that multiple calls to `peekAll` for a given type will always\n    return the same `RecordArray`.\n     Example\n     ```javascript\n    let localPosts = store.peekAll('post');\n    ```\n     @since 1.13.0\n    @method peekAll\n    @param {String} modelName\n    @return {DS.RecordArray}\n  */\n  peekAll(modelName) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's peekAll method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n    var normalizedModelName = normalizeModelName(modelName);\n    return this.recordArrayManager.liveRecordArrayFor(normalizedModelName);\n  },\n\n  /**\n    This method unloads all records in the store.\n    It schedules unloading to happen during the next run loop.\n     Optionally you can pass a type which unload all records for a given type.\n     ```javascript\n    store.unloadAll();\n    store.unloadAll('post');\n    ```\n     @method unloadAll\n    @param {String} modelName\n  */\n  unloadAll(modelName) {\n    (true && !(!modelName || typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, !modelName || typeof modelName === 'string'));\n\n\n    if (arguments.length === 0) {\n      this._identityMap.clear();\n    } else {\n      var normalizedModelName = normalizeModelName(modelName);\n      this._internalModelsFor(normalizedModelName).clear();\n    }\n  },\n\n  /**\n    Takes a type and filter function, and returns a live RecordArray that\n    remains up to date as new records are loaded into the store or created\n    locally.\n     The filter function takes a materialized record, and returns true\n    if the record should be included in the filter and false if it should\n    not.\n     Example\n     ```javascript\n    store.filter('post', function(post) {\n      return post.get('unread');\n    });\n    ```\n     The filter function is called once on all records for the type when\n    it is created, and then once on each newly loaded or created record.\n     If any of a record's properties change, or if it changes state, the\n    filter function will be invoked again to determine whether it should\n    still be in the array.\n     Optionally you can pass a query, which is the equivalent of calling\n    [query](#method_query) with that same query, to fetch additional records\n    from the server. The results returned by the server could then appear\n    in the filter if they match the filter function.\n     The query itself is not used to filter records, it's only sent to your\n    server for you to be able to do server-side filtering. The filter\n    function will be applied on the returned results regardless.\n     Example\n     ```javascript\n    store.filter('post', { unread: true }, function(post) {\n      return post.get('unread');\n    }).then(function(unreadPosts) {\n      unreadPosts.get('length'); // 5\n      let unreadPost = unreadPosts.objectAt(0);\n      unreadPost.set('unread', false);\n      unreadPosts.get('length'); // 4\n    });\n    ```\n     @method filter\n    @private\n    @param {String} modelName\n    @param {Object} query optional query\n    @param {Function} filter\n    @return {DS.PromiseArray}\n    @deprecated\n  */\n  filter(modelName, query, filter) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's filter method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    if (!ENV.ENABLE_DS_FILTER) {\n      (true && !(false) && Ember.assert('The filter API has been moved to a plugin. To enable store.filter using an environment flag, or to use an alternative, you can visit the ember-data-filter addon page. https://github.com/ember-data/ember-data-filter', false));\n    }\n\n    var promise = void 0;\n    var length = arguments.length;\n    var array = void 0;\n    var hasQuery = length === 3;\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    // allow an optional server query\n    if (hasQuery) {\n      promise = this.query(normalizedModelName, query);\n    } else if (arguments.length === 2) {\n      filter = query;\n    }\n\n    if (hasQuery) {\n      array = this.recordArrayManager.createFilteredRecordArray(normalizedModelName, filter, query);\n    } else {\n      array = this.recordArrayManager.createFilteredRecordArray(normalizedModelName, filter);\n    }\n\n    promise = promise || Promise.resolve(array);\n\n    return promiseArray(promise.then(() => array, null, `DS: Store#filter of ${normalizedModelName}`));\n  },\n\n  /**\n    This method has been deprecated and is an alias for store.hasRecordForId, which should\n    be used instead.\n     @deprecated\n    @method recordIsLoaded\n    @param {String} modelName\n    @param {string} id\n    @return {boolean}\n  */\n  recordIsLoaded(modelName, id) {\n    (true && !(false) && Ember.deprecate(`Use of recordIsLoaded is deprecated, use hasRecordForId instead.`, false, {\n      id: 'ds.store.recordIsLoaded',\n      until: '3.0'\n    }));\n\n    return this.hasRecordForId(modelName, id);\n  },\n\n  // ..............\n  // . PERSISTING .\n  // ..............\n\n  /**\n    This method is called by `record.save`, and gets passed a\n    resolver for the promise that `record.save` returns.\n     It schedules saving to happen at the end of the run loop.\n     @method scheduleSave\n    @private\n    @param {InternalModel} internalModel\n    @param {Resolver} resolver\n    @param {Object} options\n  */\n  scheduleSave(internalModel, resolver, options) {\n    var snapshot = internalModel.createSnapshot(options);\n    internalModel.flushChangedAttributes();\n    internalModel.adapterWillCommit();\n    this._pendingSave.push({\n      snapshot: snapshot,\n      resolver: resolver\n    });\n    Ember.run.once(this, this.flushPendingSave);\n  },\n\n  /**\n    This method is called at the end of the run loop, and\n    flushes any records passed into `scheduleSave`\n     @method flushPendingSave\n    @private\n  */\n  flushPendingSave() {\n    var pending = this._pendingSave.slice();\n    this._pendingSave = [];\n\n    for (var i = 0, j = pending.length; i < j; i++) {\n      var pendingItem = pending[i];\n      var snapshot = pendingItem.snapshot;\n      var resolver = pendingItem.resolver;\n      var internalModel = snapshot._internalModel;\n      var adapter = this.adapterFor(internalModel.modelName);\n      var operation = void 0;\n\n      if (internalModel.currentState.stateName === 'root.deleted.saved') {\n        resolver.resolve();\n        continue;\n      } else if (internalModel.isNew()) {\n        operation = 'createRecord';\n      } else if (internalModel.isDeleted()) {\n        operation = 'deleteRecord';\n      } else {\n        operation = 'updateRecord';\n      }\n\n      resolver.resolve(_commit(adapter, this, operation, snapshot));\n    }\n  },\n\n  /**\n    This method is called once the promise returned by an\n    adapter's `createRecord`, `updateRecord` or `deleteRecord`\n    is resolved.\n     If the data provides a server-generated ID, it will\n    update the record and the store's indexes.\n     @method didSaveRecord\n    @private\n    @param {InternalModel} internalModel the in-flight internal model\n    @param {Object} data optional data (see above)\n  */\n  didSaveRecord(internalModel, dataArg) {\n    var data = void 0;\n    if (dataArg) {\n      data = dataArg.data;\n    }\n    if (data) {\n      // normalize relationship IDs into records\n      this.updateId(internalModel, data);\n      this._setupRelationshipsForModel(internalModel, data);\n    } else {\n      (true && !(internalModel.id) && Ember.assert(`Your ${internalModel.modelName} record was saved to the server, but the response does not have an id and no id has been set client side. Records must have ids. Please update the server response to provide an id in the response or generate the id on the client side either before saving the record or while normalizing the response.`, internalModel.id));\n    }\n\n    //We first make sure the primary data has been updated\n    //TODO try to move notification to the user to the end of the runloop\n    internalModel.adapterDidCommit(data);\n  },\n\n  /**\n    This method is called once the promise returned by an\n    adapter's `createRecord`, `updateRecord` or `deleteRecord`\n    is rejected with a `DS.InvalidError`.\n     @method recordWasInvalid\n    @private\n    @param {InternalModel} internalModel\n    @param {Object} errors\n  */\n  recordWasInvalid(internalModel, errors) {\n    internalModel.adapterDidInvalidate(errors);\n  },\n\n  /**\n    This method is called once the promise returned by an\n    adapter's `createRecord`, `updateRecord` or `deleteRecord`\n    is rejected (with anything other than a `DS.InvalidError`).\n     @method recordWasError\n    @private\n    @param {InternalModel} internalModel\n    @param {Error} error\n  */\n  recordWasError(internalModel, error) {\n    internalModel.adapterDidError(error);\n  },\n\n  /**\n    When an adapter's `createRecord`, `updateRecord` or `deleteRecord`\n    resolves with data, this method extracts the ID from the supplied\n    data.\n     @method updateId\n    @private\n    @param {InternalModel} internalModel\n    @param {Object} data\n  */\n  updateId(internalModel, data) {\n    var oldId = internalModel.id;\n    var modelName = internalModel.modelName;\n    var id = coerceId(data.id);\n\n    // ID absolutely can't be missing if the oldID is empty (missing Id in response for a new record)\n    (true && !(!(id === null && oldId === null)) && Ember.assert(`'${modelName}' was saved to the server, but the response does not have an id and your record does not either.`, !(id === null && oldId === null)));\n\n    // ID absolutely can't be different than oldID if oldID is not null\n\n    (true && !(!(oldId !== null && id !== oldId)) && Ember.assert(`'${modelName}:${oldId}' was saved to the server, but the response returned the new id '${id}'. The store cannot assign a new id to a record that already has an id.`, !(oldId !== null && id !== oldId)));\n\n    // ID can be null if oldID is not null (altered ID in response for a record)\n    // however, this is more than likely a developer error.\n\n    if (oldId !== null && id === null) {\n      (true && Ember.warn(`Your ${modelName} record was saved to the server, but the response does not have an id.`, !(oldId !== null && id === null)));\n\n      return;\n    }\n\n    var existingInternalModel = this._existingInternalModelForId(modelName, id);\n\n    (true && !(Ember.isNone(existingInternalModel) || existingInternalModel === internalModel) && Ember.assert(`'${modelName}' was saved to the server, but the response returned the new id '${id}', which has already been used with another record.'`, Ember.isNone(existingInternalModel) || existingInternalModel === internalModel));\n\n\n    this._internalModelsFor(internalModel.modelName).set(id, internalModel);\n\n    internalModel.setId(id);\n  },\n\n  /**\n    Returns a map of IDs to client IDs for a given modelName.\n     @method _internalModelsFor\n    @private\n    @param {String} modelName\n    @return {Object} recordMap\n  */\n  _internalModelsFor(modelName) {\n    return this._identityMap.retrieve(modelName);\n  },\n\n  // ................\n  // . LOADING DATA .\n  // ................\n\n  /**\n    This internal method is used by `push`.\n     @method _load\n    @private\n    @param {Object} data\n  */\n  _load(data) {\n    var modelName = normalizeModelName(data.type);\n    var internalModel = this._internalModelForId(modelName, data.id);\n\n    var isUpdate = internalModel.currentState.isEmpty === false;\n\n    internalModel.setupData(data);\n\n    if (isUpdate) {\n      this.recordArrayManager.recordDidChange(internalModel);\n    } else {\n      this.recordArrayManager.recordWasLoaded(internalModel);\n    }\n\n    return internalModel;\n  },\n\n  /*\n    In case someone defined a relationship to a mixin, for example:\n    ```\n      let Comment = DS.Model.extend({\n        owner: belongsTo('commentable'. { polymorphic: true })\n      });\n      let Commentable = Ember.Mixin.create({\n        comments: hasMany('comment')\n      });\n    ```\n    we want to look up a Commentable class which has all the necessary\n    relationship metadata. Thus, we look up the mixin and create a mock\n    DS.Model, so we can access the relationship CPs of the mixin (`comments`)\n    in this case\n     @private\n  */\n  _modelForMixin(normalizedModelName) {\n    // container.registry = 2.1\n    // container._registry = 1.11 - 2.0\n    // container = < 1.11\n    var owner = getOwner(this);\n    var mixin = void 0;\n\n    if (owner.factoryFor) {\n      var MaybeMixin = owner.factoryFor(`mixin:${normalizedModelName}`);\n      mixin = MaybeMixin && MaybeMixin.class;\n    } else {\n      mixin = owner._lookupFactory(`mixin:${normalizedModelName}`);\n    }\n\n    if (mixin) {\n      var ModelForMixin = Model.extend(mixin);\n      ModelForMixin.reopenClass({\n        __isMixin: true,\n        __mixin: mixin\n      });\n\n      //Cache the class as a model\n      owner.register('model:' + normalizedModelName, ModelForMixin);\n    }\n\n    return this.modelFactoryFor(normalizedModelName);\n  },\n\n  /**\n    Returns the model class for the particular `modelName`.\n     The class of a model might be useful if you want to get a list of all the\n    relationship names of the model, see\n    [`relationshipNames`](https://emberjs.com/api/data/classes/DS.Model.html#property_relationshipNames)\n    for example.\n     @method modelFor\n    @param {String} modelName\n    @return {DS.Model}\n  */\n  modelFor(modelName) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's modelFor method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    return this._modelFor(normalizedModelName);\n  },\n\n  /*\n    @private\n   */\n  _modelFor(modelName) {\n    var maybeFactory = this._modelFactoryFor(modelName);\n    // for factorFor factory/class split\n    return maybeFactory.class ? maybeFactory.class : maybeFactory;\n  },\n\n  _modelFactoryFor(modelName) {\n    var factory = this._modelFactoryCache[modelName];\n\n    if (!factory) {\n      factory = this.modelFactoryFor(modelName);\n\n      if (!factory) {\n        //Support looking up mixins as base types for polymorphic relationships\n        factory = this._modelForMixin(modelName);\n      }\n      if (!factory) {\n        throw new Ember.Error(`No model was found for '${modelName}'`);\n      }\n\n      // interopt with the future\n      var klass = getOwner(this).factoryFor ? factory.class : factory;\n\n      (true && !(klass.isModel) && Ember.assert(`'${Ember.inspect(klass)}' does not appear to be an ember-data model`, klass.isModel));\n\n      // TODO: deprecate this\n\n      klass.modelName = klass.modelName || modelName;\n\n      this._modelFactoryCache[modelName] = factory;\n    }\n\n    return factory;\n  },\n\n  /*\n   @private\n   */\n  modelFactoryFor(modelName) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's modelFactoryFor method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n\n    var normalizedModelName = normalizeModelName(modelName);\n    var owner = getOwner(this);\n\n    if (owner.factoryFor) {\n      return owner.factoryFor(`model:${normalizedModelName}`);\n    } else {\n      return owner._lookupFactory(`model:${normalizedModelName}`);\n    }\n  },\n\n  /**\n    Push some data for a given type into the store.\n     This method expects normalized [JSON API](http://jsonapi.org/) document. This means you have to follow [JSON API specification](http://jsonapi.org/format/) with few minor adjustments:\n    - record's `type` should always be in singular, dasherized form\n    - members (properties) should be camelCased\n     [Your primary data should be wrapped inside `data` property](http://jsonapi.org/format/#document-top-level):\n     ```js\n    store.push({\n      data: {\n        // primary data for single record of type `Person`\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Daniel',\n          lastName: 'Kmak'\n        }\n      }\n    });\n    ```\n     [Demo.](http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7)\n     `data` property can also hold an array (of records):\n     ```js\n    store.push({\n      data: [\n        // an array of records\n        {\n          id: '1',\n          type: 'person',\n          attributes: {\n            firstName: 'Daniel',\n            lastName: 'Kmak'\n          }\n        },\n        {\n          id: '2',\n          type: 'person',\n          attributes: {\n            firstName: 'Tom',\n            lastName: 'Dale'\n          }\n        }\n      ]\n    });\n    ```\n     [Demo.](http://ember-twiddle.com/69cdbeaa3702159dc355)\n     There are some typical properties for `JSONAPI` payload:\n    * `id` - mandatory, unique record's key\n    * `type` - mandatory string which matches `model`'s dasherized name in singular form\n    * `attributes` - object which holds data for record attributes - `DS.attr`'s declared in model\n    * `relationships` - object which must contain any of the following properties under each relationships' respective key (example path is `relationships.achievements.data`):\n      - [`links`](http://jsonapi.org/format/#document-links)\n      - [`data`](http://jsonapi.org/format/#document-resource-object-linkage) - place for primary data\n      - [`meta`](http://jsonapi.org/format/#document-meta) - object which contains meta-information about relationship\n     For this model:\n     ```app/models/person.js\n    import DS from 'ember-data';\n     export default DS.Model.extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n       children: DS.hasMany('person')\n    });\n    ```\n     To represent the children as IDs:\n     ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            data: [\n              {\n                id: '2',\n                type: 'person'\n              },\n              {\n                id: '3',\n                type: 'person'\n              },\n              {\n                id: '4',\n                type: 'person'\n              }\n            ]\n          }\n        }\n      }\n    }\n    ```\n     [Demo.](http://ember-twiddle.com/343e1735e034091f5bde)\n     To represent the children relationship as a URL:\n     ```js\n    {\n      data: {\n        id: '1',\n        type: 'person',\n        attributes: {\n          firstName: 'Tom',\n          lastName: 'Dale'\n        },\n        relationships: {\n          children: {\n            links: {\n              related: '/people/1/children'\n            }\n          }\n        }\n      }\n    }\n    ```\n     If you're streaming data or implementing an adapter, make sure\n    that you have converted the incoming data into this form. The\n    store's [normalize](#method_normalize) method is a convenience\n    helper for converting a json payload into the form Ember Data\n    expects.\n     ```js\n    store.push(store.normalize('person', data));\n    ```\n     This method can be used both to push in brand new\n    records, as well as to update existing records.\n     @method push\n    @param {Object} data\n    @return {DS.Model|Array} the record(s) that was created or\n      updated.\n  */\n  push(data) {\n    var pushed = this._push(data);\n\n    if (Array.isArray(pushed)) {\n      var records = pushed.map(internalModel => internalModel.getRecord());\n\n      return records;\n    }\n\n    if (pushed === null) {\n      return null;\n    }\n\n    var record = pushed.getRecord();\n\n    return record;\n  },\n\n  /*\n    Push some data in the form of a json-api document into the store,\n    without creating materialized records.\n     @method _push\n    @private\n    @param {Object} jsonApiDoc\n    @return {DS.InternalModel|Array<DS.InternalModel>} pushed InternalModel(s)\n  */\n  _push(jsonApiDoc) {\n    var internalModelOrModels = this._backburner.join(() => {\n      var included = jsonApiDoc.included;\n      var i = void 0,\n          length = void 0;\n\n      if (included) {\n        for (i = 0, length = included.length; i < length; i++) {\n          this._pushInternalModel(included[i]);\n        }\n      }\n\n      if (Array.isArray(jsonApiDoc.data)) {\n        length = jsonApiDoc.data.length;\n        var internalModels = new Array(length);\n\n        for (i = 0; i < length; i++) {\n          internalModels[i] = this._pushInternalModel(jsonApiDoc.data[i]);\n        }\n        return internalModels;\n      }\n\n      if (jsonApiDoc.data === null) {\n        return null;\n      }\n\n      (true && !(Ember.typeOf(jsonApiDoc.data) === 'object') && Ember.assert(`Expected an object in the 'data' property in a call to 'push' for ${jsonApiDoc.type}, but was ${Ember.typeOf(jsonApiDoc.data)}`, Ember.typeOf(jsonApiDoc.data) === 'object'));\n\n\n      return this._pushInternalModel(jsonApiDoc.data);\n    });\n\n    return internalModelOrModels;\n  },\n\n  _hasModelFor(modelName) {\n    var owner = getOwner(this);\n    modelName = normalizeModelName(modelName);\n\n    if (owner.factoryFor) {\n      return !!owner.factoryFor(`model:${modelName}`);\n    } else {\n      return !!owner._lookupFactory(`model:${modelName}`);\n    }\n  },\n\n  _pushInternalModel(data) {\n    var modelName = data.type;\n    (true && !(data.id !== null && data.id !== undefined && data.id !== '') && Ember.assert(`You must include an 'id' for ${modelName} in an object passed to 'push'`, data.id !== null && data.id !== undefined && data.id !== ''));\n    (true && !(this._hasModelFor(modelName)) && Ember.assert(`You tried to push data with a type '${modelName}' but no model could be found with that name.`, this._hasModelFor(modelName)));\n\n\n    {\n      // If ENV.DS_WARN_ON_UNKNOWN_KEYS is set to true and the payload\n      // contains unknown attributes or relationships, log a warning.\n\n      if (ENV.DS_WARN_ON_UNKNOWN_KEYS) {\n        var modelClass = this._modelFor(modelName);\n\n        // Check unknown attributes\n        var unknownAttributes = Object.keys(data.attributes || {}).filter(key => {\n          return !Ember.get(modelClass, 'fields').has(key);\n        });\n        var unknownAttributesMessage = `The payload for '${modelName}' contains these unknown attributes: ${unknownAttributes}. Make sure they've been defined in your model.`;\n        (true && Ember.warn(unknownAttributesMessage, unknownAttributes.length === 0, { id: 'ds.store.unknown-keys-in-payload' }));\n\n        // Check unknown relationships\n\n        var unknownRelationships = Object.keys(data.relationships || {}).filter(key => {\n          return !Ember.get(modelClass, 'fields').has(key);\n        });\n        var unknownRelationshipsMessage = `The payload for '${modelName}' contains these unknown relationships: ${unknownRelationships}. Make sure they've been defined in your model.`;\n        (true && Ember.warn(unknownRelationshipsMessage, unknownRelationships.length === 0, { id: 'ds.store.unknown-keys-in-payload' }));\n      }\n    }\n\n    // Actually load the record into the store.\n    var internalModel = this._load(data);\n\n    this._setupRelationshipsForModel(internalModel, data);\n\n    return internalModel;\n  },\n\n  _setupRelationshipsForModel(internalModel, data) {\n    if (data.relationships === undefined) {\n      return;\n    }\n\n    if (this._pushedInternalModels.push(internalModel, data) !== 2) {\n      return;\n    }\n\n    this._backburner.schedule('normalizeRelationships', this, this._setupRelationships);\n  },\n\n  _setupRelationships() {\n    var pushed = this._pushedInternalModels;\n\n    // Cache the inverse maps for each modelClass that we visit during this\n    // payload push.  In the common case where we are pushing many more\n    // instances than types we want to minimize the cost of looking up the\n    // inverse map and the overhead of Ember.get adds up.\n    var modelNameToInverseMap = void 0;\n\n    for (var i = 0, l = pushed.length; i < l; i += 2) {\n      modelNameToInverseMap = modelNameToInverseMap || Object.create(null);\n      // This will convert relationships specified as IDs into DS.Model instances\n      // (possibly unloaded) and also create the data structures used to track\n      // relationships.\n      var internalModel = pushed[i];\n      var data = pushed[i + 1];\n      setupRelationships(this, internalModel, data, modelNameToInverseMap);\n    }\n\n    pushed.length = 0;\n  },\n\n  /**\n    Push some raw data into the store.\n     This method can be used both to push in brand new\n    records, as well as to update existing records. You\n    can push in more than one type of object at once.\n    All objects should be in the format expected by the\n    serializer.\n     ```app/serializers/application.js\n    import DS from 'ember-data';\n     export default DS.ActiveModelSerializer;\n    ```\n     ```js\n    let pushData = {\n      posts: [\n        { id: 1, post_title: \"Great post\", comment_ids: [2] }\n      ],\n      comments: [\n        { id: 2, comment_body: \"Insightful comment\" }\n      ]\n    }\n     store.pushPayload(pushData);\n    ```\n     By default, the data will be deserialized using a default\n    serializer (the application serializer if it exists).\n     Alternatively, `pushPayload` will accept a model type which\n    will determine which serializer will process the payload.\n     ```app/serializers/application.js\n    import DS from 'ember-data';\n     export default DS.ActiveModelSerializer;\n    ```\n     ```app/serializers/post.js\n    import DS from 'ember-data';\n     export default DS.JSONSerializer;\n    ```\n     ```js\n    store.pushPayload(pushData); // Will use the application serializer\n    store.pushPayload('post', pushData); // Will use the post serializer\n    ```\n     @method pushPayload\n    @param {String} modelName Optionally, a model type used to determine which serializer will be used\n    @param {Object} inputPayload\n  */\n  pushPayload(modelName, inputPayload) {\n    var serializer = void 0;\n    var payload = void 0;\n    if (!inputPayload) {\n      payload = modelName;\n      serializer = defaultSerializer(this);\n      (true && !(typeof serializer.pushPayload === 'function') && Ember.assert(`You cannot use 'store#pushPayload' without a modelName unless your default serializer defines 'pushPayload'`, typeof serializer.pushPayload === 'function'));\n    } else {\n      payload = inputPayload;\n      (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n      var normalizedModelName = normalizeModelName(modelName);\n      serializer = this.serializerFor(normalizedModelName);\n    }\n    if (isEnabled('ds-pushpayload-return')) {\n      return serializer.pushPayload(this, payload);\n    } else {\n      serializer.pushPayload(this, payload);\n    }\n  },\n\n  /**\n    `normalize` converts a json payload into the normalized form that\n    [push](#method_push) expects.\n     Example\n     ```js\n    socket.on('message', function(message) {\n      let modelName = message.model;\n      let data = message.data;\n      store.push(store.normalize(modelName, data));\n    });\n    ```\n     @method normalize\n    @param {String} modelName The name of the model type for this payload\n    @param {Object} payload\n    @return {Object} The normalized payload\n  */\n  normalize(modelName, payload) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's normalize method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store methods has been removed. Please pass a dasherized string instead of ${Ember.inspect(modelName)}`, typeof modelName === 'string'));\n\n    var normalizedModelName = normalizeModelName(modelName);\n    var serializer = this.serializerFor(normalizedModelName);\n    var model = this._modelFor(normalizedModelName);\n    return serializer.normalize(model, payload);\n  },\n\n  /**\n    Build a brand new record for a given type, ID, and\n    initial data.\n     @method _buildInternalModel\n    @private\n    @param {String} modelName\n    @param {String} id\n    @param {Object} data\n    @return {InternalModel} internal model\n  */\n  _buildInternalModel(modelName, id, data) {\n    (true && !(typeof modelName === 'string') && Ember.assert(`You can no longer pass a modelClass as the first argument to store._buildInternalModel. Pass modelName instead.`, typeof modelName === 'string'));\n\n\n    var existingInternalModel = this._existingInternalModelForId(modelName, id);\n\n    (true && !(!existingInternalModel) && Ember.assert(`The id ${id} has already been used with another record for modelClass '${modelName}'.`, !existingInternalModel));\n\n    // lookupFactory should really return an object that creates\n    // instances with the injections applied\n\n    var internalModel = new InternalModel(modelName, id, this, data);\n\n    this._internalModelsFor(modelName).add(internalModel, id);\n\n    return internalModel;\n  },\n\n  _existingInternalModelForId(modelName, id) {\n    var internalModel = this._internalModelsFor(modelName).get(id);\n\n    if (internalModel && internalModel.hasScheduledDestroy()) {\n      // unloadRecord is async, if one attempts to unload + then sync create,\n      // we must ensure the unload is complete before starting the create\n      internalModel.destroySync();\n      internalModel = null;\n    }\n    return internalModel;\n  },\n\n  buildInternalModel(modelName, id, data) {\n    (true && !(false) && Ember.deprecate('buildInternalModel was documented as private and will be removed in the next version of Ember Data.', false, { id: 'ember-data.buildInternalModel', until: '2.17.0' }));\n\n    return this._buildInternalModel(modelName, id, data);\n  },\n\n  //Called by the state machine to notify the store that the record is ready to be interacted with\n  recordWasLoaded(record) {\n    this.recordArrayManager.recordWasLoaded(record);\n  },\n\n  // ...............\n  // . DESTRUCTION .\n  // ...............\n\n  /**\n    When a record is destroyed, this un-indexes it and\n    removes it from any record arrays so it can be GCed.\n     @method _removeFromIdMap\n    @private\n    @param {InternalModel} internalModel\n  */\n  _removeFromIdMap(internalModel) {\n    var recordMap = this._internalModelsFor(internalModel.modelName);\n    var id = internalModel.id;\n\n    recordMap.remove(internalModel, id);\n  },\n\n  // ......................\n  // . PER-TYPE ADAPTERS\n  // ......................\n\n  /**\n    Returns an instance of the adapter for a given type. For\n    example, `adapterFor('person')` will return an instance of\n    `App.PersonAdapter`.\n     If no `App.PersonAdapter` is found, this method will look\n    for an `App.ApplicationAdapter` (the default adapter for\n    your entire application).\n     If no `App.ApplicationAdapter` is found, it will return\n    the value of the `defaultAdapter`.\n     @method adapterFor\n    @public\n    @param {String} modelName\n    @return DS.Adapter\n  */\n  adapterFor(modelName) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's adapterFor method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store.adapterFor has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    var { _adapterCache } = this;\n    var adapter = _adapterCache[normalizedModelName];\n    if (adapter) {\n      return adapter;\n    }\n\n    var owner = getOwner(this);\n\n    adapter = owner.lookup(`adapter:${normalizedModelName}`);\n    if (adapter !== undefined) {\n      Ember.set(adapter, 'store', this);\n      _adapterCache[normalizedModelName] = adapter;\n      return adapter;\n    }\n\n    // no adapter found for the specific model, fallback and check for application adapter\n    adapter = _adapterCache.application || owner.lookup('adapter:application');\n    if (adapter !== undefined) {\n      Ember.set(adapter, 'store', this);\n      _adapterCache[normalizedModelName] = adapter;\n      _adapterCache.application = adapter;\n      return adapter;\n    }\n\n    // no model specific adapter or application adapter, check for an `adapter`\n    // property defined on the store\n    var adapterName = this.get('adapter');\n    adapter = _adapterCache[adapterName] || owner.lookup(`adapter:${adapterName}`);\n    if (adapter !== undefined) {\n      Ember.set(adapter, 'store', this);\n      _adapterCache[normalizedModelName] = adapter;\n      _adapterCache[adapterName] = adapter;\n      return adapter;\n    }\n\n    // final fallback, no model specific adapter, no application adapter, no\n    // `adapter` property on store: use json-api adapter\n    adapter = _adapterCache['-json-api'] || owner.lookup('adapter:-json-api');\n    Ember.set(adapter, 'store', this);\n    _adapterCache[normalizedModelName] = adapter;\n    _adapterCache['-json-api'] = adapter;\n    return adapter;\n  },\n\n  // ..............................\n  // . RECORD CHANGE NOTIFICATION .\n  // ..............................\n\n  /**\n    Returns an instance of the serializer for a given type. For\n    example, `serializerFor('person')` will return an instance of\n    `App.PersonSerializer`.\n     If no `App.PersonSerializer` is found, this method will look\n    for an `App.ApplicationSerializer` (the default serializer for\n    your entire application).\n     if no `App.ApplicationSerializer` is found, it will attempt\n    to get the `defaultSerializer` from the `PersonAdapter`\n    (`adapterFor('person')`).\n     If a serializer cannot be found on the adapter, it will fall back\n    to an instance of `DS.JSONSerializer`.\n     @method serializerFor\n    @public\n    @param {String} modelName the record to serialize\n    @return {DS.Serializer}\n  */\n  serializerFor(modelName) {\n    (true && !(Ember.isPresent(modelName)) && Ember.assert(`You need to pass a model name to the store's serializerFor method`, Ember.isPresent(modelName)));\n    (true && !(typeof modelName === 'string') && Ember.assert(`Passing classes to store.serializerFor has been removed. Please pass a dasherized string instead of ${modelName}`, typeof modelName === 'string'));\n\n    var normalizedModelName = normalizeModelName(modelName);\n\n    var { _serializerCache } = this;\n    var serializer = _serializerCache[normalizedModelName];\n    if (serializer) {\n      return serializer;\n    }\n\n    var owner = getOwner(this);\n\n    serializer = owner.lookup(`serializer:${normalizedModelName}`);\n    if (serializer !== undefined) {\n      Ember.set(serializer, 'store', this);\n      _serializerCache[normalizedModelName] = serializer;\n      return serializer;\n    }\n\n    // no serializer found for the specific model, fallback and check for application serializer\n    serializer = _serializerCache.application || owner.lookup('serializer:application');\n    if (serializer !== undefined) {\n      Ember.set(serializer, 'store', this);\n      _serializerCache[normalizedModelName] = serializer;\n      _serializerCache.application = serializer;\n      return serializer;\n    }\n\n    // no model specific serializer or application serializer, check for the `defaultSerializer`\n    // property defined on the adapter\n    var adapter = this.adapterFor(modelName);\n    var serializerName = Ember.get(adapter, 'defaultSerializer');\n    serializer = _serializerCache[serializerName] || owner.lookup(`serializer:${serializerName}`);\n    if (serializer !== undefined) {\n      Ember.set(serializer, 'store', this);\n      _serializerCache[normalizedModelName] = serializer;\n      _serializerCache[serializerName] = serializer;\n      return serializer;\n    }\n\n    // final fallback, no model specific serializer, no application serializer, no\n    // `serializer` property on store: use json-api serializer\n    serializer = _serializerCache['-default'] || owner.lookup('serializer:-default');\n    Ember.set(serializer, 'store', this);\n    _serializerCache[normalizedModelName] = serializer;\n    _serializerCache['-default'] = serializer;\n\n    return serializer;\n  },\n\n  lookupAdapter(name) {\n    (true && !(false) && Ember.deprecate(`Use of lookupAdapter is deprecated, use adapterFor instead.`, false, {\n      id: 'ds.store.lookupAdapter',\n      until: '3.0'\n    }));\n\n    return this.adapterFor(name);\n  },\n\n  lookupSerializer(name) {\n    (true && !(false) && Ember.deprecate(`Use of lookupSerializer is deprecated, use serializerFor instead.`, false, {\n      id: 'ds.store.lookupSerializer',\n      until: '3.0'\n    }));\n\n    return this.serializerFor(name);\n  },\n\n  willDestroy() {\n    this._super(...arguments);\n    this._pushedInternalModels = null;\n    this.recordArrayManager.destroy();\n\n    this._adapterCache = null;\n    this._serializerCache = null;\n\n    this.unloadAll();\n  },\n\n  _updateRelationshipState(relationship) {\n    if (this._updatedRelationships.push(relationship) !== 1) {\n      return;\n    }\n\n    this._backburner.join(() => {\n      this._backburner.schedule('syncRelationships', this, this._flushUpdatedRelationships);\n    });\n  },\n\n  _flushUpdatedRelationships() {\n    var updated = this._updatedRelationships;\n\n    for (var i = 0, l = updated.length; i < l; i++) {\n      updated[i].flushCanonical();\n    }\n\n    updated.length = 0;\n  },\n\n  _updateInternalModel(internalModel) {\n    if (this._updatedInternalModels.push(internalModel) !== 1) {\n      return;\n    }\n\n    Ember.run.schedule('actions', this, this._flushUpdatedInternalModels);\n  },\n\n  _flushUpdatedInternalModels() {\n    var updated = this._updatedInternalModels;\n\n    for (var i = 0, l = updated.length; i < l; i++) {\n      updated[i]._triggerDeferredTriggers();\n    }\n\n    updated.length = 0;\n  },\n\n  _pushResourceIdentifier(relationship, resourceIdentifier) {\n    if (Ember.isNone(resourceIdentifier)) {\n      return;\n    }\n\n    (true && !(!Array.isArray(resourceIdentifier)) && Ember.assert(`A ${relationship.internalModel.modelName} record was pushed into the store with the value of ${relationship.key} being ${Ember.inspect(resourceIdentifier)}, but ${relationship.key} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`, !Array.isArray(resourceIdentifier)));\n\n    //TODO:Better asserts\n\n    return this._internalModelForId(resourceIdentifier.type, resourceIdentifier.id);\n  },\n\n  _pushResourceIdentifiers(relationship, resourceIdentifiers) {\n    if (Ember.isNone(resourceIdentifiers)) {\n      return;\n    }\n\n    (true && !(Array.isArray(resourceIdentifiers)) && Ember.assert(`A ${relationship.internalModel.modelName} record was pushed into the store with the value of ${relationship.key} being '${Ember.inspect(resourceIdentifiers)}', but ${relationship.key} is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.`, Array.isArray(resourceIdentifiers)));\n\n\n    var _internalModels = new Array(resourceIdentifiers.length);\n    for (var i = 0; i < resourceIdentifiers.length; i++) {\n      _internalModels[i] = this._pushResourceIdentifier(relationship, resourceIdentifiers[i]);\n    }\n    return _internalModels;\n  }\n});\n\n// Delegation to the adapter and promise management\n\n\nfunction defaultSerializer(store) {\n  return store.serializerFor('application');\n}\n\nfunction _commit(adapter, store, operation, snapshot) {\n  var internalModel = snapshot._internalModel;\n  var modelName = snapshot.modelName;\n  var modelClass = store._modelFor(modelName);\n  (true && !(adapter) && Ember.assert(`You tried to update a record but you have no adapter (for ${modelName})`, adapter));\n  (true && !(typeof adapter[operation] === 'function') && Ember.assert(`You tried to update a record but your adapter (for ${modelName}) does not implement '${operation}'`, typeof adapter[operation] === 'function'));\n\n  var promise = adapter[operation](store, modelClass, snapshot);\n  var serializer = serializerForAdapter(store, adapter, modelName);\n  var label = `DS: Extract and notify about ${operation} completion of ${internalModel}`;\n\n  (true && !(promise !== undefined) && Ember.assert(`Your adapter's '${operation}' method must return a value, but it returned 'undefined'`, promise !== undefined));\n\n\n  promise = Promise.resolve(promise, label);\n  promise = _guard(promise, _bind(_objectIsAlive, store));\n  promise = _guard(promise, _bind(_objectIsAlive, internalModel));\n\n  return promise.then(adapterPayload => {\n    /*\n      Note to future spelunkers hoping to optimize.\n      We rely on this `run` to create a run loop if needed\n      that `store._push` and `store.didSaveRecord` will both share.\n       We use `join` because it is often the case that we\n      have an outer run loop available still from the first\n      call to `store._push`;\n     */\n    store._backburner.join(() => {\n      var payload = void 0,\n          data = void 0;\n      if (adapterPayload) {\n        payload = normalizeResponseHelper(serializer, store, modelClass, adapterPayload, snapshot.id, operation);\n        if (payload.included) {\n          store._push({ data: null, included: payload.included });\n        }\n        data = payload.data;\n      }\n      store.didSaveRecord(internalModel, { data });\n    });\n\n    return internalModel;\n  }, function (error) {\n    if (error instanceof InvalidError) {\n      var errors = serializer.extractErrors(store, modelClass, error, snapshot.id);\n\n      store.recordWasInvalid(internalModel, errors);\n    } else {\n      store.recordWasError(internalModel, error);\n    }\n\n    throw error;\n  }, label);\n}\n\nfunction isInverseRelationshipInitialized(store, internalModel, data, key, modelNameToInverseMap) {\n  var relationshipData = data.relationships[key].data;\n\n  if (!relationshipData) {\n    // can't check inverse for eg { comments: { links: { related: URL }}}\n    return false;\n  }\n\n  var inverseMap = modelNameToInverseMap[internalModel.modelName];\n  if (!inverseMap) {\n    inverseMap = modelNameToInverseMap[internalModel.modelName] = Ember.get(internalModel.type, 'inverseMap');\n  }\n  var inverseRelationshipMetadata = inverseMap[key];\n  if (inverseRelationshipMetadata === undefined) {\n    inverseRelationshipMetadata = internalModel.type.inverseFor(key, store);\n  }\n\n  if (!inverseRelationshipMetadata) {\n    return false;\n  }\n\n  var { name: inverseRelationshipName } = inverseRelationshipMetadata;\n\n  if (Array.isArray(relationshipData)) {\n    for (var i = 0; i < relationshipData.length; ++i) {\n      var inverseInternalModel = store._internalModelsFor(relationshipData[i].type).get(relationshipData[i].id);\n      if (inverseInternalModel && inverseInternalModel._relationships.has(inverseRelationshipName)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    var _inverseInternalModel = store._internalModelsFor(relationshipData.type).get(relationshipData.id);\n    return _inverseInternalModel && _inverseInternalModel._relationships.has(inverseRelationshipName);\n  }\n}\n\nfunction setupRelationships(store, internalModel, data, modelNameToInverseMap) {\n  Object.keys(data.relationships).forEach(relationshipName => {\n    var relationships = internalModel._relationships;\n    var relationshipRequiresNotification = relationships.has(relationshipName) || isInverseRelationshipInitialized(store, internalModel, data, relationshipName, modelNameToInverseMap);\n\n    if (relationshipRequiresNotification) {\n      var relationshipData = data.relationships[relationshipName];\n      relationships.get(relationshipName).push(relationshipData, false);\n    }\n\n    // in debug, assert payload validity eagerly\n    {\n      var relationshipMeta = Ember.get(internalModel.type, 'relationshipsByName').get(relationshipName);\n      var _relationshipData = data.relationships[relationshipName];\n      if (!_relationshipData || !relationshipMeta) {\n        return;\n      }\n\n      if (_relationshipData.links) {\n        var isAsync = relationshipMeta.options && relationshipMeta.options.async !== false;\n        (true && Ember.warn(`You pushed a record of type '${internalModel.type.modelName}' with a relationship '${relationshipName}' configured as 'async: false'. You've included a link but no primary data, this may be an error in your payload.`, isAsync || _relationshipData.data, {\n          id: 'ds.store.push-link-for-sync-relationship'\n        }));\n      } else if (_relationshipData.data) {\n        if (relationshipMeta.kind === 'belongsTo') {\n          (true && !(!Array.isArray(_relationshipData.data)) && Ember.assert(`A ${internalModel.type.modelName} record was pushed into the store with the value of ${relationshipName} being ${Ember.inspect(_relationshipData.data)}, but ${relationshipName} is a belongsTo relationship so the value must not be an array. You should probably check your data payload or serializer.`, !Array.isArray(_relationshipData.data)));\n        } else if (relationshipMeta.kind === 'hasMany') {\n          (true && !(Array.isArray(_relationshipData.data)) && Ember.assert(`A ${internalModel.type.modelName} record was pushed into the store with the value of ${relationshipName} being '${Ember.inspect(_relationshipData.data)}', but ${relationshipName} is a hasMany relationship so the value must be an array. You should probably check your data payload or serializer.`, Array.isArray(_relationshipData.data)));\n        }\n      }\n    }\n  });\n}\n\nvar Store$1 = Store;\n\n/**\n  @module ember-data\n*/\n\n/**\n  All Ember Data classes, methods and functions are defined inside of this namespace.\n\n  @class DS\n  @static\n*/\n\n/**\n  @property VERSION\n  @type String\n  @static\n*/\nvar DS = Ember.Namespace.create({\n  VERSION: VERSION,\n  name: \"DS\"\n});\n\nif (Ember.libraries) {\n  Ember.libraries.registerCoreLibrary('Ember Data', DS.VERSION);\n}\n\n/**\n  `DS.belongsTo` is used to define One-To-One and One-To-Many\n  relationships on a [DS.Model](/api/data/classes/DS.Model.html).\n\n\n  `DS.belongsTo` takes an optional hash as a second parameter, currently\n  supported options are:\n\n  - `async`: A boolean value used to explicitly declare this to be an async relationship.\n  - `inverse`: A string used to identify the inverse property on a\n    related model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)\n\n  #### One-To-One\n  To declare a one-to-one relationship between two models, use\n  `DS.belongsTo`:\n\n  ```app/models/user.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    profile: DS.belongsTo('profile')\n  });\n  ```\n\n  ```app/models/profile.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    user: DS.belongsTo('user')\n  });\n  ```\n\n  #### One-To-Many\n  To declare a one-to-many relationship between two models, use\n  `DS.belongsTo` in combination with `DS.hasMany`, like this:\n\n  ```app/models/post.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    comments: DS.hasMany('comment')\n  });\n  ```\n\n  ```app/models/comment.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    post: DS.belongsTo('post')\n  });\n  ```\n\n  You can avoid passing a string as the first parameter. In that case Ember Data\n  will infer the type from the key name.\n\n  ```app/models/comment.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    post: DS.belongsTo()\n  });\n  ```\n\n  will lookup for a Post type.\n\n  @namespace\n  @method belongsTo\n  @for DS\n  @param {String} modelName (optional) type of the relationship\n  @param {Object} options (optional) a hash of options\n  @return {Ember.computed} relationship\n*/\nfunction belongsTo(modelName, options) {\n  var opts = void 0,\n      userEnteredModelName = void 0;\n  if (typeof modelName === 'object') {\n    opts = modelName;\n    userEnteredModelName = undefined;\n  } else {\n    opts = options;\n    userEnteredModelName = modelName;\n  }\n\n  if (typeof userEnteredModelName === 'string') {\n    userEnteredModelName = normalizeModelName(userEnteredModelName);\n  }\n\n  (true && !(typeof userEnteredModelName === 'string' || typeof userEnteredModelName === 'undefined') && Ember.assert(\"The first argument to DS.belongsTo must be a string representing a model type key, not an instance of \" + Ember.inspect(userEnteredModelName) + \". E.g., to define a relation to the Person model, use DS.belongsTo('person')\", typeof userEnteredModelName === 'string' || typeof userEnteredModelName === 'undefined'));\n\n\n  opts = opts || {};\n\n  var meta = {\n    type: userEnteredModelName,\n    isRelationship: true,\n    options: opts,\n    kind: 'belongsTo',\n    name: 'Belongs To',\n    key: null\n  };\n\n  return Ember.computed({\n    get(key) {\n      if (opts.hasOwnProperty('serialize')) {\n        (true && Ember.warn(`You provided a serialize option on the \"${key}\" property in the \"${this._internalModel.modelName}\" class, this belongs in the serializer. See DS.Serializer and it's implementations https://emberjs.com/api/data/classes/DS.Serializer.html`, false, {\n          id: 'ds.model.serialize-option-in-belongs-to'\n        }));\n      }\n\n      if (opts.hasOwnProperty('embedded')) {\n        (true && Ember.warn(`You provided an embedded option on the \"${key}\" property in the \"${this._internalModel.modelName}\" class, this belongs in the serializer. See DS.EmbeddedRecordsMixin https://emberjs.com/api/data/classes/DS.EmbeddedRecordsMixin.html`, false, {\n          id: 'ds.model.embedded-option-in-belongs-to'\n        }));\n      }\n\n      return this._internalModel._relationships.get(key).getRecord();\n    },\n    set(key, value) {\n      if (value === undefined) {\n        value = null;\n      }\n      if (value && value.then) {\n        this._internalModel._relationships.get(key).setRecordPromise(value);\n      } else if (value) {\n        this._internalModel._relationships.get(key).setInternalModel(value._internalModel);\n      } else {\n        this._internalModel._relationships.get(key).setInternalModel(value);\n      }\n\n      return this._internalModel._relationships.get(key).getRecord();\n    }\n  }).meta(meta);\n}\n\n/*\n  We're using this to detect arrays and \"array-like\" objects.\n\n  This is a copy of the `isArray` method found in `ember-runtime/utils` as we're\n  currently unable to import non-exposed modules.\n\n  This method was previously exposed as `Ember.isArray` but since\n  https://github.com/emberjs/ember.js/pull/11463 `Ember.isArray` is an alias of\n  `Array.isArray` hence removing the \"array-like\" part.\n */\nfunction isArrayLike(obj) {\n  if (!obj || obj.setInterval) {\n    return false;\n  }\n  if (Array.isArray(obj)) {\n    return true;\n  }\n  if (Ember.Array.detect(obj)) {\n    return true;\n  }\n\n  var type = Ember.typeOf(obj);\n  if ('array' === type) {\n    return true;\n  }\n  if (obj.length !== undefined && 'object' === type) {\n    return true;\n  }\n  return false;\n}\n\n/**\n  `DS.hasMany` is used to define One-To-Many and Many-To-Many\n  relationships on a [DS.Model](/api/data/classes/DS.Model.html).\n\n  `DS.hasMany` takes an optional hash as a second parameter, currently\n  supported options are:\n\n  - `async`: A boolean value used to explicitly declare this to be an async relationship.\n  - `inverse`: A string used to identify the inverse property on a related model.\n\n  #### One-To-Many\n  To declare a one-to-many relationship between two models, use\n  `DS.belongsTo` in combination with `DS.hasMany`, like this:\n\n  ```app/models/post.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    comments: DS.hasMany('comment')\n  });\n  ```\n\n  ```app/models/comment.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    post: DS.belongsTo('post')\n  });\n  ```\n\n  #### Many-To-Many\n  To declare a many-to-many relationship between two models, use\n  `DS.hasMany`:\n\n  ```app/models/post.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    tags: DS.hasMany('tag')\n  });\n  ```\n\n  ```app/models/tag.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    posts: DS.hasMany('post')\n  });\n  ```\n\n  You can avoid passing a string as the first parameter. In that case Ember Data\n  will infer the type from the singularized key name.\n\n  ```app/models/post.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    tags: DS.hasMany()\n  });\n  ```\n\n  will lookup for a Tag type.\n\n  #### Explicit Inverses\n\n  Ember Data will do its best to discover which relationships map to\n  one another. In the one-to-many code above, for example, Ember Data\n  can figure out that changing the `comments` relationship should update\n  the `post` relationship on the inverse because post is the only\n  relationship to that model.\n\n  However, sometimes you may have multiple `belongsTo`/`hasMany` for the\n  same type. You can specify which property on the related model is\n  the inverse using `DS.hasMany`'s `inverse` option:\n\n  ```app/models/comment.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    onePost: DS.belongsTo('post'),\n    twoPost: DS.belongsTo('post'),\n    redPost: DS.belongsTo('post'),\n    bluePost: DS.belongsTo('post')\n  });\n  ```\n\n  ```app/models/post.js\n  import DS from 'ember-data';\n\n  export default DS.Model.extend({\n    comments: DS.hasMany('comment', {\n      inverse: 'redPost'\n    })\n  });\n  ```\n\n  You can also specify an inverse on a `belongsTo`, which works how\n  you'd expect.\n\n  @namespace\n  @method hasMany\n  @for DS\n  @param {String} type (optional) type of the relationship\n  @param {Object} options (optional) a hash of options\n  @return {Ember.computed} relationship\n*/\nfunction hasMany(type, options) {\n  if (typeof type === 'object') {\n    options = type;\n    type = undefined;\n  }\n\n  (true && !(typeof type === 'string' || typeof type === 'undefined') && Ember.assert(`The first argument to DS.hasMany must be a string representing a model type key, not an instance of ${Ember.inspect(type)}. E.g., to define a relation to the Comment model, use DS.hasMany('comment')`, typeof type === 'string' || typeof type === 'undefined'));\n\n\n  options = options || {};\n\n  if (typeof type === 'string') {\n    type = normalizeModelName(type);\n  }\n\n  // Metadata about relationships is stored on the meta of\n  // the relationship. This is used for introspection and\n  // serialization. Note that `key` is populated lazily\n  // the first time the CP is called.\n  var meta = {\n    type,\n    options,\n    isRelationship: true,\n    kind: 'hasMany',\n    name: 'Has Many',\n    key: null\n  };\n\n  return Ember.computed({\n    get(key) {\n      return this._internalModel._relationships.get(key).getRecords();\n    },\n    set(key, records) {\n      (true && !(isArrayLike(records)) && Ember.assert(`You must pass an array of records to set a hasMany relationship`, isArrayLike(records)));\n      (true && !(function () {\n        return Ember.A(records).every(record => record.hasOwnProperty('_internalModel') === true);\n      }()) && Ember.assert(`All elements of a hasMany relationship must be instances of DS.Model, you passed ${Ember.inspect(records)}`, function () {\n        return Ember.A(records).every(record => record.hasOwnProperty('_internalModel') === true);\n      }()));\n\n\n      var relationship = this._internalModel._relationships.get(key);\n      relationship.clear();\n      relationship.addInternalModels(records.map(record => Ember.get(record, '_internalModel')));\n      return relationship.getRecords();\n    }\n  }).meta(meta);\n}\n\n/**\n\n  WARNING: This interface is likely to change in order to accomodate https://github.com/emberjs/rfcs/pull/4\n\n  ## Using BuildURLMixin\n\n  To use url building, include the mixin when extending an adapter, and call `buildURL` where needed.\n  The default behaviour is designed for RESTAdapter.\n\n  ### Example\n\n  ```javascript\n  export default DS.Adapter.extend(BuildURLMixin, {\n    findRecord: function(store, type, id, snapshot) {\n      var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n      return this.ajax(url, 'GET');\n    }\n  });\n  ```\n\n  ### Attributes\n\n  The `host` and `namespace` attributes will be used if defined, and are optional.\n\n  @class BuildURLMixin\n  @namespace DS\n*/\nvar buildUrlMixin = Ember.Mixin.create({\n  /**\n    Builds a URL for a given type and optional ID.\n     By default, it pluralizes the type's name (for example, 'post'\n    becomes 'posts' and 'person' becomes 'people'). To override the\n    pluralization see [pathForType](#method_pathForType).\n     If an ID is specified, it adds the ID to the path generated\n    for the type, separated by a `/`.\n     When called by RESTAdapter.findMany() the `id` and `snapshot` parameters\n    will be arrays of ids and snapshots.\n     @method buildURL\n    @param {String} modelName\n    @param {(String|Array|Object)} id single id or array of ids or query\n    @param {(DS.Snapshot|Array)} snapshot single snapshot or array of snapshots\n    @param {String} requestType\n    @param {Object} query object of query parameters to send for query requests.\n    @return {String} url\n  */\n  buildURL(modelName, id, snapshot, requestType, query) {\n    switch (requestType) {\n      case 'findRecord':\n        return this.urlForFindRecord(id, modelName, snapshot);\n      case 'findAll':\n        return this.urlForFindAll(modelName, snapshot);\n      case 'query':\n        return this.urlForQuery(query, modelName);\n      case 'queryRecord':\n        return this.urlForQueryRecord(query, modelName);\n      case 'findMany':\n        return this.urlForFindMany(id, modelName, snapshot);\n      case 'findHasMany':\n        return this.urlForFindHasMany(id, modelName, snapshot);\n      case 'findBelongsTo':\n        return this.urlForFindBelongsTo(id, modelName, snapshot);\n      case 'createRecord':\n        return this.urlForCreateRecord(modelName, snapshot);\n      case 'updateRecord':\n        return this.urlForUpdateRecord(id, modelName, snapshot);\n      case 'deleteRecord':\n        return this.urlForDeleteRecord(id, modelName, snapshot);\n      default:\n        return this._buildURL(modelName, id);\n    }\n  },\n\n  /**\n    @method _buildURL\n    @private\n    @param {String} modelName\n    @param {String} id\n    @return {String} url\n  */\n  _buildURL(modelName, id) {\n    var path = void 0;\n    var url = [];\n    var host = Ember.get(this, 'host');\n    var prefix = this.urlPrefix();\n\n    if (modelName) {\n      path = this.pathForType(modelName);\n      if (path) {\n        url.push(path);\n      }\n    }\n\n    if (id) {\n      url.push(encodeURIComponent(id));\n    }\n    if (prefix) {\n      url.unshift(prefix);\n    }\n\n    url = url.join('/');\n    if (!host && url && url.charAt(0) !== '/') {\n      url = '/' + url;\n    }\n\n    return url;\n  },\n\n  /**\n   Builds a URL for a `store.findRecord(type, id)` call.\n    Example:\n    ```app/adapters/user.js\n   import DS from 'ember-data';\n    export default DS.JSONAPIAdapter.extend({\n     urlForFindRecord(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName, id, snapshot);\n       return `${baseUrl}/users/${snapshot.adapterOptions.user_id}/playlists/${id}`;\n     }\n   });\n   ```\n    @method urlForFindRecord\n   @param {String} id\n   @param {String} modelName\n   @param {DS.Snapshot} snapshot\n   @return {String} url\n    */\n  urlForFindRecord(id, modelName, snapshot) {\n    return this._buildURL(modelName, id);\n  },\n\n  /**\n   Builds a URL for a `store.findAll(type)` call.\n    Example:\n    ```app/adapters/comment.js\n   import DS from 'ember-data';\n    export default DS.JSONAPIAdapter.extend({\n     urlForFindAll(modelName, snapshot) {\n       return 'data/comments.json';\n     }\n   });\n   ```\n    @method urlForFindAll\n   @param {String} modelName\n   @param {DS.SnapshotRecordArray} snapshot\n   @return {String} url\n   */\n  urlForFindAll(modelName, snapshot) {\n    return this._buildURL(modelName);\n  },\n\n  /**\n   Builds a URL for a `store.query(type, query)` call.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.RESTAdapter.extend({\n     host: 'https://api.github.com',\n     urlForQuery (query, modelName) {\n       switch(modelName) {\n         case 'repo':\n           return `https://api.github.com/orgs/${query.orgId}/repos`;\n         default:\n           return this._super(...arguments);\n       }\n     }\n   });\n   ```\n    @method urlForQuery\n   @param {Object} query\n   @param {String} modelName\n   @return {String} url\n   */\n  urlForQuery(query, modelName) {\n    return this._buildURL(modelName);\n  },\n\n  /**\n   Builds a URL for a `store.queryRecord(type, query)` call.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.RESTAdapter.extend({\n     urlForQueryRecord({ slug }, modelName) {\n       let baseUrl = this.buildURL();\n       return `${baseUrl}/${encodeURIComponent(slug)}`;\n     }\n   });\n   ```\n    @method urlForQueryRecord\n   @param {Object} query\n   @param {String} modelName\n   @return {String} url\n   */\n  urlForQueryRecord(query, modelName) {\n    return this._buildURL(modelName);\n  },\n\n  /**\n   Builds a URL for coalesceing multiple `store.findRecord(type, id)`\n   records into 1 request when the adapter's `coalesceFindRequests`\n   property is true.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.RESTAdapter.extend({\n     urlForFindMany(ids, modelName) {\n       let baseUrl = this.buildURL();\n       return `${baseUrl}/coalesce`;\n     }\n   });\n   ```\n    @method urlForFindMany\n   @param {Array} ids\n   @param {String} modelName\n   @param {Array} snapshots\n   @return {String} url\n   */\n  urlForFindMany(ids, modelName, snapshots) {\n    return this._buildURL(modelName);\n  },\n\n  /**\n   Builds a URL for fetching a async hasMany relationship when a url\n   is not provided by the server.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.JSONAPIAdapter.extend({\n     urlForFindHasMany(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(id, modelName);\n       return `${baseUrl}/relationships`;\n     }\n   });\n   ```\n    @method urlForFindHasMany\n   @param {String} id\n   @param {String} modelName\n   @param {DS.Snapshot} snapshot\n   @return {String} url\n   */\n  urlForFindHasMany(id, modelName, snapshot) {\n    return this._buildURL(modelName, id);\n  },\n\n  /**\n   Builds a URL for fetching a async belongsTo relationship when a url\n   is not provided by the server.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.JSONAPIAdapter.extend({\n     urlForFindBelongsTo(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(id, modelName);\n       return `${baseUrl}/relationships`;\n     }\n   });\n   ```\n    @method urlForFindBelongsTo\n   @param {String} id\n   @param {String} modelName\n   @param {DS.Snapshot} snapshot\n   @return {String} url\n   */\n  urlForFindBelongsTo(id, modelName, snapshot) {\n    return this._buildURL(modelName, id);\n  },\n\n  /**\n   Builds a URL for a `record.save()` call when the record was created\n   locally using `store.createRecord()`.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.RESTAdapter.extend({\n     urlForCreateRecord(modelName, snapshot) {\n       return this._super(...arguments) + '/new';\n     }\n   });\n   ```\n    @method urlForCreateRecord\n   @param {String} modelName\n   @param {DS.Snapshot} snapshot\n   @return {String} url\n   */\n  urlForCreateRecord(modelName, snapshot) {\n    return this._buildURL(modelName);\n  },\n\n  /**\n   Builds a URL for a `record.save()` call when the record has been update locally.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.RESTAdapter.extend({\n     urlForUpdateRecord(id, modelName, snapshot) {\n       return `/${id}/feed?access_token=${snapshot.adapterOptions.token}`;\n     }\n   });\n   ```\n    @method urlForUpdateRecord\n   @param {String} id\n   @param {String} modelName\n   @param {DS.Snapshot} snapshot\n   @return {String} url\n   */\n  urlForUpdateRecord(id, modelName, snapshot) {\n    return this._buildURL(modelName, id);\n  },\n\n  /**\n   Builds a URL for a `record.save()` call when the record has been deleted locally.\n    Example:\n    ```app/adapters/application.js\n   import DS from 'ember-data';\n    export default DS.RESTAdapter.extend({\n     urlForDeleteRecord(id, modelName, snapshot) {\n       return this._super(...arguments) + '/destroy';\n     }\n   });\n   ```\n    @method urlForDeleteRecord\n   @param {String} id\n   @param {String} modelName\n   @param {DS.Snapshot} snapshot\n   @return {String} url\n   */\n  urlForDeleteRecord(id, modelName, snapshot) {\n    return this._buildURL(modelName, id);\n  },\n\n  /**\n    @method urlPrefix\n    @private\n    @param {String} path\n    @param {String} parentURL\n    @return {String} urlPrefix\n  */\n  urlPrefix(path, parentURL) {\n    var host = Ember.get(this, 'host');\n    var namespace = Ember.get(this, 'namespace');\n\n    if (!host || host === '/') {\n      host = '';\n    }\n\n    if (path) {\n      // Protocol relative url\n      if (/^\\/\\//.test(path) || /http(s)?:\\/\\//.test(path)) {\n        // Do nothing, the full host is already included.\n        return path;\n\n        // Absolute path\n      } else if (path.charAt(0) === '/') {\n        return `${host}${path}`;\n        // Relative path\n      } else {\n        return `${parentURL}/${path}`;\n      }\n    }\n\n    // No path provided\n    var url = [];\n    if (host) {\n      url.push(host);\n    }\n    if (namespace) {\n      url.push(namespace);\n    }\n    return url.join('/');\n  },\n\n  /**\n    Determines the pathname for a given type.\n     By default, it pluralizes the type's name (for example,\n    'post' becomes 'posts' and 'person' becomes 'people').\n     ### Pathname customization\n     For example if you have an object LineItem with an\n    endpoint of \"/line_items/\".\n     ```app/adapters/application.js\n    import DS from 'ember-data';\n    import { decamelize } from '@ember/string';\n    import { pluralize } from 'ember-inflector';\n     export default DS.RESTAdapter.extend({\n      pathForType: function(modelName) {\n        var decamelized = decamelize(modelName);\n        return pluralize(decamelized);\n      }\n    });\n    ```\n     @method pathForType\n    @param {String} modelName\n    @return {String} path\n  **/\n  pathForType(modelName) {\n    var camelized = Ember.String.camelize(modelName);\n    return emberInflector.pluralize(camelized);\n  }\n});\n\nvar CLRF = '\\u000d\\u000a';\n\nfunction parseResponseHeaders(headersString) {\n  var headers = Object.create(null);\n\n  if (!headersString) {\n    return headers;\n  }\n\n  var headerPairs = headersString.split(CLRF);\n  for (var i = 0; i < headerPairs.length; i++) {\n    var header = headerPairs[i];\n    var j = 0;\n    var foundSep = false;\n\n    for (; j < header.length; j++) {\n      if (header.charCodeAt(j) === 58 /* ':' */) {\n          foundSep = true;\n          break;\n        }\n    }\n\n    if (foundSep === false) {\n      continue;\n    }\n\n    var field = header.substring(0, j).trim();\n    var value = header.substring(j + 1, header.length).trim();\n\n    if (value) {\n      headers[field] = value;\n    }\n  }\n\n  return headers;\n}\n\n/*\n  Extend `Ember.DataAdapter` with ED specific code.\n\n  @class DebugAdapter\n  @namespace DS\n  @extends Ember.DataAdapter\n  @private\n*/\n/**\n  @module ember-data\n*/\nvar debugAdapter = Ember.DataAdapter.extend({\n  getFilters() {\n    return [{ name: 'isNew', desc: 'New' }, { name: 'isModified', desc: 'Modified' }, { name: 'isClean', desc: 'Clean' }];\n  },\n\n  detect(typeClass) {\n    return typeClass !== Model && Model.detect(typeClass);\n  },\n\n  columnsForType(typeClass) {\n    var columns = [{\n      name: 'id',\n      desc: 'Id'\n    }];\n    var count = 0;\n    var self = this;\n    Ember.get(typeClass, 'attributes').forEach((meta, name) => {\n      if (count++ > self.attributeLimit) {\n        return false;\n      }\n      var desc = Ember.String.capitalize(Ember.String.underscore(name).replace('_', ' '));\n      columns.push({ name: name, desc: desc });\n    });\n    return columns;\n  },\n\n  getRecords(modelClass, modelName) {\n    if (arguments.length < 2) {\n      // Legacy Ember.js < 1.13 support\n      var containerKey = modelClass._debugContainerKey;\n      if (containerKey) {\n        var match = containerKey.match(/model:(.*)/);\n        if (match !== null) {\n          modelName = match[1];\n        }\n      }\n    }\n    (true && !(!!modelName) && Ember.assert(\"Cannot find model name. Please upgrade to Ember.js >= 1.13 for Ember Inspector support\", !!modelName));\n\n    return this.get('store').peekAll(modelName);\n  },\n\n  getRecordColumnValues(record) {\n    var count = 0;\n    var columnValues = { id: Ember.get(record, 'id') };\n\n    record.eachAttribute(key => {\n      if (count++ > this.attributeLimit) {\n        return false;\n      }\n      columnValues[key] = Ember.get(record, key);\n    });\n    return columnValues;\n  },\n\n  getRecordKeywords(record) {\n    var keywords = [];\n    var keys = Ember.A(['id']);\n    record.eachAttribute(key => keys.push(key));\n    keys.forEach(key => keywords.push(Ember.get(record, key)));\n    return keywords;\n  },\n\n  getRecordFilterValues(record) {\n    return {\n      isNew: record.get('isNew'),\n      isModified: record.get('hasDirtyAttributes') && !record.get('isNew'),\n      isClean: !record.get('hasDirtyAttributes')\n    };\n  },\n\n  getRecordColor(record) {\n    var color = 'black';\n    if (record.get('isNew')) {\n      color = 'green';\n    } else if (record.get('hasDirtyAttributes')) {\n      color = 'blue';\n    }\n    return color;\n  },\n\n  observeRecord(record, recordUpdated) {\n    var releaseMethods = Ember.A();\n    var keysToObserve = Ember.A(['id', 'isNew', 'hasDirtyAttributes']);\n\n    record.eachAttribute(key => keysToObserve.push(key));\n    var adapter = this;\n\n    keysToObserve.forEach(function (key) {\n      var handler = function () {\n        recordUpdated(adapter.wrapRecord(record));\n      };\n      Ember.addObserver(record, key, handler);\n      releaseMethods.push(function () {\n        Ember.removeObserver(record, key, handler);\n      });\n    });\n\n    var release = function () {\n      releaseMethods.forEach(fn => fn());\n    };\n\n    return release;\n  }\n});\n\n// public\n\nexports.Model = Model;\nexports.Errors = Errors;\nexports.Store = Store$1;\nexports.DS = DS;\nexports.belongsTo = belongsTo;\nexports.hasMany = hasMany;\nexports.BuildURLMixin = buildUrlMixin;\nexports.Snapshot = Snapshot;\nexports.AdapterError = AdapterError;\nexports.InvalidError = InvalidError;\nexports.UnauthorizedError = UnauthorizedError;\nexports.ForbiddenError = ForbiddenError;\nexports.NotFoundError = NotFoundError;\nexports.ConflictError = ConflictError;\nexports.ServerError = ServerError;\nexports.TimeoutError = TimeoutError;\nexports.AbortError = AbortError;\nexports.errorsHashToArray = errorsHashToArray;\nexports.errorsArrayToHash = errorsArrayToHash;\nexports.normalizeModelName = normalizeModelName;\nexports.getOwner = getOwner;\nexports.modelHasAttributeOrRelationshipNamedType = modelHasAttributeOrRelationshipNamedType;\nexports.coerceId = coerceId;\nexports.parseResponseHeaders = parseResponseHeaders;\nexports.isEnabled = isEnabled;\nexports.RootState = RootState$1;\nexports.InternalModel = InternalModel;\nexports.PromiseArray = PromiseArray;\nexports.PromiseObject = PromiseObject;\nexports.PromiseManyArray = PromiseManyArray;\nexports.RecordArray = RecordArray;\nexports.FilteredRecordArray = FilteredRecordArray;\nexports.AdapterPopulatedRecordArray = AdapterPopulatedRecordArray;\nexports.ManyArray = ManyArray;\nexports.RecordArrayManager = RecordArrayManager;\nexports.Relationship = Relationship;\nexports.DebugAdapter = debugAdapter;\nexports.diffArray = diffArray;\nexports.RelationshipPayloadsManager = RelationshipPayloadsManager;\nexports.RelationshipPayloads = RelationshipPayloads;\nexports.SnapshotRecordArray = SnapshotRecordArray;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n});\n","define('ember-data/adapter', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Object.extend({\n\n    /**\n      If you would like your adapter to use a custom serializer you can\n      set the `defaultSerializer` property to be the name of the custom\n      serializer.\n       Note the `defaultSerializer` serializer has a lower priority than\n      a model specific serializer (i.e. `PostSerializer`) or the\n      `application` serializer.\n       ```app/adapters/django.js\n      import DS from 'ember-data';\n       export default DS.Adapter.extend({\n        defaultSerializer: 'django'\n      });\n      ```\n       @property defaultSerializer\n      @type {String}\n    */\n    defaultSerializer: '-default',\n\n    /**\n      The `findRecord()` method is invoked when the store is asked for a record that\n      has not previously been loaded. In response to `findRecord()` being called, you\n      should query your persistence layer for a record with the given ID. The `findRecord`\n      method should return a promise that will resolve to a JavaScript object that will be\n      normalized by the serializer.\n       Here is an example `findRecord` implementation:\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend({\n        findRecord(store, type, id, snapshot) {\n          return new RSVP.Promise(function(resolve, reject) {\n            $.getJSON(`/${type.modelName}/${id}`).then(function(data) {\n              resolve(data);\n            }, function(jqXHR) {\n              reject(jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method findRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {String} id\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    findRecord: null,\n\n    /**\n      The `findAll()` method is used to retrieve all records for a given type.\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend({\n        findAll(store, type, sinceToken) {\n          let query = { since: sinceToken };\n           return new RSVP.Promise(function(resolve, reject) {\n            $.getJSON(`/${type.modelName}`, query).then(function(data) {\n              resolve(data);\n            }, function(jqXHR) {\n              reject(jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method findAll\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {String} sinceToken\n      @param {DS.SnapshotRecordArray} snapshotRecordArray\n      @return {Promise} promise\n    */\n    findAll: null,\n\n    /**\n      This method is called when you call `query` on the store.\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend({\n        query(store, type, query) {\n          return new RSVP.Promise(function(resolve, reject) {\n            $.getJSON(`/${type.modelName}`, query).then(function(data) {\n              resolve(data);\n            }, function(jqXHR) {\n              reject(jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method query\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {Object} query\n      @param {DS.AdapterPopulatedRecordArray} recordArray\n      @return {Promise} promise\n    */\n    query: null,\n\n    /**\n      The `queryRecord()` method is invoked when the store is asked for a single\n      record through a query object.\n       In response to `queryRecord()` being called, you should always fetch fresh\n      data. Once found, you can asynchronously call the store's `push()` method\n      to push the record into the store.\n       Here is an example `queryRecord` implementation:\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend(DS.BuildURLMixin, {\n        queryRecord(store, type, query) {\n          return new RSVP.Promise(function(resolve, reject) {\n            $.getJSON(`/${type.modelName}`, query).then(function(data) {\n              resolve(data);\n            }, function(jqXHR) {\n              reject(jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method queryRecord\n      @param {DS.Store} store\n      @param {subclass of DS.Model} type\n      @param {Object} query\n      @return {Promise} promise\n    */\n    queryRecord: null,\n\n    /**\n      If the globally unique IDs for your records should be generated on the client,\n      implement the `generateIdForRecord()` method. This method will be invoked\n      each time you create a new record, and the value returned from it will be\n      assigned to the record's `primaryKey`.\n       Most traditional REST-like HTTP APIs will not use this method. Instead, the ID\n      of the record will be set by the server, and your adapter will update the store\n      with the new ID when it calls `didCreateRecord()`. Only implement this method if\n      you intend to generate record IDs on the client-side.\n       The `generateIdForRecord()` method will be invoked with the requesting store as\n      the first parameter and the newly created record as the second parameter:\n       ```javascript\n      import DS from 'ember-data';\n      import { v4 } from 'uuid';\n       export default DS.Adapter.extend({\n        generateIdForRecord(store, inputProperties) {\n          return v4();\n        }\n      });\n      ```\n       @method generateIdForRecord\n      @param {DS.Store} store\n      @param {DS.Model} type   the DS.Model class of the record\n      @param {Object} inputProperties a hash of properties to set on the\n        newly created record.\n      @return {(String|Number)} id\n    */\n    generateIdForRecord: null,\n\n    /**\n      Proxies to the serializer's `serialize` method.\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n       export default DS.Adapter.extend({\n        createRecord(store, type, snapshot) {\n          let data = this.serialize(snapshot, { includeId: true });\n          let url = `/${type.modelName}`;\n           // ...\n        }\n      });\n      ```\n       @method serialize\n      @param {DS.Snapshot} snapshot\n      @param {Object}   options\n      @return {Object} serialized snapshot\n    */\n    serialize(snapshot, options) {\n      return snapshot.serialize(options);\n    },\n\n    /**\n      Implement this method in a subclass to handle the creation of\n      new records.\n       Serializes the record and sends it to the server.\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import { run } from '@ember/runloop';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend({\n        createRecord(store, type, snapshot) {\n          let data = this.serialize(snapshot, { includeId: true });\n           return new RSVP.Promise(function(resolve, reject) {\n            $.ajax({\n              type: 'POST',\n              url: `/${type.modelName}`,\n              dataType: 'json',\n              data: data\n            }).then(function(data) {\n              run(null, resolve, data);\n            }, function(jqXHR) {\n              jqXHR.then = null; // tame jQuery's ill mannered promises\n              run(null, reject, jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method createRecord\n      @param {DS.Store} store\n      @param {DS.Model} type   the DS.Model class of the record\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    createRecord: null,\n\n    /**\n      Implement this method in a subclass to handle the updating of\n      a record.\n       Serializes the record update and sends it to the server.\n       The updateRecord method is expected to return a promise that will\n      resolve with the serialized record. This allows the backend to\n      inform the Ember Data store the current state of this record after\n      the update. If it is not possible to return a serialized record\n      the updateRecord promise can also resolve with `undefined` and the\n      Ember Data store will assume all of the updates were successfully\n      applied on the backend.\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import { run } from '@ember/runloop';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend({\n        updateRecord(store, type, snapshot) {\n          let data = this.serialize(snapshot, { includeId: true });\n          let id = snapshot.id;\n           return new RSVP.Promise(function(resolve, reject) {\n            $.ajax({\n              type: 'PUT',\n              url: `/${type.modelName}/${id}`,\n              dataType: 'json',\n              data: data\n            }).then(function(data) {\n              run(null, resolve, data);\n            }, function(jqXHR) {\n              jqXHR.then = null; // tame jQuery's ill mannered promises\n              run(null, reject, jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method updateRecord\n      @param {DS.Store} store\n      @param {DS.Model} type   the DS.Model class of the record\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    updateRecord: null,\n\n    /**\n      Implement this method in a subclass to handle the deletion of\n      a record.\n       Sends a delete request for the record to the server.\n       Example\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import { run } from '@ember/runloop';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend({\n        deleteRecord(store, type, snapshot) {\n          let data = this.serialize(snapshot, { includeId: true });\n          let id = snapshot.id;\n           return new RSVP.Promise(function(resolve, reject) {\n            $.ajax({\n              type: 'DELETE',\n              url: `/${type.modelName}/${id}`,\n              dataType: 'json',\n              data: data\n            }).then(function(data) {\n              run(null, resolve, data);\n            }, function(jqXHR) {\n              jqXHR.then = null; // tame jQuery's ill mannered promises\n              run(null, reject, jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method deleteRecord\n      @param {DS.Store} store\n      @param {DS.Model} type   the DS.Model class of the record\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    deleteRecord: null,\n\n    /**\n      By default the store will try to coalesce all `fetchRecord` calls within the same runloop\n      into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\n      You can opt out of this behaviour by either not implementing the findMany hook or by setting\n      coalesceFindRequests to false.\n       @property coalesceFindRequests\n      @type {boolean}\n    */\n    coalesceFindRequests: true,\n\n    /**\n      The store will call `findMany` instead of multiple `findRecord`\n      requests to find multiple records at once if coalesceFindRequests\n      is true.\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import { run } from '@ember/runloop';\n      import RSVP from 'RSVP';\n      import $ from 'jquery';\n       export default DS.Adapter.extend({\n        findMany(store, type, ids, snapshots) {\n          return new RSVP.Promise(function(resolve, reject) {\n            $.ajax({\n              type: 'GET',\n              url: `/${type.modelName}/`,\n              dataType: 'json',\n              data: { filter: { id: ids.join(',') } }\n            }).then(function(data) {\n              run(null, resolve, data);\n            }, function(jqXHR) {\n              jqXHR.then = null; // tame jQuery's ill mannered promises\n              run(null, reject, jqXHR);\n            });\n          });\n        }\n      });\n      ```\n       @method findMany\n      @param {DS.Store} store\n      @param {DS.Model} type   the DS.Model class of the records\n      @param {Array}    ids\n      @param {Array} snapshots\n      @return {Promise} promise\n    */\n    findMany: null,\n\n    /**\n      Organize records into groups, each of which is to be passed to separate\n      calls to `findMany`.\n       For example, if your api has nested URLs that depend on the parent, you will\n      want to group records by their parent.\n       The default implementation returns the records as a single group.\n       @method groupRecordsForFindMany\n      @param {DS.Store} store\n      @param {Array} snapshots\n      @return {Array}  an array of arrays of records, each of which is to be\n                        loaded separately by `findMany`.\n    */\n    groupRecordsForFindMany(store, snapshots) {\n      return [snapshots];\n    },\n\n    /**\n      This method is used by the store to determine if the store should\n      reload a record from the adapter when a record is requested by\n      `store.findRecord`.\n       If this method returns `true`, the store will re-fetch a record from\n      the adapter. If this method returns `false`, the store will resolve\n      immediately using the cached record.\n       For example, if you are building an events ticketing system, in which users\n      can only reserve tickets for 20 minutes at a time, and want to ensure that\n      in each route you have data that is no more than 20 minutes old you could\n      write:\n       ```javascript\n      shouldReloadRecord(store, ticketSnapshot) {\n        let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n        let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n         if (timeDiff > 20) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      ```\n       This method would ensure that whenever you do `store.findRecord('ticket',\n      id)` you will always get a ticket that is no more than 20 minutes old. In\n      case the cached version is more than 20 minutes old, `findRecord` will not\n      resolve until you fetched the latest version.\n       By default this hook returns `false`, as most UIs should not block user\n      interactions while waiting on data update.\n       Note that, with default settings, `shouldBackgroundReloadRecord` will always\n      re-fetch the records in the background even if `shouldReloadRecord` returns\n      `false`. You can override `shouldBackgroundReloadRecord` if this does not\n      suit your use case.\n       @since 1.13.0\n      @method shouldReloadRecord\n      @param {DS.Store} store\n      @param {DS.Snapshot} snapshot\n      @return {Boolean}\n    */\n    shouldReloadRecord(store, snapshot) {\n      return false;\n    },\n\n    /**\n      This method is used by the store to determine if the store should\n      reload all records from the adapter when records are requested by\n      `store.findAll`.\n       If this method returns `true`, the store will re-fetch all records from\n      the adapter. If this method returns `false`, the store will resolve\n      immediately using the cached records.\n       For example, if you are building an events ticketing system, in which users\n      can only reserve tickets for 20 minutes at a time, and want to ensure that\n      in each route you have data that is no more than 20 minutes old you could\n      write:\n       ```javascript\n      shouldReloadAll(store, snapshotArray) {\n        let snapshots = snapshotArray.snapshots();\n         return snapshots.any((ticketSnapshot) => {\n          let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n          let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n           if (timeDiff > 20) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      }\n      ```\n       This method would ensure that whenever you do `store.findAll('ticket')` you\n      will always get a list of tickets that are no more than 20 minutes old. In\n      case a cached version is more than 20 minutes old, `findAll` will not\n      resolve until you fetched the latest versions.\n       By default this methods returns `true` if the passed `snapshotRecordArray`\n      is empty (meaning that there are no records locally available yet),\n      otherwise it returns `false`.\n       Note that, with default settings, `shouldBackgroundReloadAll` will always\n      re-fetch all the records in the background even if `shouldReloadAll` returns\n      `false`. You can override `shouldBackgroundReloadAll` if this does not suit\n      your use case.\n       @since 1.13.0\n      @method shouldReloadAll\n      @param {DS.Store} store\n      @param {DS.SnapshotRecordArray} snapshotRecordArray\n      @return {Boolean}\n    */\n    shouldReloadAll(store, snapshotRecordArray) {\n      return !snapshotRecordArray.length;\n    },\n\n    /**\n      This method is used by the store to determine if the store should\n      reload a record after the `store.findRecord` method resolves a\n      cached record.\n       This method is *only* checked by the store when the store is\n      returning a cached record.\n       If this method returns `true` the store will re-fetch a record from\n      the adapter.\n       For example, if you do not want to fetch complex data over a mobile\n      connection, or if the network is down, you can implement\n      `shouldBackgroundReloadRecord` as follows:\n       ```javascript\n      shouldBackgroundReloadRecord(store, snapshot) {\n        let connection = window.navigator.connection;\n         if (connection === 'cellular' || connection === 'none') {\n          return false;\n        } else {\n          return true;\n        }\n      }\n      ```\n       By default this hook returns `true` so the data for the record is updated\n      in the background.\n       @since 1.13.0\n      @method shouldBackgroundReloadRecord\n      @param {DS.Store} store\n      @param {DS.Snapshot} snapshot\n      @return {Boolean}\n    */\n    shouldBackgroundReloadRecord(store, snapshot) {\n      return true;\n    },\n\n    /**\n      This method is used by the store to determine if the store should\n      reload a record array after the `store.findAll` method resolves\n      with a cached record array.\n       This method is *only* checked by the store when the store is\n      returning a cached record array.\n       If this method returns `true` the store will re-fetch all records\n      from the adapter.\n       For example, if you do not want to fetch complex data over a mobile\n      connection, or if the network is down, you can implement\n      `shouldBackgroundReloadAll` as follows:\n       ```javascript\n      shouldBackgroundReloadAll(store, snapshotArray) {\n        let connection = window.navigator.connection;\n         if (connection === 'cellular' || connection === 'none') {\n          return false;\n        } else {\n          return true;\n        }\n      }\n      ```\n       By default this method returns `true`, indicating that a background reload\n      should always be triggered.\n       @since 1.13.0\n      @method shouldBackgroundReloadAll\n      @param {DS.Store} store\n      @param {DS.SnapshotRecordArray} snapshotRecordArray\n      @return {Boolean}\n    */\n    shouldBackgroundReloadAll(store, snapshotRecordArray) {\n      return true;\n    }\n  });\n});","define('ember-data/adapters/errors', ['exports', 'ember-data/-private'], function (exports, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'AdapterError', {\n    enumerable: true,\n    get: function () {\n      return _private.AdapterError;\n    }\n  });\n  Object.defineProperty(exports, 'InvalidError', {\n    enumerable: true,\n    get: function () {\n      return _private.InvalidError;\n    }\n  });\n  Object.defineProperty(exports, 'UnauthorizedError', {\n    enumerable: true,\n    get: function () {\n      return _private.UnauthorizedError;\n    }\n  });\n  Object.defineProperty(exports, 'ForbiddenError', {\n    enumerable: true,\n    get: function () {\n      return _private.ForbiddenError;\n    }\n  });\n  Object.defineProperty(exports, 'NotFoundError', {\n    enumerable: true,\n    get: function () {\n      return _private.NotFoundError;\n    }\n  });\n  Object.defineProperty(exports, 'ConflictError', {\n    enumerable: true,\n    get: function () {\n      return _private.ConflictError;\n    }\n  });\n  Object.defineProperty(exports, 'ServerError', {\n    enumerable: true,\n    get: function () {\n      return _private.ServerError;\n    }\n  });\n  Object.defineProperty(exports, 'TimeoutError', {\n    enumerable: true,\n    get: function () {\n      return _private.TimeoutError;\n    }\n  });\n  Object.defineProperty(exports, 'AbortError', {\n    enumerable: true,\n    get: function () {\n      return _private.AbortError;\n    }\n  });\n  Object.defineProperty(exports, 'errorsHashToArray', {\n    enumerable: true,\n    get: function () {\n      return _private.errorsHashToArray;\n    }\n  });\n  Object.defineProperty(exports, 'errorsArrayToHash', {\n    enumerable: true,\n    get: function () {\n      return _private.errorsArrayToHash;\n    }\n  });\n});","define('ember-data/adapters/json-api', ['exports', 'ember-data/adapters/rest', 'ember-data/-private', 'ember-inflector'], function (exports, _rest, _private, _emberInflector) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  /**\n    The `JSONAPIAdapter` is the default adapter used by Ember Data. It\n    is responsible for transforming the store's requests into HTTP\n    requests that follow the [JSON API](http://jsonapi.org/format/)\n    format.\n  \n    ## JSON API Conventions\n  \n    The JSONAPIAdapter uses JSON API conventions for building the url\n    for a record and selecting the HTTP verb to use with a request. The\n    actions you can take on a record map onto the following URLs in the\n    JSON API adapter:\n  \n  <table>\n    <tr>\n      <th>\n        Action\n      </th>\n      <th>\n        HTTP Verb\n      </th>\n      <th>\n        URL\n      </th>\n    </tr>\n    <tr>\n      <th>\n        `store.findRecord('post', 123)`\n      </th>\n      <td>\n        GET\n      </td>\n      <td>\n        /posts/123\n      </td>\n    </tr>\n    <tr>\n      <th>\n        `store.findAll('post')`\n      </th>\n      <td>\n        GET\n      </td>\n      <td>\n        /posts\n      </td>\n    </tr>\n    <tr>\n      <th>\n        Update `postRecord.save()`\n      </th>\n      <td>\n        PATCH\n      </td>\n      <td>\n        /posts/123\n      </td>\n    </tr>\n    <tr>\n      <th>\n        Create `store.createRecord('post').save()`\n      </th>\n      <td>\n        POST\n      </td>\n      <td>\n        /posts\n      </td>\n    </tr>\n    <tr>\n      <th>\n        Delete `postRecord.destroyRecord()`\n      </th>\n      <td>\n        DELETE\n      </td>\n      <td>\n        /posts/123\n      </td>\n    </tr>\n  </table>\n  \n    ## Success and failure\n  \n    The JSONAPIAdapter will consider a success any response with a\n    status code of the 2xx family (\"Success\"), as well as 304 (\"Not\n    Modified\"). Any other status code will be considered a failure.\n  \n    On success, the request promise will be resolved with the full\n    response payload.\n  \n    Failed responses with status code 422 (\"Unprocessable Entity\") will\n    be considered \"invalid\". The response will be discarded, except for\n    the `errors` key. The request promise will be rejected with a\n    `DS.InvalidError`. This error object will encapsulate the saved\n    `errors` value.\n  \n    Any other status codes will be treated as an adapter error. The\n    request promise will be rejected, similarly to the invalid case,\n    but with an instance of `DS.AdapterError` instead.\n  \n    ### Endpoint path customization\n  \n    Endpoint paths can be prefixed with a `namespace` by setting the\n    namespace property on the adapter:\n  \n    ```app/adapters/application.js\n    import DS from 'ember-data';\n  \n    export default DS.JSONAPIAdapter.extend({\n      namespace: 'api/1'\n    });\n    ```\n    Requests for the `person` model would now target `/api/1/people/1`.\n  \n    ### Host customization\n  \n    An adapter can target other hosts by setting the `host` property.\n  \n    ```app/adapters/application.js\n    import DS from 'ember-data';\n  \n    export default DS.JSONAPIAdapter.extend({\n      host: 'https://api.example.com'\n    });\n    ```\n  \n    Requests for the `person` model would now target\n    `https://api.example.com/people/1`.\n  \n    @since 1.13.0\n    @class JSONAPIAdapter\n    @constructor\n    @namespace DS\n    @extends DS.RESTAdapter\n  */\n  var JSONAPIAdapter = _rest.default.extend({\n    defaultSerializer: '-json-api',\n\n    /**\n      @method ajaxOptions\n      @private\n      @param {String} url\n      @param {String} type The request type GET, POST, PUT, DELETE etc.\n      @param {Object} options\n      @return {Object}\n    */\n    ajaxOptions(url, type, options) {\n      var hash = this._super(...arguments);\n\n      if (hash.contentType) {\n        hash.contentType = 'application/vnd.api+json';\n      }\n\n      var beforeSend = hash.beforeSend;\n      hash.beforeSend = function (xhr) {\n        xhr.setRequestHeader('Accept', 'application/vnd.api+json');\n        if (beforeSend) {\n          beforeSend(xhr);\n        }\n      };\n\n      return hash;\n    },\n\n    /**\n      By default the JSONAPIAdapter will send each find request coming from a `store.find`\n      or from accessing a relationship separately to the server. If your server supports passing\n      ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\n      within a single runloop.\n       For example, if you have an initial payload of:\n       ```javascript\n      {\n        data: {\n          id: 1,\n          type: 'post',\n          relationship: {\n            comments: {\n              data: [\n                { id: 1, type: 'comment' },\n                { id: 2, type: 'comment' }\n              ]\n            }\n          }\n        }\n      }\n      ```\n       By default calling `post.get('comments')` will trigger the following requests(assuming the\n      comments haven't been loaded before):\n       ```\n      GET /comments/1\n      GET /comments/2\n      ```\n       If you set coalesceFindRequests to `true` it will instead trigger the following request:\n       ```\n      GET /comments?filter[id]=1,2\n      ```\n       Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\n      relationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n       ```javascript\n      store.findRecord('comment', 1);\n      store.findRecord('comment', 2);\n      ```\n       will also send a request to: `GET /comments?filter[id]=1,2`\n       Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n      `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.\n       @property coalesceFindRequests\n      @type {boolean}\n    */\n    coalesceFindRequests: false,\n\n    findMany(store, type, ids, snapshots) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        return this._super(...arguments);\n      } else {\n        var url = this.buildURL(type.modelName, ids, snapshots, 'findMany');\n        return this.ajax(url, 'GET', { data: { filter: { id: ids.join(',') } } });\n      }\n    },\n\n    pathForType(modelName) {\n      var dasherized = Ember.String.dasherize(modelName);\n      return (0, _emberInflector.pluralize)(dasherized);\n    },\n\n    // TODO: Remove this once we have a better way to override HTTP verbs.\n    updateRecord(store, type, snapshot) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        return this._super(...arguments);\n      } else {\n        var data = {};\n        var serializer = store.serializerFor(type.modelName);\n\n        serializer.serializeIntoHash(data, type, snapshot, { includeId: true });\n\n        var url = this.buildURL(type.modelName, snapshot.id, snapshot, 'updateRecord');\n\n        return this.ajax(url, 'PATCH', { data: data });\n      }\n    },\n\n    _hasCustomizedAjax() {\n      if (this.ajax !== JSONAPIAdapter.prototype.ajax) {\n        (true && !(false) && Ember.deprecate('JSONAPIAdapter#ajax has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {\n          id: 'ds.json-api-adapter.ajax',\n          until: '3.0.0'\n        }));\n\n        return true;\n      }\n\n      if (this.ajaxOptions !== JSONAPIAdapter.prototype.ajaxOptions) {\n        (true && !(false) && Ember.deprecate('JSONAPIAdapterr#ajaxOptions has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {\n          id: 'ds.json-api-adapter.ajax-options',\n          until: '3.0.0'\n        }));\n\n        return true;\n      }\n\n      return false;\n    }\n  }); /* global heimdall */\n  /**\n    @module ember-data\n  */\n\n\n  if ((0, _private.isEnabled)('ds-improved-ajax')) {\n\n    JSONAPIAdapter.reopen({\n\n      methodForRequest(params) {\n        if (params.requestType === 'updateRecord') {\n          return 'PATCH';\n        }\n\n        return this._super(...arguments);\n      },\n\n      dataForRequest(params) {\n        var { requestType, ids } = params;\n\n        if (requestType === 'findMany') {\n          return {\n            filter: { id: ids.join(',') }\n          };\n        }\n\n        if (requestType === 'updateRecord') {\n          var { store, type, snapshot } = params;\n          var data = {};\n          var serializer = store.serializerFor(type.modelName);\n\n          serializer.serializeIntoHash(data, type, snapshot, { includeId: true });\n\n          return data;\n        }\n\n        return this._super(...arguments);\n      },\n\n      headersForRequest() {\n        var headers = this._super(...arguments) || {};\n\n        headers['Accept'] = 'application/vnd.api+json';\n\n        return headers;\n      },\n\n      _requestToJQueryAjaxHash() {\n        var hash = this._super(...arguments);\n\n        if (hash.contentType) {\n          hash.contentType = 'application/vnd.api+json';\n        }\n\n        return hash;\n      }\n\n    });\n  }\n\n  exports.default = JSONAPIAdapter;\n});","define('ember-data/adapters/rest', ['exports', 'ember-data/adapter', 'ember-data/-private'], function (exports, _adapter, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var Promise = Ember.RSVP.Promise;\n\n  /**\n    The REST adapter allows your store to communicate with an HTTP server by\n    transmitting JSON via XHR. Most Ember.js apps that consume a JSON API\n    should use the REST adapter.\n  \n    This adapter is designed around the idea that the JSON exchanged with\n    the server should be conventional.\n  \n    ## Success and failure\n  \n    The REST adapter will consider a success any response with a status code\n    of the 2xx family (\"Success\"), as well as 304 (\"Not Modified\"). Any other\n    status code will be considered a failure.\n  \n    On success, the request promise will be resolved with the full response\n    payload.\n  \n    Failed responses with status code 422 (\"Unprocessable Entity\") will be\n    considered \"invalid\". The response will be discarded, except for the\n    `errors` key. The request promise will be rejected with a `DS.InvalidError`.\n    This error object will encapsulate the saved `errors` value.\n  \n    Any other status codes will be treated as an \"adapter error\". The request\n    promise will be rejected, similarly to the \"invalid\" case, but with\n    an instance of `DS.AdapterError` instead.\n  \n    ## JSON Structure\n  \n    The REST adapter expects the JSON returned from your server to follow\n    these conventions.\n  \n    ### Object Root\n  \n    The JSON payload should be an object that contains the record inside a\n    root property. For example, in response to a `GET` request for\n    `/posts/1`, the JSON should look like this:\n  \n    ```js\n    {\n      \"posts\": {\n        \"id\": 1,\n        \"title\": \"I'm Running to Reform the W3C's Tag\",\n        \"author\": \"Yehuda Katz\"\n      }\n    }\n    ```\n  \n    Similarly, in response to a `GET` request for `/posts`, the JSON should\n    look like this:\n  \n    ```js\n    {\n      \"posts\": [\n        {\n          \"id\": 1,\n          \"title\": \"I'm Running to Reform the W3C's Tag\",\n          \"author\": \"Yehuda Katz\"\n        },\n        {\n          \"id\": 2,\n          \"title\": \"Rails is omakase\",\n          \"author\": \"D2H\"\n        }\n      ]\n    }\n    ```\n  \n    Note that the object root can be pluralized for both a single-object response\n    and an array response: the REST adapter is not strict on this. Further, if the\n    HTTP server responds to a `GET` request to `/posts/1` (e.g. the response to a\n    `findRecord` query) with more than one object in the array, Ember Data will\n    only display the object with the matching ID.\n  \n    ### Conventional Names\n  \n    Attribute names in your JSON payload should be the camelCased versions of\n    the attributes in your Ember.js models.\n  \n    For example, if you have a `Person` model:\n  \n    ```app/models/person.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n      occupation: DS.attr('string')\n    });\n    ```\n  \n    The JSON returned should look like this:\n  \n    ```js\n    {\n      \"people\": {\n        \"id\": 5,\n        \"firstName\": \"Zaphod\",\n        \"lastName\": \"Beeblebrox\",\n        \"occupation\": \"President\"\n      }\n    }\n    ```\n  \n    #### Relationships\n  \n    Relationships are usually represented by ids to the record in the\n    relationship. The related records can then be sideloaded in the\n    response under a key for the type.\n  \n    ```js\n    {\n      \"posts\": {\n        \"id\": 5,\n        \"title\": \"I'm Running to Reform the W3C's Tag\",\n        \"author\": \"Yehuda Katz\",\n        \"comments\": [1, 2]\n      },\n      \"comments\": [{\n        \"id\": 1,\n        \"author\": \"User 1\",\n        \"message\": \"First!\",\n      }, {\n        \"id\": 2,\n        \"author\": \"User 2\",\n        \"message\": \"Good Luck!\",\n      }]\n    }\n    ```\n  \n    If the records in the relationship are not known when the response\n    is serialized its also possible to represent the relationship as a\n    url using the `links` key in the response. Ember Data will fetch\n    this url to resolve the relationship when it is accessed for the\n    first time.\n  \n    ```js\n    {\n      \"posts\": {\n        \"id\": 5,\n        \"title\": \"I'm Running to Reform the W3C's Tag\",\n        \"author\": \"Yehuda Katz\",\n        \"links\": {\n          \"comments\": \"/posts/5/comments\"\n        }\n      }\n    }\n    ```\n  \n    ### Errors\n  \n    If a response is considered a failure, the JSON payload is expected to include\n    a top-level key `errors`, detailing any specific issues. For example:\n  \n    ```js\n    {\n      \"errors\": {\n        \"msg\": \"Something went wrong\"\n      }\n    }\n    ```\n  \n    This adapter does not make any assumptions as to the format of the `errors`\n    object. It will simply be passed along as is, wrapped in an instance\n    of `DS.InvalidError` or `DS.AdapterError`. The serializer can interpret it\n    afterwards.\n  \n    ## Customization\n  \n    ### Endpoint path customization\n  \n    Endpoint paths can be prefixed with a `namespace` by setting the namespace\n    property on the adapter:\n  \n    ```app/adapters/application.js\n    import DS from 'ember-data';\n  \n    export default DS.RESTAdapter.extend({\n      namespace: 'api/1'\n    });\n    ```\n    Requests for the `Person` model would now target `/api/1/people/1`.\n  \n    ### Host customization\n  \n    An adapter can target other hosts by setting the `host` property.\n  \n    ```app/adapters/application.js\n    import DS from 'ember-data';\n  \n    export default DS.RESTAdapter.extend({\n      host: 'https://api.example.com'\n    });\n    ```\n  \n    ### Headers customization\n  \n    Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary\n    headers can be set as key/value pairs on the `RESTAdapter`'s `headers`\n    object and Ember Data will send them along with each ajax request.\n  \n  \n    ```app/adapters/application.js\n    import DS from 'ember-data';\n    import { computed } from '@ember/object';\n  \n    export default DS.RESTAdapter.extend({\n      headers: computed(function() {\n        return {\n          'API_KEY': 'secret key',\n          'ANOTHER_HEADER': 'Some header value'\n        };\n      }\n    });\n    ```\n  \n    `headers` can also be used as a computed property to support dynamic\n    headers. In the example below, the `session` object has been\n    injected into an adapter by Ember's container.\n  \n    ```app/adapters/application.js\n    import DS from 'ember-data';\n    import { computed } from '@ember/object';\n  \n    export default DS.RESTAdapter.extend({\n      headers: computed('session.authToken', function() {\n        return {\n          'API_KEY': this.get('session.authToken'),\n          'ANOTHER_HEADER': 'Some header value'\n        };\n      })\n    });\n    ```\n  \n    In some cases, your dynamic headers may require data from some\n    object outside of Ember's observer system (for example\n    `document.cookie`). You can use the\n    [volatile](/api/classes/Ember.ComputedProperty.html#method_volatile)\n    function to set the property into a non-cached mode causing the headers to\n    be recomputed with every request.\n  \n    ```app/adapters/application.js\n    import DS from 'ember-data';\n    import { get } from '@ember/object';\n    import { computed } from '@ember/object';\n  \n    export default DS.RESTAdapter.extend({\n      headers: computed(function() {\n        return {\n          'API_KEY': get(document.cookie.match(/apiKey\\=([^;]*)/), '1'),\n          'ANOTHER_HEADER': 'Some header value'\n        };\n      }).volatile()\n    });\n    ```\n  \n    @class RESTAdapter\n    @constructor\n    @namespace DS\n    @extends DS.Adapter\n    @uses DS.BuildURLMixin\n  */\n  /* global heimdall */\n  /**\n    @module ember-data\n  */\n\n  var RESTAdapter = _adapter.default.extend(_private.BuildURLMixin, {\n    defaultSerializer: '-rest',\n\n    /**\n      By default, the RESTAdapter will send the query params sorted alphabetically to the\n      server.\n       For example:\n       ```js\n      store.query('posts', { sort: 'price', category: 'pets' });\n      ```\n       will generate a requests like this `/posts?category=pets&sort=price`, even if the\n      parameters were specified in a different order.\n       That way the generated URL will be deterministic and that simplifies caching mechanisms\n      in the backend.\n       Setting `sortQueryParams` to a falsey value will respect the original order.\n       In case you want to sort the query parameters with a different criteria, set\n      `sortQueryParams` to your custom sort function.\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n       export default DS.RESTAdapter.extend({\n        sortQueryParams(params) {\n          let sortedKeys = Object.keys(params).sort().reverse();\n          let len = sortedKeys.length, newParams = {};\n           for (let i = 0; i < len; i++) {\n            newParams[sortedKeys[i]] = params[sortedKeys[i]];\n          }\n           return newParams;\n        }\n      });\n      ```\n       @method sortQueryParams\n      @param {Object} obj\n      @return {Object}\n    */\n    sortQueryParams(obj) {\n      var keys = Object.keys(obj);\n      var len = keys.length;\n      if (len < 2) {\n        return obj;\n      }\n      var newQueryParams = {};\n      var sortedKeys = keys.sort();\n\n      for (var i = 0; i < len; i++) {\n        newQueryParams[sortedKeys[i]] = obj[sortedKeys[i]];\n      }\n      return newQueryParams;\n    },\n\n    /**\n      By default the RESTAdapter will send each find request coming from a `store.find`\n      or from accessing a relationship separately to the server. If your server supports passing\n      ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\n      within a single runloop.\n       For example, if you have an initial payload of:\n       ```javascript\n      {\n        post: {\n          id: 1,\n          comments: [1, 2]\n        }\n      }\n      ```\n       By default calling `post.get('comments')` will trigger the following requests(assuming the\n      comments haven't been loaded before):\n       ```\n      GET /comments/1\n      GET /comments/2\n      ```\n       If you set coalesceFindRequests to `true` it will instead trigger the following request:\n       ```\n      GET /comments?ids[]=1&ids[]=2\n      ```\n       Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\n      relationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n       ```javascript\n      store.findRecord('comment', 1);\n      store.findRecord('comment', 2);\n      ```\n       will also send a request to: `GET /comments?ids[]=1&ids[]=2`\n       Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n      `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.\n       @property coalesceFindRequests\n      @type {boolean}\n    */\n    coalesceFindRequests: false,\n\n    /**\n      Endpoint paths can be prefixed with a `namespace` by setting the namespace\n      property on the adapter:\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n       export default DS.RESTAdapter.extend({\n        namespace: 'api/1'\n      });\n      ```\n       Requests for the `Post` model would now target `/api/1/post/`.\n       @property namespace\n      @type {String}\n    */\n\n    /**\n      An adapter can target other hosts by setting the `host` property.\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n       export default DS.RESTAdapter.extend({\n        host: 'https://api.example.com'\n      });\n      ```\n       Requests for the `Post` model would now target `https://api.example.com/post/`.\n       @property host\n      @type {String}\n    */\n\n    /**\n      Some APIs require HTTP headers, e.g. to provide an API\n      key. Arbitrary headers can be set as key/value pairs on the\n      `RESTAdapter`'s `headers` object and Ember Data will send them\n      along with each ajax request. For dynamic headers see [headers\n      customization](/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).\n       ```app/adapters/application.js\n      import DS from 'ember-data';\n      import { computed } from '@ember/object';\n       export default DS.RESTAdapter.extend({\n        headers: computed(function() {\n          return {\n            'API_KEY': 'secret key',\n            'ANOTHER_HEADER': 'Some header value'\n          };\n        })\n      });\n      ```\n       @property headers\n      @type {Object}\n     */\n\n    /**\n      Called by the store in order to fetch the JSON for a given\n      type and ID.\n       The `findRecord` method makes an Ajax request to a URL computed by\n      `buildURL`, and returns a promise for the resulting payload.\n       This method performs an HTTP `GET` request with the id provided as part of the query string.\n       @since 1.13.0\n      @method findRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {String} id\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    findRecord(store, type, id, snapshot) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, id, snapshot,\n          requestType: 'findRecord'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n        var query = this.buildQuery(snapshot);\n\n        return this.ajax(url, 'GET', { data: query });\n      }\n    },\n\n    /**\n      Called by the store in order to fetch a JSON array for all\n      of the records for a given type.\n       The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\n      promise for the resulting payload.\n       @method findAll\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {String} sinceToken\n      @param {DS.SnapshotRecordArray} snapshotRecordArray\n      @return {Promise} promise\n    */\n    findAll(store, type, sinceToken, snapshotRecordArray) {\n      var query = this.buildQuery(snapshotRecordArray);\n\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, sinceToken, query,\n          snapshots: snapshotRecordArray,\n          requestType: 'findAll'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var url = this.buildURL(type.modelName, null, snapshotRecordArray, 'findAll');\n\n        if (sinceToken) {\n          query.since = sinceToken;\n        }\n\n        return this.ajax(url, 'GET', { data: query });\n      }\n    },\n\n    /**\n      Called by the store in order to fetch a JSON array for\n      the records that match a particular query.\n       The `query` method makes an Ajax (HTTP GET) request to a URL\n      computed by `buildURL`, and returns a promise for the resulting\n      payload.\n       The `query` argument is a simple JavaScript object that will be passed directly\n      to the server as parameters.\n       @method query\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {Object} query\n      @return {Promise} promise\n    */\n    query(store, type, query) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, query,\n          requestType: 'query'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var url = this.buildURL(type.modelName, null, null, 'query', query);\n\n        if (this.sortQueryParams) {\n          query = this.sortQueryParams(query);\n        }\n\n        return this.ajax(url, 'GET', { data: query });\n      }\n    },\n\n    /**\n      Called by the store in order to fetch a JSON object for\n      the record that matches a particular query.\n       The `queryRecord` method makes an Ajax (HTTP GET) request to a URL\n      computed by `buildURL`, and returns a promise for the resulting\n      payload.\n       The `query` argument is a simple JavaScript object that will be passed directly\n      to the server as parameters.\n       @since 1.13.0\n      @method queryRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {Object} query\n      @return {Promise} promise\n    */\n    queryRecord(store, type, query) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, query,\n          requestType: 'queryRecord'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var url = this.buildURL(type.modelName, null, null, 'queryRecord', query);\n\n        if (this.sortQueryParams) {\n          query = this.sortQueryParams(query);\n        }\n\n        return this.ajax(url, 'GET', { data: query });\n      }\n    },\n\n    /**\n      Called by the store in order to fetch several records together if `coalesceFindRequests` is true\n       For example, if the original payload looks like:\n       ```js\n      {\n        \"id\": 1,\n        \"title\": \"Rails is omakase\",\n        \"comments\": [ 1, 2, 3 ]\n      }\n      ```\n       The IDs will be passed as a URL-encoded Array of IDs, in this form:\n       ```\n      ids[]=1&ids[]=2&ids[]=3\n      ```\n       Many servers, such as Rails and PHP, will automatically convert this URL-encoded array\n      into an Array for you on the server-side. If you want to encode the\n      IDs, differently, just override this (one-line) method.\n       The `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\n      promise for the resulting payload.\n       @method findMany\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {Array} ids\n      @param {Array} snapshots\n      @return {Promise} promise\n    */\n    findMany(store, type, ids, snapshots) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, ids, snapshots,\n          requestType: 'findMany'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var url = this.buildURL(type.modelName, ids, snapshots, 'findMany');\n        return this.ajax(url, 'GET', { data: { ids: ids } });\n      }\n    },\n\n    /**\n      Called by the store in order to fetch a JSON array for\n      the unloaded records in a has-many relationship that were originally\n      specified as a URL (inside of `links`).\n       For example, if your original payload looks like this:\n       ```js\n      {\n        \"post\": {\n          \"id\": 1,\n          \"title\": \"Rails is omakase\",\n          \"links\": { \"comments\": \"/posts/1/comments\" }\n        }\n      }\n      ```\n       This method will be called with the parent record and `/posts/1/comments`.\n       The `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.\n       The format of your `links` value will influence the final request URL via the `urlPrefix` method:\n       * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n       * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n       * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.\n       @method findHasMany\n      @param {DS.Store} store\n      @param {DS.Snapshot} snapshot\n      @param {String} url\n      @param {Object} relationship meta object describing the relationship\n      @return {Promise} promise\n    */\n    findHasMany(store, snapshot, url, relationship) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, snapshot, url, relationship,\n          requestType: 'findHasMany'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var id = snapshot.id;\n        var type = snapshot.modelName;\n\n        url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findHasMany'));\n\n        return this.ajax(url, 'GET');\n      }\n    },\n\n    /**\n      Called by the store in order to fetch the JSON for the unloaded record in a\n      belongs-to relationship that was originally specified as a URL (inside of\n      `links`).\n       For example, if your original payload looks like this:\n       ```js\n      {\n        \"person\": {\n          \"id\": 1,\n          \"name\": \"Tom Dale\",\n          \"links\": { \"group\": \"/people/1/group\" }\n        }\n      }\n      ```\n       This method will be called with the parent record and `/people/1/group`.\n       The `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.\n       The format of your `links` value will influence the final request URL via the `urlPrefix` method:\n       * Links beginning with `//`, `http://`, `https://`, will be used as is, with no further manipulation.\n       * Links beginning with a single `/` will have the current adapter's `host` value prepended to it.\n       * Links with no beginning `/` will have a parentURL prepended to it, via the current adapter's `buildURL`.\n       @method findBelongsTo\n      @param {DS.Store} store\n      @param {DS.Snapshot} snapshot\n      @param {String} url\n      @param {Object} relationship meta object describing the relationship\n      @return {Promise} promise\n    */\n    findBelongsTo(store, snapshot, url, relationship) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, snapshot, url, relationship,\n          requestType: 'findBelongsTo'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var id = snapshot.id;\n        var type = snapshot.modelName;\n\n        url = this.urlPrefix(url, this.buildURL(type, id, snapshot, 'findBelongsTo'));\n        return this.ajax(url, 'GET');\n      }\n    },\n\n    /**\n      Called by the store when a newly created record is\n      saved via the `save` method on a model record instance.\n       The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\n      to a URL computed by `buildURL`.\n       See `serialize` for information on how to customize the serialized form\n      of a record.\n       @method createRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    createRecord(store, type, snapshot) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, snapshot,\n          requestType: 'createRecord'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var data = {};\n        var serializer = store.serializerFor(type.modelName);\n        var url = this.buildURL(type.modelName, null, snapshot, 'createRecord');\n\n        serializer.serializeIntoHash(data, type, snapshot, { includeId: true });\n\n        return this.ajax(url, \"POST\", { data: data });\n      }\n    },\n\n    /**\n      Called by the store when an existing record is saved\n      via the `save` method on a model record instance.\n       The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\n      to a URL computed by `buildURL`.\n       See `serialize` for information on how to customize the serialized form\n      of a record.\n       @method updateRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    updateRecord(store, type, snapshot) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, snapshot,\n          requestType: 'updateRecord'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var data = {};\n        var serializer = store.serializerFor(type.modelName);\n\n        serializer.serializeIntoHash(data, type, snapshot);\n\n        var id = snapshot.id;\n        var url = this.buildURL(type.modelName, id, snapshot, 'updateRecord');\n\n        return this.ajax(url, \"PUT\", { data: data });\n      }\n    },\n\n    /**\n      Called by the store when a record is deleted.\n       The `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.\n       @method deleteRecord\n      @param {DS.Store} store\n      @param {DS.Model} type\n      @param {DS.Snapshot} snapshot\n      @return {Promise} promise\n    */\n    deleteRecord(store, type, snapshot) {\n      if ((0, _private.isEnabled)('ds-improved-ajax') && !this._hasCustomizedAjax()) {\n        var request = this._requestFor({\n          store, type, snapshot,\n          requestType: 'deleteRecord'\n        });\n\n        return this._makeRequest(request);\n      } else {\n        var id = snapshot.id;\n\n        return this.ajax(this.buildURL(type.modelName, id, snapshot, 'deleteRecord'), \"DELETE\");\n      }\n    },\n\n    _stripIDFromURL(store, snapshot) {\n      var url = this.buildURL(snapshot.modelName, snapshot.id, snapshot);\n\n      var expandedURL = url.split('/');\n      // Case when the url is of the format ...something/:id\n      // We are decodeURIComponent-ing the lastSegment because if it represents\n      // the id, it has been encodeURIComponent-ified within `buildURL`. If we\n      // don't do this, then records with id having special characters are not\n      // coalesced correctly (see GH #4190 for the reported bug)\n      var lastSegment = expandedURL[expandedURL.length - 1];\n      var id = snapshot.id;\n      if (decodeURIComponent(lastSegment) === id) {\n        expandedURL[expandedURL.length - 1] = \"\";\n      } else if (endsWith(lastSegment, '?id=' + id)) {\n        //Case when the url is of the format ...something?id=:id\n        expandedURL[expandedURL.length - 1] = lastSegment.substring(0, lastSegment.length - id.length - 1);\n      }\n\n      return expandedURL.join('/');\n    },\n\n    // http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers\n    maxURLLength: 2048,\n\n    /**\n      Organize records into groups, each of which is to be passed to separate\n      calls to `findMany`.\n       This implementation groups together records that have the same base URL but\n      differing ids. For example `/comments/1` and `/comments/2` will be grouped together\n      because we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`\n       It also supports urls where ids are passed as a query param, such as `/comments?id=1`\n      but not those where there is more than 1 query param such as `/comments?id=2&name=David`\n      Currently only the query param of `id` is supported. If you need to support others, please\n      override this or the `_stripIDFromURL` method.\n       It does not group records that have differing base urls, such as for example: `/posts/1/comments/2`\n      and `/posts/2/comments/3`\n       @method groupRecordsForFindMany\n      @param {DS.Store} store\n      @param {Array} snapshots\n      @return {Array}  an array of arrays of records, each of which is to be\n                        loaded separately by `findMany`.\n    */\n    groupRecordsForFindMany(store, snapshots) {\n      var groups = Ember.MapWithDefault.create({ defaultValue() {\n          return [];\n        } });\n      var adapter = this;\n      var maxURLLength = this.maxURLLength;\n\n      snapshots.forEach(snapshot => {\n        var baseUrl = adapter._stripIDFromURL(store, snapshot);\n        groups.get(baseUrl).push(snapshot);\n      });\n\n      function splitGroupToFitInUrl(group, maxURLLength, paramNameLength) {\n        var idsSize = 0;\n        var baseUrl = adapter._stripIDFromURL(store, group[0]);\n        var splitGroups = [[]];\n\n        group.forEach(snapshot => {\n          var additionalLength = encodeURIComponent(snapshot.id).length + paramNameLength;\n          if (baseUrl.length + idsSize + additionalLength >= maxURLLength) {\n            idsSize = 0;\n            splitGroups.push([]);\n          }\n\n          idsSize += additionalLength;\n\n          var lastGroupIndex = splitGroups.length - 1;\n          splitGroups[lastGroupIndex].push(snapshot);\n        });\n\n        return splitGroups;\n      }\n\n      var groupsArray = [];\n      groups.forEach((group, key) => {\n        var paramNameLength = '&ids%5B%5D='.length;\n        var splitGroups = splitGroupToFitInUrl(group, maxURLLength, paramNameLength);\n\n        splitGroups.forEach(splitGroup => groupsArray.push(splitGroup));\n      });\n\n      return groupsArray;\n    },\n\n    /**\n      Takes an ajax response, and returns the json payload or an error.\n       By default this hook just returns the json payload passed to it.\n      You might want to override it in two cases:\n       1. Your API might return useful results in the response headers.\n      Response headers are passed in as the second argument.\n       2. Your API might return errors as successful responses with status code\n      200 and an Errors text or object. You can return a `DS.InvalidError` or a\n      `DS.AdapterError` (or a sub class) from this hook and it will automatically\n      reject the promise and put your record into the invalid or error state.\n       Returning a `DS.InvalidError` from this method will cause the\n      record to transition into the `invalid` state and make the\n      `errors` object available on the record. When returning an\n      `DS.InvalidError` the store will attempt to normalize the error data\n      returned from the server using the serializer's `extractErrors`\n      method.\n       @since 1.13.0\n      @method handleResponse\n      @param  {Number} status\n      @param  {Object} headers\n      @param  {Object} payload\n      @param  {Object} requestData - the original request information\n      @return {Object | DS.AdapterError} response\n    */\n    handleResponse(status, headers, payload, requestData) {\n      if (this.isSuccess(status, headers, payload)) {\n        return payload;\n      } else if (this.isInvalid(status, headers, payload)) {\n        return new _private.InvalidError(payload.errors);\n      }\n\n      var errors = this.normalizeErrorResponse(status, headers, payload);\n      var detailedMessage = this.generatedDetailedMessage(status, headers, payload, requestData);\n\n      switch (status) {\n        case 401:\n          return new _private.UnauthorizedError(errors, detailedMessage);\n        case 403:\n          return new _private.ForbiddenError(errors, detailedMessage);\n        case 404:\n          return new _private.NotFoundError(errors, detailedMessage);\n        case 409:\n          return new _private.ConflictError(errors, detailedMessage);\n        default:\n          if (status >= 500) {\n            return new _private.ServerError(errors, detailedMessage);\n          }\n      }\n\n      return new _private.AdapterError(errors, detailedMessage);\n    },\n\n    /**\n      Default `handleResponse` implementation uses this hook to decide if the\n      response is a success.\n       @since 1.13.0\n      @method isSuccess\n      @param  {Number} status\n      @param  {Object} headers\n      @param  {Object} payload\n      @return {Boolean}\n    */\n    isSuccess(status, headers, payload) {\n      return status >= 200 && status < 300 || status === 304;\n    },\n\n    /**\n      Default `handleResponse` implementation uses this hook to decide if the\n      response is an invalid error.\n       @since 1.13.0\n      @method isInvalid\n      @param  {Number} status\n      @param  {Object} headers\n      @param  {Object} payload\n      @return {Boolean}\n    */\n    isInvalid(status, headers, payload) {\n      return status === 422;\n    },\n\n    /**\n      Takes a URL, an HTTP method and a hash of data, and makes an\n      HTTP request.\n       When the server responds with a payload, Ember Data will call into `extractSingle`\n      or `extractArray` (depending on whether the original query was for one record or\n      many records).\n       By default, `ajax` method has the following behavior:\n       * It sets the response `dataType` to `\"json\"`\n      * If the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n        `application/json; charset=utf-8`\n      * If the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\n        data is the serialized record in the case of a save.\n      * Registers success and failure handlers.\n       @method ajax\n      @private\n      @param {String} url\n      @param {String} type The request type GET, POST, PUT, DELETE etc.\n      @param {Object} options\n      @return {Promise} promise\n    */\n    ajax(url, type, options) {\n      var adapter = this;\n\n      var requestData = {\n        url: url,\n        method: type\n      };\n\n      return new Promise(function (resolve, reject) {\n        var hash = adapter.ajaxOptions(url, type, options);\n\n        hash.success = function (payload, textStatus, jqXHR) {\n          var response = ajaxSuccess(adapter, jqXHR, payload, requestData);\n          Ember.run.join(null, resolve, response);\n        };\n\n        hash.error = function (jqXHR, textStatus, errorThrown) {\n          var responseData = {\n            textStatus,\n            errorThrown\n          };\n          var error = ajaxError(adapter, jqXHR, requestData, responseData);\n          Ember.run.join(null, reject, error);\n        };\n\n        adapter._ajaxRequest(hash);\n      }, 'DS: RESTAdapter#ajax ' + type + ' to ' + url);\n    },\n\n    /**\n      @method _ajaxRequest\n      @private\n      @param {Object} options jQuery ajax options to be used for the ajax request\n    */\n    _ajaxRequest(options) {\n      Ember.$.ajax(options);\n    },\n\n    /**\n      @method ajaxOptions\n      @private\n      @param {String} url\n      @param {String} type The request type GET, POST, PUT, DELETE etc.\n      @param {Object} options\n      @return {Object}\n    */\n    ajaxOptions(url, type, options) {\n      var hash = options || {};\n      hash.url = url;\n      hash.type = type;\n      hash.dataType = 'json';\n      hash.context = this;\n\n      if (hash.data && type !== 'GET') {\n        hash.contentType = 'application/json; charset=utf-8';\n        hash.data = JSON.stringify(hash.data);\n      }\n\n      var headers = Ember.get(this, 'headers');\n      if (headers !== undefined) {\n        hash.beforeSend = function (xhr) {\n          Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n        };\n      }\n\n      return hash;\n    },\n\n    /**\n      @method parseErrorResponse\n      @private\n      @param {String} responseText\n      @return {Object}\n    */\n    parseErrorResponse(responseText) {\n      var json = responseText;\n\n      try {\n        json = Ember.$.parseJSON(responseText);\n      } catch (e) {\n        // ignored\n      }\n\n      return json;\n    },\n\n    /**\n      @method normalizeErrorResponse\n      @private\n      @param  {Number} status\n      @param  {Object} headers\n      @param  {Object} payload\n      @return {Array} errors payload\n    */\n    normalizeErrorResponse(status, headers, payload) {\n      if (payload && typeof payload === 'object' && payload.errors) {\n        return payload.errors;\n      } else {\n        return [{\n          status: `${status}`,\n          title: \"The backend responded with an error\",\n          detail: `${payload}`\n        }];\n      }\n    },\n\n    /**\n      Generates a detailed (\"friendly\") error message, with plenty\n      of information for debugging (good luck!)\n       @method generatedDetailedMessage\n      @private\n      @param  {Number} status\n      @param  {Object} headers\n      @param  {Object} payload\n      @param  {Object} requestData\n      @return {String} detailed error message\n    */\n    generatedDetailedMessage: function (status, headers, payload, requestData) {\n      var shortenedPayload = void 0;\n      var payloadContentType = headers[\"Content-Type\"] || \"Empty Content-Type\";\n\n      if (payloadContentType === \"text/html\" && payload.length > 250) {\n        shortenedPayload = \"[Omitted Lengthy HTML]\";\n      } else {\n        shortenedPayload = payload;\n      }\n\n      var requestDescription = requestData.method + ' ' + requestData.url;\n      var payloadDescription = 'Payload (' + payloadContentType + ')';\n\n      return ['Ember Data Request ' + requestDescription + ' returned a ' + status, payloadDescription, shortenedPayload].join('\\n');\n    },\n\n    // @since 2.5.0\n    buildQuery(snapshot) {\n      var query = {};\n\n      if (snapshot) {\n        var { include } = snapshot;\n\n        if (include) {\n          query.include = include;\n        }\n      }\n\n      return query;\n    },\n\n    _hasCustomizedAjax() {\n      if (this.ajax !== RESTAdapter.prototype.ajax) {\n        (true && !(false) && Ember.deprecate('RESTAdapter#ajax has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {\n          id: 'ds.rest-adapter.ajax',\n          until: '3.0.0'\n        }));\n\n        return true;\n      }\n\n      if (this.ajaxOptions !== RESTAdapter.prototype.ajaxOptions) {\n        (true && !(false) && Ember.deprecate('RESTAdapter#ajaxOptions has been deprecated please use. `methodForRequest`, `urlForRequest`, `headersForRequest` or `dataForRequest` instead.', false, {\n          id: 'ds.rest-adapter.ajax-options',\n          until: '3.0.0'\n        }));\n\n        return true;\n      }\n\n      return false;\n    }\n  });\n\n  if ((0, _private.isEnabled)('ds-improved-ajax')) {\n\n    RESTAdapter.reopen({\n\n      /*\n       * Get the data (body or query params) for a request.\n       *\n       * @public\n       * @method dataForRequest\n       * @param {Object} params\n       * @return {Object} data\n       */\n      dataForRequest(params) {\n        var { store, type, snapshot, requestType, query } = params;\n\n        // type is not passed to findBelongsTo and findHasMany\n        type = type || snapshot && snapshot.type;\n\n        var serializer = store.serializerFor(type.modelName);\n        var data = {};\n\n        switch (requestType) {\n          case 'createRecord':\n            serializer.serializeIntoHash(data, type, snapshot, { includeId: true });\n            break;\n\n          case 'updateRecord':\n            serializer.serializeIntoHash(data, type, snapshot);\n            break;\n\n          case 'findRecord':\n            data = this.buildQuery(snapshot);\n            break;\n\n          case 'findAll':\n            if (params.sinceToken) {\n              query = query || {};\n              query.since = params.sinceToken;\n            }\n            data = query;\n            break;\n\n          case 'query':\n          case 'queryRecord':\n            if (this.sortQueryParams) {\n              query = this.sortQueryParams(query);\n            }\n            data = query;\n            break;\n\n          case 'findMany':\n            data = { ids: params.ids };\n            break;\n\n          default:\n            data = undefined;\n            break;\n        }\n\n        return data;\n      },\n\n      /*\n       * Get the HTTP method for a request.\n       *\n       * @public\n       * @method methodForRequest\n       * @param {Object} params\n       * @return {String} HTTP method\n       */\n      methodForRequest(params) {\n        var { requestType } = params;\n\n        switch (requestType) {\n          case 'createRecord':\n            return 'POST';\n          case 'updateRecord':\n            return 'PUT';\n          case 'deleteRecord':\n            return 'DELETE';\n        }\n\n        return 'GET';\n      },\n\n      /*\n       * Get the URL for a request.\n       *\n       * @public\n       * @method urlForRequest\n       * @param {Object} params\n       * @return {String} URL\n       */\n      urlForRequest(params) {\n        var { type, id, ids, snapshot, snapshots, requestType, query } = params;\n\n        // type and id are not passed from updateRecord and deleteRecord, hence they\n        // are defined if not set\n        type = type || snapshot && snapshot.type;\n        id = id || snapshot && snapshot.id;\n\n        switch (requestType) {\n          case 'findAll':\n            return this.buildURL(type.modelName, null, snapshots, requestType);\n\n          case 'query':\n          case 'queryRecord':\n            return this.buildURL(type.modelName, null, null, requestType, query);\n\n          case 'findMany':\n            return this.buildURL(type.modelName, ids, snapshots, requestType);\n\n          case 'findHasMany':\n          case 'findBelongsTo':\n            {\n              var url = this.buildURL(type.modelName, id, snapshot, requestType);\n              return this.urlPrefix(params.url, url);\n            }\n        }\n\n        return this.buildURL(type.modelName, id, snapshot, requestType, query);\n      },\n\n      /*\n       * Get the headers for a request.\n       *\n       * By default the value of the `headers` property of the adapter is\n       * returned.\n       *\n       * @public\n       * @method headersForRequest\n       * @param {Object} params\n       * @return {Object} headers\n       */\n      headersForRequest(params) {\n        return this.get('headers');\n      },\n\n      /*\n       * Get an object which contains all properties for a request which should\n       * be made.\n       *\n       * @private\n       * @method _requestFor\n       * @param {Object} params\n       * @return {Object} request object\n       */\n      _requestFor(params) {\n        var method = this.methodForRequest(params);\n        var url = this.urlForRequest(params);\n        var headers = this.headersForRequest(params);\n        var data = this.dataForRequest(params);\n\n        return { method, url, headers, data };\n      },\n\n      /*\n       * Convert a request object into a hash which can be passed to `jQuery.ajax`.\n       *\n       * @private\n       * @method _requestToJQueryAjaxHash\n       * @param {Object} request\n       * @return {Object} jQuery ajax hash\n       */\n      _requestToJQueryAjaxHash(request) {\n        var hash = {};\n\n        hash.type = request.method;\n        hash.url = request.url;\n        hash.dataType = 'json';\n        hash.context = this;\n\n        if (request.data) {\n          if (request.method !== 'GET') {\n            hash.contentType = 'application/json; charset=utf-8';\n            hash.data = JSON.stringify(request.data);\n          } else {\n            hash.data = request.data;\n          }\n        }\n\n        var headers = request.headers;\n        if (headers !== undefined) {\n          hash.beforeSend = function (xhr) {\n            Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n          };\n        }\n\n        return hash;\n      },\n\n      /*\n       * Make a request using `jQuery.ajax`.\n       *\n       * @private\n       * @method _makeRequest\n       * @param {Object} request\n       * @return {Promise} promise\n       */\n      _makeRequest(request) {\n        var adapter = this;\n        var hash = this._requestToJQueryAjaxHash(request);\n\n        var { method, url } = request;\n        var requestData = { method, url };\n\n        return new Promise((resolve, reject) => {\n\n          hash.success = function (payload, textStatus, jqXHR) {\n            var response = ajaxSuccess(adapter, jqXHR, payload, requestData);\n            Ember.run.join(null, resolve, response);\n          };\n\n          hash.error = function (jqXHR, textStatus, errorThrown) {\n            var responseData = {\n              textStatus,\n              errorThrown\n            };\n            var error = ajaxError(adapter, jqXHR, requestData, responseData);\n            Ember.run.join(null, reject, error);\n          };\n\n          adapter._ajaxRequest(hash);\n        }, `DS: RESTAdapter#makeRequest: ${method} ${url}`);\n      }\n    });\n  }\n\n  function ajaxSuccess(adapter, jqXHR, payload, requestData) {\n    var response = void 0;\n    try {\n      response = adapter.handleResponse(jqXHR.status, (0, _private.parseResponseHeaders)(jqXHR.getAllResponseHeaders()), payload, requestData);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    if (response && response.isAdapterError) {\n      return Promise.reject(response);\n    } else {\n      return response;\n    }\n  }\n\n  function ajaxError(adapter, jqXHR, requestData, responseData) {\n    if (true) {\n      var message = `The server returned an empty string for ${requestData.method} ${requestData.url}, which cannot be parsed into a valid JSON. Return either null or {}.`;\n      var validJSONString = !(responseData.textStatus === \"parsererror\" && jqXHR.responseText === \"\");\n      (true && Ember.warn(message, validJSONString, {\n        id: 'ds.adapter.returned-empty-string-as-JSON'\n      }));\n    }\n\n    var error = void 0;\n\n    if (responseData.errorThrown instanceof Error) {\n      error = responseData.errorThrown;\n    } else if (responseData.textStatus === 'timeout') {\n      error = new _private.TimeoutError();\n    } else if (responseData.textStatus === 'abort' || jqXHR.status === 0) {\n      error = new _private.AbortError();\n    } else {\n      try {\n        error = adapter.handleResponse(jqXHR.status, (0, _private.parseResponseHeaders)(jqXHR.getAllResponseHeaders()), adapter.parseErrorResponse(jqXHR.responseText) || responseData.errorThrown, requestData);\n      } catch (e) {\n        error = e;\n      }\n    }\n\n    return error;\n  }\n\n  //From http://stackoverflow.com/questions/280634/endswith-in-javascript\n  function endsWith(string, suffix) {\n    if (typeof String.prototype.endsWith !== 'function') {\n      return string.indexOf(suffix, string.length - suffix.length) !== -1;\n    } else {\n      return string.endsWith(suffix);\n    }\n  }\n\n  exports.default = RESTAdapter;\n});","define('ember-data/attr', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = attr;\n\n\n  /**\n    @module ember-data\n  */\n\n  function getDefaultValue(record, options, key) {\n    if (typeof options.defaultValue === 'function') {\n      return options.defaultValue.apply(null, arguments);\n    } else {\n      var defaultValue = options.defaultValue;\n      (true && !(typeof defaultValue !== 'object' || defaultValue === null) && Ember.assert(`Non primitive defaultValues are not supported because they are shared between all instances. If you would like to use a complex object as a default value please provide a function that returns the complex object.`, typeof defaultValue !== 'object' || defaultValue === null));\n\n      return defaultValue;\n    }\n  }\n\n  function hasValue(record, key) {\n    return key in record._attributes || key in record._inFlightAttributes || key in record._data;\n  }\n\n  function getValue(record, key) {\n    if (key in record._attributes) {\n      return record._attributes[key];\n    } else if (key in record._inFlightAttributes) {\n      return record._inFlightAttributes[key];\n    } else {\n      return record._data[key];\n    }\n  }\n\n  /**\n    `DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).\n    By default, attributes are passed through as-is, however you can specify an\n    optional type to have the value automatically transformed.\n    Ember Data ships with four basic transform types: `string`, `number`,\n    `boolean` and `date`. You can define your own transforms by subclassing\n    [DS.Transform](/api/data/classes/DS.Transform.html).\n  \n    Note that you cannot use `attr` to define an attribute of `id`.\n  \n    `DS.attr` takes an optional hash as a second parameter, currently\n    supported options are:\n  \n    - `defaultValue`: Pass a string or a function to be called to set the attribute\n                      to a default value if none is supplied.\n  \n    Example\n  \n    ```app/models/user.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      username: DS.attr('string'),\n      email: DS.attr('string'),\n      verified: DS.attr('boolean', { defaultValue: false })\n    });\n    ```\n  \n    Default value can also be a function. This is useful it you want to return\n    a new object for each attribute.\n  \n    ```app/models/user.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      username: DS.attr('string'),\n      email: DS.attr('string'),\n      settings: DS.attr({\n        defaultValue() {\n          return {};\n        }\n      })\n    });\n    ```\n  \n    The `options` hash is passed as second argument to a transforms'\n    `serialize` and `deserialize` method. This allows to configure a\n    transformation and adapt the corresponding value, based on the config:\n  \n    ```app/models/post.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      text: DS.attr('text', {\n        uppercase: true\n      })\n    });\n    ```\n  \n    ```app/transforms/text.js\n    import DS from 'ember-data';\n  \n    export default DS.Transform.extend({\n      serialize(value, options) {\n        if (options.uppercase) {\n          return value.toUpperCase();\n        }\n  \n        return value;\n      },\n  \n      deserialize(value) {\n        return value;\n      }\n    })\n    ```\n  \n    @namespace\n    @method attr\n    @for DS\n    @param {String|Object} type the attribute type\n    @param {Object} options a hash of options\n    @return {Attribute}\n  */\n\n  function attr(type, options) {\n    if (typeof type === 'object') {\n      options = type;\n      type = undefined;\n    } else {\n      options = options || {};\n    }\n\n    var meta = {\n      type: type,\n      isAttribute: true,\n      options: options\n    };\n\n    return Ember.computed({\n      get(key) {\n        var internalModel = this._internalModel;\n        if (hasValue(internalModel, key)) {\n          return getValue(internalModel, key);\n        } else {\n          return getDefaultValue(this, options, key);\n        }\n      },\n      set(key, value) {\n        var internalModel = this._internalModel;\n        var oldValue = getValue(internalModel, key);\n        var originalValue = void 0;\n\n        if (value !== oldValue) {\n          // Add the new value to the changed attributes hash; it will get deleted by\n          // the 'didSetProperty' handler if it is no different from the original value\n          internalModel._attributes[key] = value;\n\n          if (key in internalModel._inFlightAttributes) {\n            originalValue = internalModel._inFlightAttributes[key];\n          } else {\n            originalValue = internalModel._data[key];\n          }\n\n          this._internalModel.send('didSetProperty', {\n            name: key,\n            oldValue: oldValue,\n            originalValue: originalValue,\n            value: value\n          });\n        }\n\n        return value;\n      }\n    }).meta(meta);\n  }\n});","define(\"ember-data/index\", [\"exports\", \"ember-data/-private\", \"ember-data/setup-container\", \"ember-data/initialize-store-service\", \"ember-data/transforms/transform\", \"ember-data/transforms/number\", \"ember-data/transforms/date\", \"ember-data/transforms/string\", \"ember-data/transforms/boolean\", \"ember-data/adapter\", \"ember-data/adapters/json-api\", \"ember-data/adapters/rest\", \"ember-data/serializer\", \"ember-data/serializers/json-api\", \"ember-data/serializers/json\", \"ember-data/serializers/rest\", \"ember-data/serializers/embedded-records-mixin\", \"ember-data/attr\", \"ember-inflector\"], function (exports, _private, _setupContainer, _initializeStoreService, _transform, _number, _date, _string, _boolean, _adapter, _jsonApi, _rest, _serializer, _jsonApi2, _json, _rest2, _embeddedRecordsMixin, _attr) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  /**\n    Ember Data\n    @module ember-data\n    @main ember-data\n  */\n\n  if (Ember.VERSION.match(/^1\\.([0-9]|1[0-2])\\./)) {\n    throw new Ember.Error(\"Ember Data requires at least Ember 1.13.0, but you have \" + Ember.VERSION + \". Please upgrade your version of Ember, then upgrade Ember Data.\");\n  }\n\n  _private.DS.Store = _private.Store;\n  _private.DS.PromiseArray = _private.PromiseArray;\n  _private.DS.PromiseObject = _private.PromiseObject;\n\n  _private.DS.PromiseManyArray = _private.PromiseManyArray;\n\n  _private.DS.Model = _private.Model;\n  _private.DS.RootState = _private.RootState;\n  _private.DS.attr = _attr.default;\n  _private.DS.Errors = _private.Errors;\n\n  _private.DS.InternalModel = _private.InternalModel;\n  _private.DS.Snapshot = _private.Snapshot;\n\n  _private.DS.Adapter = _adapter.default;\n\n  _private.DS.AdapterError = _private.AdapterError;\n  _private.DS.InvalidError = _private.InvalidError;\n  _private.DS.TimeoutError = _private.TimeoutError;\n  _private.DS.AbortError = _private.AbortError;\n\n  _private.DS.UnauthorizedError = _private.UnauthorizedError;\n  _private.DS.ForbiddenError = _private.ForbiddenError;\n  _private.DS.NotFoundError = _private.NotFoundError;\n  _private.DS.ConflictError = _private.ConflictError;\n  _private.DS.ServerError = _private.ServerError;\n\n  _private.DS.errorsHashToArray = _private.errorsHashToArray;\n  _private.DS.errorsArrayToHash = _private.errorsArrayToHash;\n\n  _private.DS.Serializer = _serializer.default;\n\n  _private.DS.DebugAdapter = _private.DebugAdapter;\n\n  _private.DS.RecordArray = _private.RecordArray;\n  _private.DS.FilteredRecordArray = _private.FilteredRecordArray;\n  _private.DS.AdapterPopulatedRecordArray = _private.AdapterPopulatedRecordArray;\n  _private.DS.ManyArray = _private.ManyArray;\n\n  _private.DS.RecordArrayManager = _private.RecordArrayManager;\n\n  _private.DS.RESTAdapter = _rest.default;\n  _private.DS.BuildURLMixin = _private.BuildURLMixin;\n\n  _private.DS.RESTSerializer = _rest2.default;\n  _private.DS.JSONSerializer = _json.default;\n\n  _private.DS.JSONAPIAdapter = _jsonApi.default;\n  _private.DS.JSONAPISerializer = _jsonApi2.default;\n\n  _private.DS.Transform = _transform.default;\n  _private.DS.DateTransform = _date.default;\n  _private.DS.StringTransform = _string.default;\n  _private.DS.NumberTransform = _number.default;\n  _private.DS.BooleanTransform = _boolean.default;\n\n  _private.DS.EmbeddedRecordsMixin = _embeddedRecordsMixin.default;\n\n  _private.DS.belongsTo = _private.belongsTo;\n  _private.DS.hasMany = _private.hasMany;\n\n  _private.DS.Relationship = _private.Relationship;\n\n  _private.DS._setupContainer = _setupContainer.default;\n  _private.DS._initializeStoreService = _initializeStoreService.default;\n\n  Object.defineProperty(_private.DS, 'normalizeModelName', {\n    enumerable: true,\n    writable: false,\n    configurable: false,\n    value: _private.normalizeModelName\n  });\n\n  exports.default = _private.DS;\n});","define('ember-data/initialize-store-service', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = initializeStoreService;\n  /*\n    Configures a registry for use with an Ember-Data\n    store.\n  \n    @method initializeStoreService\n    @param {Ember.ApplicationInstance | Ember.EngineInstance} instance\n  */\n  function initializeStoreService(instance) {\n    // instance.lookup supports Ember 2.1 and higher\n    // instance.container supports Ember 1.11 - 2.0\n    var container = instance.lookup ? instance : instance.container;\n\n    // Eagerly generate the store so defaultStore is populated.\n    container.lookup('service:store');\n  }\n});","define('ember-data/model', ['exports', 'ember-data/-private'], function (exports, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _private.Model;\n    }\n  });\n});","define('ember-data/relationships', ['exports', 'ember-data/-private'], function (exports, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'belongsTo', {\n    enumerable: true,\n    get: function () {\n      return _private.belongsTo;\n    }\n  });\n  Object.defineProperty(exports, 'hasMany', {\n    enumerable: true,\n    get: function () {\n      return _private.hasMany;\n    }\n  });\n});","define('ember-data/serializer', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Object.extend({\n\n    /**\n      The `store` property is the application's `store` that contains\n      all records. It can be used to look up serializers for other model\n      types that may be nested inside the payload response.\n       Example:\n       ```js\n      Serializer.extend({\n        extractRelationship(relationshipModelName, relationshipHash) {\n          var modelClass = this.store.modelFor(relationshipModelName);\n          var relationshipSerializer = this.store.serializerFor(relationshipModelName);\n          return relationshipSerializer.normalize(modelClass, relationshipHash);\n        }\n      });\n      ```\n       @property store\n      @type {DS.Store}\n      @public\n    */\n\n    /**\n      The `normalizeResponse` method is used to normalize a payload from the\n      server to a JSON-API Document.\n       http://jsonapi.org/format/#document-structure\n       Example:\n       ```js\n      Serializer.extend({\n        normalizeResponse(store, primaryModelClass, payload, id, requestType) {\n          if (requestType === 'findRecord') {\n            return this.normalize(primaryModelClass, payload);\n          } else {\n            return payload.reduce(function(documentHash, item) {\n              let { data, included } = this.normalize(primaryModelClass, item);\n              documentHash.included.push(...included);\n              documentHash.data.push(data);\n              return documentHash;\n            }, { data: [], included: [] })\n          }\n        }\n      });\n      ```\n       @since 1.13.0\n      @method normalizeResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeResponse: null,\n\n    /**\n      The `serialize` method is used when a record is saved in order to convert\n      the record into the form that your external data source expects.\n       `serialize` takes an optional `options` hash with a single option:\n       - `includeId`: If this is `true`, `serialize` should include the ID\n        in the serialized object it builds.\n       Example:\n       ```js\n      Serializer.extend({\n        serialize(snapshot, options) {\n          var json = {\n            id: snapshot.id\n          };\n           snapshot.eachAttribute((key, attribute) => {\n            json[key] = snapshot.attr(key);\n          });\n           snapshot.eachRelationship((key, relationship) => {\n            if (relationship.kind === 'belongsTo') {\n              json[key] = snapshot.belongsTo(key, { id: true });\n            } else if (relationship.kind === 'hasMany') {\n              json[key] = snapshot.hasMany(key, { ids: true });\n            }\n          });\n           return json;\n        },\n      });\n      ```\n       @method serialize\n      @param {DS.Snapshot} snapshot\n      @param {Object} [options]\n      @return {Object}\n    */\n    serialize: null,\n\n    /**\n      The `normalize` method is used to convert a payload received from your\n      external data source into the normalized form `store.push()` expects. You\n      should override this method, munge the hash and return the normalized\n      payload.\n       Example:\n       ```js\n      Serializer.extend({\n        normalize(modelClass, resourceHash) {\n          var data = {\n            id:            resourceHash.id,\n            type:          modelClass.modelName,\n            attributes:    resourceHash\n          };\n          return { data: data };\n        }\n      })\n      ```\n       @method normalize\n      @param {DS.Model} typeClass\n      @param {Object} hash\n      @return {Object}\n    */\n    normalize(typeClass, hash) {\n      return hash;\n    }\n\n  });\n});","define('ember-data/serializers/embedded-records-mixin', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Mixin.create({\n\n    /**\n      Normalize the record and recursively normalize/extract all the embedded records\n      while pushing them into the store as they are encountered\n       A payload with an attr configured for embedded records needs to be extracted:\n       ```js\n      {\n        \"post\": {\n          \"id\": \"1\"\n          \"title\": \"Rails is omakase\",\n          \"comments\": [{\n            \"id\": \"1\",\n            \"body\": \"Rails is unagi\"\n          }, {\n            \"id\": \"2\",\n            \"body\": \"Omakase O_o\"\n          }]\n        }\n      }\n      ```\n     @method normalize\n     @param {DS.Model} typeClass\n     @param {Object} hash to be normalized\n     @param {String} prop the hash has been referenced by\n     @return {Object} the normalized hash\n    **/\n    normalize(typeClass, hash, prop) {\n      var normalizedHash = this._super(typeClass, hash, prop);\n      return this._extractEmbeddedRecords(this, this.store, typeClass, normalizedHash);\n    },\n\n    keyForRelationship(key, typeClass, method) {\n      if (method === 'serialize' && this.hasSerializeRecordsOption(key) || method === 'deserialize' && this.hasDeserializeRecordsOption(key)) {\n        return this.keyForAttribute(key, method);\n      } else {\n        return this._super(key, typeClass, method) || key;\n      }\n    },\n\n    /**\n      Serialize `belongsTo` relationship when it is configured as an embedded object.\n       This example of an author model belongs to a post model:\n       ```js\n      Post = DS.Model.extend({\n        title:    DS.attr('string'),\n        body:     DS.attr('string'),\n        author:   DS.belongsTo('author')\n      });\n       Author = DS.Model.extend({\n        name:     DS.attr('string'),\n        post:     DS.belongsTo('post')\n      });\n      ```\n       Use a custom (type) serializer for the post model to configure embedded author\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n        attrs: {\n          author: { embedded: 'always' }\n        }\n      })\n      ```\n       A payload with an attribute configured for embedded records can serialize\n      the records together under the root attribute's payload:\n       ```js\n      {\n        \"post\": {\n          \"id\": \"1\"\n          \"title\": \"Rails is omakase\",\n          \"author\": {\n            \"id\": \"2\"\n            \"name\": \"dhh\"\n          }\n        }\n      }\n      ```\n       @method serializeBelongsTo\n      @param {DS.Snapshot} snapshot\n      @param {Object} json\n      @param {Object} relationship\n    */\n    serializeBelongsTo(snapshot, json, relationship) {\n      var attr = relationship.key;\n      if (this.noSerializeOptionSpecified(attr)) {\n        this._super(snapshot, json, relationship);\n        return;\n      }\n      var includeIds = this.hasSerializeIdsOption(attr);\n      var includeRecords = this.hasSerializeRecordsOption(attr);\n      var embeddedSnapshot = snapshot.belongsTo(attr);\n      if (includeIds) {\n        var serializedKey = this._getMappedKey(relationship.key, snapshot.type);\n        if (serializedKey === relationship.key && this.keyForRelationship) {\n          serializedKey = this.keyForRelationship(relationship.key, relationship.kind, \"serialize\");\n        }\n\n        if (!embeddedSnapshot) {\n          json[serializedKey] = null;\n        } else {\n          json[serializedKey] = embeddedSnapshot.id;\n\n          if (relationship.options.polymorphic) {\n            this.serializePolymorphicType(snapshot, json, relationship);\n          }\n        }\n      } else if (includeRecords) {\n        this._serializeEmbeddedBelongsTo(snapshot, json, relationship);\n      }\n    },\n\n    _serializeEmbeddedBelongsTo(snapshot, json, relationship) {\n      var embeddedSnapshot = snapshot.belongsTo(relationship.key);\n      var serializedKey = this._getMappedKey(relationship.key, snapshot.type);\n      if (serializedKey === relationship.key && this.keyForRelationship) {\n        serializedKey = this.keyForRelationship(relationship.key, relationship.kind, \"serialize\");\n      }\n\n      if (!embeddedSnapshot) {\n        json[serializedKey] = null;\n      } else {\n        json[serializedKey] = embeddedSnapshot.serialize({ includeId: true });\n        this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json[serializedKey]);\n\n        if (relationship.options.polymorphic) {\n          this.serializePolymorphicType(snapshot, json, relationship);\n        }\n      }\n    },\n\n    /**\n      Serializes `hasMany` relationships when it is configured as embedded objects.\n       This example of a post model has many comments:\n       ```js\n      Post = DS.Model.extend({\n        title:    DS.attr('string'),\n        body:     DS.attr('string'),\n        comments: DS.hasMany('comment')\n      });\n       Comment = DS.Model.extend({\n        body:     DS.attr('string'),\n        post:     DS.belongsTo('post')\n      });\n      ```\n       Use a custom (type) serializer for the post model to configure embedded comments\n       ```app/serializers/post.js\n      import DS from 'ember-data;\n       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n        attrs: {\n          comments: { embedded: 'always' }\n        }\n      })\n      ```\n       A payload with an attribute configured for embedded records can serialize\n      the records together under the root attribute's payload:\n       ```js\n      {\n        \"post\": {\n          \"id\": \"1\"\n          \"title\": \"Rails is omakase\",\n          \"body\": \"I want this for my ORM, I want that for my template language...\"\n          \"comments\": [{\n            \"id\": \"1\",\n            \"body\": \"Rails is unagi\"\n          }, {\n            \"id\": \"2\",\n            \"body\": \"Omakase O_o\"\n          }]\n        }\n      }\n      ```\n       The attrs options object can use more specific instruction for extracting and\n      serializing. When serializing, an option to embed `ids`, `ids-and-types` or `records` can be set.\n      When extracting the only option is `records`.\n       So `{ embedded: 'always' }` is shorthand for:\n      `{ serialize: 'records', deserialize: 'records' }`\n       To embed the `ids` for a related object (using a hasMany relationship):\n       ```app/serializers/post.js\n      import DS from 'ember-data;\n       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n        attrs: {\n          comments: { serialize: 'ids', deserialize: 'records' }\n        }\n      })\n      ```\n       ```js\n      {\n        \"post\": {\n          \"id\": \"1\"\n          \"title\": \"Rails is omakase\",\n          \"body\": \"I want this for my ORM, I want that for my template language...\"\n          \"comments\": [\"1\", \"2\"]\n        }\n      }\n      ```\n       To embed the relationship as a collection of objects with `id` and `type` keys, set\n      `ids-and-types` for the related object.\n       This is particularly useful for polymorphic relationships where records don't share\n      the same table and the `id` is not enough information.\n       By example having a user that has many pets:\n       ```js\n      User = DS.Model.extend({\n        name:    DS.attr('string'),\n        pets: DS.hasMany('pet', { polymorphic: true })\n      });\n       Pet = DS.Model.extend({\n        name: DS.attr('string'),\n      });\n       Cat = Pet.extend({\n        // ...\n      });\n       Parrot = Pet.extend({\n        // ...\n      });\n      ```\n       ```app/serializers/user.js\n      import DS from 'ember-data;\n       export default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n        attrs: {\n          pets: { serialize: 'ids-and-types', deserialize: 'records' }\n        }\n      });\n      ```\n       ```js\n      {\n        \"user\": {\n          \"id\": \"1\"\n          \"name\": \"Bertin Osborne\",\n          \"pets\": [\n            { \"id\": \"1\", \"type\": \"Cat\" },\n            { \"id\": \"1\", \"type\": \"Parrot\"}\n          ]\n        }\n      }\n      ```\n       @method serializeHasMany\n      @param {DS.Snapshot} snapshot\n      @param {Object} json\n      @param {Object} relationship\n    */\n    serializeHasMany(snapshot, json, relationship) {\n      var attr = relationship.key;\n      if (this.noSerializeOptionSpecified(attr)) {\n        this._super(snapshot, json, relationship);\n        return;\n      }\n\n      if (this.hasSerializeIdsOption(attr)) {\n        var serializedKey = this._getMappedKey(relationship.key, snapshot.type);\n        if (serializedKey === relationship.key && this.keyForRelationship) {\n          serializedKey = this.keyForRelationship(relationship.key, relationship.kind, \"serialize\");\n        }\n\n        json[serializedKey] = snapshot.hasMany(attr, { ids: true });\n      } else if (this.hasSerializeRecordsOption(attr)) {\n        this._serializeEmbeddedHasMany(snapshot, json, relationship);\n      } else {\n        if (this.hasSerializeIdsAndTypesOption(attr)) {\n          this._serializeHasManyAsIdsAndTypes(snapshot, json, relationship);\n        }\n      }\n    },\n\n    /*\n      Serializes a hasMany relationship as an array of objects containing only `id` and `type`\n      keys.\n      This has its use case on polymorphic hasMany relationships where the server is not storing\n      all records in the same table using STI, and therefore the `id` is not enough information\n       TODO: Make the default in Ember-data 3.0??\n    */\n    _serializeHasManyAsIdsAndTypes(snapshot, json, relationship) {\n      var serializedKey = this.keyForAttribute(relationship.key, 'serialize');\n      var hasMany = snapshot.hasMany(relationship.key);\n\n      json[serializedKey] = Ember.A(hasMany).map(function (recordSnapshot) {\n        //\n        // I'm sure I'm being utterly naive here. Propably id is a configurate property and\n        // type too, and the modelName has to be normalized somehow.\n        //\n        return { id: recordSnapshot.id, type: recordSnapshot.modelName };\n      });\n    },\n\n    _serializeEmbeddedHasMany(snapshot, json, relationship) {\n      var serializedKey = this._getMappedKey(relationship.key, snapshot.type);\n      if (serializedKey === relationship.key && this.keyForRelationship) {\n        serializedKey = this.keyForRelationship(relationship.key, relationship.kind, \"serialize\");\n      }\n\n      (true && Ember.warn(`The embedded relationship '${serializedKey}' is undefined for '${snapshot.modelName}' with id '${snapshot.id}'. Please include it in your original payload.`, Ember.typeOf(snapshot.hasMany(relationship.key)) !== 'undefined', { id: 'ds.serializer.embedded-relationship-undefined' }));\n\n\n      json[serializedKey] = this._generateSerializedHasMany(snapshot, relationship);\n    },\n\n    /*\n      Returns an array of embedded records serialized to JSON\n    */\n    _generateSerializedHasMany(snapshot, relationship) {\n      var hasMany = snapshot.hasMany(relationship.key);\n      var manyArray = Ember.A(hasMany);\n      var ret = new Array(manyArray.length);\n\n      for (var i = 0; i < manyArray.length; i++) {\n        var embeddedSnapshot = manyArray[i];\n        var embeddedJson = embeddedSnapshot.serialize({ includeId: true });\n        this.removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, embeddedJson);\n        ret[i] = embeddedJson;\n      }\n\n      return ret;\n    },\n\n    /**\n      When serializing an embedded record, modify the property (in the json payload)\n      that refers to the parent record (foreign key for relationship).\n       Serializing a `belongsTo` relationship removes the property that refers to the\n      parent record\n       Serializing a `hasMany` relationship does not remove the property that refers to\n      the parent record.\n       @method removeEmbeddedForeignKey\n      @param {DS.Snapshot} snapshot\n      @param {DS.Snapshot} embeddedSnapshot\n      @param {Object} relationship\n      @param {Object} json\n    */\n    removeEmbeddedForeignKey(snapshot, embeddedSnapshot, relationship, json) {\n      if (relationship.kind === 'belongsTo') {\n        var parentRecord = snapshot.type.inverseFor(relationship.key, this.store);\n        if (parentRecord) {\n          var name = parentRecord.name;\n          var embeddedSerializer = this.store.serializerFor(embeddedSnapshot.modelName);\n          var parentKey = embeddedSerializer.keyForRelationship(name, parentRecord.kind, 'deserialize');\n          if (parentKey) {\n            delete json[parentKey];\n          }\n        }\n      } /*else if (relationship.kind === 'hasMany') {\n        return;\n        }*/\n    },\n\n    // checks config for attrs option to embedded (always) - serialize and deserialize\n    hasEmbeddedAlwaysOption(attr) {\n      var option = this.attrsOption(attr);\n      return option && option.embedded === 'always';\n    },\n\n    // checks config for attrs option to serialize ids\n    hasSerializeRecordsOption(attr) {\n      var alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);\n      var option = this.attrsOption(attr);\n      return alwaysEmbed || option && option.serialize === 'records';\n    },\n\n    // checks config for attrs option to serialize records\n    hasSerializeIdsOption(attr) {\n      var option = this.attrsOption(attr);\n      return option && (option.serialize === 'ids' || option.serialize === 'id');\n    },\n\n    // checks config for attrs option to serialize records as objects containing id and types\n    hasSerializeIdsAndTypesOption(attr) {\n      var option = this.attrsOption(attr);\n      return option && (option.serialize === 'ids-and-types' || option.serialize === 'id-and-type');\n    },\n\n    // checks config for attrs option to serialize records\n    noSerializeOptionSpecified(attr) {\n      var option = this.attrsOption(attr);\n      return !(option && (option.serialize || option.embedded));\n    },\n\n    // checks config for attrs option to deserialize records\n    // a defined option object for a resource is treated the same as\n    // `deserialize: 'records'`\n    hasDeserializeRecordsOption(attr) {\n      var alwaysEmbed = this.hasEmbeddedAlwaysOption(attr);\n      var option = this.attrsOption(attr);\n      return alwaysEmbed || option && option.deserialize === 'records';\n    },\n\n    attrsOption(attr) {\n      var attrs = this.get('attrs');\n      return attrs && (attrs[Ember.String.camelize(attr)] || attrs[attr]);\n    },\n\n    /**\n     @method _extractEmbeddedRecords\n     @private\n    */\n    _extractEmbeddedRecords(serializer, store, typeClass, partial) {\n      typeClass.eachRelationship((key, relationship) => {\n        if (serializer.hasDeserializeRecordsOption(key)) {\n          if (relationship.kind === \"hasMany\") {\n            this._extractEmbeddedHasMany(store, key, partial, relationship);\n          }\n          if (relationship.kind === \"belongsTo\") {\n            this._extractEmbeddedBelongsTo(store, key, partial, relationship);\n          }\n        }\n      });\n      return partial;\n    },\n\n    /**\n     @method _extractEmbeddedHasMany\n     @private\n    */\n    _extractEmbeddedHasMany(store, key, hash, relationshipMeta) {\n      var relationshipHash = Ember.get(hash, `data.relationships.${key}.data`);\n\n      if (!relationshipHash) {\n        return;\n      }\n\n      var hasMany = new Array(relationshipHash.length);\n\n      for (var i = 0; i < relationshipHash.length; i++) {\n        var item = relationshipHash[i];\n        var { data, included } = this._normalizeEmbeddedRelationship(store, relationshipMeta, item);\n        hash.included = hash.included || [];\n        hash.included.push(data);\n        if (included) {\n          hash.included.push(...included);\n        }\n\n        hasMany[i] = { id: data.id, type: data.type };\n      }\n\n      var relationship = { data: hasMany };\n      Ember.set(hash, `data.relationships.${key}`, relationship);\n    },\n\n    /**\n     @method _extractEmbeddedBelongsTo\n     @private\n    */\n    _extractEmbeddedBelongsTo(store, key, hash, relationshipMeta) {\n      var relationshipHash = Ember.get(hash, `data.relationships.${key}.data`);\n      if (!relationshipHash) {\n        return;\n      }\n\n      var { data, included } = this._normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash);\n      hash.included = hash.included || [];\n      hash.included.push(data);\n      if (included) {\n        hash.included.push(...included);\n      }\n\n      var belongsTo = { id: data.id, type: data.type };\n      var relationship = { data: belongsTo };\n\n      Ember.set(hash, `data.relationships.${key}`, relationship);\n    },\n\n    /**\n     @method _normalizeEmbeddedRelationship\n     @private\n    */\n    _normalizeEmbeddedRelationship(store, relationshipMeta, relationshipHash) {\n      var modelName = relationshipMeta.type;\n      if (relationshipMeta.options.polymorphic) {\n        modelName = relationshipHash.type;\n      }\n      var modelClass = store.modelFor(modelName);\n      var serializer = store.serializerFor(modelName);\n\n      return serializer.normalize(modelClass, relationshipHash, null);\n    },\n    isEmbeddedRecordsMixin: true\n  });\n});","define('ember-data/serializers/json-api', ['exports', 'ember-inflector', 'ember-data/serializers/json', 'ember-data/-private'], function (exports, _emberInflector, _json, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  /**\n    Ember Data 2.0 Serializer:\n  \n    In Ember Data a Serializer is used to serialize and deserialize\n    records when they are transferred in and out of an external source.\n    This process involves normalizing property names, transforming\n    attribute values and serializing relationships.\n  \n    `JSONAPISerializer` supports the http://jsonapi.org/ spec and is the\n    serializer recommended by Ember Data.\n  \n    This serializer normalizes a JSON API payload that looks like:\n  \n    ```app/models/player.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      name: DS.attr('string'),\n      skill: DS.attr('string'),\n      gamesPlayed: DS.attr('number'),\n      club: DS.belongsTo('club')\n    });\n    ```\n  \n    ```app/models/club.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      name: DS.attr('string'),\n      location: DS.attr('string'),\n      players: DS.hasMany('player')\n    });\n    ```\n  \n    ```js\n      {\n        \"data\": [\n          {\n            \"attributes\": {\n              \"name\": \"Benfica\",\n              \"location\": \"Portugal\"\n            },\n            \"id\": \"1\",\n            \"relationships\": {\n              \"players\": {\n                \"data\": [\n                  {\n                    \"id\": \"3\",\n                    \"type\": \"players\"\n                  }\n                ]\n              }\n            },\n            \"type\": \"clubs\"\n          }\n        ],\n        \"included\": [\n          {\n            \"attributes\": {\n              \"name\": \"Eusebio Silva Ferreira\",\n              \"skill\": \"Rocket shot\",\n              \"games-played\": 431\n            },\n            \"id\": \"3\",\n            \"relationships\": {\n              \"club\": {\n                \"data\": {\n                  \"id\": \"1\",\n                  \"type\": \"clubs\"\n                }\n              }\n            },\n            \"type\": \"players\"\n          }\n        ]\n      }\n    ```\n  \n    to the format that the Ember Data store expects.\n  \n    ### Customizing meta\n  \n    Since a JSON API Document can have meta defined in multiple locations you can\n    use the specific serializer hooks if you need to customize the meta.\n  \n    One scenario would be to camelCase the meta keys of your payload. The example\n    below shows how this could be done using `normalizeArrayResponse` and\n    `extractRelationship`.\n  \n    ```app/serializers/application.js\n    export default JSONAPISerializer.extend({\n      normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {\n        let normalizedDocument = this._super(...arguments);\n  \n        // Customize document meta\n        normalizedDocument.meta = camelCaseKeys(normalizedDocument.meta);\n  \n        return normalizedDocument;\n      },\n  \n      extractRelationship(relationshipHash) {\n        let normalizedRelationship = this._super(...arguments);\n  \n        // Customize relationship meta\n        normalizedRelationship.meta = camelCaseKeys(normalizedRelationship.meta);\n  \n        return normalizedRelationship;\n      }\n    });\n    ```\n  \n    @since 1.13.0\n    @class JSONAPISerializer\n    @namespace DS\n    @extends DS.JSONSerializer\n  */\n  var JSONAPISerializer = _json.default.extend({\n\n    /**\n      @method _normalizeDocumentHelper\n      @param {Object} documentHash\n      @return {Object}\n      @private\n    */\n    _normalizeDocumentHelper(documentHash) {\n\n      if (Ember.typeOf(documentHash.data) === 'object') {\n        documentHash.data = this._normalizeResourceHelper(documentHash.data);\n      } else if (Array.isArray(documentHash.data)) {\n        var ret = new Array(documentHash.data.length);\n\n        for (var i = 0; i < documentHash.data.length; i++) {\n          var data = documentHash.data[i];\n          ret[i] = this._normalizeResourceHelper(data);\n        }\n\n        documentHash.data = ret;\n      }\n\n      if (Array.isArray(documentHash.included)) {\n        var _ret = new Array();\n        for (var _i = 0; _i < documentHash.included.length; _i++) {\n          var included = documentHash.included[_i];\n          var normalized = this._normalizeResourceHelper(included);\n          if (normalized !== null) {\n            // can be null when unknown type is encountered\n            _ret.push(normalized);\n          }\n        }\n\n        documentHash.included = _ret;\n      }\n\n      return documentHash;\n    },\n\n    /**\n      @method _normalizeRelationshipDataHelper\n      @param {Object} relationshipDataHash\n      @return {Object}\n      @private\n    */\n    _normalizeRelationshipDataHelper(relationshipDataHash) {\n      if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n        var modelName = this.modelNameFromPayloadType(relationshipDataHash.type);\n        var deprecatedModelNameLookup = this.modelNameFromPayloadKey(relationshipDataHash.type);\n\n        if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {\n          (true && !(false) && Ember.deprecate(\"You are using modelNameFromPayloadKey to normalize the type for a relationship. This has been deprecated in favor of modelNameFromPayloadType\", false, {\n            id: 'ds.json-api-serializer.deprecated-model-name-for-relationship',\n            until: '4.0.0'\n          }));\n\n\n          modelName = deprecatedModelNameLookup;\n        }\n\n        relationshipDataHash.type = modelName;\n      } else {\n        relationshipDataHash.type = this.modelNameFromPayloadKey(relationshipDataHash.type);\n      }\n\n      return relationshipDataHash;\n    },\n\n    /**\n      @method _normalizeResourceHelper\n      @param {Object} resourceHash\n      @return {Object}\n      @private\n    */\n    _normalizeResourceHelper(resourceHash) {\n      (true && !(!Ember.isNone(resourceHash.type)) && Ember.assert(this.warnMessageForUndefinedType(), !Ember.isNone(resourceHash.type), {\n        id: 'ds.serializer.type-is-undefined'\n      }));\n\n\n      var modelName = void 0,\n          usedLookup = void 0;\n\n      if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n        modelName = this.modelNameFromPayloadType(resourceHash.type);\n        var deprecatedModelNameLookup = this.modelNameFromPayloadKey(resourceHash.type);\n\n        usedLookup = 'modelNameFromPayloadType';\n\n        if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {\n          (true && !(false) && Ember.deprecate(\"You are using modelNameFromPayloadKey to normalize the type for a resource. This has been deprecated in favor of modelNameFromPayloadType\", false, {\n            id: 'ds.json-api-serializer.deprecated-model-name-for-resource',\n            until: '4.0.0'\n          }));\n\n\n          modelName = deprecatedModelNameLookup;\n          usedLookup = 'modelNameFromPayloadKey';\n        }\n      } else {\n        modelName = this.modelNameFromPayloadKey(resourceHash.type);\n        usedLookup = 'modelNameFromPayloadKey';\n      }\n\n      if (!this.store._hasModelFor(modelName)) {\n        (true && Ember.warn(this.warnMessageNoModelForType(modelName, resourceHash.type, usedLookup), false, {\n          id: 'ds.serializer.model-for-type-missing'\n        }));\n\n        return null;\n      }\n\n      var modelClass = this.store._modelFor(modelName);\n      var serializer = this.store.serializerFor(modelName);\n      var { data } = serializer.normalize(modelClass, resourceHash);\n      return data;\n    },\n\n    /**\n      @method pushPayload\n      @param {DS.Store} store\n      @param {Object} payload\n    */\n    pushPayload(store, payload) {\n      var normalizedPayload = this._normalizeDocumentHelper(payload);\n      if ((0, _private.isEnabled)('ds-pushpayload-return')) {\n        return store.push(normalizedPayload);\n      } else {\n        store.push(normalizedPayload);\n      }\n    },\n\n    /**\n      @method _normalizeResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @param {Boolean} isSingle\n      @return {Object} JSON-API Document\n      @private\n    */\n    _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {\n      var normalizedPayload = this._normalizeDocumentHelper(payload);\n      return normalizedPayload;\n    },\n\n    normalizeQueryRecordResponse() {\n      var normalized = this._super(...arguments);\n\n      (true && !(!Array.isArray(normalized.data)) && Ember.assert('Expected the primary data returned by the serializer for a `queryRecord` response to be a single object but instead it was an array.', !Array.isArray(normalized.data), {\n        id: 'ds.serializer.json-api.queryRecord-array-response'\n      }));\n\n\n      return normalized;\n    },\n\n    extractAttributes(modelClass, resourceHash) {\n      var attributes = {};\n\n      if (resourceHash.attributes) {\n        modelClass.eachAttribute(key => {\n          var attributeKey = this.keyForAttribute(key, 'deserialize');\n          if (resourceHash.attributes[attributeKey] !== undefined) {\n            attributes[key] = resourceHash.attributes[attributeKey];\n          }\n          if (true) {\n            if (resourceHash.attributes[attributeKey] === undefined && resourceHash.attributes[key] !== undefined) {\n              (true && !(false) && Ember.assert(`Your payload for '${modelClass.modelName}' contains '${key}', but your serializer is setup to look for '${attributeKey}'. This is most likely because Ember Data's JSON API serializer dasherizes attribute keys by default. You should subclass JSONAPISerializer and implement 'keyForAttribute(key) { return key; }' to prevent Ember Data from customizing your attribute keys.`, false));\n            }\n          }\n        });\n      }\n\n      return attributes;\n    },\n\n    /**\n       Returns a relationship formatted as a JSON-API \"relationship object\".\n        http://jsonapi.org/format/#document-resource-object-relationships\n        @method extractRelationship\n       @param {Object} relationshipHash\n       @return {Object}\n    */\n    extractRelationship(relationshipHash) {\n\n      if (Ember.typeOf(relationshipHash.data) === 'object') {\n        relationshipHash.data = this._normalizeRelationshipDataHelper(relationshipHash.data);\n      }\n\n      if (Array.isArray(relationshipHash.data)) {\n        var ret = new Array(relationshipHash.data.length);\n\n        for (var i = 0; i < relationshipHash.data.length; i++) {\n          var data = relationshipHash.data[i];\n          ret[i] = this._normalizeRelationshipDataHelper(data);\n        }\n\n        relationshipHash.data = ret;\n      }\n\n      return relationshipHash;\n    },\n\n    /**\n       Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n        http://jsonapi.org/format/#document-resource-object-relationships\n        @method extractRelationships\n       @param {Object} modelClass\n       @param {Object} resourceHash\n       @return {Object}\n    */\n    extractRelationships(modelClass, resourceHash) {\n      var relationships = {};\n\n      if (resourceHash.relationships) {\n        modelClass.eachRelationship((key, relationshipMeta) => {\n          var relationshipKey = this.keyForRelationship(key, relationshipMeta.kind, 'deserialize');\n          if (resourceHash.relationships[relationshipKey] !== undefined) {\n\n            var relationshipHash = resourceHash.relationships[relationshipKey];\n            relationships[key] = this.extractRelationship(relationshipHash);\n          }\n          if (true) {\n            if (resourceHash.relationships[relationshipKey] === undefined && resourceHash.relationships[key] !== undefined) {\n              (true && !(false) && Ember.assert(`Your payload for '${modelClass.modelName}' contains '${key}', but your serializer is setup to look for '${relationshipKey}'. This is most likely because Ember Data's JSON API serializer dasherizes relationship keys by default. You should subclass JSONAPISerializer and implement 'keyForRelationship(key) { return key; }' to prevent Ember Data from customizing your relationship keys.`, false));\n            }\n          }\n        });\n      }\n\n      return relationships;\n    },\n\n    /**\n      @method _extractType\n      @param {DS.Model} modelClass\n      @param {Object} resourceHash\n      @return {String}\n      @private\n    */\n    _extractType(modelClass, resourceHash) {\n      if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n        var modelName = this.modelNameFromPayloadType(resourceHash.type);\n        var deprecatedModelNameLookup = this.modelNameFromPayloadKey(resourceHash.type);\n\n        if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {\n          (true && !(false) && Ember.deprecate(\"You are using modelNameFromPayloadKey to normalize the type for a polymorphic relationship. This has been deprecated in favor of modelNameFromPayloadType\", false, {\n            id: 'ds.json-api-serializer.deprecated-model-name-for-polymorphic-type',\n            until: '3.0.0'\n          }));\n\n\n          modelName = deprecatedModelNameLookup;\n        }\n\n        return modelName;\n      } else {\n        return this.modelNameFromPayloadKey(resourceHash.type);\n      }\n    },\n\n    /**\n      Dasherizes and singularizes the model name in the payload to match\n      the format Ember Data uses internally for the model name.\n       For example the key `posts` would be converted to `post` and the\n      key `studentAssesments` would be converted to `student-assesment`.\n       @method modelNameFromPayloadKey\n      @param {String} key\n      @return {String} the model's modelName\n    */\n    // TODO @deprecated Use modelNameFromPayloadType instead\n    modelNameFromPayloadKey(key) {\n      return (0, _emberInflector.singularize)((0, _private.normalizeModelName)(key));\n    },\n\n    /**\n      Converts the model name to a pluralized version of the model name.\n       For example `post` would be converted to `posts` and\n      `student-assesment` would be converted to `student-assesments`.\n       @method payloadKeyFromModelName\n      @param {String} modelName\n      @return {String}\n    */\n    // TODO @deprecated Use payloadTypeFromModelName instead\n    payloadKeyFromModelName(modelName) {\n      return (0, _emberInflector.pluralize)(modelName);\n    },\n\n    normalize(modelClass, resourceHash) {\n      if (resourceHash.attributes) {\n        this.normalizeUsingDeclaredMapping(modelClass, resourceHash.attributes);\n      }\n\n      if (resourceHash.relationships) {\n        this.normalizeUsingDeclaredMapping(modelClass, resourceHash.relationships);\n      }\n\n      var data = {\n        id: this.extractId(modelClass, resourceHash),\n        type: this._extractType(modelClass, resourceHash),\n        attributes: this.extractAttributes(modelClass, resourceHash),\n        relationships: this.extractRelationships(modelClass, resourceHash)\n      };\n\n      this.applyTransforms(modelClass, data.attributes);\n\n      return { data };\n    },\n\n    /**\n      `keyForAttribute` can be used to define rules for how to convert an\n      attribute name in your model to a key in your JSON.\n      By default `JSONAPISerializer` follows the format used on the examples of\n      http://jsonapi.org/format and uses dashes as the word separator in the JSON\n      attribute keys.\n       This behaviour can be easily customized by extending this method.\n       Example\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { dasherize } from '@ember/string';\n       export default DS.JSONAPISerializer.extend({\n        keyForAttribute(attr, method) {\n          return dasherize(attr).toUpperCase();\n        }\n      });\n      ```\n       @method keyForAttribute\n      @param {String} key\n      @param {String} method\n      @return {String} normalized key\n    */\n    keyForAttribute(key, method) {\n      return Ember.String.dasherize(key);\n    },\n\n    /**\n     `keyForRelationship` can be used to define a custom key when\n     serializing and deserializing relationship properties.\n     By default `JSONAPISerializer` follows the format used on the examples of\n     http://jsonapi.org/format and uses dashes as word separators in\n     relationship properties.\n      This behaviour can be easily customized by extending this method.\n      Example\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n      import { underscore } from '@ember/string';\n       export default DS.JSONAPISerializer.extend({\n        keyForRelationship(key, relationship, method) {\n          return underscore(key);\n        }\n      });\n      ```\n     @method keyForRelationship\n     @param {String} key\n     @param {String} typeClass\n     @param {String} method\n     @return {String} normalized key\n    */\n    keyForRelationship(key, typeClass, method) {\n      return Ember.String.dasherize(key);\n    },\n\n    serialize(snapshot, options) {\n      var data = this._super(...arguments);\n\n      var payloadType = void 0;\n      if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n        payloadType = this.payloadTypeFromModelName(snapshot.modelName);\n        var deprecatedPayloadTypeLookup = this.payloadKeyFromModelName(snapshot.modelName);\n\n        if (payloadType !== deprecatedPayloadTypeLookup && this._hasCustomPayloadKeyFromModelName()) {\n          (true && !(false) && Ember.deprecate(\"You used payloadKeyFromModelName to customize how a type is serialized. Use payloadTypeFromModelName instead.\", false, {\n            id: 'ds.json-api-serializer.deprecated-payload-type-for-model',\n            until: '4.0.0'\n          }));\n\n\n          payloadType = deprecatedPayloadTypeLookup;\n        }\n      } else {\n        payloadType = this.payloadKeyFromModelName(snapshot.modelName);\n      }\n\n      data.type = payloadType;\n      return { data };\n    },\n\n    serializeAttribute(snapshot, json, key, attribute) {\n      var type = attribute.type;\n\n      if (this._canSerialize(key)) {\n        json.attributes = json.attributes || {};\n\n        var value = snapshot.attr(key);\n        if (type) {\n          var transform = this.transformFor(type);\n          value = transform.serialize(value, attribute.options);\n        }\n\n        var payloadKey = this._getMappedKey(key, snapshot.type);\n\n        if (payloadKey === key) {\n          payloadKey = this.keyForAttribute(key, 'serialize');\n        }\n\n        json.attributes[payloadKey] = value;\n      }\n    },\n\n    serializeBelongsTo(snapshot, json, relationship) {\n      var key = relationship.key;\n\n      if (this._canSerialize(key)) {\n        var belongsTo = snapshot.belongsTo(key);\n        if (belongsTo !== undefined) {\n\n          json.relationships = json.relationships || {};\n\n          var payloadKey = this._getMappedKey(key, snapshot.type);\n          if (payloadKey === key) {\n            payloadKey = this.keyForRelationship(key, 'belongsTo', 'serialize');\n          }\n\n          var data = null;\n          if (belongsTo) {\n            var payloadType = void 0;\n\n            if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n              payloadType = this.payloadTypeFromModelName(belongsTo.modelName);\n              var deprecatedPayloadTypeLookup = this.payloadKeyFromModelName(belongsTo.modelName);\n\n              if (payloadType !== deprecatedPayloadTypeLookup && this._hasCustomPayloadKeyFromModelName()) {\n                (true && !(false) && Ember.deprecate(\"You used payloadKeyFromModelName to serialize type for belongs-to relationship. Use payloadTypeFromModelName instead.\", false, {\n                  id: 'ds.json-api-serializer.deprecated-payload-type-for-belongs-to',\n                  until: '4.0.0'\n                }));\n\n\n                payloadType = deprecatedPayloadTypeLookup;\n              }\n            } else {\n              payloadType = this.payloadKeyFromModelName(belongsTo.modelName);\n            }\n\n            data = {\n              type: payloadType,\n              id: belongsTo.id\n            };\n          }\n\n          json.relationships[payloadKey] = { data };\n        }\n      }\n    },\n\n    serializeHasMany(snapshot, json, relationship) {\n      var key = relationship.key;\n\n      if (this.shouldSerializeHasMany(snapshot, key, relationship)) {\n        var hasMany = snapshot.hasMany(key);\n        if (hasMany !== undefined) {\n\n          json.relationships = json.relationships || {};\n\n          var payloadKey = this._getMappedKey(key, snapshot.type);\n          if (payloadKey === key && this.keyForRelationship) {\n            payloadKey = this.keyForRelationship(key, 'hasMany', 'serialize');\n          }\n\n          var data = new Array(hasMany.length);\n\n          for (var i = 0; i < hasMany.length; i++) {\n            var item = hasMany[i];\n\n            var payloadType = void 0;\n\n            if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n              payloadType = this.payloadTypeFromModelName(item.modelName);\n              var deprecatedPayloadTypeLookup = this.payloadKeyFromModelName(item.modelName);\n\n              if (payloadType !== deprecatedPayloadTypeLookup && this._hasCustomPayloadKeyFromModelName()) {\n                (true && !(false) && Ember.deprecate(\"You used payloadKeyFromModelName to serialize type for belongs-to relationship. Use payloadTypeFromModelName instead.\", false, {\n                  id: 'ds.json-api-serializer.deprecated-payload-type-for-has-many',\n                  until: '4.0.0'\n                }));\n\n\n                payloadType = deprecatedPayloadTypeLookup;\n              }\n            } else {\n              payloadType = this.payloadKeyFromModelName(item.modelName);\n            }\n\n            data[i] = {\n              type: payloadType,\n              id: item.id\n            };\n          }\n\n          json.relationships[payloadKey] = { data };\n        }\n      }\n    }\n  }); /**\n        @module ember-data\n      */\n\n  if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n\n    JSONAPISerializer.reopen({\n\n      /**\n        `modelNameFromPayloadType` can be used to change the mapping for a DS model\n        name, taken from the value in the payload.\n         Say your API namespaces the type of a model and returns the following\n        payload for the `post` model:\n         ```javascript\n        // GET /api/posts/1\n        {\n          \"data\": {\n            \"id\": 1,\n            \"type: \"api::v1::post\"\n          }\n        }\n        ```\n         By overwriting `modelNameFromPayloadType` you can specify that the\n        `post` model should be used:\n         ```app/serializers/application.js\n        import DS from 'ember-data';\n         export default DS.JSONAPISerializer.extend({\n          modelNameFromPayloadType(payloadType) {\n            return payloadType.replace('api::v1::', '');\n          }\n        });\n        ```\n         By default the modelName for a model is its singularized name in dasherized\n        form.  Usually, Ember Data can use the correct inflection to do this for\n        you. Most of the time, you won't need to override\n        `modelNameFromPayloadType` for this purpose.\n         Also take a look at\n        [payloadTypeFromModelName](#method_payloadTypeFromModelName) to customize\n        how the type of a record should be serialized.\n         @method modelNameFromPayloadType\n        @public\n        @param {String} payloadType type from payload\n        @return {String} modelName\n      */\n      modelNameFromPayloadType(type) {\n        return (0, _emberInflector.singularize)((0, _private.normalizeModelName)(type));\n      },\n\n      /**\n        `payloadTypeFromModelName` can be used to change the mapping for the type in\n        the payload, taken from the model name.\n         Say your API namespaces the type of a model and expects the following\n        payload when you update the `post` model:\n         ```javascript\n        // POST /api/posts/1\n        {\n          \"data\": {\n            \"id\": 1,\n            \"type\": \"api::v1::post\"\n          }\n        }\n        ```\n         By overwriting `payloadTypeFromModelName` you can specify that the\n        namespaces model name for the `post` should be used:\n         ```app/serializers/application.js\n        import DS from 'ember-data';\n         export default JSONAPISerializer.extend({\n          payloadTypeFromModelName(modelName) {\n            return 'api::v1::' + modelName;\n          }\n        });\n        ```\n         By default the payload type is the pluralized model name. Usually, Ember\n        Data can use the correct inflection to do this for you. Most of the time,\n        you won't need to override `payloadTypeFromModelName` for this purpose.\n         Also take a look at\n        [modelNameFromPayloadType](#method_modelNameFromPayloadType) to customize\n        how the model name from should be mapped from the payload.\n         @method payloadTypeFromModelName\n        @public\n        @param {String} modelname modelName from the record\n        @return {String} payloadType\n      */\n      payloadTypeFromModelName(modelName) {\n        return (0, _emberInflector.pluralize)(modelName);\n      },\n\n      _hasCustomModelNameFromPayloadKey() {\n        return this.modelNameFromPayloadKey !== JSONAPISerializer.prototype.modelNameFromPayloadKey;\n      },\n\n      _hasCustomPayloadKeyFromModelName() {\n        return this.payloadKeyFromModelName !== JSONAPISerializer.prototype.payloadKeyFromModelName;\n      }\n\n    });\n  }\n\n  if (true) {\n    JSONAPISerializer.reopen({\n      willMergeMixin(props) {\n        var constructor = this.constructor;\n        (true && Ember.warn(`You've defined 'extractMeta' in ${constructor.toString()} which is not used for serializers extending JSONAPISerializer. Read more at https://emberjs.com/api/data/classes/DS.JSONAPISerializer.html#toc_customizing-meta on how to customize meta when using JSON API.`, Ember.isNone(props.extractMeta) || props.extractMeta === _json.default.prototype.extractMeta, {\n          id: 'ds.serializer.json-api.extractMeta'\n        }));\n        (true && Ember.warn('The JSONAPISerializer does not work with the EmbeddedRecordsMixin because the JSON API spec does not describe how to format embedded resources.', !props.isEmbeddedRecordsMixin, {\n          id: 'ds.serializer.embedded-records-mixin-not-supported'\n        }));\n      },\n      warnMessageForUndefinedType() {\n        return 'Encountered a resource object with an undefined type (resolved resource using ' + this.constructor.toString() + ')';\n      },\n      warnMessageNoModelForType(modelName, originalType, usedLookup) {\n        return `Encountered a resource object with type \"${originalType}\", but no model was found for model name \"${modelName}\" (resolved model name using '${this.constructor.toString()}.${usedLookup}(\"${originalType}\")').`;\n      }\n    });\n  }\n\n  exports.default = JSONAPISerializer;\n});","define('ember-data/serializers/json', ['exports', 'ember-data/serializer', 'ember-data/-private'], function (exports, _serializer, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var emberAssign = Ember.assign || Ember.merge;\n\n  /**\n    Ember Data 2.0 Serializer:\n  \n    In Ember Data a Serializer is used to serialize and deserialize\n    records when they are transferred in and out of an external source.\n    This process involves normalizing property names, transforming\n    attribute values and serializing relationships.\n  \n    By default, Ember Data uses and recommends the `JSONAPISerializer`.\n  \n    `JSONSerializer` is useful for simpler or legacy backends that may\n    not support the http://jsonapi.org/ spec.\n  \n    For example, given the following `User` model and JSON payload:\n  \n    ```app/models/user.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      friends: DS.hasMany('user'),\n      house: DS.belongsTo('location'),\n  \n      name: DS.attr('string')\n    });\n    ```\n  \n    ```js\n    {\n      id: 1,\n      name: 'Sebastian',\n      friends: [3, 4],\n      links: {\n        house: '/houses/lefkada'\n      }\n    }\n    ```\n  \n    `JSONSerializer` will normalize the JSON payload to the JSON API format that the\n    Ember Data store expects.\n  \n    You can customize how JSONSerializer processes its payload by passing options in\n    the `attrs` hash or by subclassing the `JSONSerializer` and overriding hooks:\n  \n      - To customize how a single record is normalized, use the `normalize` hook.\n      - To customize how `JSONSerializer` normalizes the whole server response, use the\n        `normalizeResponse` hook.\n      - To customize how `JSONSerializer` normalizes a specific response from the server,\n        use one of the many specific `normalizeResponse` hooks.\n      - To customize how `JSONSerializer` normalizes your id, attributes or relationships,\n        use the `extractId`, `extractAttributes` and `extractRelationships` hooks.\n  \n    The `JSONSerializer` normalization process follows these steps:\n  \n      - `normalizeResponse` - entry method to the serializer.\n      - `normalizeCreateRecordResponse` - a `normalizeResponse` for a specific operation is called.\n      - `normalizeSingleResponse`|`normalizeArrayResponse` - for methods like `createRecord` we expect\n        a single record back, while for methods like `findAll` we expect multiple records back.\n      - `normalize` - `normalizeArray` iterates and calls `normalize` for each of its records while `normalizeSingle`\n        calls it once. This is the method you most likely want to subclass.\n      - `extractId` | `extractAttributes` | `extractRelationships` - `normalize` delegates to these methods to\n        turn the record payload into the JSON API format.\n  \n    @class JSONSerializer\n    @namespace DS\n    @extends DS.Serializer\n  */\n  var JSONSerializer = _serializer.default.extend({\n\n    /**\n      The `primaryKey` is used when serializing and deserializing\n      data. Ember Data always uses the `id` property to store the id of\n      the record. The external source may not always follow this\n      convention. In these cases it is useful to override the\n      `primaryKey` property to match the `primaryKey` of your external\n      store.\n       Example\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        primaryKey: '_id'\n      });\n      ```\n       @property primaryKey\n      @type {String}\n      @default 'id'\n    */\n    primaryKey: 'id',\n\n    /**\n      The `attrs` object can be used to declare a simple mapping between\n      property names on `DS.Model` records and payload keys in the\n      serialized JSON object representing the record. An object with the\n      property `key` can also be used to designate the attribute's key on\n      the response payload.\n       Example\n       ```app/models/person.js\n      import DS from 'ember-data';\n       export default DS.Model.extend({\n        firstName: DS.attr('string'),\n        lastName: DS.attr('string'),\n        occupation: DS.attr('string'),\n        admin: DS.attr('boolean')\n      });\n      ```\n       ```app/serializers/person.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        attrs: {\n          admin: 'is_admin',\n          occupation: { key: 'career' }\n        }\n      });\n      ```\n       You can also remove attributes by setting the `serialize` key to\n      `false` in your mapping object.\n       Example\n       ```app/serializers/person.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        attrs: {\n          admin: { serialize: false },\n          occupation: { key: 'career' }\n        }\n      });\n      ```\n       When serialized:\n       ```javascript\n      {\n        \"firstName\": \"Harry\",\n        \"lastName\": \"Houdini\",\n        \"career\": \"magician\"\n      }\n      ```\n       Note that the `admin` is now not included in the payload.\n       @property attrs\n      @type {Object}\n    */\n    mergedProperties: ['attrs'],\n\n    /**\n     Given a subclass of `DS.Model` and a JSON object this method will\n     iterate through each attribute of the `DS.Model` and invoke the\n     `DS.Transform#deserialize` method on the matching property of the\n     JSON object.  This method is typically called after the\n     serializer's `normalize` method.\n      @method applyTransforms\n     @private\n     @param {DS.Model} typeClass\n     @param {Object} data The data to transform\n     @return {Object} data The transformed data object\n    */\n    applyTransforms(typeClass, data) {\n      var attributes = Ember.get(typeClass, 'attributes');\n\n      typeClass.eachTransformedAttribute((key, typeClass) => {\n        if (data[key] === undefined) {\n          return;\n        }\n\n        var transform = this.transformFor(typeClass);\n        var transformMeta = attributes.get(key);\n        data[key] = transform.deserialize(data[key], transformMeta.options);\n      });\n\n      return data;\n    },\n\n    /**\n      The `normalizeResponse` method is used to normalize a payload from the\n      server to a JSON-API Document.\n       http://jsonapi.org/format/#document-structure\n       This method delegates to a more specific normalize method based on\n      the `requestType`.\n       To override this method with a custom one, make sure to call\n      `return this._super(store, primaryModelClass, payload, id, requestType)` with your\n      pre-processed data.\n       Here's an example of using `normalizeResponse` manually:\n       ```javascript\n      socket.on('message', function(message) {\n        var data = message.data;\n        var modelClass = store.modelFor(data.modelName);\n        var serializer = store.serializerFor(data.modelName);\n        var normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);\n         store.push(normalized);\n      });\n      ```\n       @since 1.13.0\n      @method normalizeResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeResponse(store, primaryModelClass, payload, id, requestType) {\n      switch (requestType) {\n        case 'findRecord':\n          return this.normalizeFindRecordResponse(...arguments);\n        case 'queryRecord':\n          return this.normalizeQueryRecordResponse(...arguments);\n        case 'findAll':\n          return this.normalizeFindAllResponse(...arguments);\n        case 'findBelongsTo':\n          return this.normalizeFindBelongsToResponse(...arguments);\n        case 'findHasMany':\n          return this.normalizeFindHasManyResponse(...arguments);\n        case 'findMany':\n          return this.normalizeFindManyResponse(...arguments);\n        case 'query':\n          return this.normalizeQueryResponse(...arguments);\n        case 'createRecord':\n          return this.normalizeCreateRecordResponse(...arguments);\n        case 'deleteRecord':\n          return this.normalizeDeleteRecordResponse(...arguments);\n        case 'updateRecord':\n          return this.normalizeUpdateRecordResponse(...arguments);\n      }\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeFindRecordResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeFindRecordResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeSingleResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeQueryRecordResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeQueryRecordResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeSingleResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeFindAllResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeFindAllResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeArrayResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeFindBelongsToResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeFindBelongsToResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeSingleResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeFindHasManyResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeFindHasManyResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeArrayResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeFindManyResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeFindManyResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeArrayResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeQueryResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeQueryResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeArrayResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeCreateRecordResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeCreateRecordResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeSaveResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeDeleteRecordResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeDeleteRecordResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeSaveResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeUpdateRecordResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeUpdateRecordResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeSaveResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeSaveResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeSaveResponse(store, primaryModelClass, payload, id, requestType) {\n      return this.normalizeSingleResponse(...arguments);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeSingleResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeSingleResponse(store, primaryModelClass, payload, id, requestType) {\n      return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, true);\n    },\n\n    /**\n      @since 1.13.0\n      @method normalizeArrayResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @return {Object} JSON-API Document\n    */\n    normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {\n      return this._normalizeResponse(store, primaryModelClass, payload, id, requestType, false);\n    },\n\n    /**\n      @method _normalizeResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @param {Boolean} isSingle\n      @return {Object} JSON-API Document\n      @private\n    */\n    _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {\n      var documentHash = {\n        data: null,\n        included: []\n      };\n\n      var meta = this.extractMeta(store, primaryModelClass, payload);\n      if (meta) {\n        (true && !(Ember.typeOf(meta) === 'object') && Ember.assert('The `meta` returned from `extractMeta` has to be an object, not \"' + Ember.typeOf(meta) + '\".', Ember.typeOf(meta) === 'object'));\n\n        documentHash.meta = meta;\n      }\n\n      if (isSingle) {\n        var { data, included } = this.normalize(primaryModelClass, payload);\n        documentHash.data = data;\n        if (included) {\n          documentHash.included = included;\n        }\n      } else {\n        var ret = new Array(payload.length);\n        for (var i = 0, l = payload.length; i < l; i++) {\n          var item = payload[i];\n          var { data: _data, included: _included } = this.normalize(primaryModelClass, item);\n          if (_included) {\n            documentHash.included.push(..._included);\n          }\n          ret[i] = _data;\n        }\n\n        documentHash.data = ret;\n      }\n\n      return documentHash;\n    },\n\n    /**\n      Normalizes a part of the JSON payload returned by\n      the server. You should override this method, munge the hash\n      and call super if you have generic normalization to do.\n       It takes the type of the record that is being normalized\n      (as a DS.Model class), the property where the hash was\n      originally found, and the hash to normalize.\n       You can use this method, for example, to normalize underscored keys to camelized\n      or other general-purpose normalizations.\n       Example\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { underscore } from '@ember/string';\n      import { get } from '@ember/object';\n       export default DS.JSONSerializer.extend({\n        normalize(typeClass, hash) {\n          var fields = get(typeClass, 'fields');\n           fields.forEach(function(field) {\n            var payloadField = underscore(field);\n            if (field === payloadField) { return; }\n             hash[field] = hash[payloadField];\n            delete hash[payloadField];\n          });\n           return this._super.apply(this, arguments);\n        }\n      });\n      ```\n       @method normalize\n      @param {DS.Model} typeClass\n      @param {Object} hash\n      @return {Object}\n    */\n    normalize(modelClass, resourceHash) {\n      var data = null;\n\n      if (resourceHash) {\n        this.normalizeUsingDeclaredMapping(modelClass, resourceHash);\n        if (Ember.typeOf(resourceHash.links) === 'object') {\n          this.normalizeUsingDeclaredMapping(modelClass, resourceHash.links);\n        }\n\n        data = {\n          id: this.extractId(modelClass, resourceHash),\n          type: modelClass.modelName,\n          attributes: this.extractAttributes(modelClass, resourceHash),\n          relationships: this.extractRelationships(modelClass, resourceHash)\n        };\n\n        this.applyTransforms(modelClass, data.attributes);\n      }\n\n      return { data };\n    },\n\n    /**\n      Returns the resource's ID.\n       @method extractId\n      @param {Object} modelClass\n      @param {Object} resourceHash\n      @return {String}\n    */\n    extractId(modelClass, resourceHash) {\n      var primaryKey = Ember.get(this, 'primaryKey');\n      var id = resourceHash[primaryKey];\n      return (0, _private.coerceId)(id);\n    },\n\n    /**\n      Returns the resource's attributes formatted as a JSON-API \"attributes object\".\n       http://jsonapi.org/format/#document-resource-object-attributes\n       @method extractAttributes\n      @param {Object} modelClass\n      @param {Object} resourceHash\n      @return {Object}\n    */\n    extractAttributes(modelClass, resourceHash) {\n      var attributeKey = void 0;\n      var attributes = {};\n\n      modelClass.eachAttribute(key => {\n        attributeKey = this.keyForAttribute(key, 'deserialize');\n        if (resourceHash[attributeKey] !== undefined) {\n          attributes[key] = resourceHash[attributeKey];\n        }\n      });\n\n      return attributes;\n    },\n\n    /**\n      Returns a relationship formatted as a JSON-API \"relationship object\".\n       http://jsonapi.org/format/#document-resource-object-relationships\n       @method extractRelationship\n      @param {Object} relationshipModelName\n      @param {Object} relationshipHash\n      @return {Object}\n    */\n    extractRelationship(relationshipModelName, relationshipHash) {\n      if (Ember.isNone(relationshipHash)) {\n        return null;\n      }\n      /*\n        When `relationshipHash` is an object it usually means that the relationship\n        is polymorphic. It could however also be embedded resources that the\n        EmbeddedRecordsMixin has be able to process.\n      */\n      if (Ember.typeOf(relationshipHash) === 'object') {\n        if (relationshipHash.id) {\n          relationshipHash.id = (0, _private.coerceId)(relationshipHash.id);\n        }\n\n        var modelClass = this.store.modelFor(relationshipModelName);\n        if (relationshipHash.type && !(0, _private.modelHasAttributeOrRelationshipNamedType)(modelClass)) {\n\n          if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n            var modelName = this.modelNameFromPayloadType(relationshipHash.type);\n            var deprecatedModelNameLookup = this.modelNameFromPayloadKey(relationshipHash.type);\n\n            if (modelName !== deprecatedModelNameLookup && this._hasCustomModelNameFromPayloadKey()) {\n              (true && !(false) && Ember.deprecate(\"You used modelNameFromPayloadKey to customize how a type is normalized. Use modelNameFromPayloadType instead\", false, {\n                id: 'ds.json-serializer.deprecated-type-for-polymorphic-relationship',\n                until: '3.0.0'\n              }));\n\n\n              modelName = deprecatedModelNameLookup;\n            }\n\n            relationshipHash.type = modelName;\n          } else {\n            relationshipHash.type = this.modelNameFromPayloadKey(relationshipHash.type);\n          }\n        }\n        return relationshipHash;\n      }\n      return { id: (0, _private.coerceId)(relationshipHash), type: relationshipModelName };\n    },\n\n    /**\n      Returns a polymorphic relationship formatted as a JSON-API \"relationship object\".\n       http://jsonapi.org/format/#document-resource-object-relationships\n       `relationshipOptions` is a hash which contains more information about the\n      polymorphic relationship which should be extracted:\n        - `resourceHash` complete hash of the resource the relationship should be\n          extracted from\n        - `relationshipKey` key under which the value for the relationship is\n          extracted from the resourceHash\n        - `relationshipMeta` meta information about the relationship\n       @method extractPolymorphicRelationship\n      @param {Object} relationshipModelName\n      @param {Object} relationshipHash\n      @param {Object} relationshipOptions\n      @return {Object}\n    */\n    extractPolymorphicRelationship(relationshipModelName, relationshipHash, relationshipOptions) {\n      return this.extractRelationship(relationshipModelName, relationshipHash);\n    },\n\n    /**\n      Returns the resource's relationships formatted as a JSON-API \"relationships object\".\n       http://jsonapi.org/format/#document-resource-object-relationships\n       @method extractRelationships\n      @param {Object} modelClass\n      @param {Object} resourceHash\n      @return {Object}\n    */\n    extractRelationships(modelClass, resourceHash) {\n      var relationships = {};\n\n      modelClass.eachRelationship((key, relationshipMeta) => {\n        var relationship = null;\n        var relationshipKey = this.keyForRelationship(key, relationshipMeta.kind, 'deserialize');\n        if (resourceHash[relationshipKey] !== undefined) {\n          var data = null;\n          var relationshipHash = resourceHash[relationshipKey];\n          if (relationshipMeta.kind === 'belongsTo') {\n            if (relationshipMeta.options.polymorphic) {\n              // extracting a polymorphic belongsTo may need more information\n              // than the type and the hash (which might only be an id) for the\n              // relationship, hence we pass the key, resource and\n              // relationshipMeta too\n              data = this.extractPolymorphicRelationship(relationshipMeta.type, relationshipHash, { key, resourceHash, relationshipMeta });\n            } else {\n              data = this.extractRelationship(relationshipMeta.type, relationshipHash);\n            }\n          } else if (relationshipMeta.kind === 'hasMany') {\n            if (!Ember.isNone(relationshipHash)) {\n              data = new Array(relationshipHash.length);\n              for (var i = 0, l = relationshipHash.length; i < l; i++) {\n                var item = relationshipHash[i];\n                data[i] = this.extractRelationship(relationshipMeta.type, item);\n              }\n            }\n          }\n          relationship = { data };\n        }\n\n        var linkKey = this.keyForLink(key, relationshipMeta.kind);\n        if (resourceHash.links && resourceHash.links[linkKey] !== undefined) {\n          var related = resourceHash.links[linkKey];\n          relationship = relationship || {};\n          relationship.links = { related };\n        }\n\n        if (relationship) {\n          relationships[key] = relationship;\n        }\n      });\n\n      return relationships;\n    },\n\n    /**\n      @method modelNameFromPayloadKey\n      @param {String} key\n      @return {String} the model's modelName\n    */\n    // TODO @deprecated Use modelNameFromPayloadType instead\n    modelNameFromPayloadKey(key) {\n      return (0, _private.normalizeModelName)(key);\n    },\n\n    /**\n      @method normalizeRelationships\n      @private\n    */\n    normalizeRelationships(typeClass, hash) {\n      var payloadKey = void 0;\n\n      if (this.keyForRelationship) {\n        typeClass.eachRelationship((key, relationship) => {\n          payloadKey = this.keyForRelationship(key, relationship.kind, 'deserialize');\n          if (key === payloadKey) {\n            return;\n          }\n          if (hash[payloadKey] === undefined) {\n            return;\n          }\n\n          hash[key] = hash[payloadKey];\n          delete hash[payloadKey];\n        });\n      }\n    },\n\n    /**\n      @method normalizeUsingDeclaredMapping\n      @private\n    */\n    normalizeUsingDeclaredMapping(modelClass, hash) {\n      var attrs = Ember.get(this, 'attrs');\n      var normalizedKey = void 0;\n      var payloadKey = void 0;\n\n      if (attrs) {\n        for (var key in attrs) {\n          normalizedKey = payloadKey = this._getMappedKey(key, modelClass);\n\n          if (hash[payloadKey] === undefined) {\n            continue;\n          }\n\n          if (Ember.get(modelClass, 'attributes').has(key)) {\n            normalizedKey = this.keyForAttribute(key);\n          }\n\n          if (Ember.get(modelClass, 'relationshipsByName').has(key)) {\n            normalizedKey = this.keyForRelationship(key);\n          }\n\n          if (payloadKey !== normalizedKey) {\n            hash[normalizedKey] = hash[payloadKey];\n            delete hash[payloadKey];\n          }\n        }\n      }\n    },\n\n    /**\n      Looks up the property key that was set by the custom `attr` mapping\n      passed to the serializer.\n       @method _getMappedKey\n      @private\n      @param {String} key\n      @return {String} key\n    */\n    _getMappedKey(key, modelClass) {\n      (true && Ember.warn('There is no attribute or relationship with the name `' + key + '` on `' + modelClass.modelName + '`. Check your serializers attrs hash.', Ember.get(modelClass, 'attributes').has(key) || Ember.get(modelClass, 'relationshipsByName').has(key), {\n        id: 'ds.serializer.no-mapped-attrs-key'\n      }));\n\n\n      var attrs = Ember.get(this, 'attrs');\n      var mappedKey = void 0;\n      if (attrs && attrs[key]) {\n        mappedKey = attrs[key];\n        //We need to account for both the { title: 'post_title' } and\n        //{ title: { key: 'post_title' }} forms\n        if (mappedKey.key) {\n          mappedKey = mappedKey.key;\n        }\n        if (typeof mappedKey === 'string') {\n          key = mappedKey;\n        }\n      }\n\n      return key;\n    },\n\n    /**\n      Check attrs.key.serialize property to inform if the `key`\n      can be serialized\n       @method _canSerialize\n      @private\n      @param {String} key\n      @return {boolean} true if the key can be serialized\n    */\n    _canSerialize(key) {\n      var attrs = Ember.get(this, 'attrs');\n\n      return !attrs || !attrs[key] || attrs[key].serialize !== false;\n    },\n\n    /**\n      When attrs.key.serialize is set to true then\n      it takes priority over the other checks and the related\n      attribute/relationship will be serialized\n       @method _mustSerialize\n      @private\n      @param {String} key\n      @return {boolean} true if the key must be serialized\n    */\n    _mustSerialize(key) {\n      var attrs = Ember.get(this, 'attrs');\n\n      return attrs && attrs[key] && attrs[key].serialize === true;\n    },\n\n    /**\n      Check if the given hasMany relationship should be serialized\n       @method shouldSerializeHasMany\n      @param {DS.Snapshot} snapshot\n      @param {String} key\n      @param {String} relationshipType\n      @return {boolean} true if the hasMany relationship should be serialized\n    */\n    shouldSerializeHasMany(snapshot, key, relationship) {\n      var relationshipType = snapshot.type.determineRelationshipType(relationship, this.store);\n      if (this._mustSerialize(key)) {\n        return true;\n      }\n      return this._canSerialize(key) && (relationshipType === 'manyToNone' || relationshipType === 'manyToMany');\n    },\n\n    // SERIALIZE\n    /**\n      Called when a record is saved in order to convert the\n      record into JSON.\n       By default, it creates a JSON object with a key for\n      each attribute and belongsTo relationship.\n       For example, consider this model:\n       ```app/models/comment.js\n      import DS from 'ember-data';\n       export default DS.Model.extend({\n        title: DS.attr(),\n        body: DS.attr(),\n         author: DS.belongsTo('user')\n      });\n      ```\n       The default serialization would create a JSON object like:\n       ```javascript\n      {\n        \"title\": \"Rails is unagi\",\n        \"body\": \"Rails? Omakase? O_O\",\n        \"author\": 12\n      }\n      ```\n       By default, attributes are passed through as-is, unless\n      you specified an attribute type (`DS.attr('date')`). If\n      you specify a transform, the JavaScript value will be\n      serialized when inserted into the JSON hash.\n       By default, belongs-to relationships are converted into\n      IDs when inserted into the JSON hash.\n       ## IDs\n       `serialize` takes an options hash with a single option:\n      `includeId`. If this option is `true`, `serialize` will,\n      by default include the ID in the JSON object it builds.\n       The adapter passes in `includeId: true` when serializing\n      a record for `createRecord`, but not for `updateRecord`.\n       ## Customization\n       Your server may expect a different JSON format than the\n      built-in serialization format.\n       In that case, you can implement `serialize` yourself and\n      return a JSON hash of your choosing.\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        serialize(snapshot, options) {\n          var json = {\n            POST_TTL: snapshot.attr('title'),\n            POST_BDY: snapshot.attr('body'),\n            POST_CMS: snapshot.hasMany('comments', { ids: true })\n          };\n           if (options.includeId) {\n            json.POST_ID_ = snapshot.id;\n          }\n           return json;\n        }\n      });\n      ```\n       ## Customizing an App-Wide Serializer\n       If you want to define a serializer for your entire\n      application, you'll probably want to use `eachAttribute`\n      and `eachRelationship` on the record.\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { singularize } from 'ember-inflector';\n       export default DS.JSONSerializer.extend({\n        serialize(snapshot, options) {\n          var json = {};\n           snapshot.eachAttribute(function(name) {\n            json[serverAttributeName(name)] = snapshot.attr(name);\n          });\n           snapshot.eachRelationship(function(name, relationship) {\n            if (relationship.kind === 'hasMany') {\n              json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n            }\n          });\n           if (options.includeId) {\n            json.ID_ = snapshot.id;\n          }\n           return json;\n        }\n      });\n       function serverAttributeName(attribute) {\n        return attribute.underscore().toUpperCase();\n      }\n       function serverHasManyName(name) {\n        return serverAttributeName(singularize(name)) + \"_IDS\";\n      }\n      ```\n       This serializer will generate JSON that looks like this:\n       ```javascript\n      {\n        \"TITLE\": \"Rails is omakase\",\n        \"BODY\": \"Yep. Omakase.\",\n        \"COMMENT_IDS\": [ 1, 2, 3 ]\n      }\n      ```\n       ## Tweaking the Default JSON\n       If you just want to do some small tweaks on the default JSON,\n      you can call super first and make the tweaks on the returned\n      JSON.\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        serialize(snapshot, options) {\n          var json = this._super(...arguments);\n           json.subject = json.title;\n          delete json.title;\n           return json;\n        }\n      });\n      ```\n       @method serialize\n      @param {DS.Snapshot} snapshot\n      @param {Object} options\n      @return {Object} json\n    */\n    serialize(snapshot, options) {\n      var json = {};\n\n      if (options && options.includeId) {\n        if ((0, _private.isEnabled)('ds-serialize-id')) {\n          this.serializeId(snapshot, json, Ember.get(this, 'primaryKey'));\n        } else {\n          var id = snapshot.id;\n          if (id) {\n            json[Ember.get(this, 'primaryKey')] = id;\n          }\n        }\n      }\n\n      snapshot.eachAttribute((key, attribute) => {\n        this.serializeAttribute(snapshot, json, key, attribute);\n      });\n\n      snapshot.eachRelationship((key, relationship) => {\n        if (relationship.kind === 'belongsTo') {\n          this.serializeBelongsTo(snapshot, json, relationship);\n        } else if (relationship.kind === 'hasMany') {\n          this.serializeHasMany(snapshot, json, relationship);\n        }\n      });\n\n      return json;\n    },\n\n    /**\n      You can use this method to customize how a serialized record is added to the complete\n      JSON hash to be sent to the server. By default the JSON Serializer does not namespace\n      the payload and just sends the raw serialized JSON object.\n      If your server expects namespaced keys, you should consider using the RESTSerializer.\n      Otherwise you can override this method to customize how the record is added to the hash.\n      The hash property should be modified by reference.\n       For example, your server may expect underscored root objects.\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { decamelize } from '@ember/string';\n       export default DS.RESTSerializer.extend({\n        serializeIntoHash(data, type, snapshot, options) {\n          var root = decamelize(type.modelName);\n          data[root] = this.serialize(snapshot, options);\n        }\n      });\n      ```\n       @method serializeIntoHash\n      @param {Object} hash\n      @param {DS.Model} typeClass\n      @param {DS.Snapshot} snapshot\n      @param {Object} options\n    */\n    serializeIntoHash(hash, typeClass, snapshot, options) {\n      emberAssign(hash, this.serialize(snapshot, options));\n    },\n\n    /**\n      `serializeAttribute` can be used to customize how `DS.attr`\n      properties are serialized\n       For example if you wanted to ensure all your attributes were always\n      serialized as properties on an `attributes` object you could\n      write:\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        serializeAttribute(snapshot, json, key, attributes) {\n          json.attributes = json.attributes || {};\n          this._super(snapshot, json.attributes, key, attributes);\n        }\n      });\n      ```\n       @method serializeAttribute\n      @param {DS.Snapshot} snapshot\n      @param {Object} json\n      @param {String} key\n      @param {Object} attribute\n    */\n    serializeAttribute(snapshot, json, key, attribute) {\n\n      if (this._canSerialize(key)) {\n        var type = attribute.type;\n        var value = snapshot.attr(key);\n        if (type) {\n          var transform = this.transformFor(type);\n          value = transform.serialize(value, attribute.options);\n        }\n\n        // if provided, use the mapping provided by `attrs` in\n        // the serializer\n        var payloadKey = this._getMappedKey(key, snapshot.type);\n\n        if (payloadKey === key && this.keyForAttribute) {\n          payloadKey = this.keyForAttribute(key, 'serialize');\n        }\n\n        json[payloadKey] = value;\n      }\n    },\n\n    /**\n      `serializeBelongsTo` can be used to customize how `DS.belongsTo`\n      properties are serialized.\n       Example\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n      import { isNone } from '@ember/utils';\n       export default DS.JSONSerializer.extend({\n        serializeBelongsTo(snapshot, json, relationship) {\n          var key = relationship.key;\n          var belongsTo = snapshot.belongsTo(key);\n           key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\", \"serialize\") : key;\n           json[key] = isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();\n        }\n      });\n      ```\n       @method serializeBelongsTo\n      @param {DS.Snapshot} snapshot\n      @param {Object} json\n      @param {Object} relationship\n    */\n    serializeBelongsTo(snapshot, json, relationship) {\n      var key = relationship.key;\n\n      if (this._canSerialize(key)) {\n        var belongsToId = snapshot.belongsTo(key, { id: true });\n\n        // if provided, use the mapping provided by `attrs` in\n        // the serializer\n        var payloadKey = this._getMappedKey(key, snapshot.type);\n        if (payloadKey === key && this.keyForRelationship) {\n          payloadKey = this.keyForRelationship(key, \"belongsTo\", \"serialize\");\n        }\n\n        //Need to check whether the id is there for new&async records\n        if (Ember.isNone(belongsToId)) {\n          json[payloadKey] = null;\n        } else {\n          json[payloadKey] = belongsToId;\n        }\n\n        if (relationship.options.polymorphic) {\n          this.serializePolymorphicType(snapshot, json, relationship);\n        }\n      }\n    },\n\n    /**\n     `serializeHasMany` can be used to customize how `DS.hasMany`\n     properties are serialized.\n      Example\n      ```app/serializers/post.js\n     import DS from 'ember-data';\n      export default DS.JSONSerializer.extend({\n       serializeHasMany(snapshot, json, relationship) {\n         var key = relationship.key;\n         if (key === 'comments') {\n           return;\n         } else {\n           this._super(...arguments);\n         }\n       }\n     });\n     ```\n      @method serializeHasMany\n     @param {DS.Snapshot} snapshot\n     @param {Object} json\n     @param {Object} relationship\n    */\n    serializeHasMany(snapshot, json, relationship) {\n      var key = relationship.key;\n\n      if (this.shouldSerializeHasMany(snapshot, key, relationship)) {\n        var hasMany = snapshot.hasMany(key, { ids: true });\n        if (hasMany !== undefined) {\n          // if provided, use the mapping provided by `attrs` in\n          // the serializer\n          var payloadKey = this._getMappedKey(key, snapshot.type);\n          if (payloadKey === key && this.keyForRelationship) {\n            payloadKey = this.keyForRelationship(key, \"hasMany\", \"serialize\");\n          }\n\n          json[payloadKey] = hasMany;\n          // TODO support for polymorphic manyToNone and manyToMany relationships\n        }\n      }\n    },\n\n    /**\n      You can use this method to customize how polymorphic objects are\n      serialized. Objects are considered to be polymorphic if\n      `{ polymorphic: true }` is pass as the second argument to the\n      `DS.belongsTo` function.\n       Example\n       ```app/serializers/comment.js\n      import DS from 'ember-data';\n      import { isNone } from '@ember/utils';\n       export default DS.JSONSerializer.extend({\n        serializePolymorphicType(snapshot, json, relationship) {\n          var key = relationship.key;\n          var belongsTo = snapshot.belongsTo(key);\n           key = this.keyForAttribute ? this.keyForAttribute(key, 'serialize') : key;\n           if (isNone(belongsTo)) {\n            json[key + '_type'] = null;\n          } else {\n            json[key + '_type'] = belongsTo.modelName;\n          }\n        }\n      });\n      ```\n       @method serializePolymorphicType\n      @param {DS.Snapshot} snapshot\n      @param {Object} json\n      @param {Object} relationship\n    */\n    serializePolymorphicType() {},\n\n    /**\n      `extractMeta` is used to deserialize any meta information in the\n      adapter payload. By default Ember Data expects meta information to\n      be located on the `meta` property of the payload object.\n       Example\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        extractMeta(store, typeClass, payload) {\n          if (payload && payload.hasOwnProperty('_pagination')) {\n            let meta = payload._pagination;\n            delete payload._pagination;\n            return meta;\n          }\n        }\n      });\n      ```\n       @method extractMeta\n      @param {DS.Store} store\n      @param {DS.Model} modelClass\n      @param {Object} payload\n    */\n    extractMeta(store, modelClass, payload) {\n      if (payload && payload['meta'] !== undefined) {\n        var meta = payload.meta;\n        delete payload.meta;\n        return meta;\n      }\n    },\n\n    /**\n      `extractErrors` is used to extract model errors when a call\n      to `DS.Model#save` fails with an `InvalidError`. By default\n      Ember Data expects error information to be located on the `errors`\n      property of the payload object.\n       This serializer expects this `errors` object to be an Array similar\n      to the following, compliant with the JSON-API specification:\n       ```js\n      {\n        \"errors\": [\n          {\n            \"detail\": \"This username is already taken!\",\n            \"source\": {\n              \"pointer\": \"data/attributes/username\"\n            }\n          }, {\n            \"detail\": \"Doesn't look like a valid email.\",\n            \"source\": {\n              \"pointer\": \"data/attributes/email\"\n            }\n          }\n        ]\n      }\n      ```\n       The key `detail` provides a textual description of the problem.\n      Alternatively, the key `title` can be used for the same purpose.\n       The nested keys `source.pointer` detail which specific element\n      of the request data was invalid.\n       Note that JSON-API also allows for object-level errors to be placed\n      in an object with pointer `data`, signifying that the problem\n      cannot be traced to a specific attribute:\n       ```javascript\n      {\n        \"errors\": [\n          {\n            \"detail\": \"Some generic non property error message\",\n            \"source\": {\n              \"pointer\": \"data\"\n            }\n          }\n        ]\n      }\n      ```\n       When turn into a `DS.Errors` object, you can read these errors\n      through the property `base`:\n       ```handlebars\n      {{#each model.errors.base as |error|}}\n        <div class=\"error\">\n          {{error.message}}\n        </div>\n      {{/each}}\n      ```\n       Example of alternative implementation, overriding the default\n      behavior to deal with a different format of errors:\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.JSONSerializer.extend({\n        extractErrors(store, typeClass, payload, id) {\n          if (payload && typeof payload === 'object' && payload._problems) {\n            payload = payload._problems;\n            this.normalizeErrors(typeClass, payload);\n          }\n          return payload;\n        }\n      });\n      ```\n       @method extractErrors\n      @param {DS.Store} store\n      @param {DS.Model} typeClass\n      @param {Object} payload\n      @param {(String|Number)} id\n      @return {Object} json The deserialized errors\n    */\n    extractErrors(store, typeClass, payload, id) {\n      if (payload && typeof payload === 'object' && payload.errors) {\n        payload = (0, _private.errorsArrayToHash)(payload.errors);\n\n        this.normalizeUsingDeclaredMapping(typeClass, payload);\n\n        typeClass.eachAttribute(name => {\n          var key = this.keyForAttribute(name, 'deserialize');\n          if (key !== name && payload[key] !== undefined) {\n            payload[name] = payload[key];\n            delete payload[key];\n          }\n        });\n\n        typeClass.eachRelationship(name => {\n          var key = this.keyForRelationship(name, 'deserialize');\n          if (key !== name && payload[key] !== undefined) {\n            payload[name] = payload[key];\n            delete payload[key];\n          }\n        });\n      }\n\n      return payload;\n    },\n\n    /**\n      `keyForAttribute` can be used to define rules for how to convert an\n      attribute name in your model to a key in your JSON.\n       Example\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { underscore } from '@ember/string';\n       export default DS.RESTSerializer.extend({\n        keyForAttribute(attr, method) {\n          return underscore(attr).toUpperCase();\n        }\n      });\n      ```\n       @method keyForAttribute\n      @param {String} key\n      @param {String} method\n      @return {String} normalized key\n    */\n    keyForAttribute(key, method) {\n      return key;\n    },\n\n    /**\n      `keyForRelationship` can be used to define a custom key when\n      serializing and deserializing relationship properties. By default\n      `JSONSerializer` does not provide an implementation of this method.\n       Example\n         ```app/serializers/post.js\n        import DS from 'ember-data';\n        import { underscore } from '@ember/string';\n         export default DS.JSONSerializer.extend({\n          keyForRelationship(key, relationship, method) {\n            return `rel_${underscore(key)}`;\n          }\n        });\n        ```\n       @method keyForRelationship\n      @param {String} key\n      @param {String} typeClass\n      @param {String} method\n      @return {String} normalized key\n    */\n    keyForRelationship(key, typeClass, method) {\n      return key;\n    },\n\n    /**\n     `keyForLink` can be used to define a custom key when deserializing link\n     properties.\n      @method keyForLink\n     @param {String} key\n     @param {String} kind `belongsTo` or `hasMany`\n     @return {String} normalized key\n    */\n    keyForLink(key, kind) {\n      return key;\n    },\n\n    // HELPERS\n\n    /**\n     @method transformFor\n     @private\n     @param {String} attributeType\n     @param {Boolean} skipAssertion\n     @return {DS.Transform} transform\n    */\n    transformFor(attributeType, skipAssertion) {\n      var transform = (0, _private.getOwner)(this).lookup('transform:' + attributeType);\n\n      (true && !(skipAssertion || !!transform) && Ember.assert(\"Unable to find transform for '\" + attributeType + \"'\", skipAssertion || !!transform));\n\n\n      return transform;\n    }\n  });\n\n  if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n\n    JSONSerializer.reopen({\n\n      /**\n        @method modelNameFromPayloadType\n        @public\n        @param {String} type\n        @return {String} the model's modelName\n        */\n      modelNameFromPayloadType(type) {\n        return (0, _private.normalizeModelName)(type);\n      },\n\n      _hasCustomModelNameFromPayloadKey() {\n        return this.modelNameFromPayloadKey !== JSONSerializer.prototype.modelNameFromPayloadKey;\n      }\n\n    });\n  }\n\n  if ((0, _private.isEnabled)(\"ds-serialize-id\")) {\n\n    JSONSerializer.reopen({\n\n      /**\n       serializeId can be used to customize how id is serialized\n       For example, your server may expect integer datatype of id\n        By default the snapshot's id (String) is set on the json hash via json[primaryKey] = snapshot.id.\n        ```app/serializers/application.js\n       import DS from 'ember-data';\n        export default DS.JSONSerializer.extend({\n       serializeId(snapshot, json, primaryKey) {\n           var id = snapshot.id;\n           json[primaryKey] = parseInt(id, 10);\n         }\n       });\n       ```\n        @method serializeId\n       @public\n       @param {DS.Snapshot} snapshot\n       @param {Object} json\n       @param {String} primaryKey\n       */\n      serializeId(snapshot, json, primaryKey) {\n        var id = snapshot.id;\n\n        if (id) {\n          json[primaryKey] = id;\n        }\n      }\n    });\n  }\n\n  exports.default = JSONSerializer;\n});","define('ember-data/serializers/rest', ['exports', 'ember-inflector', 'ember-data/serializers/json', 'ember-data/-private'], function (exports, _emberInflector, _json, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  /**\n    Normally, applications will use the `RESTSerializer` by implementing\n    the `normalize` method.\n  \n    This allows you to do whatever kind of munging you need, and is\n    especially useful if your server is inconsistent and you need to\n    do munging differently for many different kinds of responses.\n  \n    See the `normalize` documentation for more information.\n  \n    ## Across the Board Normalization\n  \n    There are also a number of hooks that you might find useful to define\n    across-the-board rules for your payload. These rules will be useful\n    if your server is consistent, or if you're building an adapter for\n    an infrastructure service, like Firebase, and want to encode service\n    conventions.\n  \n    For example, if all of your keys are underscored and all-caps, but\n    otherwise consistent with the names you use in your models, you\n    can implement across-the-board rules for how to convert an attribute\n    name in your model to a key in your JSON.\n  \n    ```app/serializers/application.js\n    import DS from 'ember-data';\n    import { underscore } from '@ember/string';\n  \n    export default DS.RESTSerializer.extend({\n      keyForAttribute(attr, method) {\n        return underscore(attr).toUpperCase();\n      }\n    });\n    ```\n  \n    You can also implement `keyForRelationship`, which takes the name\n    of the relationship as the first parameter, the kind of\n    relationship (`hasMany` or `belongsTo`) as the second parameter, and\n    the method (`serialize` or `deserialize`) as the third parameter.\n  \n    @class RESTSerializer\n    @namespace DS\n    @extends DS.JSONSerializer\n  */\n  /**\n    @module ember-data\n  */\n\n  var RESTSerializer = _json.default.extend({\n\n    /**\n     `keyForPolymorphicType` can be used to define a custom key when\n     serializing and deserializing a polymorphic type. By default, the\n     returned key is `${key}Type`.\n      Example\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.RESTSerializer.extend({\n        keyForPolymorphicType(key, relationship) {\n          var relationshipKey = this.keyForRelationship(key);\n           return 'type-' + relationshipKey;\n        }\n      });\n      ```\n      @method keyForPolymorphicType\n     @param {String} key\n     @param {String} typeClass\n     @param {String} method\n     @return {String} normalized key\n    */\n    keyForPolymorphicType(key, typeClass, method) {\n      var relationshipKey = this.keyForRelationship(key);\n\n      return `${relationshipKey}Type`;\n    },\n\n    /**\n      Normalizes a part of the JSON payload returned by\n      the server. You should override this method, munge the hash\n      and call super if you have generic normalization to do.\n       It takes the type of the record that is being normalized\n      (as a DS.Model class), the property where the hash was\n      originally found, and the hash to normalize.\n       For example, if you have a payload that looks like this:\n       ```js\n      {\n        \"post\": {\n          \"id\": 1,\n          \"title\": \"Rails is omakase\",\n          \"comments\": [ 1, 2 ]\n        },\n        \"comments\": [{\n          \"id\": 1,\n          \"body\": \"FIRST\"\n        }, {\n          \"id\": 2,\n          \"body\": \"Rails is unagi\"\n        }]\n      }\n      ```\n       The `normalize` method will be called three times:\n       * With `App.Post`, `\"posts\"` and `{ id: 1, title: \"Rails is omakase\", ... }`\n      * With `App.Comment`, `\"comments\"` and `{ id: 1, body: \"FIRST\" }`\n      * With `App.Comment`, `\"comments\"` and `{ id: 2, body: \"Rails is unagi\" }`\n       You can use this method, for example, to normalize underscored keys to camelized\n      or other general-purpose normalizations. You will only need to implement\n      `normalize` and manipulate the payload as desired.\n       For example, if the `IDs` under `\"comments\"` are provided as `_id` instead of\n      `id`, you can specify how to normalize just the comments:\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.RESTSerializer.extend({\n        normalize(model, hash, prop) {\n          if (prop === 'comments') {\n            hash.id = hash._id;\n            delete hash._id;\n          }\n           return this._super(...arguments);\n        }\n      });\n      ```\n       On each call to the `normalize` method, the third parameter (`prop`) is always\n      one of the keys that were in the original payload or in the result of another\n      normalization as `normalizeResponse`.\n       @method normalize\n      @param {DS.Model} modelClass\n      @param {Object} resourceHash\n      @param {String} prop\n      @return {Object}\n    */\n\n    /**\n      Normalizes an array of resource payloads and returns a JSON-API Document\n      with primary data and, if any, included data as `{ data, included }`.\n       @method _normalizeArray\n      @param {DS.Store} store\n      @param {String} modelName\n      @param {Object} arrayHash\n      @param {String} prop\n      @return {Object}\n      @private\n    */\n    _normalizeArray(store, modelName, arrayHash, prop) {\n      var documentHash = {\n        data: [],\n        included: []\n      };\n\n      var modelClass = store.modelFor(modelName);\n      var serializer = store.serializerFor(modelName);\n\n      Ember.makeArray(arrayHash).forEach(hash => {\n        var { data, included } = this._normalizePolymorphicRecord(store, hash, prop, modelClass, serializer);\n        documentHash.data.push(data);\n        if (included) {\n          documentHash.included.push(...included);\n        }\n      });\n\n      return documentHash;\n    },\n\n    _normalizePolymorphicRecord(store, hash, prop, primaryModelClass, primarySerializer) {\n      var serializer = primarySerializer;\n      var modelClass = primaryModelClass;\n\n      var primaryHasTypeAttribute = (0, _private.modelHasAttributeOrRelationshipNamedType)(primaryModelClass);\n\n      if (!primaryHasTypeAttribute && hash.type) {\n        // Support polymorphic records in async relationships\n        var modelName = void 0;\n        if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n          modelName = this.modelNameFromPayloadType(hash.type);\n          var deprecatedModelNameLookup = this.modelNameFromPayloadKey(hash.type);\n\n          if (modelName !== deprecatedModelNameLookup && !this._hasCustomModelNameFromPayloadType() && this._hasCustomModelNameFromPayloadKey()) {\n            (true && !(false) && Ember.deprecate(\"You are using modelNameFromPayloadKey to normalize the type for a polymorphic relationship. This is has been deprecated in favor of modelNameFromPayloadType\", false, {\n              id: 'ds.rest-serializer.deprecated-model-name-for-polymorphic-type',\n              until: '3.0.0'\n            }));\n\n\n            modelName = deprecatedModelNameLookup;\n          }\n        } else {\n          modelName = this.modelNameFromPayloadKey(hash.type);\n        }\n\n        if (store._hasModelFor(modelName)) {\n          serializer = store.serializerFor(modelName);\n          modelClass = store.modelFor(modelName);\n        }\n      }\n\n      return serializer.normalize(modelClass, hash, prop);\n    },\n\n    /*\n      @method _normalizeResponse\n      @param {DS.Store} store\n      @param {DS.Model} primaryModelClass\n      @param {Object} payload\n      @param {String|Number} id\n      @param {String} requestType\n      @param {Boolean} isSingle\n      @return {Object} JSON-API Document\n      @private\n    */\n    _normalizeResponse(store, primaryModelClass, payload, id, requestType, isSingle) {\n      var documentHash = {\n        data: null,\n        included: []\n      };\n\n      var meta = this.extractMeta(store, primaryModelClass, payload);\n      if (meta) {\n        (true && !(Ember.typeOf(meta) === 'object') && Ember.assert('The `meta` returned from `extractMeta` has to be an object, not \"' + Ember.typeOf(meta) + '\".', Ember.typeOf(meta) === 'object'));\n\n        documentHash.meta = meta;\n      }\n\n      var keys = Object.keys(payload);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var prop = keys[i];\n        var modelName = prop;\n        var forcedSecondary = false;\n\n        /*\n          If you want to provide sideloaded records of the same type that the\n          primary data you can do that by prefixing the key with `_`.\n           Example\n           ```\n          {\n            users: [\n              { id: 1, title: 'Tom', manager: 3 },\n              { id: 2, title: 'Yehuda', manager: 3 }\n            ],\n            _users: [\n              { id: 3, title: 'Tomster' }\n            ]\n          }\n          ```\n           This forces `_users` to be added to `included` instead of `data`.\n         */\n        if (prop.charAt(0) === '_') {\n          forcedSecondary = true;\n          modelName = prop.substr(1);\n        }\n\n        var typeName = this.modelNameFromPayloadKey(modelName);\n        if (!store.modelFactoryFor(typeName)) {\n          (true && Ember.warn(this.warnMessageNoModelForKey(modelName, typeName), false, {\n            id: 'ds.serializer.model-for-key-missing'\n          }));\n\n          continue;\n        }\n\n        var isPrimary = !forcedSecondary && this.isPrimaryType(store, typeName, primaryModelClass);\n        var value = payload[prop];\n\n        if (value === null) {\n          continue;\n        }\n\n        if (true) {\n          var isQueryRecordAnArray = requestType === 'queryRecord' && isPrimary && Array.isArray(value);\n          var message = \"The adapter returned an array for the primary data of a `queryRecord` response. This is deprecated as `queryRecord` should return a single record.\";\n\n          (true && !(!isQueryRecordAnArray) && Ember.deprecate(message, !isQueryRecordAnArray, {\n            id: 'ds.serializer.rest.queryRecord-array-response',\n            until: '3.0'\n          }));\n        }\n\n        /*\n          Support primary data as an object instead of an array.\n           Example\n           ```\n          {\n            user: { id: 1, title: 'Tom', manager: 3 }\n          }\n          ```\n         */\n        if (isPrimary && !Array.isArray(value)) {\n          var { data: _data, included: _included } = this._normalizePolymorphicRecord(store, value, prop, primaryModelClass, this);\n          documentHash.data = _data;\n          if (_included) {\n            documentHash.included.push(..._included);\n          }\n          continue;\n        }\n\n        var { data, included } = this._normalizeArray(store, typeName, value, prop);\n\n        if (included) {\n          documentHash.included.push(...included);\n        }\n\n        if (isSingle) {\n          data.forEach(resource => {\n\n            /*\n              Figures out if this is the primary record or not.\n               It's either:\n               1. The record with the same ID as the original request\n              2. If it's a newly created record without an ID, the first record\n                 in the array\n             */\n            var isUpdatedRecord = isPrimary && (0, _private.coerceId)(resource.id) === id;\n            var isFirstCreatedRecord = isPrimary && !id && !documentHash.data;\n\n            if (isFirstCreatedRecord || isUpdatedRecord) {\n              documentHash.data = resource;\n            } else {\n              documentHash.included.push(resource);\n            }\n          });\n        } else {\n          if (isPrimary) {\n            documentHash.data = data;\n          } else {\n            if (data) {\n              documentHash.included.push(...data);\n            }\n          }\n        }\n      }\n\n      return documentHash;\n    },\n\n    isPrimaryType(store, typeName, primaryTypeClass) {\n      return store.modelFor(typeName) === primaryTypeClass;\n    },\n\n    /**\n      This method allows you to push a payload containing top-level\n      collections of records organized per type.\n       ```js\n      {\n        \"posts\": [{\n          \"id\": \"1\",\n          \"title\": \"Rails is omakase\",\n          \"author\", \"1\",\n          \"comments\": [ \"1\" ]\n        }],\n        \"comments\": [{\n          \"id\": \"1\",\n          \"body\": \"FIRST\"\n        }],\n        \"users\": [{\n          \"id\": \"1\",\n          \"name\": \"@d2h\"\n        }]\n      }\n      ```\n       It will first normalize the payload, so you can use this to push\n      in data streaming in from your server structured the same way\n      that fetches and saves are structured.\n       @method pushPayload\n      @param {DS.Store} store\n      @param {Object} payload\n    */\n    pushPayload(store, payload) {\n      var documentHash = {\n        data: [],\n        included: []\n      };\n\n      for (var prop in payload) {\n        var modelName = this.modelNameFromPayloadKey(prop);\n        if (!store.modelFactoryFor(modelName)) {\n          (true && Ember.warn(this.warnMessageNoModelForKey(prop, modelName), false, {\n            id: 'ds.serializer.model-for-key-missing'\n          }));\n\n          continue;\n        }\n        var type = store.modelFor(modelName);\n        var typeSerializer = store.serializerFor(type.modelName);\n\n        Ember.makeArray(payload[prop]).forEach(hash => {\n          var { data, included } = typeSerializer.normalize(type, hash, prop);\n          documentHash.data.push(data);\n          if (included) {\n            documentHash.included.push(...included);\n          }\n        });\n      }\n\n      if ((0, _private.isEnabled)('ds-pushpayload-return')) {\n        return store.push(documentHash);\n      } else {\n        store.push(documentHash);\n      }\n    },\n\n    /**\n      This method is used to convert each JSON root key in the payload\n      into a modelName that it can use to look up the appropriate model for\n      that part of the payload.\n       For example, your server may send a model name that does not correspond with\n      the name of the model in your app. Let's take a look at an example model,\n      and an example payload:\n       ```app/models/post.js\n      import DS from 'ember-data';\n       export default DS.Model.extend({\n      });\n      ```\n       ```javascript\n        {\n          \"blog/post\": {\n            \"id\": \"1\n          }\n        }\n      ```\n       Ember Data is going to normalize the payload's root key for the modelName. As a result,\n      it will try to look up the \"blog/post\" model. Since we don't have a model called \"blog/post\"\n      (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error\n      because it cannot find the \"blog/post\" model.\n       Since we want to remove this namespace, we can define a serializer for the application that will\n      remove \"blog/\" from the payload key whenver it's encountered by Ember Data:\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n       export default DS.RESTSerializer.extend({\n        modelNameFromPayloadKey(payloadKey) {\n          if (payloadKey === 'blog/post') {\n            return this._super(payloadKey.replace('blog/', ''));\n          } else {\n           return this._super(payloadKey);\n          }\n        }\n      });\n      ```\n       After refreshing, Ember Data will appropriately look up the \"post\" model.\n       By default the modelName for a model is its\n      name in dasherized form. This means that a payload key like \"blogPost\" would be\n      normalized to \"blog-post\" when Ember Data looks up the model. Usually, Ember Data\n      can use the correct inflection to do this for you. Most of the time, you won't\n      need to override `modelNameFromPayloadKey` for this purpose.\n       @method modelNameFromPayloadKey\n      @param {String} key\n      @return {String} the model's modelName\n    */\n    modelNameFromPayloadKey(key) {\n      return (0, _emberInflector.singularize)((0, _private.normalizeModelName)(key));\n    },\n\n    // SERIALIZE\n\n    /**\n      Called when a record is saved in order to convert the\n      record into JSON.\n       By default, it creates a JSON object with a key for\n      each attribute and belongsTo relationship.\n       For example, consider this model:\n       ```app/models/comment.js\n      import DS from 'ember-data';\n       export default DS.Model.extend({\n        title: DS.attr(),\n        body: DS.attr(),\n         author: DS.belongsTo('user')\n      });\n      ```\n       The default serialization would create a JSON object like:\n       ```js\n      {\n        \"title\": \"Rails is unagi\",\n        \"body\": \"Rails? Omakase? O_O\",\n        \"author\": 12\n      }\n      ```\n       By default, attributes are passed through as-is, unless\n      you specified an attribute type (`DS.attr('date')`). If\n      you specify a transform, the JavaScript value will be\n      serialized when inserted into the JSON hash.\n       By default, belongs-to relationships are converted into\n      IDs when inserted into the JSON hash.\n       ## IDs\n       `serialize` takes an options hash with a single option:\n      `includeId`. If this option is `true`, `serialize` will,\n      by default include the ID in the JSON object it builds.\n       The adapter passes in `includeId: true` when serializing\n      a record for `createRecord`, but not for `updateRecord`.\n       ## Customization\n       Your server may expect a different JSON format than the\n      built-in serialization format.\n       In that case, you can implement `serialize` yourself and\n      return a JSON hash of your choosing.\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.RESTSerializer.extend({\n        serialize(snapshot, options) {\n          var json = {\n            POST_TTL: snapshot.attr('title'),\n            POST_BDY: snapshot.attr('body'),\n            POST_CMS: snapshot.hasMany('comments', { ids: true })\n          };\n           if (options.includeId) {\n            json.POST_ID_ = snapshot.id;\n          }\n           return json;\n        }\n      });\n      ```\n       ## Customizing an App-Wide Serializer\n       If you want to define a serializer for your entire\n      application, you'll probably want to use `eachAttribute`\n      and `eachRelationship` on the record.\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { pluralize } from 'ember-inflector';\n       export default DS.RESTSerializer.extend({\n        serialize(snapshot, options) {\n          var json = {};\n           snapshot.eachAttribute(function(name) {\n            json[serverAttributeName(name)] = snapshot.attr(name);\n          });\n           snapshot.eachRelationship(function(name, relationship) {\n            if (relationship.kind === 'hasMany') {\n              json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n            }\n          });\n           if (options.includeId) {\n            json.ID_ = snapshot.id;\n          }\n           return json;\n        }\n      });\n       function serverAttributeName(attribute) {\n        return attribute.underscore().toUpperCase();\n      }\n       function serverHasManyName(name) {\n        return serverAttributeName(singularize(name)) + \"_IDS\";\n      }\n      ```\n       This serializer will generate JSON that looks like this:\n       ```js\n      {\n        \"TITLE\": \"Rails is omakase\",\n        \"BODY\": \"Yep. Omakase.\",\n        \"COMMENT_IDS\": [ 1, 2, 3 ]\n      }\n      ```\n       ## Tweaking the Default JSON\n       If you just want to do some small tweaks on the default JSON,\n      you can call super first and make the tweaks on the returned\n      JSON.\n       ```app/serializers/post.js\n      import DS from 'ember-data';\n       export default DS.RESTSerializer.extend({\n        serialize(snapshot, options) {\n          var json = this._super(snapshot, options);\n           json.subject = json.title;\n          delete json.title;\n           return json;\n        }\n      });\n      ```\n       @method serialize\n      @param {DS.Snapshot} snapshot\n      @param {Object} options\n      @return {Object} json\n    */\n    serialize(snapshot, options) {\n      return this._super(...arguments);\n    },\n\n    /**\n      You can use this method to customize the root keys serialized into the JSON.\n      The hash property should be modified by reference (possibly using something like _.extend)\n      By default the REST Serializer sends the modelName of a model, which is a camelized\n      version of the name.\n       For example, your server may expect underscored root objects.\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { decamelize } from '@ember/string';\n       export default DS.RESTSerializer.extend({\n        serializeIntoHash(data, type, record, options) {\n          var root = decamelize(type.modelName);\n          data[root] = this.serialize(record, options);\n        }\n      });\n      ```\n       @method serializeIntoHash\n      @param {Object} hash\n      @param {DS.Model} typeClass\n      @param {DS.Snapshot} snapshot\n      @param {Object} options\n    */\n    serializeIntoHash(hash, typeClass, snapshot, options) {\n      var normalizedRootKey = this.payloadKeyFromModelName(typeClass.modelName);\n      hash[normalizedRootKey] = this.serialize(snapshot, options);\n    },\n\n    /**\n      You can use `payloadKeyFromModelName` to override the root key for an outgoing\n      request. By default, the RESTSerializer returns a camelized version of the\n      model's name.\n       For a model called TacoParty, its `modelName` would be the string `taco-party`. The RESTSerializer\n      will send it to the server with `tacoParty` as the root key in the JSON payload:\n       ```js\n      {\n        \"tacoParty\": {\n          \"id\": \"1\",\n          \"location\": \"Matthew Beale's House\"\n        }\n      }\n      ```\n       For example, your server may expect dasherized root objects:\n       ```app/serializers/application.js\n      import DS from 'ember-data';\n      import { dasherize } from '@ember/string';\n       export default DS.RESTSerializer.extend({\n        payloadKeyFromModelName(modelName) {\n          return dasherize(modelName);\n        }\n      });\n      ```\n       Given a `TacoParty` model, calling `save` on it would produce an outgoing\n      request like:\n       ```js\n      {\n        \"taco-party\": {\n          \"id\": \"1\",\n          \"location\": \"Matthew Beale's House\"\n        }\n      }\n      ```\n       @method payloadKeyFromModelName\n      @param {String} modelName\n      @return {String}\n    */\n    payloadKeyFromModelName(modelName) {\n      return Ember.String.camelize(modelName);\n    },\n\n    /**\n      You can use this method to customize how polymorphic objects are serialized.\n      By default the REST Serializer creates the key by appending `Type` to\n      the attribute and value from the model's camelcased model name.\n       @method serializePolymorphicType\n      @param {DS.Snapshot} snapshot\n      @param {Object} json\n      @param {Object} relationship\n    */\n    serializePolymorphicType(snapshot, json, relationship) {\n      var key = relationship.key;\n      var typeKey = this.keyForPolymorphicType(key, relationship.type, 'serialize');\n      var belongsTo = snapshot.belongsTo(key);\n\n      if (Ember.isNone(belongsTo)) {\n        json[typeKey] = null;\n      } else {\n        if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n          json[typeKey] = this.payloadTypeFromModelName(belongsTo.modelName);\n        } else {\n          json[typeKey] = Ember.String.camelize(belongsTo.modelName);\n        }\n      }\n    },\n\n    /**\n      You can use this method to customize how a polymorphic relationship should\n      be extracted.\n       @method extractPolymorphicRelationship\n      @param {Object} relationshipType\n      @param {Object} relationshipHash\n      @param {Object} relationshipOptions\n      @return {Object}\n     */\n    extractPolymorphicRelationship(relationshipType, relationshipHash, relationshipOptions) {\n      var { key, resourceHash, relationshipMeta } = relationshipOptions;\n\n      // A polymorphic belongsTo relationship can be present in the payload\n      // either in the form where the `id` and the `type` are given:\n      //\n      //   {\n      //     message: { id: 1, type: 'post' }\n      //   }\n      //\n      // or by the `id` and a `<relationship>Type` attribute:\n      //\n      //   {\n      //     message: 1,\n      //     messageType: 'post'\n      //   }\n      //\n      // The next code checks if the latter case is present and returns the\n      // corresponding JSON-API representation. The former case is handled within\n      // the base class JSONSerializer.\n      var isPolymorphic = relationshipMeta.options.polymorphic;\n      var typeProperty = this.keyForPolymorphicType(key, relationshipType, 'deserialize');\n\n      if (isPolymorphic && resourceHash[typeProperty] !== undefined && typeof relationshipHash !== 'object') {\n\n        if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n\n          var payloadType = resourceHash[typeProperty];\n          var type = this.modelNameFromPayloadType(payloadType);\n          var deprecatedTypeLookup = this.modelNameFromPayloadKey(payloadType);\n\n          if (payloadType !== deprecatedTypeLookup && !this._hasCustomModelNameFromPayloadType() && this._hasCustomModelNameFromPayloadKey()) {\n            (true && !(false) && Ember.deprecate(\"You are using modelNameFromPayloadKey to normalize the type for a polymorphic relationship. This has been deprecated in favor of modelNameFromPayloadType\", false, {\n              id: 'ds.rest-serializer.deprecated-model-name-for-polymorphic-type',\n              until: '3.0.0'\n            }));\n\n\n            type = deprecatedTypeLookup;\n          }\n\n          return {\n            id: relationshipHash,\n            type: type\n          };\n        } else {\n\n          var _type = this.modelNameFromPayloadKey(resourceHash[typeProperty]);\n          return {\n            id: relationshipHash,\n            type: _type\n          };\n        }\n      }\n\n      return this._super(...arguments);\n    }\n  });\n\n  if ((0, _private.isEnabled)(\"ds-payload-type-hooks\")) {\n\n    RESTSerializer.reopen({\n\n      /**\n        `modelNameFromPayloadType` can be used to change the mapping for a DS model\n        name, taken from the value in the payload.\n         Say your API namespaces the type of a model and returns the following\n        payload for the `post` model, which has a polymorphic `user` relationship:\n         ```javascript\n        // GET /api/posts/1\n        {\n          \"post\": {\n            \"id\": 1,\n            \"user\": 1,\n            \"userType: \"api::v1::administrator\"\n          }\n        }\n        ```\n         By overwriting `modelNameFromPayloadType` you can specify that the\n        `administrator` model should be used:\n         ```app/serializers/application.js\n        import DS from 'ember-data';\n         export default DS.RESTSerializer.extend({\n          modelNameFromPayloadType(payloadType) {\n            return payloadType.replace('api::v1::', '');\n          }\n        });\n        ```\n         By default the modelName for a model is its name in dasherized form.\n        Usually, Ember Data can use the correct inflection to do this for you. Most\n        of the time, you won't need to override `modelNameFromPayloadType` for this\n        purpose.\n         Also take a look at\n        [payloadTypeFromModelName](#method_payloadTypeFromModelName) to customize\n        how the type of a record should be serialized.\n         @method modelNameFromPayloadType\n        @public\n        @param {String} payloadType type from payload\n        @return {String} modelName\n      */\n      modelNameFromPayloadType(payloadType) {\n        return (0, _emberInflector.singularize)((0, _private.normalizeModelName)(payloadType));\n      },\n\n      /**\n        `payloadTypeFromModelName` can be used to change the mapping for the type in\n        the payload, taken from the model name.\n         Say your API namespaces the type of a model and expects the following\n        payload when you update the `post` model, which has a polymorphic `user`\n        relationship:\n         ```javascript\n        // POST /api/posts/1\n        {\n          \"post\": {\n            \"id\": 1,\n            \"user\": 1,\n            \"userType\": \"api::v1::administrator\"\n          }\n        }\n        ```\n         By overwriting `payloadTypeFromModelName` you can specify that the\n        namespaces model name for the `administrator` should be used:\n         ```app/serializers/application.js\n        import DS from 'ember-data';\n         export default DS.RESTSerializer.extend({\n          payloadTypeFromModelName(modelName) {\n            return 'api::v1::' + modelName;\n          }\n        });\n        ```\n         By default the payload type is the camelized model name. Usually, Ember\n        Data can use the correct inflection to do this for you. Most of the time,\n        you won't need to override `payloadTypeFromModelName` for this purpose.\n         Also take a look at\n        [modelNameFromPayloadType](#method_modelNameFromPayloadType) to customize\n        how the model name from should be mapped from the payload.\n         @method payloadTypeFromModelName\n        @public\n        @param {String} modelName modelName from the record\n        @return {String} payloadType\n      */\n      payloadTypeFromModelName(modelName) {\n        return Ember.String.camelize(modelName);\n      },\n\n      _hasCustomModelNameFromPayloadKey() {\n        return this.modelNameFromPayloadKey !== RESTSerializer.prototype.modelNameFromPayloadKey;\n      },\n\n      _hasCustomModelNameFromPayloadType() {\n        return this.modelNameFromPayloadType !== RESTSerializer.prototype.modelNameFromPayloadType;\n      },\n\n      _hasCustomPayloadTypeFromModelName() {\n        return this.payloadTypeFromModelName !== RESTSerializer.prototype.payloadTypeFromModelName;\n      },\n\n      _hasCustomPayloadKeyFromModelName() {\n        return this.payloadKeyFromModelName !== RESTSerializer.prototype.payloadKeyFromModelName;\n      }\n\n    });\n  }\n\n  if (true) {\n    RESTSerializer.reopen({\n      warnMessageNoModelForKey(prop, typeKey) {\n        return 'Encountered \"' + prop + '\" in payload, but no model was found for model name \"' + typeKey + '\" (resolved model name using ' + this.constructor.toString() + '.modelNameFromPayloadKey(\"' + prop + '\"))';\n      }\n    });\n  }\n\n  exports.default = RESTSerializer;\n});","define('ember-data/setup-container', ['exports', 'ember-data/-private', 'ember-data/serializers/json-api', 'ember-data/serializers/json', 'ember-data/serializers/rest', 'ember-data/adapters/json-api', 'ember-data/adapters/rest', 'ember-data/transforms/number', 'ember-data/transforms/date', 'ember-data/transforms/string', 'ember-data/transforms/boolean'], function (exports, _private, _jsonApi, _json, _rest, _jsonApi2, _rest2, _number, _date, _string, _boolean) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = setupContainer;\n\n\n  function has(applicationOrRegistry, fullName) {\n    if (applicationOrRegistry.has) {\n      // < 2.1.0\n      return applicationOrRegistry.has(fullName);\n    } else {\n      // 2.1.0+\n      return applicationOrRegistry.hasRegistration(fullName);\n    }\n  }\n\n  /*\n   Configures a registry for use with an Ember-Data\n   store. Accepts an optional namespace argument.\n  \n   @method initializeStore\n   @param {Ember.Registry} registry\n   */\n  function initializeStore(registry) {\n    var registerOptionsForType = registry.registerOptionsForType || registry.optionsForType;\n    registerOptionsForType.call(registry, 'serializer', { singleton: false });\n    registerOptionsForType.call(registry, 'adapter', { singleton: false });\n    registry.register('serializer:-default', _json.default);\n    registry.register('serializer:-rest', _rest.default);\n    registry.register('adapter:-rest', _rest2.default);\n\n    registry.register('adapter:-json-api', _jsonApi2.default);\n    registry.register('serializer:-json-api', _jsonApi.default);\n\n    if (!has(registry, 'service:store')) {\n      registry.register('service:store', _private.Store);\n    }\n  }\n\n  /*\n   Configures a registry with injections on Ember applications\n   for the Ember-Data store. Accepts an optional namespace argument.\n  \n   @method initializeDebugAdapter\n   @param {Ember.Registry} registry\n   */\n  function initializeDataAdapter(registry) {\n    registry.register('data-adapter:main', _private.DebugAdapter);\n  }\n\n  /*\n   Configures a registry with injections on Ember applications\n   for the Ember-Data store. Accepts an optional namespace argument.\n  \n   @method initializeStoreInjections\n   @param {Ember.Registry} registry\n   */\n  function initializeStoreInjections(registry) {\n    // registry.injection for Ember < 2.1.0\n    // application.inject for Ember 2.1.0+\n    var inject = registry.inject || registry.injection;\n    inject.call(registry, 'controller', 'store', 'service:store');\n    inject.call(registry, 'route', 'store', 'service:store');\n    inject.call(registry, 'data-adapter', 'store', 'service:store');\n  }\n\n  /*\n   Configures a registry for use with Ember-Data\n   transforms.\n  \n   @method initializeTransforms\n   @param {Ember.Registry} registry\n   */\n  function initializeTransforms(registry) {\n    registry.register('transform:boolean', _boolean.default);\n    registry.register('transform:date', _date.default);\n    registry.register('transform:number', _number.default);\n    registry.register('transform:string', _string.default);\n  }\n\n  function setupContainer(application) {\n    initializeDataAdapter(application);\n    initializeTransforms(application);\n    initializeStoreInjections(application);\n    initializeStore(application);\n  }\n});","define('ember-data/store', ['exports', 'ember-data/-private'], function (exports, _private) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _private.Store;\n    }\n  });\n});","define('ember-data/transform', ['exports', 'ember-data/transforms/transform'], function (exports, _transform) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _transform.default;\n    }\n  });\n});","define('ember-data/transforms/boolean', ['exports', 'ember-data/transforms/transform'], function (exports, _transform) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _transform.default.extend({\n    deserialize(serialized, options) {\n      if (Ember.isNone(serialized) && options.allowNull === true) {\n        return null;\n      }\n\n      var type = typeof serialized;\n      if (type === \"boolean\") {\n        return serialized;\n      } else if (type === \"string\") {\n        return (/^(true|t|1)$/i.test(serialized)\n        );\n      } else if (type === \"number\") {\n        return serialized === 1;\n      } else {\n        return false;\n      }\n    },\n\n    serialize(deserialized, options) {\n      if (Ember.isNone(deserialized) && options.allowNull === true) {\n        return null;\n      }\n\n      return Boolean(deserialized);\n    }\n  });\n});","define('ember-data/transforms/date', ['exports', 'ember-data/transforms/transform'], function (exports, _transform) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _transform.default.extend({\n    deserialize(serialized) {\n      var type = typeof serialized;\n\n      if (type === \"string\") {\n        var offset = serialized.indexOf('+');\n\n        if (offset !== -1 && serialized.length - 5 === offset) {\n          offset += 3;\n          return new Date(serialized.slice(0, offset) + ':' + serialized.slice(offset));\n        }\n        return new Date(serialized);\n      } else if (type === \"number\") {\n        return new Date(serialized);\n      } else if (serialized === null || serialized === undefined) {\n        // if the value is null return null\n        // if the value is not present in the data return undefined\n        return serialized;\n      } else {\n        return null;\n      }\n    },\n\n    serialize(date) {\n      if (date instanceof Date && !isNaN(date)) {\n        return date.toISOString();\n      } else {\n        return null;\n      }\n    }\n  });\n});","define('ember-data/transforms/number', ['exports', 'ember-data/transforms/transform'], function (exports, _transform) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  function isNumber(value) {\n    return value === value && value !== Infinity && value !== -Infinity;\n  }\n\n  /**\n    The `DS.NumberTransform` class is used to serialize and deserialize\n    numeric attributes on Ember Data record objects. This transform is\n    used when `number` is passed as the type parameter to the\n    [DS.attr](../../data#method_attr) function.\n  \n    Usage\n  \n    ```app/models/score.js\n    import DS from 'ember-data';\n  \n    export default DS.Model.extend({\n      value: DS.attr('number'),\n      player: DS.belongsTo('player'),\n      date: DS.attr('date')\n    });\n    ```\n  \n    @class NumberTransform\n    @extends DS.Transform\n    @namespace DS\n   */\n  exports.default = _transform.default.extend({\n    deserialize(serialized) {\n      var transformed = void 0;\n\n      if (Ember.isEmpty(serialized)) {\n        return null;\n      } else {\n        transformed = Number(serialized);\n\n        return isNumber(transformed) ? transformed : null;\n      }\n    },\n\n    serialize(deserialized) {\n      var transformed = void 0;\n\n      if (Ember.isEmpty(deserialized)) {\n        return null;\n      } else {\n        transformed = Number(deserialized);\n\n        return isNumber(transformed) ? transformed : null;\n      }\n    }\n  });\n});","define('ember-data/transforms/string', ['exports', 'ember-data/transforms/transform'], function (exports, _transform) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _transform.default.extend({\n    deserialize(serialized) {\n      return Ember.isNone(serialized) ? null : String(serialized);\n    },\n    serialize(deserialized) {\n      return Ember.isNone(deserialized) ? null : String(deserialized);\n    }\n  });\n});","define('ember-data/transforms/transform', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Object.extend({\n    /**\n      When given a deserialized value from a record attribute this\n      method must return the serialized value.\n       Example\n       ```javascript\n      import { isEmpty } from '@ember/utils';\n       serialize(deserialized, options) {\n        return isEmpty(deserialized) ? null : Number(deserialized);\n      }\n      ```\n       @method serialize\n      @param deserialized The deserialized value\n      @param options hash of options passed to `DS.attr`\n      @return The serialized value\n    */\n    serialize: null,\n\n    /**\n      When given a serialize value from a JSON object this method must\n      return the deserialized value for the record attribute.\n       Example\n       ```javascript\n      deserialize(serialized, options) {\n        return empty(serialized) ? null : Number(serialized);\n      }\n      ```\n       @method deserialize\n      @param serialized The serialized value\n      @param options hash of options passed to `DS.attr`\n      @return The deserialized value\n    */\n    deserialize: null\n  });\n});","define(\"ember-data/version\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = \"3.0.2\";\n});","\n"],"names":[],"mappingsnxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtrjllvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzpSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrbhcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvpvlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrpfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjvcfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9ghtjnSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxlvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACp5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnvcmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdxrhzzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnvEA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbtJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtjrsBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjllSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxfzlqnhyfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdzTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpvaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzharhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxdup1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;","file":"vendor.js"}