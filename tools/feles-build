#!/usr/bin/env ruby

require 'optparse'
require_relative './lib/initializer'
require_relative './lib/patcher'
require_relative './lib/symlinker'
require_relative './lib/builder'
require_relative './lib/dev_server'
require_relative './lib/injector'
require_relative './lib/browser_launcher'
require_relative './lib/utils'
require_relative './lib/dev_env_manager'

# Placeholder for modules that will be moved to tools/lib
module FelesBuild
end

# Main application class
class FelesBuildCLI
  def initialize(argv)
    @argv = argv
    @logger = FelesBuild::Utils::Logger.new('feles-build')
  end

  def run
    command = @argv.shift
    case command
    when 'dev'
      parse_dev_options
    when 'build'
      parse_build_options
    when 'init'
      parse_init_options
    when 'patch'
      parse_patch_options
    when '--help', '-h', nil
      print_main_help
    else
      @logger.error "Unknown command: #{command}"
      print_main_help
    end
  end

  def print_main_help
    puts "Usage: feles-build <command> [options]"
    puts
    puts "Commands:"
    puts "  dev        Run the development workflow"
    puts "  build      Run the production build workflow"
    puts "  init       Initialize the development environment"
    puts
    puts "Run 'feles-build <command> --help' for more information on a specific command."
  end

  def parse_dev_options
    options = {}
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: feles-build dev [options]"
      opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
      end
    end
    opt_parser.parse!(@argv)

    @logger.info "Starting development environment..."

    # Initial setup
    FelesBuild::Initializer.run
    FelesBuild::Patcher.run
    FelesBuild::Symlinker.run
    FelesBuild::Builder.run(mode: 'dev')
    FelesBuild::Injector.run('dev')
    FelesBuild::Injector.inject_xhtml_from_ts(true)
    FelesBuild::DevEnvManager.setup

    # Set up graceful shutdown
    trap('INT') do
      @logger.info "Shutting down..."
      FelesBuild::DevServer.shutdown
      exit 130
    end

    # Create a pipe for the ready signal
    reader, writer = IO.pipe

    # Run dev server in a background thread
    server_thread = Thread.new do
      FelesBuild::DevServer.run(writer)
    end

    # Wait for the dev server to be ready
    @logger.info "Waiting for dev servers to be ready..."
    ready_signal = reader.gets
    if ready_signal&.strip == FelesBuild::Defines::DEV_SERVER[:ready_string]
      @logger.success "Dev servers are ready."
      FelesBuild::BrowserLauncher.run
    else
      @logger.error "Dev servers failed to start or did not send ready signal."
    end

    # After browser is closed, shut down the servers
    @logger.info "Browser closed. Shutting down dev servers."
    FelesBuild::DevServer.shutdown
    server_thread.join
  end

  def parse_build_options
    options = { phase: nil }
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: feles-build build [options]"
      opts.on("--phase PHASE", String, "Specify the build phase (before-mach or after-mach)") do |phase|
        options[:phase] = phase
      end
      opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
      end
    end
    opt_parser.parse!(@argv)

    if options[:phase].nil?
      puts "Error: --phase is required for the build command."
      puts opt_parser
      exit 1
    end

    puts "Running build command with options: #{options}"
    if options[:phase] == 'before-mach'
      FelesBuild::Symlinker.run
      FelesBuild::Builder.run(mode: 'production')
    elsif options[:phase] == 'after-mach'
      FelesBuild::Injector.run('production')
      FelesBuild::Injector.inject_xhtml_from_ts(false)
    end
  end

  def parse_init_options
    options = {}
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: feles-build init [options]"
      opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
      end
    end
    opt_parser.parse!(@argv)
    FelesBuild::Initializer.run
    FelesBuild::Patcher.run
  end

  def parse_patch_options
    options = { action: 'apply' }
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: feles-build patch [options]"
      opts.on("--action ACTION", String, "Specify the patch action (apply, create, init)") do |action|
        options[:action] = action
      end
      opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
      end
    end
    opt_parser.parse!(@argv)
    FelesBuild::Patcher.run(options[:action])
  end
end

if $PROGRAM_NAME == __FILE__
  cli = FelesBuildCLI.new(ARGV)
  cli.run
end
