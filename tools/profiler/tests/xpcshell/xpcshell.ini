[DEFAULT]
head = head.js
support-files =
  ../shared-head.js
skip-if = toolkit == 'android'

[test_active_configuration.js]
[test_addProfilerMarker.js]
[test_start.js]
skip-if = true
[test_get_features.js]
[test_responsiveness.js]
skip-if = tsan # Times out on TSan, bug 1612707
[test_shared_library.js]
[test_run.js]
skip-if = true
[test_pause.js]
[test_enterjit_osr.js]
skip-if = (os == "win" && processor == "aarch64") # aarch64 due to 1536652
[test_enterjit_osr_disabling.js]
skip-if = !debug
[test_enterjit_osr_enabling.js]
skip-if = !debug
[test_asm.js]
[test_feature_mainthreadio.js]
skip-if = release_or_beta || (os == "win" && processor == "aarch64") # The IOInterposer is in an ifdef, aarch64 due to 1536657
[test_feature_fileioall.js]
skip-if = release_or_beta || (os == "win" && processor == "aarch64") # The IOInterposer is in an ifdef, aarch64 due to 1536657

# The sanitizer checks appears to overwrite our own memory hooks in xpcshell tests,
# and no allocation markers are gathered. Skip this test in that configuration.
[test_feature_nativeallocations.js]
skip-if = asan || tsan

# Native stackwalking is somewhat unreliable depending on the platform.
#
# We don't have frame pointers on macOS release and beta, so stack walking does not
# work. See Bug 1571216 for more details.
#
# Linux can be very unreliable when native stackwalking through JavaScript code.
# See Bug 1434402 for more details.
#
# For sanitizer builds, there were many intermittents, and we're not getting much
# additional coverage there, so it's better to be a bit more reliable.
[test_feature_stackwalking.js]
skip-if = (os == "mac" && release_or_beta) || (os == "linux" && release_or_beta && !debug) || asan || tsan

[test_feature_js.js]
skip-if = tsan # Times out on TSan, bug 1612707

# See the comment on test_feature_stackwalking.js
[test_merged_stacks.js]
skip-if = (os == "mac" && release_or_beta) || (os == "linux" && release_or_beta && !debug) || asan || tsan

[test_assertion_helper.js]
