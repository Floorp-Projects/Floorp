import * as path from "@std/path";
import { PROJECT_ROOT, PATHS } from "./defines.ts";
import { Logger } from "./utils.ts";
import { readBuildid2 } from "./update.ts";

const logger = new Logger("dev-env");

const USER_JS = `/**
 *! DO NOT EDIT THIS FILE.
 *
 ** This file is AUTOGENERATED
 ** Please modify the 'scripts/launchBrowser/savePrefs.ts' in the repo.
 * https://github.com/nyanrus/noraneko
 */

user_pref("devtools.debugger.prompt-connection",false);
user_pref("security.disallow_privileged_https_script_loads", false);
user_pref("security.allow_parent_unrestricted_js_loads", true);
user_pref("remote.active-protocols", 1);
user_pref("browser.newtabpage.enabled", true);
`;

export function savePrefs(profileDir: string): void {
  try {
    Deno.mkdirSync(profileDir, { recursive: true });
    const p = path.join(profileDir, "user.js");
    Deno.writeTextFileSync(p, USER_JS);
    logger.success(`user.js written to ${p}`);
  } catch (e: any) {
    logger.error(`Failed to write user.js: ${e?.message ?? e}`);
  }
}

export function writeDevVersionInfo(): void {
  const gecko = path.join(PROJECT_ROOT, "static", "gecko");
  const dist = path.join(PROJECT_ROOT, "_dist");
  try {
    Deno.mkdirSync(dist, { recursive: true });
    Deno.mkdirSync(path.join(gecko, "config"), { recursive: true });

    Deno.writeTextFileSync(
      path.join(gecko, "config", "version.txt"),
      "version: 1.0.0\n",
    );
    const buildid2 = readBuildid2(PATHS.buildid2);
    if (buildid2 === null) {
      throw new Error(`buildid2 file not found at ${PATHS.buildid2}`);
    }
    Deno.writeTextFileSync(
      path.join(dist, "buildid2.txt"),
      `buildid2: ${buildid2}\n`,
    );
    logger.success("Wrote dev version info.");
  } catch (e: any) {
    logger.error(`Failed to write dev version info: ${e?.message ?? e}`);
  }
}

export function setup(): void {
  // The profile dir used by browser launcher
  savePrefs(PATHS.profile_test);
  writeDevVersionInfo();
}
