# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

FINAL_TARGET = "_tests/xpcshell/toolkit/mozapps/update/tests/data"

if not CONFIG["MOZ_SUITE"]:
    BROWSER_CHROME_MANIFESTS += [
        "browser/browser.ini",
        "browser/manual_app_update_only/browser.ini",
    ]
    if CONFIG["MOZ_BITS_DOWNLOAD"]:
        BROWSER_CHROME_MANIFESTS += ["browser/browser.bits.ini"]

XPCSHELL_TESTS_MANIFESTS += [
    "unit_aus_update/xpcshell.ini",
    "unit_base_updater/xpcshell.ini",
]

if CONFIG["MOZ_MAINTENANCE_SERVICE"]:
    XPCSHELL_TESTS_MANIFESTS += ["unit_service_updater/xpcshell.ini"]

if CONFIG["MOZ_BUILD_APP"] == "browser" and CONFIG["MOZ_UPDATE_AGENT"]:
    XPCSHELL_TESTS_MANIFESTS += ["unit_background_update/xpcshell.ini"]

SimplePrograms(
    [
        "TestAUSHelper",
        "TestAUSReadStrings",
    ]
)

LOCAL_INCLUDES += [
    "/toolkit/mozapps/update",
    "/toolkit/mozapps/update/common",
]

if CONFIG["OS_ARCH"] == "WINNT":
    OS_LIBS += [
        "shlwapi",
    ]

USE_LIBS += [
    "updatecommon",
]

for var in ("MOZ_APP_VENDOR", "MOZ_APP_BASENAME"):
    DEFINES[var] = CONFIG[var]

DEFINES["NS_NO_XPCOM"] = True

DisableStlWrapping()

if CONFIG["MOZ_MAINTENANCE_SERVICE"]:
    DEFINES["MOZ_MAINTENANCE_SERVICE"] = CONFIG["MOZ_MAINTENANCE_SERVICE"]

# For debugging purposes only
# DEFINES['DISABLE_UPDATER_AUTHENTICODE_CHECK'] = True

if CONFIG["CC_TYPE"] == "clang-cl":
    WIN32_EXE_LDFLAGS += ["-ENTRY:wmainCRTStartup"]

if CONFIG["OS_ARCH"] == "WINNT":
    DEFINES["UNICODE"] = True
    DEFINES["_UNICODE"] = True
    USE_STATIC_LIBS = True
    if CONFIG["CC_TYPE"] in ("clang", "gcc"):
        WIN32_EXE_LDFLAGS += ["-municode"]

TEST_HARNESS_FILES.testing.mochitest.browser.toolkit.mozapps.update.tests.browser += [
    "data/simple.mar",
]

FINAL_TARGET_FILES += [
    "data/complete.exe",
    "data/complete.mar",
    "data/complete.png",
    "data/complete_log_success_mac",
    "data/complete_log_success_win",
    "data/complete_mac.mar",
    "data/complete_precomplete",
    "data/complete_precomplete_mac",
    "data/complete_removed-files",
    "data/complete_removed-files_mac",
    "data/complete_update_manifest",
    "data/old_version.mar",
    "data/partial.exe",
    "data/partial.mar",
    "data/partial.png",
    "data/partial_log_failure_mac",
    "data/partial_log_failure_win",
    "data/partial_log_success_mac",
    "data/partial_log_success_win",
    "data/partial_mac.mar",
    "data/partial_precomplete",
    "data/partial_precomplete_mac",
    "data/partial_removed-files",
    "data/partial_removed-files_mac",
    "data/partial_update_manifest",
    "data/replace_log_success",
    "data/simple.mar",
    "data/syncManagerTestChild.js",
    "TestAUSReadStrings1.ini",
    "TestAUSReadStrings2.ini",
    "TestAUSReadStrings3.ini",
    "TestAUSReadStrings4.ini",
]

FINAL_TARGET_PP_FILES += [
    "data/xpcshellConstantsPP.js",
]

with Files("browser/browser_telemetry_updatePing_*_ready.js"):
    BUG_COMPONENT = ("Toolkit", "Telemetry")
