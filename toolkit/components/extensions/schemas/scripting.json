/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

[
  {
    "namespace": "manifest",
    "types": [
      {
        "$extend": "OptionalPermissionNoPrompt",
        "choices": [{
          "type": "string",
          "enum": ["scripting"],
          "min_manifest_version": 3
        }]
      }
    ]
  },
  {
    "namespace": "scripting",
    "description": "Use the scripting API to execute script in different contexts.",
    "permissions": ["scripting"],
    "min_manifest_version": 3,
    "types": [
      {
        "id": "ScriptInjection",
        "type": "object",
        "description": "Details of a script injection",
        "properties": {
          "args": {
            "type": "array",
            "optional": true,
            "description": "The arguments to curry into a provided function. This is only valid if the <code>func</code> parameter is specified. These arguments must be JSON-serializable.",
            "items": { "type": "any" }
          },
          "files": {
            "type": "array",
            "optional": true,
            "description": "The path of the JS or CSS files to inject, relative to the extension's root directory. Exactly one of <code>files</code> and <code>func</code> must be specified.",
            "minItems": 1,
            "items": { "type": "string" }
          },
          "func": {
            "type": "function",
            "optional": true,
            "description": "A JavaScript function to inject. This function will be serialized, and then deserialized for injection. This means that any bound parameters and execution context will be lost. Exactly one of <code>files</code> and <code>func</code> must be specified."
          },
          "target": {
            "$ref": "InjectionTarget",
            "description": "Details specifying the target into which to inject the script."
          }
        }
      },
      {
        "id": "InjectionResult",
        "type": "object",
        "description": "Result of a script injection.",
        "properties": {
          "frameId": {
            "type": "number",
            "description": "The frame ID associated with the injection."
          },
          "result": {
            "type": "any",
            "optional": true,
            "description": "The result of the script execution."
          }
        }
      },
      {
        "id": "InjectionTarget",
        "type": "object",
        "properties": {
          "frameIds": {
            "type": "array",
            "optional": true,
            "description": "The IDs of specific frames to inject into.",
            "items": { "type": "number" }
          },
          "tabId": {
            "type": "number",
            "description": "The ID of the tab into which to inject."
          }
        }
      }
    ],
    "functions": [
      {
        "name": "executeScript",
        "type": "function",
        "description": "Injects a script into a target context. The script will be run at <code>document_idle</code>.",
        "async": "callback",
        "parameters": [
          {
            "name": "injection",
            "$ref": "ScriptInjection",
            "description": "The details of the script which to inject."
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Invoked upon completion of the injection. The resulting array contains the result of execution for each frame where the injection succeeded.",
            "parameters": [
              {
                "name": "results",
                "type": "array",
                "items": { "$ref": "InjectionResult" }
              }
            ]
          }
        ]
      }
    ]
  }
]
