<?xml version="1.0"?>
<!--
  Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/
-->
<window title="Testing OS.File on a chrome worker thread"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"/>
  <script type="application/javascript">
  <![CDATA[

"use strict";

let worker;

SpecialPowers.pushPrefEnv({"set": [["security.allow_eval_with_system_principal",
                                    true]]});
let test = function test() {
  SimpleTest.info("test_osfile_comms.xhtml: Starting test");
  // These are used in the worker.
  // eslint-disable-next-line no-unused-vars
  let { ctypes } = ChromeUtils.import("resource://gre/modules/ctypes.jsm");
  // eslint-disable-next-line no-unused-vars
  let { OS } = ChromeUtils.import("resource://gre/modules/osfile.jsm");
  worker = new ChromeWorker("worker_test_osfile_comms.js");
  SimpleTest.waitForExplicitFinish();
  try {
    worker.onerror = function onerror(error) {
      SimpleTest.ok(false, "received error "+error);
    }
    worker.onmessage = function onmessage(msg) {
      Cu.forceShrinkingGC();
      switch (msg.data.kind) {
        case "is":
          SimpleTest.ok(msg.data.outcome, msg.data.description +
          " ("+ msg.data.a + " ==? " + msg.data.b + ")" );
          return;
        case "isnot":
          SimpleTest.ok(msg.data.outcome, msg.data.description +
          " ("+ msg.data.a + " !=? " + msg.data.b + ")" );
          return;
        case "ok":
          SimpleTest.ok(msg.data.condition, msg.data.description);
          return;
        case "info":
          SimpleTest.info(msg.data.description);
          return;
        case "finish":
          SimpleTest.finish();
          return;
        case "value":
          SimpleTest.ok(true, "test_osfile_comms.xhtml: Received value " + JSON.stringify(msg.data.value));
          // eslint-disable-next-line no-eval
          let type = eval(msg.data.typename);
          // eslint-disable-next-line no-eval
          let check = eval(msg.data.check);
          let value = msg.data.value;
          let deserialized = type.fromMsg(value);
          check(deserialized, "Main thread test: ");
          return;
      default:
        SimpleTest.ok(false, "test_osfile_comms.xhtml: wrong message "+JSON.stringify(msg.data));
      }
    };
    worker.postMessage(0)
    ok(true, "Worker launched");
  } catch(x) {
    // As we have set |waitForExplicitFinish|, we add this fallback
    // in case of uncaught error, to ensure that the test does not
    // just freeze.
    ok(false, "Caught exception " + x + " at " + x.stack);
    SimpleTest.finish();
  }
};

]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
  <label id="test-result"/>
</window>
