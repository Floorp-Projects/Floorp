// -*- mode: Rust -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.
{# The rendered source is autogenerated, but this
Jinja2 template is not. Please file bugs! #}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

use crate::private::Ping;
use once_cell::sync::Lazy;

{% for obj in all_objs['pings'].values() %}
#[allow(non_upper_case_globals)]
/// {{ obj.description|wordwrap() | replace('\n', '\n/// ') }}
pub static {{ obj.name|snake_case }}: Lazy<Ping> = Lazy::new(|| {
    Ping::new(
        "{{ obj.name }}",
        {{ obj.include_client_id|rust }},
        {{ obj.send_if_empty|rust }},
        {{ obj.reason_codes|rust }},
    )
});

{% endfor %}

/// Instantiate each custom ping once to trigger registration.
#[doc(hidden)]
pub fn register_pings() {
    {% for obj in all_objs['pings'].values() %}
    let _ = &*{{obj.name|snake_case }};
    {% endfor %}
}

#[cfg(feature = "with_gecko")]
pub(crate) fn submit_ping_by_id(id: u32, reason: Option<&str>) {
    match id {
{% for obj in all_objs['pings'].values() %}
        {{ obj.name|ping_id }} => {{ obj.name | snake_case }}.submit(reason),
{% endfor %}
        _ => {
            // TODO: instrument this error.
            log::error!("Cannot submit unknown ping {} by id.", id);
        }
    }
}
