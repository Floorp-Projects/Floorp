{
  "Accessibility should work (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility should report uninteresting nodes (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility roledescription (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility orientation (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility autocomplete (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility multiselectable (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility keyshortcuts (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes should not report text nodes inside controls (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes rich text editable fields should have children (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes rich text editable fields with role should have children (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes non editable textbox with role and tabIndex and label should not have children (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes checkbox with and tabIndex and label should not have children (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes checkbox without label should not have children (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes plaintext contenteditable plain text field with role should not have children (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes root option should work a button (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes root option should work an input (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes root option should work a menu (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes root option should return null when the element is no longer in DOM (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Accessibility filtering children of leaf nodes root option should support the interestingOnly option (accessibility.spec.ts)": [
    "SKIP"
  ],
  "Browser specs Browser.version should return whether we are in headless (browser.spec.ts)": [
    "PASS"
  ],
  "Browser specs Browser.userAgent should include WebKit (browser.spec.ts)": [
    "PASS"
  ],
  "Browser specs Browser.target should return browser target (browser.spec.ts)": [
    "PASS"
  ],
  "Browser specs Browser.process should return child_process instance (browser.spec.ts)": [
    "PASS"
  ],
  "Browser specs Browser.process should not return child_process for remote browser (browser.spec.ts)": [
    "PASS"
  ],
  "Browser specs Browser.isConnected should set the browser connected state (browser.spec.ts)": [
    "PASS"
  ],
  "BrowserContext should have default context (browsercontext.spec.ts)": [
    "PASS"
  ],
  "BrowserContext should create new incognito context (browsercontext.spec.ts)": [
    "PASS"
  ],
  "BrowserContext should close all belonging targets once closing context (browsercontext.spec.ts)": [
    "PASS"
  ],
  "BrowserContext window.open should use parent tab context (browsercontext.spec.ts)": [
    "FAIL"
  ],
  "BrowserContext should fire target events (browsercontext.spec.ts)": [
    "FAIL"
  ],
  "BrowserContext should wait for a target (browsercontext.spec.ts)": [
    "TIMEOUT"
  ],
  "BrowserContext should timeout waiting for a non-existent target (browsercontext.spec.ts)": [
    "PASS"
  ],
  "BrowserContext should isolate localStorage and cookies (browsercontext.spec.ts)": [
    "FAIL"
  ],
  "BrowserContext should work across sessions (browsercontext.spec.ts)": [
    "FAIL"
  ],
  "Page.click should click the button (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click svg (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click the button if window.Node is removed (click.spec.ts)": [
    "FAIL"
  ],
  "Page.click should click on a span with an inline element inside (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should not throw UnhandledPromiseRejection when page closes (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click the button after navigation  (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click with disabled javascript (click.spec.ts)": [
    "FAIL"
  ],
  "Page.click should click when one of inline box children is outside of viewport (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should select the text by triple clicking (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click offscreen buttons (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click wrapped links (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click on checkbox input and toggle (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click on checkbox label and toggle (click.spec.ts)": [
    "FAIL", "PASS"
  ],
  "Page.click should fail to click a missing button (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should not hang with touch-enabled viewports (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should scroll and click the button (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should double click the button (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click a partially obscured button (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click a rotated button (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should fire contextmenu event on right click (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click links which cause navigation (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click the button inside an iframe (click.spec.ts)": [
    "PASS"
  ],
  "Page.click should click the button with fixed position inside an iframe (click.spec.ts)": [
    "SKIP"
  ],
  "Page.click should click the button with deviceScaleFactor set (click.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.cookies should return no cookies in pristine browser context (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.cookies should get a cookie (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.cookies should properly report httpOnly cookie (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.cookies should properly report \"Strict\" sameSite cookie (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.cookies should properly report \"Lax\" sameSite cookie (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.cookies should get multiple cookies (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.cookies should get cookies from multiple urls (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should work (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should isolate cookies in browser contexts (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should set multiple cookies (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should have |expires| set to |-1| for session cookies (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.setCookie should set cookie with reasonable defaults (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should set a cookie with a path (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should not set a cookie on a blank page (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.setCookie should not set a cookie with blank page URL (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.setCookie should not set a cookie on a data URL page (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.setCookie should default to setting secure cookie for HTTPS websites (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should be able to set unsecure cookie for HTTP website (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.setCookie should set a cookie on a different domain (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should set cookies from a frame (cookies.spec.ts)": [
    "FAIL"
  ],
  "Cookie specs Page.setCookie should set secure same-site cookies from a frame (cookies.spec.ts)": [
    "PASS"
  ],
  "Cookie specs Page.deleteCookie should work (cookies.spec.ts)": [
    "FAIL"
  ],
  "DefaultBrowserContext page.cookies() should work (defaultbrowsercontext.spec.ts)": [
    "PASS"
  ],
  "DefaultBrowserContext page.setCookie() should work (defaultbrowsercontext.spec.ts)": [
    "FAIL"
  ],
  "DefaultBrowserContext page.deleteCookie() should work (defaultbrowsercontext.spec.ts)": [
    "FAIL"
  ],
  "Page.Events.Dialog should fire (dialog.spec.ts)": [
    "PASS"
  ],
  "Page.Events.Dialog should allow accepting prompts (dialog.spec.ts)": [
    "FAIL"
  ],
  "Page.Events.Dialog should dismiss the prompt (dialog.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.boundingBox should work (elementhandle.spec.ts)": [
    "FAIL"
  ],
  "ElementHandle specs ElementHandle.boundingBox should handle nested frames (elementhandle.spec.ts)": [
    "PASS", "FAIL"
  ],
  "ElementHandle specs ElementHandle.boundingBox should return null for invisible elements (elementhandle.spec.ts)": [
    "FAIL"
  ],
  "ElementHandle specs ElementHandle.boundingBox should force a layout (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.boundingBox should work with SVG nodes (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.boxModel should work (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.boxModel should return null for invisible elements (elementhandle.spec.ts)": [
    "FAIL"
  ],
  "ElementHandle specs ElementHandle.contentFrame should work (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.click should work (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.click should work for Shadow DOM v1 (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.click should work for TextNodes (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.click should throw for detached nodes (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.click should throw for hidden nodes (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.click should throw for recursively hidden nodes (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.click should throw for <br> elements (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.hover should work (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs ElementHandle.isIntersectingViewport should work (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should register and unregister (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should throw with invalid query names (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should work for multiple elements (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should eval correctly (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should wait correctly with waitForSelector (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should wait correctly with waitFor (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should work when both queryOne and queryAll are registered (elementhandle.spec.ts)": [
    "PASS"
  ],
  "ElementHandle specs Custom queries should eval when both queryOne and queryAll are registered (elementhandle.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.viewport should get the proper viewport size (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.viewport should support mobile emulation (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.viewport should support touch emulation (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.viewport should be detectable by Modernizr (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.viewport should detect touch when applying viewport with touches (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.viewport should support landscape emulation (emulation.spec.ts)": [
    "FAIL"
  ],
  "Emulation Page.emulate should work (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.emulate should support clicking (emulation.spec.ts)": [
    "PASS", "FAIL"
  ],
  "Emulation Page.emulateMediaType should work (emulation.spec.ts)": [
    "FAIL"
  ],
  "Emulation Page.emulateMediaType should throw in case of bad argument (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.emulateMediaFeatures should work (emulation.spec.ts)": [
    "FAIL"
  ],
  "Emulation Page.emulateMediaFeatures should throw in case of bad argument (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.emulateTimezone should work (emulation.spec.ts)": [
    "FAIL"
  ],
  "Emulation Page.emulateTimezone should throw for invalid timezone IDs (emulation.spec.ts)": [
    "FAIL"
  ],
  "Emulation Page.emulateVisionDeficiency should work (emulation.spec.ts)": [
    "FAIL"
  ],
  "Emulation Page.emulateVisionDeficiency should throw for invalid vision deficiencies (emulation.spec.ts)": [
    "PASS"
  ],
  "Emulation Page.emulateNetworkConditions should change navigator.connection.effectiveType (emulation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluate should work (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer BigInt (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer NaN (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer -0 (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer Infinity (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer -Infinity (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer arrays (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer arrays as arrays, not objects (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should modify global environment (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should evaluate in the page context (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return undefined for objects with symbols (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluate should work with function shorthands (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should work with unicode chars (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should throw when evaluation triggers reload (evaluation.spec.ts)": [
    "TIMEOUT"
  ],
  "Evaluation specs Page.evaluate should await promise (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should work right after framenavigated (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should work from-inside an exposed function (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluate should reject promise with exception (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should support thrown strings as error messages (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should support thrown numbers as error messages (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return complex objects (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return BigInt (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return NaN (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return -0 (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return Infinity (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return -Infinity (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should accept \"undefined\" as one of multiple parameters (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should properly serialize null fields (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should return undefined for non-serializable objects (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluate should fail for circular object (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluate should be able to throw a tricky error (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should accept a string (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should accept a string with semi colons (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should accept a string with comments (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should accept element handle as an argument (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should throw if underlying element was disposed (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should throw if elementHandles are from other frames (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should simulate a user gesture (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluate should throw a nice error after a navigation (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluate should not throw an error when evaluation does a navigation (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should transfer 100Mb of data from page to node.js (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluate should throw error with detailed information on exception inside promise  (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Page.evaluateOnNewDocument should evaluate before anything else on the page (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Page.evaluateOnNewDocument should work with CSP (evaluation.spec.ts)": [
    "FAIL"
  ],
  "Evaluation specs Frame.evaluate should have different execution contexts (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Frame.evaluate should have correct execution contexts (evaluation.spec.ts)": [
    "PASS"
  ],
  "Evaluation specs Frame.evaluate should execute after cross-site navigation (evaluation.spec.ts)": [
    "PASS"
  ],
  "EventEmitter on on: adds an event listener that is fired when the event is emitted (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter on on sends the event data to the handler (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter on on: supports chaining (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter on addListener: adds an event listener that is fired when the event is emitted (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter on addListener sends the event data to the handler (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter on addListener: supports chaining (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter off off: removes the listener so it is no longer called (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter off off: supports chaining (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter off removeListener: removes the listener so it is no longer called (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter off removeListener: supports chaining (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter once only calls the listener once and then removes it (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter once supports chaining (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter emit calls all the listeners for an event (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter emit passes data through to the listener (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter emit returns true if the event has listeners (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter emit returns false if the event has listeners (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter listenerCount returns the number of listeners for the given event (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter removeAllListeners removes every listener from all events by default (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter removeAllListeners returns the emitter for chaining (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "EventEmitter removeAllListeners can filter to remove only listeners for a given event name (EventEmitter.spec.ts)": [
    "PASS"
  ],
  "Fixtures dumpio option should work with pipe option  (fixtures.spec.ts)": [
    "SKIP"
  ],
  "Fixtures should dump browser process stderr (fixtures.spec.ts)": [
    "PASS"
  ],
  "Fixtures should close the browser when the node process closes (fixtures.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame.executionContext should work (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame.evaluateHandle should work (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame.evaluate should throw for detached frames (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should handle nested frames (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should send events when frames are manipulated dynamically (frame.spec.ts)": [
    "FAIL"
  ],
  "Frame specs Frame Management should send \"framenavigated\" when navigating on anchor URLs (frame.spec.ts)": [
    "TIMEOUT"
  ],
  "Frame specs Frame Management should persist mainFrame on cross-process navigation (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should not send attach/detach events for main frame (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should detach child frames on navigation (frame.spec.ts)": [
    "FAIL"
  ],
  "Frame specs Frame Management should support framesets (frame.spec.ts)": [
    "FAIL"
  ],
  "Frame specs Frame Management should report frame from-inside shadow DOM (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should report frame.name() (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should report frame.parent() (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should report different frame instance when frame re-attaches (frame.spec.ts)": [
    "PASS"
  ],
  "Frame specs Frame Management should support url fragment (frame.spec.ts)": [
    "PASS"
  ],
  "Emulate idle state changing idle state emulation causes change of the IdleDetector state (idle_override.spec.ts)": [
    "FAIL"
  ],
  "ignoreHTTPSErrors should work (ignorehttpserrors.spec.ts)": [
    "PASS"
  ],
  "ignoreHTTPSErrors should work with request interception (ignorehttpserrors.spec.ts)": [
    "FAIL"
  ],
  "ignoreHTTPSErrors should work with mixed content (ignorehttpserrors.spec.ts)": [
    "PASS"
  ],
  "ignoreHTTPSErrors Response.securityDetails should work (ignorehttpserrors.spec.ts)": [
    "FAIL"
  ],
  "ignoreHTTPSErrors Response.securityDetails should be |null| for non-secure requests (ignorehttpserrors.spec.ts)": [
    "PASS"
  ],
  "ignoreHTTPSErrors Response.securityDetails Network redirects should report SecurityDetails (ignorehttpserrors.spec.ts)": [
    "PASS", "FAIL"
  ],
  "input tests input should upload the file (input.spec.ts)": [
    "SKIP"
  ],
  "input tests Page.waitForFileChooser should work when file input is attached to DOM (input.spec.ts)": [
    "SKIP"
  ],
  "input tests Page.waitForFileChooser should work when file input is not attached to DOM (input.spec.ts)": [
    "SKIP"
  ],
  "input tests Page.waitForFileChooser should respect timeout (input.spec.ts)": [
    "SKIP"
  ],
  "input tests Page.waitForFileChooser should respect default timeout when there is no custom timeout (input.spec.ts)": [
    "SKIP"
  ],
  "input tests Page.waitForFileChooser should prioritize exact timeout over default timeout (input.spec.ts)": [
    "SKIP"
  ],
  "input tests Page.waitForFileChooser should work with no timeout (input.spec.ts)": [
    "SKIP"
  ],
  "input tests Page.waitForFileChooser should return the same file chooser when there are many watchdogs simultaneously (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.accept should accept single file (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.accept should be able to read selected file (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.accept should be able to reset selected files with empty file list (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.accept should not accept multiple files for single-file input (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.accept should fail for non-existent files (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.accept should fail when accepting file chooser twice (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.cancel should cancel dialog (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.cancel should fail when canceling file chooser twice (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.isMultiple should work for single file pick (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.isMultiple should work for \"multiple\" (input.spec.ts)": [
    "SKIP"
  ],
  "input tests FileChooser.isMultiple should work for \"webkitdirectory\" (input.spec.ts)": [
    "SKIP"
  ],
  "JSHandle Page.evaluateHandle should work (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle Page.evaluateHandle should accept object handle as an argument (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle Page.evaluateHandle should accept object handle to primitive types (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle Page.evaluateHandle should warn on nested object handles (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle Page.evaluateHandle should accept object handle to unserializable value (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle Page.evaluateHandle should use the same JS wrappers (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle Page.evaluateHandle should work with primitives (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.getProperty should work (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.jsonValue should work (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.jsonValue works with jsonValues that are not objects (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.jsonValue works with jsonValues that are primitives (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.jsonValue should not work with dates (jshandle.spec.ts)": [
    "FAIL"
  ],
  "JSHandle JSHandle.jsonValue should throw for circular objects (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.getProperties should work (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.getProperties should return even non-own properties (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.asElement should work (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.asElement should return null for non-elements (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.asElement should return ElementHandle for TextNodes (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.toString should work for primitives (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.toString should work for complicated objects (jshandle.spec.ts)": [
    "PASS"
  ],
  "JSHandle JSHandle.toString should work with different subtypes (jshandle.spec.ts)": [
    "PASS"
  ],
  "Keyboard should type into a textarea (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard should press the metaKey (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should move with the arrow keys (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard should send a character with ElementHandle.press (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard ElementHandle.press should support |text| option (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should send a character with sendCharacter (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should report shiftKey (keyboard.spec.ts)": [
    "PASS", "FAIL"
  ],
  "Keyboard should report multiple modifiers (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard should send proper codes while typing (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard should send proper codes while typing with shift (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard should not type canceled events (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard should specify repeat property (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should type all kinds of characters (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should specify location (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should throw on unknown keys (keyboard.spec.ts)": [
    "PASS"
  ],
  "Keyboard should type emoji (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should type emoji into an iframe (keyboard.spec.ts)": [
    "FAIL"
  ],
  "Keyboard should press the meta key (keyboard.spec.ts)": [
    "PASS", "FAIL"
  ],
  "Launcher specs Puppeteer BrowserFetcher should download and extract chrome linux binary (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer BrowserFetcher should download and extract firefox linux binary (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Browser.disconnect should reject navigation when browser closes (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Browser.disconnect should reject waitForSelector when browser closes (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Browser.close should terminate network waiters (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should reject all promises when browser is closed (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should reject if executable path is invalid (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch userDataDir option (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch userDataDir argument (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch userDataDir option restores preferences (launcher.spec.ts)":[
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch userDataDir option should restore state (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch userDataDir option should restore cookies (launcher.spec.ts)": [
    "SKIP"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should return the default arguments (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should report the correct product (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should work with no default arguments (launcher.spec.ts)": [
    "FAIL", "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should filter out ignored default arguments (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should have default URL when launching browser (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should have custom URL when launching browser (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should set the default viewport (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should disable the default viewport (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should take fullPage screenshots when defaultViewport is null (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should launch Chrome properly with --no-startup-window and waitForInitialPage=false (launcher.spec.ts)": [
    "SKIP"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should be able to launch Chrome (launcher.spec.ts)": [
    "SKIP"
  ],
  "Launcher specs Puppeteer Puppeteer.launch falls back to launching chrome if there is an unknown product but logs a warning (launcher.spec.ts)": [
    "SKIP"
  ],
  "Launcher specs Puppeteer Puppeteer.launch should be able to launch Firefox (launcher.spec.ts)": [
    "SKIP"
  ],
  "Launcher specs Puppeteer Puppeteer.connect should be able to connect multiple times to the same browser (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.connect should be able to close remote browser (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.connect should support ignoreHTTPSErrors option (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.connect should be able to reconnect to a disconnected browser (launcher.spec.ts)": [
    "PASS"
  ],
  "Launcher specs Puppeteer Puppeteer.connect should be able to connect to the same page simultaneously (launcher.spec.ts)": [
    "FAIL"
  ],
  "Launcher specs Puppeteer Puppeteer.connect should be able to reconnect (launcher.spec.ts)": [
    "FAIL"
  ],
  "Launcher specs Puppeteer Puppeteer.executablePath should work (launcher.spec.ts)": [
    "SKIP"
  ],
  "Launcher specs Browser target events should work (launcher.spec.ts)": [
    "FAIL"
  ],
  "Launcher specs Browser.Events.disconnected should be emitted when: browser gets closed, disconnected or underlying websocket gets closed (launcher.spec.ts)": [
    "PASS"
  ],
  "Mouse should click the document (mouse.spec.ts)": [
    "PASS"
  ],
  "Mouse should resize the textarea (mouse.spec.ts)": [
    "PASS"
  ],
  "Mouse should select the text with mouse (mouse.spec.ts)": [
    "PASS"
  ],
  "Mouse should trigger hover state (mouse.spec.ts)": [
    "PASS", "FAIL"
  ],
  "Mouse should trigger hover state with removed window.Node (mouse.spec.ts)": [
    "FAIL"
  ],
  "Mouse should set modifier keys on click (mouse.spec.ts)": [
    "PASS"
  ],
  "Mouse should send mouse wheel events (mouse.spec.ts)": [
    "FAIL"
  ],
  "Mouse should tween mouse movement (mouse.spec.ts)": [
    "PASS", "FAIL"
  ],
  "Mouse should work with mobile viewports and cross process navigations (mouse.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should work (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should work with anchor navigation (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Page.goto should work with redirects (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should navigate to about:blank (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should return response when page changes its URL after load (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should work with subframes return 204 (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Page.goto should fail when server returns 204 (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Page.goto should navigate to empty page with domcontentloaded (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should work when page calls history API in beforeunload (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should navigate to empty page with networkidle0 (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Page.goto should navigate to empty page with networkidle2 (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Page.goto should fail when navigating to bad url (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Page.goto should fail when navigating to bad SSL (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Page.goto should fail when navigating to bad SSL after redirects (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should throw if networkidle is passed as an option (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should fail when main resources failed to load (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should fail when exceeding maximum navigation timeout (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should fail when exceeding default maximum navigation timeout (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should fail when exceeding default maximum timeout (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should prioritize default navigation timeout over default timeout (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should disable timeout when its set to 0 (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should work when navigating to valid url (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should work when navigating to data url (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Page.goto should work when navigating to 404 (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should return last response in redirect chain (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should wait for network idle to succeed navigation (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Page.goto should not leak listeners during navigation (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should not leak listeners during bad navigation (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should not leak listeners during navigation of 11 pages (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should navigate to dataURL and fire dataURL requests (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Page.goto should navigate to URL with hash and fire requests without hash (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Page.goto should work with self requesting page (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should fail when navigating and show the url at the error message (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goto should send referer (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Page.waitForNavigation should work (navigation.spec.ts)": [
    "PASS", "FAIL"
  ],
  "navigation Page.waitForNavigation should work with both domcontentloaded and load (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.waitForNavigation should work with clicking on anchor links (navigation.spec.ts)": [
    "TIMEOUT", "FAIL"
  ],
  "navigation Page.waitForNavigation should work with history.pushState() (navigation.spec.ts)": [
    "FAIL", "TIMEOUT"
  ],
  "navigation Page.waitForNavigation should work with history.replaceState() (navigation.spec.ts)": [
    "FAIL", "TIMEOUT"
  ],
  "navigation Page.waitForNavigation should work with DOM history.back()/history.forward() (navigation.spec.ts)": [
    "FAIL", "TIMEOUT"
  ],
  "navigation Page.waitForNavigation should work when subframe issues window.stop() (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Page.goBack should work (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.goBack should work with HistoryAPI (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Frame.goto should navigate subframes (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Frame.goto should reject when frame detaches (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Frame.goto should return matching responses (navigation.spec.ts)": [
    "TIMEOUT"
  ],
  "navigation Frame.waitForNavigation should work (navigation.spec.ts)": [
    "FAIL"
  ],
  "navigation Frame.waitForNavigation should fail when frame detaches (navigation.spec.ts)": [
    "PASS"
  ],
  "navigation Page.reload should work (navigation.spec.ts)": [
    "PASS"
  ],
  "network Page.Events.Request should fire for navigation requests (network.spec.ts)": [
    "PASS"
  ],
  "network Page.Events.Request should fire for iframes (network.spec.ts)": [
    "PASS"
  ],
  "network Page.Events.Request should fire for fetches (network.spec.ts)": [
    "PASS"
  ],
  "network Request.frame should work for main frame navigation request (network.spec.ts)": [
    "PASS"
  ],
  "network Request.frame should work for subframe navigation request (network.spec.ts)": [
    "PASS"
  ],
  "network Request.frame should work for fetch requests (network.spec.ts)": [
    "PASS"
  ],
  "network Request.headers should work (network.spec.ts)": [
    "PASS"
  ],
  "network Response.headers should work (network.spec.ts)": [
    "PASS"
  ],
  "network Response.fromCache should return |false| for non-cached content (network.spec.ts)": [
    "PASS"
  ],
  "network Response.fromCache should work (network.spec.ts)": [
    "FAIL"
  ],
  "network Response.fromServiceWorker should return |false| for non-service-worker content (network.spec.ts)": [
    "PASS"
  ],
  "network Response.fromServiceWorker Response.fromServiceWorker (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Request.postData should work (network.spec.ts)": [
    "FAIL"
  ],
  "network Request.postData should be |undefined| when there is no post data (network.spec.ts)": [
    "PASS"
  ],
  "network Response.text should work (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Response.text should return uncompressed text (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Response.text should throw when requesting body of redirected response (network.spec.ts)": [
    "FAIL"
  ],
  "network Response.text should wait until response completes (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Response.json should work (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Response.buffer should work (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Response.buffer should work with compression (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Response.statusText should work (network.spec.ts)": [
    "PASS"
  ],
  "network Network Events Page.Events.Request (network.spec.ts)": [
    "FAIL", "PASS"
  ],
  "network Network Events Page.Events.RequestServedFromCache (network.spec.ts)": [
    "FAIL"
  ],
  "network Network Events Page.Events.Response (network.spec.ts)": [
    "PASS", "FAIL"
  ],
  "network Network Events Page.Events.RequestFailed (network.spec.ts)": [
    "FAIL"
  ],
  "network Network Events Page.Events.RequestFinished (network.spec.ts)": [
    "FAIL"
  ],
  "network Network Events should fire events in proper order (network.spec.ts)": [
    "FAIL"
  ],
  "network Network Events should support redirects (network.spec.ts)": [
    "FAIL"
  ],
  "network Request.isNavigationRequest should work (network.spec.ts)": [
    "FAIL"
  ],
  "network Request.isNavigationRequest should work with request interception (network.spec.ts)": [
    "FAIL"
  ],
  "network Request.isNavigationRequest should work when navigating to image (network.spec.ts)": [
    "PASS"
  ],
  "network Page.setExtraHTTPHeaders should work (network.spec.ts)": [
    "FAIL"
  ],
  "network Page.setExtraHTTPHeaders should throw for non-string header values (network.spec.ts)": [
    "PASS"
  ],
  "network Page.authenticate should work (network.spec.ts)": [
    "TIMEOUT"
  ],
  "network Page.authenticate should fail if wrong credentials (network.spec.ts)": [
    "FAIL"
  ],
  "network Page.authenticate should allow disable authentication (network.spec.ts)": [
    "FAIL"
  ],
  "network Page.authenticate should not disable caching (network.spec.ts)": [
    "FAIL"
  ],
  "Page Page.close should reject all promises when page is closed (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.close should not be visible in browser.pages (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.close should run beforeunload if asked for (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.close should *not* run beforeunload by default (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.close should set the page close state (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.close should terminate network waiters (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.Events.Load should fire when expected (page.spec.ts)": [
    "PASS"
  ],
  "Page removing and adding event handlers should correctly fire event handlers as they are added and then removed (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.error should throw when page crashes (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.Events.Popup should work (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Popup should work with noopener (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.Events.Popup should work with clicking target=_blank and without rel=opener (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.Events.Popup should work with clicking target=_blank and with rel=opener (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.Events.Popup should work with fake-clicking target=_blank and rel=noopener (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.Events.Popup should work with clicking target=_blank and rel=noopener (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page BrowserContext.overridePermissions should be prompt by default (page.spec.ts)": [
    "PASS"
  ],
  "Page BrowserContext.overridePermissions should deny permission when not listed (page.spec.ts)": [
    "FAIL"
  ],
  "Page BrowserContext.overridePermissions should fail when bad permission is given (page.spec.ts)": [
    "PASS"
  ],
  "Page BrowserContext.overridePermissions should grant permission when listed (page.spec.ts)": [
    "FAIL"
  ],
  "Page BrowserContext.overridePermissions should reset permissions (page.spec.ts)": [
    "FAIL"
  ],
  "Page BrowserContext.overridePermissions should trigger permission onchange (page.spec.ts)": [
    "FAIL"
  ],
  "Page BrowserContext.overridePermissions should isolate permissions between browser contexts (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setGeolocation should work (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setGeolocation should throw when invalid longitude (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setOfflineMode should work (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setOfflineMode should emulate navigator.onLine (page.spec.ts)": [
    "FAIL"
  ],
  "Page ExecutionContext.queryObjects should work (page.spec.ts)": [
    "FAIL"
  ],
  "Page ExecutionContext.queryObjects should work for non-blank page (page.spec.ts)": [
    "FAIL"
  ],
  "Page ExecutionContext.queryObjects should fail for disposed handles (page.spec.ts)": [
    "PASS"
  ],
  "Page ExecutionContext.queryObjects should fail primitive values as prototypes (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.Events.Console should work (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Console should work for different console API calls (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Console should not fail for window object (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Console should trigger correct Log (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Console should have location when fetch fails (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Console should have location and stack trace for console API calls (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Console should not throw when there are console messages in detached iframes (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.Events.DOMContentLoaded should fire when expected (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.metrics should get metrics from a page (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.metrics metrics event fired on console.timeStamp (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.waitForRequest should work (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForRequest should work with predicate (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForRequest should respect timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForRequest should respect default timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForRequest should work with async predicate (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForRequest should work with no timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForResponse should work (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForResponse should respect timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForResponse should respect default timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForResponse should work with predicate (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.waitForResponse should work with no timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.exposeFunction should work (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should throw exception in page context (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should support throwing \"null\" (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should be callable from-inside evaluateOnNewDocument (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should survive navigation (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should await returned promise (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should work on frames (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should work on frames before navigation (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.exposeFunction should work with complex objects (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.PageError should fire (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setUserAgent should work (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setUserAgent should work for subframes (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setUserAgent should emulate device user-agent (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work with doctype (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work with HTML 4 doctype (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should respect timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should respect default navigation timeout (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should await resources to load (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work fast enough (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work with tricky content (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work with accents (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work with emojis (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setContent should work with newline (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setBypassCSP should bypass CSP meta tag (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setBypassCSP should bypass CSP header (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setBypassCSP should bypass after cross-process navigation (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setBypassCSP should bypass CSP in iframes as well (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.addScriptTag should throw an error if no options are provided (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should work with a url (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should work with a url and type=module (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should work with a path and type=module (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should work with a content and type=module (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should throw an error if loading from url fail (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should work with a path (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should include sourcemap when path is provided (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should work with content (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addScriptTag should throw when added with content to the CSP page (page.spec.ts)": [
    "SKIP"
  ],
  "Page Page.addScriptTag should throw when added with URL to the CSP page (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addStyleTag should throw an error if no options are provided (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addStyleTag should work with a url (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addStyleTag should throw an error if loading from url fail (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addStyleTag should work with a path (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addStyleTag should include sourcemap when path is provided (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addStyleTag should work with content (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.addStyleTag should throw when added with content to the CSP page (page.spec.ts)": [
    "TIMEOUT"
  ],
  "Page Page.addStyleTag should throw when added with URL to the CSP page (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.url should work (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.setJavaScriptEnabled should work (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setCacheEnabled should enable or disable the cache based on the state passed (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.setCacheEnabled should stay disabled when toggling request interception on/off (page.spec.ts)": [
    "FAIL"
  ],
  "Page printing to PDF can print to PDF and save to file (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.title should return the page title (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should select single option (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should select only first option (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should not throw when select causes navigation (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should select multiple options (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should respect event bubbling (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should throw when element is not a <select> (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should return [] on no matched values (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should return an array of matched values (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should return an array of one element when multiple is not set (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should return [] on no values (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should deselect all options when passed no values for a multiple select (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should deselect all options when passed no values for a select without multiple (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should throw if passed in non-strings (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.select should work when re-defining top-level Event class (page.spec.ts)": [
    "FAIL"
  ],
  "Page Page.Events.Close should work with window.close (page.spec.ts)": [
    "SKIP"
  ],
  "Page Page.Events.Close should work with page.close (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.browser should return the correct browser instance (page.spec.ts)": [
    "PASS"
  ],
  "Page Page.browserContext should return the correct browser context instance (page.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$eval should work (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$eval should accept arguments (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$eval should accept ElementHandles as arguments (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$eval should throw error if no element is found (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector pierceHandler should find first element in shadow (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector pierceHandler should find all elements in shadow (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$$eval should work (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$$eval should accept extra arguments (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$$eval should accept ElementHandles as arguments (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$$eval should handle many elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$ should query existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$ should return null for non-existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$$ should query existing elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Page.$$ should return empty array if nothing is found (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Path.$x should query existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Path.$x should return empty array for non-existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector Path.$x should return multiple elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$ should query existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$ should return null for non-existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$eval should work (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$eval should retrieve content from subtree (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$eval should throw in case of missing selector (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$$eval should work (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$$eval should retrieve content from subtree (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$$eval should not throw in case of missing selector (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$$ should query existing elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$$ should return empty array for non-existing elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$x should query existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector ElementHandle.$x should return null for non-existing element (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector QueryAll should have registered handler (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector QueryAll $$ should query existing elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector QueryAll $$ should return empty array for non-existing elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector QueryAll $$eval should work (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector QueryAll $$eval should accept extra arguments (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector QueryAll $$eval should accept ElementHandles as arguments (queryselector.spec.ts)": [
    "PASS"
  ],
  "querySelector QueryAll $$eval should handle many elements (queryselector.spec.ts)": [
    "PASS"
  ],
  "request interception Page.setRequestInterception should intercept (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work when POST is redirected with 302 (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work when header manipulation headers with redirect (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should be able to remove headers (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should contain referer header (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should properly return navigation response when URL has cookies (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should stop intercepting (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should show custom HTTP headers (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with redirect inside sync XHR (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with custom referer headers (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should be abortable (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should be abortable with custom error codes (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should send referer (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should fail navigation when aborting main resource (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with redirects (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with redirects for subresources (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should be able to abort redirects (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with equal requests (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should navigate to dataURL and fire dataURL requests (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should be able to fetch dataURL and fire dataURL requests (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with encoded server (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with badly encoded server (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should work with encoded server - 2 (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should not throw \"Invalid Interception Id\" if the request was cancelled (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should throw if interception is not enabled (requestinterception.spec.ts)": [
    "PASS"
  ],
  "request interception Page.setRequestInterception should work with file URLs (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should not cache if cache disabled (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should cache if cache enabled (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Page.setRequestInterception should load fonts if cache enabled (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.continue should work (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.continue should amend HTTP headers (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.continue should redirect in a way non-observable to page (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.continue should amend method (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.continue should amend post data (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.continue should amend both post data and method on navigation (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.respond should work (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.respond should work with status code 422 (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.respond should redirect (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.respond should allow mocking binary responses (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "request interception Request.respond should stringify intercepted request response headers (requestinterception.spec.ts)": [
    "FAIL"
  ],
  "Screenshots Page.screenshot should work (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots Page.screenshot should clip rect (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots Page.screenshot should get screenshot bigger than the viewport (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots Page.screenshot should run in parallel (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots Page.screenshot should take fullPage screenshots (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots Page.screenshot should run in parallel in multiple pages (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots Page.screenshot should allow transparency (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots Page.screenshot should render white background on jpeg file (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots Page.screenshot should work with odd clip size on Retina displays (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots Page.screenshot should return base64 (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots ElementHandle.screenshot should work (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots ElementHandle.screenshot should take into account padding and border (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots ElementHandle.screenshot should capture full element when larger than viewport (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots ElementHandle.screenshot should scroll element into view (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots ElementHandle.screenshot should work with a rotated element (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots ElementHandle.screenshot should fail to screenshot a detached element (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Screenshots ElementHandle.screenshot should not hang with zero width/height element (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots ElementHandle.screenshot should work for an element with fractional dimensions (screenshot.spec.ts)": [
    "PASS"
  ],
  "Screenshots ElementHandle.screenshot should work for an element with an offset (screenshot.spec.ts)": [
    "FAIL"
  ],
  "Target Browser.targets should return all of the targets (target.spec.ts)": [
    "PASS"
  ],
  "Target Browser.pages should return all of the pages (target.spec.ts)": [
    "PASS"
  ],
  "Target should contain browser target (target.spec.ts)": [
    "PASS"
  ],
  "Target should be able to use the default page in the browser (target.spec.ts)": [
    "PASS"
  ],
  "Target should report when a new page is created and closed (target.spec.ts)": [
    "FAIL"
  ],
  "Target should report when a service worker is created and destroyed (target.spec.ts)": [
    "TIMEOUT"
  ],
  "Target should create a worker from a service worker (target.spec.ts)": [
    "TIMEOUT"
  ],
  "Target should create a worker from a shared worker (target.spec.ts)": [
    "TIMEOUT"
  ],
  "Target should report when a target url changes (target.spec.ts)": [
    "TIMEOUT"
  ],
  "Target should not report uninitialized pages (target.spec.ts)": [
    "FAIL"
  ],
  "Target should not crash while redirecting if original request was missed (target.spec.ts)": [
    "FAIL"
  ],
  "Target should have an opener (target.spec.ts)": [
    "TIMEOUT", "FAIL"
  ],
  "Target Browser.waitForTarget should wait for a target (target.spec.ts)": [
    "TIMEOUT"
  ],
  "Target Browser.waitForTarget should timeout waiting for a non-existent target (target.spec.ts)": [
    "PASS"
  ],
  "Touchscreen should tap the button (touchscreen.spec.ts)": [
    "FAIL"
  ],
  "Touchscreen should report touches (touchscreen.spec.ts)": [
    "FAIL"
  ],
  "waittask specs Page.waitFor should wait for selector (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should wait for an xpath (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should not allow you to select an element with single slash xpath (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should timeout (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should work with multiline body (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should wait for predicate (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should throw when unknown type (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should wait for predicate with arguments (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitFor should log a deprecation warning (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should accept a string (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should work when resolved right before execution context disposal (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should poll on interval (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should poll on interval async (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should poll on mutation (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should poll on mutation async (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should poll on raf (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should poll on raf async (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should work with strict CSP policy (waittask.spec.ts)": [
    "FAIL"
  ],
  "waittask specs Frame.waitForFunction should throw on bad polling value (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should throw negative polling interval (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should return the success value as a JSHandle (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should return the window as a success value (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should accept ElementHandle arguments (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should respect timeout (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should respect default timeout (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should disable timeout when its set to 0 (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should survive cross-process navigation (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForFunction should survive navigations (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Page.waitForTimeout waits for the given timeout before resolving (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForTimeout waits for the given timeout before resolving (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should immediately resolve promise if node exists (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should work with removed MutationObserver (waittask.spec.ts)": [
    "FAIL"
  ],
  "waittask specs Frame.waitForSelector should resolve promise when node is added (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should work when node is added through innerHTML (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector Page.waitForSelector is shortcut for main frame (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should run in specified frame (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should throw when frame is detached (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should survive cross-process navigation (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should wait for visible (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should wait for visible recursively (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector hidden should wait for visibility: hidden (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector hidden should wait for display: none (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector hidden should wait for removal (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should return null if waiting to hide non-existing element (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should respect timeout (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should have an error message specifically for awaiting an element to be hidden (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should respond to node attribute mutation (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should return the element handle (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForSelector should have correct stack trace for timeout (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath should support some fancy xpath (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath should respect timeout (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath should run in specified frame (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath should throw when frame is detached (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath hidden should wait for display: none (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath should return the element handle (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath should allow you to select a text node (waittask.spec.ts)": [
    "PASS"
  ],
  "waittask specs Frame.waitForXPath should allow you to select an element with single slash (waittask.spec.ts)": [
    "PASS"
  ],
  "Workers Page.workers (worker.spec.ts)": [
    "SKIP"
  ],
  "Workers should emit created and destroyed events (worker.spec.ts)": [
    "SKIP"
  ],
  "Workers should report console logs (worker.spec.ts)": [
    "SKIP"
  ],
  "Workers should have JSHandles for console logs (worker.spec.ts)": [
    "SKIP"
  ],
  "Workers should have an execution context (worker.spec.ts)": [
    "SKIP"
  ],
  "Workers should report errors (worker.spec.ts)": [
    "SKIP"
  ]
}
