/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIMIMEInfo.idl"

interface nsIUTF8StringEnumerator;
interface nsIURI;
interface nsIMutableArray;

/* nsIGIOMimeApp holds information about an application that is looked up
   with nsIGIOService::GetAppForMimeType. */
// 66009894-9877-405b-9321-bf30420e34e6 prev uuid

[scriptable, uuid(ca6bad0c-8a48-48ac-82c7-27bb8f510fbe)]
interface nsIGIOMimeApp : nsIHandlerApp
{
  const long EXPECTS_URIS  = 0;
  const long EXPECTS_PATHS = 1;
  const long EXPECTS_URIS_FOR_NON_FILES = 2;

  readonly attribute AUTF8String         id;
  readonly attribute AUTF8String         command;
  readonly attribute long                expectsURIs;  // see constants above
  readonly attribute nsIUTF8StringEnumerator supportedURISchemes;

  void setAsDefaultForMimeType(in AUTF8String mimeType);
  void setAsDefaultForFileExtensions(in AUTF8String extensions);
  void setAsDefaultForURIScheme(in AUTF8String uriScheme);
};

/*
 * The VFS service makes use of two distinct registries.
 *
 * The application registry holds information about applications (uniquely
 * identified by id), such as which MIME types and URI schemes they are
 * capable of handling, whether they run in a terminal, etc.
 *
 * The MIME registry holds information about MIME types, such as which
 * extensions map to a given MIME type.  The MIME registry also stores the
 * id of the application selected to handle each MIME type.
 */

// prev id dea20bf0-4e4d-48c5-b932-dc3e116dc64b
[scriptable, uuid(eda22a30-84e1-4e16-9ca0-cd1553c2b34a)]
interface nsIGIOService : nsISupports
{

  /*** MIME registry methods ***/

  /* Obtain the MIME type registered for an extension.  The extension
     should not include a leading dot. */
  AUTF8String        getMimeTypeFromExtension(in AUTF8String extension);

  /* Obtain the preferred application for opening a given URI scheme */
  nsIHandlerApp      getAppForURIScheme(in AUTF8String aURIScheme);

  /* Obtain list of application capable of opening given URI scheme */
  nsIMutableArray    getAppsForURIScheme(in AUTF8String aURIScheme);

  /* Obtain the preferred application for opening a given MIME type */
  nsIHandlerApp      getAppForMimeType(in AUTF8String mimeType);

  /* Create application info for given command and name */
  nsIGIOMimeApp      createAppFromCommand(in AUTF8String cmd,
                                          in AUTF8String appName);

  /* Find the application info by given command */
  nsIGIOMimeApp      findAppFromCommand(in AUTF8String cmd);

  /* Obtain a description for the given MIME type */
  AUTF8String        getDescriptionForMimeType(in AUTF8String mimeType);

  /*** Misc. methods ***/

  /* Open the given URI in the default application */
  void               showURI(in nsIURI uri);
  [noscript] void    showURIForInput(in ACString uri);

  /* Open path in file manager using org.freedesktop.FileManager1 interface */
  [noscript] void    orgFreedesktopFileManager1ShowItems(in ACString path);

  /* Check if we're in flatpak runtime or using GTK portals has been enforced */
  [noscript] bool    shouldUseFlatpakPortal();

};

%{C++
#define NS_GIOSERVICE_CONTRACTID "@mozilla.org/gio-service;1"
%}
