/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=8 sts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
%{C++
#include <stdio.h>
%}

interface mozIDOMWindowProxy;
interface nsIRunnable;
interface nsISimpleEnumerator;
[ptr] native FILE(FILE);

/*
 * Memory reporters measure Firefox's memory usage.  They are primarily used to
 * generate the about:memory page.  You should read
 * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Memory_reporting
 * before writing a memory reporter.
 */

[scriptable, function, uuid(62ef0e1c-dbd6-11e3-aa75-3c970e9f4238)]
interface nsIHandleReportCallback : nsISupports
{
  /*
   * The arguments to the callback are as follows.
   *
   *
   * |process|  The name of the process containing this reporter.  Each
   * reporter initially has "" in this field, indicating that it applies to the
   * current process.  (This is true even for reporters in a child process.)
   * When a reporter from a child process is copied into the main process, the
   * copy has its 'process' field set appropriately.
   *
   *
   * |path|  The path that this memory usage should be reported under.  Paths
   * are '/'-delimited, eg. "a/b/c".
   *
   * Each reporter can be viewed as representing a leaf node in a tree.
   * Internal nodes of the tree don't have reporters.  So, for example, the
   * reporters "explicit/a/b", "explicit/a/c", "explicit/d/e", and
   * "explicit/d/f" define this tree:
   *
   *   explicit
   *   |--a
   *   |  |--b [*]
   *   |  \--c [*]
   *   \--d
   *      |--e [*]
   *      \--f [*]
   *
   * Nodes marked with a [*] have a reporter.  Notice that the internal
   * nodes are implicitly defined by the paths.
   *
   * Nodes within a tree should not overlap measurements, otherwise the
   * parent node measurements will be double-counted.  So in the example
   * above, |b| should not count any allocations counted by |c|, and vice
   * versa.
   *
   * All nodes within each tree must have the same units.
   *
   * If you want to include a '/' not as a path separator, e.g. because the
   * path contains a URL, you need to convert each '/' in the URL to a '\'.
   * Consumers of the path will undo this change.  Any other '\' character
   * in a path will also be changed.  This is clumsy but hasn't caused any
   * problems so far.
   *
   * The paths of all reporters form a set of trees.  Trees can be
   * "degenerate", i.e. contain a single entry with no '/'.
   *
   *
   * |kind|  There are three kinds of memory reporters.
   *
   *  - HEAP: reporters measuring memory allocated by the heap allocator,
   *    e.g. by calling malloc, calloc, realloc, memalign, operator new, or
   *    operator new[].  Reporters in this category must have units
   *    UNITS_BYTES.
   *
   *  - NONHEAP: reporters measuring memory which the program explicitly
   *    allocated, but does not live on the heap.  Such memory is commonly
   *    allocated by calling one of the OS's memory-mapping functions (e.g.
   *    mmap, VirtualAlloc, or vm_allocate).  Reporters in this category
   *    must have units UNITS_BYTES.
   *
   *  - OTHER: reporters which don't fit into either of these categories.
   *    They can have any units.
   *
   * The kind only matters for reporters in the "explicit" tree;
   * aboutMemory.js uses it to calculate "heap-unclassified".
   *
   *
   * |units|  The units on the reporter's amount.  One of the following.
   *
   *  - BYTES: The amount contains a number of bytes.
   *
   *  - COUNT: The amount is an instantaneous count of things currently in
   *    existence.  For instance, the number of tabs currently open would have
   *    units COUNT.
   *
   *  - COUNT_CUMULATIVE: The amount contains the number of times some event
   *    has occurred since the application started up.  For instance, the
   *    number of times the user has opened a new tab would have units
   *    COUNT_CUMULATIVE.
   *
   *    The amount returned by a reporter with units COUNT_CUMULATIVE must
   *    never decrease over the lifetime of the application.
   *
   *  - PERCENTAGE: The amount contains a fraction that should be expressed as
   *    a percentage.  NOTE!  The |amount| field should be given a value 100x
   *    the actual percentage;  this number will be divided by 100 when shown.
   *    This allows a fractional percentage to be shown even though |amount| is
   *    an integer.  E.g. if the actual percentage is 12.34%, |amount| should
   *    be 1234.
   *
   *    Values greater than 100% are allowed.
   *
   *
   * |amount|  The numeric value reported by this memory reporter.  Accesses
   * can fail if something goes wrong when getting the amount.
   *
   *
   * |description|  A human-readable description of this memory usage report.
   */
  void callback(in ACString process, in AUTF8String path, in int32_t kind,
                in int32_t units, in int64_t amount,
                in AUTF8String description, in nsISupports data);
};

/*
 * An nsIMemoryReporter reports one or more memory measurements via a
 * callback function which is called once for each measurement.
 *
 * An nsIMemoryReporter that reports a single measurement is sometimes called a
 * "uni-reporter".  One that reports multiple measurements is sometimes called
 * a "multi-reporter".
 *
 * aboutMemory.js is the most important consumer of memory reports.  It
 * places the following constraints on reports.
 *
 * - All reports within a single sub-tree must have the same units.
 *
 * - There may be an "explicit" tree.  If present, it represents
 *   non-overlapping regions of memory that have been explicitly allocated with
 *   an OS-level allocation (e.g. mmap/VirtualAlloc/vm_allocate) or a
 *   heap-level allocation (e.g. malloc/calloc/operator new).  Reporters in
 *   this tree must have kind HEAP or NONHEAP, units BYTES.
 *
 * It is preferred, but not required, that report descriptions use complete
 * sentences (i.e. start with a capital letter and end with a period, or
 * similar).
 */
[scriptable, uuid(92a36db1-46bd-4fe6-988e-47db47236d8b)]
interface nsIMemoryReporter : nsISupports
{
  /*
   * Run the reporter.
   *
   * If |anonymize| is true, the memory reporter should anonymize any
   * privacy-sensitive details in memory report paths, by replacing them with a
   * string such as "<anonymized>". Anonymized memory reports may be sent
   * automatically via crash reports or telemetry.
   *
   * The following things are considered privacy-sensitive.
   *
   * - Content domains and URLs, and information derived from them.
   * - Content data, such as strings.
   * - Details about content code, such as filenames, function names or stack
   *   traces.
   * - Details about or data from the user's system, such as filenames.
   * - Running apps.
   *
   * In short, anything that could identify parts of the user's browsing
   * history is considered privacy-sensitive.
   *
   * The following thing are not considered privacy-sensitive.
   *
   * - Chrome domains and URLs.
   * - Information about installed extensions.
   */
  void collectReports(in nsIHandleReportCallback callback,
                      in nsISupports data,
                      in boolean anonymize);

  /*
   * Kinds. See the |kind| comment in nsIHandleReportCallback.
   */
  const int32_t KIND_NONHEAP = 0;
  const int32_t KIND_HEAP    = 1;
  const int32_t KIND_OTHER   = 2;

  /*
   * Units. See the |units| comment in nsIHandleReportCallback.
   */
  const int32_t UNITS_BYTES = 0;
  const int32_t UNITS_COUNT = 1;
  const int32_t UNITS_COUNT_CUMULATIVE = 2;
  const int32_t UNITS_PERCENTAGE = 3;
};

[scriptable, function, uuid(548b3909-c04d-4ca6-8466-b8bee3837457)]
interface nsIFinishReportingCallback : nsISupports
{
  void callback(in nsISupports data);
};

[scriptable, function, uuid(1a80cd0f-0d9e-4397-be69-68ad28fe5175)]
interface nsIHeapAllocatedCallback : nsISupports
{
  void callback(in int64_t bytesAllocated);
};

[scriptable, builtinclass, uuid(2998574d-8993-407a-b1a5-8ad7417653e1)]
interface nsIMemoryReporterManager : nsISupports
{
  /*
   * Initialize.
   */
  [must_use] void init();

  /*
   * Register the given nsIMemoryReporter.  The Manager service will hold a
   * strong reference to the given reporter, and will be responsible for freeing
   * the reporter at shutdown.  You may manually unregister the reporter with
   * unregisterStrongReporter() at any point.
   */
  void registerStrongReporter(in nsIMemoryReporter reporter);
  void registerStrongAsyncReporter(in nsIMemoryReporter reporter);

  /*
   * Like registerReporter, but the Manager service will hold a weak reference
   * via a raw pointer to the given reporter.  The reporter should be
   * unregistered before shutdown.
   * You cannot register JavaScript components with this function!  Always
   * register your JavaScript components with registerStrongReporter().
   */
  void registerWeakReporter(in nsIMemoryReporter reporter);
  void registerWeakAsyncReporter(in nsIMemoryReporter reporter);

  /*
   * Unregister the given memory reporter, which must have been registered with
   * registerStrongReporter().  You normally don't need to unregister your
   * strong reporters, as nsIMemoryReporterManager will take care of that at
   * shutdown.
   */
  void unregisterStrongReporter(in nsIMemoryReporter reporter);

  /*
   * Unregister the given memory reporter, which must have been registered with
   * registerWeakReporter().
   */
  void unregisterWeakReporter(in nsIMemoryReporter reporter);

  /*
   * These functions should only be used for testing purposes.
   */
  void blockRegistrationAndHideExistingReporters();
  void unblockRegistrationAndRestoreOriginalReporters();
  void registerStrongReporterEvenIfBlocked(in nsIMemoryReporter aReporter);

  /*
   * Get memory reports for the current process and all child processes.
   * |handleReport| is called for each report, and |finishReporting| is called
   * once all reports have been handled.
   *
   * |finishReporting| is called even if, for example, some child processes
   * fail to report back.  However, calls to this method will silently and
   * immediately abort -- and |finishReporting| will not be called -- if a
   * previous getReports() call is still in flight, i.e. if it has not yet
   * finished invoking |finishReporting|.  The silent abort is because the
   * in-flight request will finish soon, and the caller would very likely just
   * catch and ignore any error anyway.
   *
   * If |anonymize| is true, it indicates that the memory reporters should
   * anonymize any privacy-sensitive data (see above).
   */
  void getReports(in nsIHandleReportCallback handleReport,
                  in nsISupports handleReportData,
                  in nsIFinishReportingCallback finishReporting,
                  in nsISupports finishReportingData,
                  in boolean anonymize);

  /*
   * As above, but: If |minimizeMemoryUsage| is true, then each process will
   * minimize its memory usage (see the |minimizeMemoryUsage| method) before
   * gathering its report.  If DMD is enabled and |DMDDumpIdent| is non-empty
   * then write a DMD report to a file in the usual temporary directory (see
   * |dumpMemoryInfoToTempDir| in |nsIMemoryInfoDumper|.)
   */
  [noscript] void
    getReportsExtended(in nsIHandleReportCallback handleReport,
                       in nsISupports handleReportData,
                       in nsIFinishReportingCallback finishReporting,
                       in nsISupports finishReportingData,
                       in boolean anonymize,
                       in boolean minimizeMemoryUsage,
                       in AString DMDDumpIdent);

  /*
   * As above, but if DMD is enabled and |DMDFile| is non-null then
   * write a DMD report to that file and close it.
   */
  [noscript] void
    getReportsForThisProcessExtended(in nsIHandleReportCallback handleReport,
                                     in nsISupports handleReportData,
                                     in boolean anonymize,
                                     in FILE DMDFile,
                                     in nsIFinishReportingCallback finishReporting,
                                     in nsISupports finishReportingData);

  /*
   * Called by an asynchronous memory reporter upon completion.
   */
  [noscript] void endReport();

  /*
   * The memory reporter manager, for the most part, treats reporters
   * registered with it as a black box.  However, there are some
   * "distinguished" amounts (as could be reported by a memory reporter) that
   * the manager provides as attributes, because they are sufficiently
   * interesting that we want external code (e.g. telemetry) to be able to rely
   * on them.
   *
   * Note that these are not reporters and so getReports() does not look at
   * them.  However, distinguished amounts can be embedded in a reporter.
   *
   * Access to these attributes can fail.  In particular, some of them are not
   * available on all platforms.
   *
   * If you add a new distinguished amount, please update
   * toolkit/components/aboutmemory/tests/test_memoryReporters.xul.
   *
   * |vsize| (UNITS_BYTES)  The virtual size, i.e. the amount of address space
   * taken up.
   *
   * |vsizeMaxContiguous| (UNITS_BYTES)  The size of the largest contiguous
   * block of virtual memory.
   *
   * |resident| (UNITS_BYTES)  The resident size (a.k.a. RSS or physical memory
   * used).
   *
   * |residentFast| (UNITS_BYTES)  This is like |resident|, but on Mac OS
   * |resident| can purge pages, which is slow.  It also affects the result of
   * |residentFast|, and so |resident| and |residentFast| should not be used
   * together.
   *
   * |residentPeak| (UNITS_BYTES)  The peak resident size.
   *
   * |residentUnique| (UNITS_BYTES)  The unique set size (a.k.a. USS).
   *
   * |heapAllocated| (UNITS_BYTES)  Memory mapped by the heap allocator.
   *
   * |heapOverheadFraction| (UNITS_PERCENTAGE)  In the heap allocator, this is
   * the fraction of committed heap bytes that are overhead. Like all
   * UNITS_PERCENTAGE measurements, its amount is multiplied by 100x so it can
   * be represented by an int64_t.
   *
   * |JSMainRuntimeGCHeap| (UNITS_BYTES)  Size of the main JS runtime's GC
   * heap.
   *
   * |JSMainRuntimeTemporaryPeak| (UNITS_BYTES)  Peak size of the transient
   * storage in the main JSRuntime.
   *
   * |JSMainRuntimeCompartments{System,User}| (UNITS_COUNT)  The number of
   * {system,user} compartments in the main JS runtime.
   *
   * |JSMainRuntimeRealms{System,User}| (UNITS_COUNT)  The number of
   * {system,user} realms in the main JS runtime.
   *
   * |imagesContentUsedUncompressed| (UNITS_BYTES)  Memory used for decoded
   * raster images in content.
   *
   * |storageSQLite| (UNITS_BYTES)  Memory used by SQLite.
   *
   * |lowMemoryEventsPhysical| (UNITS_COUNT_CUMULATIVE)
   * The number of low-physical-memory events that have occurred since the
   * process started.
   *
   * |ghostWindows| (UNITS_COUNT)  A cached value of the number of ghost
   * windows. This should have been updated within the past 60s.
   *
   * |pageFaultsHard| (UNITS_COUNT_CUMULATIVE)  The number of hard (a.k.a.
   * major) page faults that have occurred since the process started.
   */
  [must_use] readonly attribute int64_t vsize;
  [must_use] readonly attribute int64_t vsizeMaxContiguous;
  [must_use] readonly attribute int64_t resident;
  [must_use] readonly attribute int64_t residentFast;
  [must_use] readonly attribute int64_t residentPeak;
  [must_use] readonly attribute int64_t residentUnique;

  [must_use] readonly attribute int64_t heapAllocated;
  [must_use] readonly attribute int64_t heapOverheadFraction;

  [must_use] readonly attribute int64_t JSMainRuntimeGCHeap;
  [must_use] readonly attribute int64_t JSMainRuntimeTemporaryPeak;
  [must_use] readonly attribute int64_t JSMainRuntimeCompartmentsSystem;
  [must_use] readonly attribute int64_t JSMainRuntimeCompartmentsUser;
  [must_use] readonly attribute int64_t JSMainRuntimeRealmsSystem;
  [must_use] readonly attribute int64_t JSMainRuntimeRealmsUser;

  [must_use] readonly attribute int64_t imagesContentUsedUncompressed;

  [must_use] readonly attribute int64_t storageSQLite;

  [must_use] readonly attribute int64_t lowMemoryEventsPhysical;

  [must_use] readonly attribute int64_t ghostWindows;

  [must_use] readonly attribute int64_t pageFaultsHard;

  /*
   * This attribute indicates if moz_malloc_usable_size() works.
   */
  [infallible] readonly attribute boolean hasMozMallocUsableSize;

  /*
   * These attributes indicate DMD's status. "Enabled" means enabled at
   * build-time.
   */
  [infallible] readonly attribute boolean isDMDEnabled;
  [infallible] readonly attribute boolean isDMDRunning;

  /*
   * Run a series of GC/CC's in an attempt to minimize the application's memory
   * usage.  When we're finished doing this for the current process, we invoke
   * the given runnable if it's not null.  We do not wait for any child processes
   * that might be doing their own minimization via child-mmu-request to finish.
   */
  [must_use] void minimizeMemoryUsage(in nsIRunnable callback);

  /*
   * Measure the memory that is known to be owned by this tab, split up into
   * several broad categories.  Note that this will be an underestimate of the
   * true number, due to imperfect memory reporter coverage (corresponding to
   * about:memory's "heap-unclassified"), and due to some memory shared between
   * tabs not being counted.
   *
   * The time taken for the measurement (split into JS and non-JS parts) is
   * also returned.
   */
  [must_use]
  void sizeOfTab(in mozIDOMWindowProxy window,
                 out int64_t jsObjectsSize, out int64_t jsStringsSize,
                 out int64_t jsOtherSize, out int64_t domSize,
                 out int64_t styleSize, out int64_t otherSize,
                 out int64_t totalSize,
                 out double jsMilliseconds, out double nonJSMilliseconds);
};

%{C++

#include "js/TypeDecls.h"
#include "nsString.h"
#include "nsTArray.h"

class nsPIDOMWindowOuter;

namespace mozilla {

// All the following registration/unregistration functions don't use
// [[nodiscard]] because ignoring failures is common and reasonable.

// Register a memory reporter.  The manager service will hold a strong
// reference to this reporter.
XPCOM_API(nsresult) RegisterStrongMemoryReporter(nsIMemoryReporter* aReporter);
XPCOM_API(nsresult) RegisterStrongAsyncMemoryReporter(nsIMemoryReporter* aReporter);

// Register a memory reporter.  The manager service will hold a weak reference
// to this reporter.
XPCOM_API(nsresult) RegisterWeakMemoryReporter(nsIMemoryReporter* aReporter);
XPCOM_API(nsresult) RegisterWeakAsyncMemoryReporter(nsIMemoryReporter* aReporter);

// Unregister a strong memory reporter.
XPCOM_API(nsresult) UnregisterStrongMemoryReporter(nsIMemoryReporter* aReporter);

// Unregister a weak memory reporter.
XPCOM_API(nsresult) UnregisterWeakMemoryReporter(nsIMemoryReporter* aReporter);

// The memory reporter manager provides access to several distinguished
// amounts via attributes.  Some of these amounts are provided by Gecko
// components that cannot be accessed directly from XPCOM code.  So we provide
// the following functions for those components to be registered with the
// manager.

typedef int64_t (*InfallibleAmountFn)();

#define DECL_REGISTER_DISTINGUISHED_AMOUNT(kind, name) \
    nsresult Register##name##DistinguishedAmount(kind##AmountFn aAmountFn);
#define DECL_UNREGISTER_DISTINGUISHED_AMOUNT(name) \
    nsresult Unregister##name##DistinguishedAmount();

DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, JSMainRuntimeGCHeap)
DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, JSMainRuntimeTemporaryPeak)
DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, JSMainRuntimeCompartmentsSystem)
DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, JSMainRuntimeCompartmentsUser)
DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, JSMainRuntimeRealmsSystem)
DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, JSMainRuntimeRealmsUser)

DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, ImagesContentUsedUncompressed)
DECL_UNREGISTER_DISTINGUISHED_AMOUNT(ImagesContentUsedUncompressed)

DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, StorageSQLite)
DECL_UNREGISTER_DISTINGUISHED_AMOUNT(StorageSQLite)

DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, LowMemoryEventsPhysical)

DECL_REGISTER_DISTINGUISHED_AMOUNT(Infallible, GhostWindows)

#undef DECL_REGISTER_DISTINGUISHED_AMOUNT
#undef DECL_UNREGISTER_DISTINGUISHED_AMOUNT

// Likewise for per-tab measurement.

typedef nsresult (*JSSizeOfTabFn)(JSObject* aObj,
                                  size_t* aJsObjectsSize,
                                  size_t* aJsStringSize,
                                  size_t* aJsPrivateSize,
                                  size_t* aJsOtherSize);
typedef nsresult (*NonJSSizeOfTabFn)(nsPIDOMWindowOuter* aWindow,
                                     size_t* aDomSize,
                                     size_t* aStyleSize,
                                     size_t* aOtherSize);

nsresult RegisterJSSizeOfTab(JSSizeOfTabFn aSizeOfTabFn);
nsresult RegisterNonJSSizeOfTab(NonJSSizeOfTabFn aSizeOfTabFn);

}

#if defined(MOZ_DMD)
#if !defined(MOZ_MEMORY)
#error "MOZ_DMD requires MOZ_MEMORY"
#endif

#include "DMD.h"

#define MOZ_REPORT(ptr)          mozilla::dmd::Report(ptr)
#define MOZ_REPORT_ON_ALLOC(ptr) mozilla::dmd::ReportOnAlloc(ptr)

#else

#define MOZ_REPORT(ptr)
#define MOZ_REPORT_ON_ALLOC(ptr)

#endif  // defined(MOZ_DMD)

// Functions generated via this macro should be used by all traversal-based
// memory reporters.  Such functions return |moz_malloc_size_of(ptr)|;  this
// will always be zero on some obscure platforms.
//
// You might be wondering why we have a macro that creates multiple functions
// that differ only in their name, instead of a single MallocSizeOf function.
// It's mostly to help with DMD integration, though it sometimes also helps
// with debugging and temporary ad hoc profiling.  The function name chosen
// doesn't matter greatly, but it's best to make it similar to the path used by
// the relevant memory reporter(s).
#define MOZ_DEFINE_MALLOC_SIZE_OF(fn)                                         \
  static size_t fn(const void* aPtr)                                          \
  {                                                                           \
      MOZ_REPORT(aPtr);                                                       \
      return moz_malloc_size_of(aPtr);                                        \
  }

// This is an alternative to MOZ_DEFINE_MALLOC_SIZE_OF that defines a
// MallocSizeOf function that can handle interior pointers.
#ifdef MOZ_MEMORY

#include "mozmemory.h"

#define MOZ_DEFINE_MALLOC_ENCLOSING_SIZE_OF(fn)                               \
  static size_t fn(const void* aPtr)                                          \
  {                                                                           \
      jemalloc_ptr_info_t info;                                               \
      jemalloc_ptr_info(aPtr, &info);                                         \
      MOZ_REPORT(info.addr);                                                  \
      return jemalloc_ptr_is_live(&info) ? info.size : 0;                     \
  }

#else

#define MOZ_DEFINE_MALLOC_ENCLOSING_SIZE_OF(fn)                               \
  static size_t fn(const void* aPtr)                                          \
  {                                                                           \
      return 0;                                                               \
  }

#endif

// Functions generated by the next two macros should be used by wrapping
// allocators that report heap blocks as soon as they are allocated and
// unreport them as soon as they are freed.  Such allocators are used in cases
// where we have third-party code that we cannot modify.  The two functions
// must always be used in tandem.
#define MOZ_DEFINE_MALLOC_SIZE_OF_ON_ALLOC(fn)                                \
  static size_t fn(const void* aPtr)                                          \
  {                                                                           \
      MOZ_REPORT_ON_ALLOC(aPtr);                                              \
      return moz_malloc_size_of(aPtr);                                        \
  }
#define MOZ_DEFINE_MALLOC_SIZE_OF_ON_FREE(fn)                                 \
  static size_t fn(const void* aPtr)                                          \
  {                                                                           \
      return moz_malloc_size_of(aPtr);                                        \
  }

// This macro assumes the presence of appropriate |aHandleReport| and |aData|
// variables. The (void) is there because we should always ignore the return
// value of the callback, because callback failures aren't fatal.
#define MOZ_COLLECT_REPORT(path, kind, units, amount, description)            \
  (void)aHandleReport->Callback(""_ns, nsLiteralCString(path),     \
                                kind, units, amount,                          \
                                nsLiteralCString(description), aData)

%}
