// |jit-test| skip-if: !wasmSimdEnabled()

/* Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ./test/core/simd/simd_f32x4_pmin_pmax.wast

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4
let $0 = instantiate(`(module
  (func (export "f32x4.pmin") (param v128 v128) (result v128) (f32x4.pmin (local.get 0) (local.get 1)))
  (func (export "f32x4.pmax") (param v128 v128) (result v128) (f32x4.pmax (local.get 0) (local.get 1)))
)`);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9
assert_return(
  () => invoke($0, `f32x4.pmin`, [f32x4([0, 0, 0, 0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:12
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([0, 0, 0, 0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:15
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:18
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:21
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:24
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:27
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:30
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:33
assert_return(
  () => invoke($0, `f32x4.pmin`, [f32x4([0, 0, 0, 0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:36
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([0, 0, 0, 0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:39
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:42
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:45
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:48
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:51
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:54
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:57
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:60
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:63
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:66
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:69
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:72
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:75
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:78
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:81
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:84
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:87
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:90
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:93
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:96
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:99
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:102
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:105
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:108
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:111
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:114
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:117
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:120
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:123
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:126
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:129
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([-0, -0, -0, -0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:132
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:135
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:138
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:141
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:144
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:147
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:150
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:153
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([-0, -0, -0, -0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:156
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:159
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:162
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:165
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:168
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:171
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:174
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:177
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:180
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:183
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:186
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:189
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:192
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:195
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:198
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:201
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:204
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:207
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:210
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:213
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:216
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:219
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:222
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:225
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:228
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:231
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:234
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:237
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:240
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:243
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:246
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:249
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:252
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:255
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:258
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:261
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:264
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:267
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:270
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:273
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:276
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:279
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:282
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:285
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:288
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:291
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:294
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:297
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:300
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:303
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:306
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:309
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:312
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:315
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:318
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:321
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:324
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:327
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:330
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:333
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:336
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:339
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:342
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:345
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:348
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:351
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:354
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:357
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:360
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:363
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:366
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:369
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:372
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:375
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:378
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:381
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:384
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:387
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:390
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:393
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:396
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:399
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:402
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:405
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:408
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:411
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:414
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:417
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:420
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:423
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:426
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:429
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:432
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:435
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:438
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:441
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:444
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:447
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:450
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:453
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:456
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:459
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:462
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:465
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:468
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:471
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:474
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:477
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:480
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:483
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:486
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:489
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:492
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:495
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:498
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:501
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:504
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:507
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:510
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:513
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:516
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:519
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:522
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:525
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:528
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:531
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:534
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:537
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:540
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:543
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:546
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:549
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:552
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:555
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:558
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:561
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:564
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:567
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:570
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:573
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:576
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:579
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:582
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:585
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:588
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:591
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:594
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:597
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:600
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:603
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:606
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:609
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:612
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:615
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:618
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:621
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:624
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:627
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:630
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:633
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:636
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:639
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:642
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:645
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:648
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:651
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:654
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:657
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:660
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:663
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:666
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:669
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:672
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:675
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:678
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:681
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:684
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:687
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:690
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:693
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:696
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:699
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:702
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:705
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:708
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:711
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:714
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:717
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:720
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:723
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:726
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:729
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:732
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:735
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:738
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:741
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:744
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:747
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:750
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:753
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:756
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:759
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:762
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:765
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:768
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:771
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:774
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:777
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:780
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:783
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:786
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:789
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:792
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:795
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:798
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:801
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:804
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:807
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:810
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:813
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:816
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:819
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:822
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:825
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:828
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:831
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:834
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:837
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:840
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:843
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:846
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:849
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:852
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:855
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:858
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:861
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:864
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:867
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:870
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:873
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:876
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:879
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:882
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:885
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:888
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:891
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:894
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:897
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:900
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:903
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:906
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:909
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:912
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:915
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:918
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:921
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:924
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:927
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:930
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:933
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:936
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:939
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:942
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:945
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:948
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:951
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:954
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:957
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:960
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:963
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:966
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:969
assert_return(
  () => invoke($0, `f32x4.pmin`, [f32x4([1, 1, 1, 1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:972
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([1, 1, 1, 1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:975
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:978
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:981
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:984
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:987
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:990
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:993
assert_return(
  () => invoke($0, `f32x4.pmin`, [f32x4([1, 1, 1, 1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:996
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([1, 1, 1, 1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:999
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1002
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1005
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1008
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1011
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1014
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1017
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1020
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1023
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1026
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1029
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1032
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1035
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1038
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1041
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1044
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1047
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1050
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1053
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1056
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1059
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1062
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1065
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1068
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1071
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1074
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1077
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1080
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1083
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1086
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1089
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([-1, -1, -1, -1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1092
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1095
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1098
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1101
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1104
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1107
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1110
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1113
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [f32x4([-1, -1, -1, -1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1116
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1119
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1122
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1125
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1128
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1131
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1134
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1137
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1140
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1143
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1146
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1149
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1152
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1155
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1158
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1161
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1164
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1167
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1170
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1173
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1176
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1179
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1182
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1185
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1188
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1191
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1194
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1197
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1200
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1203
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1206
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1209
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1212
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1215
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1218
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1221
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1224
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1227
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1230
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1233
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1236
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1239
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1242
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1245
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1248
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1251
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1254
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1257
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1260
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1263
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1266
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1269
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1272
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1275
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1278
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1281
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1284
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1287
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1290
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1293
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1296
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1299
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1302
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1305
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1308
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1311
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1314
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1317
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1320
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1323
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1326
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1329
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1332
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1335
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1338
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1341
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1344
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1347
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1350
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1353
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1356
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1359
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1362
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1365
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1368
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1371
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1374
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1377
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1380
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1383
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1386
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1389
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1392
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1395
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1398
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1401
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1404
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1407
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1410
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1413
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1416
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1419
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1422
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1425
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1428
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1431
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1434
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1437
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1440
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1443
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1446
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1449
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1452
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1455
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1458
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1461
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1464
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1467
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1470
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1473
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1476
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1479
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1482
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1485
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1488
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1491
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1494
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1497
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1500
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1503
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1506
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1509
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1512
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1515
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1518
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1521
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1524
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1527
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1530
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1533
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1536
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1539
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1542
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1545
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1548
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1551
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1554
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1557
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1560
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1563
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1566
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1569
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1572
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1575
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1578
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1581
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1584
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1587
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1590
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1593
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1596
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1599
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1602
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1605
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1608
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1611
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1614
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1617
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1620
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1623
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1626
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1629
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1632
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1635
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1638
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1641
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1644
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1647
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1650
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1653
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1656
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1659
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1662
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1665
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1668
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1671
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1674
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1677
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1680
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1683
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1686
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1689
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1692
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1695
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1698
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1701
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1704
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1707
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1710
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1713
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1716
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1719
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1722
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1725
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1728
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1731
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1734
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1737
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1740
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1743
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1746
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1749
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1752
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1755
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1758
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1761
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1764
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1767
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1770
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1773
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1776
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1779
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1782
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1785
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1788
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1791
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1794
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1797
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1800
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1803
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1806
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1809
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1812
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1815
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1818
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1821
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1824
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1827
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1830
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1833
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1836
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1839
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1842
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1845
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1848
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1851
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1854
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1857
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1860
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1863
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1866
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1869
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1872
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1875
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1878
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1881
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1884
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1887
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1890
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1893
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1896
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1899
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1902
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1905
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1908
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1911
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1914
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1917
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1920
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1923
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1926
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1929
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1932
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1935
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1938
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1941
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1944
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1947
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1950
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1953
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1956
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1959
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1962
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1965
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1968
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1971
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1974
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1977
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1980
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1983
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1986
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1989
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1992
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1995
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:1998
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2001
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2004
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2007
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2010
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2013
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2016
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2019
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2022
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2025
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2028
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2031
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2034
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2037
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2040
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2043
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2046
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2049
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2052
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2055
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2058
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2061
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2064
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2067
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2070
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2073
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2076
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2079
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2082
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2085
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2088
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2091
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2094
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2097
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2100
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2103
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2106
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2109
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2112
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2115
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2118
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2121
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2124
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2127
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2130
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2133
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2136
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2139
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2142
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2145
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2148
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2151
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2154
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2157
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2160
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2163
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2166
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2169
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2172
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2175
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2178
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2181
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2184
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2187
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2190
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2193
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2196
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2199
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2202
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2205
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2208
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2211
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2214
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2217
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2220
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2223
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2226
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2229
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2232
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2235
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2238
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2241
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2244
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2247
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2250
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2253
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2256
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2259
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2262
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2265
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2268
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2271
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2274
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2277
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2280
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2283
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2286
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2289
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2292
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2295
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2298
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2301
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2304
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2307
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2310
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2313
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2316
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2319
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2322
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2325
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2328
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2331
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2334
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2337
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2340
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2343
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2346
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2349
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2352
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2355
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2358
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2361
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2364
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2367
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2370
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2373
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2376
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2379
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2382
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2385
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2388
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2391
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2394
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2397
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2400
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2403
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2406
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2409
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2412
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2415
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2418
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2421
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2424
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2427
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2430
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2433
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2436
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2439
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2442
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2445
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2448
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2451
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2454
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2457
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2460
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2463
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2466
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2469
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2472
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2475
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2478
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2481
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2484
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2487
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2490
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2493
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2496
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2499
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2502
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2505
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2508
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2511
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2514
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2517
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2520
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2523
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2526
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2529
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2532
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2535
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2538
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2541
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2544
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2547
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2550
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2553
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2556
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2559
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2562
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2565
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2568
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2571
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2574
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2577
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2580
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2583
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2586
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2589
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2592
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2595
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2598
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2601
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2604
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2607
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2610
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2613
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2616
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2619
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2622
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2625
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2628
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2631
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2634
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2637
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2640
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2643
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2646
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2649
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2652
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2655
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2658
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2661
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2664
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2667
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2670
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2673
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2676
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2679
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2682
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2685
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2688
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2691
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2694
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2697
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2700
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2703
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2706
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2709
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2712
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2715
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2718
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2721
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2724
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2727
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2730
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2733
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2736
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2739
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2742
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2745
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2748
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2751
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2754
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2757
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2760
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2763
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2766
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2769
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2772
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2775
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2778
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2781
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2784
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2787
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2790
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2793
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2796
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2799
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2802
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2805
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2808
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2811
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2814
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2817
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2820
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2823
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2826
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2829
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2832
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2835
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2838
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2841
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2844
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2847
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2850
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2853
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2856
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2859
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2862
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2865
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2868
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2871
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2874
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2877
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2880
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2883
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2886
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2889
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2892
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2895
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2898
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2901
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2904
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2907
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2910
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2913
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2916
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2919
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2922
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2925
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2928
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2931
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2934
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2937
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2940
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2943
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2946
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2949
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2952
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2955
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2958
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2961
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2964
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2967
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2970
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2973
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2976
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2979
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2982
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2985
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2988
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2991
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2994
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:2997
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3000
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3003
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3006
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3009
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3012
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3015
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3018
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3021
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3024
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3027
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3030
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3033
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3036
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3039
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3042
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3045
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3048
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3051
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3054
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3057
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3060
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3063
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3066
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3069
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3072
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3075
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3078
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3081
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3084
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3087
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3090
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3093
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3096
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3099
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3102
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3105
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3108
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3111
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3114
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3117
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3120
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3123
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3126
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3129
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3132
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3135
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3138
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3141
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3144
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3147
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3150
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3153
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3156
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3159
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3162
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3165
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3168
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3171
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3174
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3177
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3180
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3183
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3186
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3189
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3192
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3195
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3198
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3201
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3204
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3207
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3210
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3213
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3216
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3219
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3222
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3225
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3228
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3231
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3234
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3237
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3240
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3243
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3246
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3249
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3252
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3255
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3258
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3261
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3264
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3267
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3270
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3273
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3276
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3279
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3282
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3285
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3288
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3291
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3294
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3297
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3300
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3303
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3306
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3309
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3312
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3315
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3318
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3321
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3324
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3327
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3330
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3333
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3336
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3339
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3342
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3345
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3348
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3351
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3354
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3357
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3360
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3363
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3366
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3369
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3372
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3375
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3378
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3381
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3384
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3387
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3390
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3393
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3396
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3399
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3402
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3405
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3408
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3411
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3414
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3417
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3420
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3423
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3426
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3429
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3432
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3435
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3438
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3441
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3444
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3447
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3450
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3453
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3456
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3459
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3462
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3465
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3468
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3471
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3474
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3477
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3480
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3483
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3486
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3489
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3492
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3495
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3498
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3501
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3504
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3507
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3510
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3513
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3516
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3519
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3522
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3525
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3528
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3531
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3534
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3537
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3540
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3543
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3546
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3549
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3552
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3555
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3558
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3561
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3564
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3567
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3570
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3573
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3576
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3579
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3582
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3585
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3588
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3591
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3594
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3597
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3600
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3603
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3606
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3609
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3612
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3615
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3618
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3621
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3624
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3627
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3630
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3633
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3636
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3639
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3642
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3645
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3648
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3651
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3654
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3657
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3660
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3663
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3666
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3669
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3672
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3675
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3678
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3681
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3684
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3687
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3690
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3693
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3696
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3699
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3702
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3705
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3708
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3711
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3714
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3717
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3720
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3723
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3726
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3729
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3732
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3735
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3738
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3741
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3744
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3747
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3750
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3753
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3756
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3759
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3762
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3765
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3768
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3771
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3774
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3777
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3780
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3783
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3786
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3789
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3792
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3795
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3798
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3801
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3804
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3807
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3810
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3813
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3816
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3819
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3822
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3825
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3828
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3831
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3834
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3837
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3840
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3843
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3846
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3849
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3852
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3855
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3858
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3861
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3864
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3867
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3870
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3873
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3876
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3879
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3882
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3885
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3888
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3891
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3894
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3897
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3900
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3903
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3906
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3909
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3912
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3915
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3918
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3921
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3924
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3927
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3930
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3933
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3936
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3939
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3942
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3945
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3948
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3951
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3954
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3957
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3960
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3963
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3966
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3969
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3972
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3975
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3978
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3981
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3984
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3987
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3990
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3993
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3996
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:3999
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4002
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4005
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4008
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4011
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4014
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4017
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4020
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4023
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4026
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4029
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4032
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4035
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4038
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4041
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4044
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4047
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4050
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4053
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4056
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4059
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4062
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4065
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4068
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4071
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4074
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4077
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4080
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4083
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4086
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4089
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4092
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4095
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4098
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4101
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4104
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4107
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4110
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4113
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4116
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4119
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4122
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4125
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4128
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4131
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4134
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4137
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4140
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4143
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4146
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4149
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4152
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4155
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4158
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4161
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4164
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4167
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4170
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4173
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4176
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4179
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4182
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4185
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4188
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4191
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4194
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4197
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4200
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4203
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4206
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4209
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4212
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4215
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4218
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4221
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4224
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4227
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4230
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4233
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4236
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4239
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4242
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4245
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4248
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4251
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4254
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4257
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4260
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4263
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4266
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4269
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4272
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4275
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4278
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4281
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4284
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4287
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4290
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4293
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4296
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4299
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4302
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4305
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4308
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4311
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4314
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4317
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4320
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4323
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4326
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4329
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4332
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4335
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4338
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4341
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4344
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4347
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4350
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4353
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4356
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4359
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4362
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4365
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4368
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4371
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4374
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4377
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4380
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4383
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4386
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4389
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4392
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4395
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4398
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4401
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4404
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4407
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4410
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4413
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4416
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4419
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4422
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4425
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4428
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4431
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4434
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4437
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4440
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4443
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4446
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4449
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4452
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4455
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4458
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4461
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4464
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4467
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4470
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4473
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4476
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4479
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4482
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4485
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4488
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4491
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4494
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4497
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4500
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4503
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4506
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4509
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4512
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4515
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4518
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4521
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4524
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4527
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4530
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4533
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4536
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4539
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4542
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4545
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4548
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4551
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4554
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4557
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4560
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4563
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4566
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4569
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4572
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4575
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4578
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4581
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4584
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4587
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4590
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4593
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4596
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4599
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4602
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4605
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4608
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4611
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4614
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4617
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4620
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4623
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4626
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4629
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4632
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4635
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4638
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4641
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4644
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4647
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4650
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4653
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4656
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4659
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4662
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4665
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4668
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4671
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4674
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4677
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4680
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4683
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4686
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4689
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4692
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4695
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4698
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4701
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4704
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4707
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4710
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4713
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4716
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4719
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4722
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4725
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4728
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4731
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4734
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4737
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4740
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4743
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4746
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4749
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4752
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4755
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4758
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4761
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4764
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4767
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4770
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4773
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4776
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4779
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4782
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4785
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4788
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4791
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4794
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4797
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4800
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4803
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4806
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4809
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4812
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4815
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4818
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4821
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4824
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4827
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4830
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4833
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4836
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4839
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4842
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4845
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4848
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4851
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4854
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4857
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4860
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4863
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4866
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4869
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4872
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4875
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4878
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4881
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4884
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4887
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4890
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4893
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4896
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4899
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4902
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4905
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4908
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4911
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4914
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4917
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4920
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4923
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4926
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4929
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4932
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4935
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4938
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4941
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4944
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4947
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4950
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4953
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4956
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4959
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4962
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4965
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4968
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4971
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4974
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4977
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4980
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4983
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4986
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4989
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4992
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4995
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:4998
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5001
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5004
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5007
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5010
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5013
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5016
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5019
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5022
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5025
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5028
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5031
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5034
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5037
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5040
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5043
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5046
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5049
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5052
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5055
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5058
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5061
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5064
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5067
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5070
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5073
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5076
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5079
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5082
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5085
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5088
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5091
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5094
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5097
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5100
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5103
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5106
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5109
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5112
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5115
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5118
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5121
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5124
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5127
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5130
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5133
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5136
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5139
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5142
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5145
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5148
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5151
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5154
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5157
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5160
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5163
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5166
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5169
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5172
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5175
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5178
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5181
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5184
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5187
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5190
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5193
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5196
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5199
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5202
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5205
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5208
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5211
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5214
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5217
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5220
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5223
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5226
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5229
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5232
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5235
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5238
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5241
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5244
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5247
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5250
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5253
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5256
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5259
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5262
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5265
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5268
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5271
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5274
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5277
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5280
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5283
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5286
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5289
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5292
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5295
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5298
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5301
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5304
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5307
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5310
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5313
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5316
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5319
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5322
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5325
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5328
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5331
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5334
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5337
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5340
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5343
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5346
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5349
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5352
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5355
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5358
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5361
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5364
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5367
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5370
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5373
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5376
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5379
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5382
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5385
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5388
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5391
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5394
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5397
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5400
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5403
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5406
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5409
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5412
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5415
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5418
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5421
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5424
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5427
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5430
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5433
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5436
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5439
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5442
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5445
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5448
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5451
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5454
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5457
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5460
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5463
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5466
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5469
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5472
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5475
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5478
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5481
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5484
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5487
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5490
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5493
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5496
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5499
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5502
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5505
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5508
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5511
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5514
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5517
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5520
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5523
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5526
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5529
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5532
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5535
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5538
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5541
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5544
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5547
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5550
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5553
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5556
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5559
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5562
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5565
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5568
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5571
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5574
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5577
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5580
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5583
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5586
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5589
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5592
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5595
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5598
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5601
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5604
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5607
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5610
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5613
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5616
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5619
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5622
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5625
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5628
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5631
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5634
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5637
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5640
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5643
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5646
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5649
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5652
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5655
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5658
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5661
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5664
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5667
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5670
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5673
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5676
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5679
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5682
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5685
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5688
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5691
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5694
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5697
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5700
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5703
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5706
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5709
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5712
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5715
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5718
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5721
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5724
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5727
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5730
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5733
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5736
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5739
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5742
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5745
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5748
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5751
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5754
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5757
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5760
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5763
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5766
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5769
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5772
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5775
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5778
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5781
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5784
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5787
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5790
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5793
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5796
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5799
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5802
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5805
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5808
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5811
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5814
assert_return(
  () =>
    invoke($0, `f32x4.pmin`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5817
assert_return(
  () => invoke($0, `f32x4.pmax`, [f32x4([0, 0, 0, 0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5820
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([0, 0, 0, 0]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5823
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5826
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5829
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5832
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5835
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5838
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5841
assert_return(
  () => invoke($0, `f32x4.pmax`, [f32x4([0, 0, 0, 0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5844
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([0, 0, 0, 0]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5847
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5850
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5853
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5856
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5859
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5862
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5865
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5868
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5871
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5874
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5877
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5880
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5883
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5886
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5889
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5892
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5895
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5898
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5901
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5904
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5907
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5910
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5913
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5916
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5919
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5922
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5925
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5928
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5931
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5934
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5937
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([-0, -0, -0, -0]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5940
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5943
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5946
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5949
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5952
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5955
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5958
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5961
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([-0, -0, -0, -0]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5964
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5967
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5970
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5973
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5976
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5979
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5982
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5985
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5988
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5991
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5994
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:5997
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6000
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6003
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6006
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6009
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6012
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6015
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6018
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6021
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6024
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6027
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6030
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6033
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6036
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6039
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6042
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6045
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6048
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6051
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6054
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6057
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6060
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6063
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6066
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6069
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6072
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6075
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6078
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6081
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6084
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6087
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6090
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6093
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6096
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6099
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6102
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6105
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6108
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6111
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6114
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6117
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6120
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6123
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6126
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6129
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6132
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6135
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6138
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6141
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6144
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6147
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6150
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6153
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6156
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6159
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6162
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6165
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6168
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6171
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6174
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6177
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6180
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6183
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6186
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6189
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6192
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6195
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6198
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6201
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6204
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6207
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6210
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6213
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6216
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6219
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6222
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6225
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6228
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6231
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6234
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6237
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6240
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6243
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6246
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6249
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6252
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6255
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6258
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6261
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6264
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6267
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6270
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6273
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6276
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6279
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6282
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6285
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6288
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6291
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6294
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6297
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6300
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6303
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6306
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6309
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6312
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6315
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6318
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6321
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6324
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6327
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6330
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6333
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6336
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6339
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6342
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6345
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6348
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6351
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6354
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6357
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6360
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6363
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6366
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6369
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6372
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6375
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6378
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6381
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6384
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6387
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6390
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6393
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6396
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6399
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6402
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6405
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6408
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6411
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6414
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6417
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6420
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6423
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6426
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6429
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6432
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6435
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6438
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6441
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6444
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6447
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6450
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6453
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6456
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6459
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6462
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6465
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6468
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6471
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6474
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6477
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6480
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6483
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6486
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6489
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6492
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6495
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6498
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6501
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6504
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6507
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6510
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6513
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6516
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6519
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6522
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6525
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6528
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6531
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6534
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6537
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6540
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6543
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6546
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6549
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6552
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6555
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6558
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6561
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6564
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6567
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6570
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6573
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6576
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6579
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6582
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6585
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6588
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6591
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6594
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6597
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6600
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6603
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6606
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6609
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6612
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6615
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6618
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6621
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6624
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6627
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6630
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6633
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6636
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6639
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6642
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6645
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6648
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6651
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6654
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6657
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6660
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6663
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6666
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6669
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6672
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6675
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6678
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6681
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6684
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6687
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6690
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6693
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6696
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6699
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6702
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6705
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6708
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6711
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6714
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6717
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6720
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6723
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6726
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6729
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6732
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6735
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6738
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6741
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6744
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6747
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6750
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6753
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6756
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6759
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6762
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6765
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6768
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6771
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6774
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6777
assert_return(
  () => invoke($0, `f32x4.pmax`, [f32x4([1, 1, 1, 1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6780
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([1, 1, 1, 1]), f32x4([-0, -0, -0, -0])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6783
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6786
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6789
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6792
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6795
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6798
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6801
assert_return(
  () => invoke($0, `f32x4.pmax`, [f32x4([1, 1, 1, 1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6804
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([1, 1, 1, 1]), f32x4([-1, -1, -1, -1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6807
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6810
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6813
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6816
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6819
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6822
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6825
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6828
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6831
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6834
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6837
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6840
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6843
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6846
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6849
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6852
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6855
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6858
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6861
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6864
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6867
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6870
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6873
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6876
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6879
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6882
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6885
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6888
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6891
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6894
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6897
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([-1, -1, -1, -1]), f32x4([0, 0, 0, 0])]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6900
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6903
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6906
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6909
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6912
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6915
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6918
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6921
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [f32x4([-1, -1, -1, -1]), f32x4([1, 1, 1, 1])]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6924
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6927
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6930
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6933
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6936
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6939
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6942
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6945
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6948
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6951
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6954
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6957
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6960
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6963
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6966
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6969
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6972
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6975
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6978
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6981
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6984
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6987
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6990
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6993
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6996
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:6999
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7002
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7005
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7008
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7011
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7014
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7017
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7020
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7023
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7026
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7029
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7032
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7035
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7038
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7041
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7044
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7047
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7050
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7053
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7056
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7059
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7062
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7065
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7068
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7071
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7074
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7077
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7080
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7083
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7086
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7089
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7092
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7095
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7098
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7101
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7104
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7107
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7110
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7113
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7116
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7119
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7122
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7125
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7128
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7131
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7134
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7137
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7140
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7143
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7146
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7149
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7152
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7155
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7158
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7161
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7164
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7167
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7170
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7173
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7176
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7179
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7182
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7185
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7188
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7191
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7194
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7197
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7200
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7203
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7206
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7209
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7212
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7215
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7218
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7221
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7224
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7227
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7230
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7233
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7236
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7239
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7242
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7245
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7248
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7251
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7254
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7257
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7260
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7263
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7266
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7269
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7272
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7275
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7278
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7281
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7284
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7287
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7290
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7293
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7296
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7299
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7302
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7305
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7308
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7311
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7314
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7317
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7320
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7323
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7326
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7329
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7332
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7335
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7338
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7341
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7344
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7347
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7350
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7353
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7356
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7359
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7362
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7365
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7368
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7371
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7374
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7377
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7380
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7383
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7386
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7389
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7392
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7395
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7398
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7401
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7404
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7407
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7410
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7413
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7416
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7419
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7422
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7425
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7428
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7431
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7434
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7437
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7440
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7443
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7446
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7449
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7452
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7455
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7458
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7461
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7464
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7467
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7470
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7473
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7476
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7479
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7482
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7485
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7488
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7491
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7494
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7497
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7500
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7503
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7506
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7509
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7512
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7515
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7518
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7521
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7524
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7527
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7530
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7533
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7536
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7539
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7542
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7545
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7548
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7551
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7554
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7557
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7560
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7563
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7566
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7569
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7572
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7575
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7578
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7581
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7584
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7587
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7590
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7593
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7596
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7599
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7602
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7605
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7608
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7611
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7614
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7617
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7620
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7623
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7626
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7629
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7632
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7635
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7638
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7641
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7644
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7647
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7650
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7653
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7656
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7659
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7662
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7665
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7668
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7671
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7674
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7677
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7680
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7683
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7686
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7689
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7692
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7695
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7698
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7701
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7704
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7707
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7710
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7713
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7716
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7719
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7722
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7725
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7728
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7731
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7734
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7737
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7740
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7743
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7746
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7749
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7752
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7755
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7758
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7761
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7764
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7767
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7770
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7773
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7776
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7779
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7782
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7785
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7788
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7791
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7794
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7797
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7800
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7803
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7806
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7809
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7812
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7815
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7818
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7821
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7824
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7827
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7830
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7833
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7836
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7839
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7842
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7845
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7848
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7851
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7854
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7857
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7860
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7863
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7866
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7869
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7872
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7875
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7878
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7881
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7884
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7887
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7890
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7893
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7896
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7899
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7902
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7905
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7908
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7911
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7914
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7917
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7920
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7923
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7926
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7929
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7932
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7935
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7938
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7941
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7944
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7947
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7950
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7953
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7956
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7959
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7962
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7965
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7968
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7971
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7974
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7977
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7980
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7983
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7986
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7989
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7992
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7995
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:7998
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8001
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8004
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8007
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8010
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8013
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8016
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8019
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8022
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8025
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8028
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8031
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8034
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8037
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8040
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8043
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8046
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8049
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8052
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8055
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8058
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8061
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8064
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8067
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8070
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8073
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8076
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8079
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8082
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8085
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8088
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8091
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8094
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8097
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8100
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8103
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8106
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8109
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8112
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8115
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8118
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8121
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8124
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8127
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8130
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8133
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8136
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8139
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8142
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8145
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8148
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8151
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8154
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8157
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8160
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8163
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8166
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8169
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8172
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8175
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8178
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8181
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8184
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8187
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8190
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8193
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8196
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8199
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8202
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8205
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8208
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8211
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8214
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8217
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8220
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8223
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8226
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8229
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8232
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8235
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8238
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8241
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8244
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8247
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8250
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8253
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8256
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8259
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8262
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8265
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8268
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8271
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8274
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8277
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8280
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8283
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8286
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8289
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8292
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8295
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8298
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8301
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8304
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8307
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8310
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8313
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8316
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8319
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8322
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8325
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8328
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8331
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8334
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8337
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8340
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8343
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8346
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8349
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8352
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8355
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8358
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8361
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8364
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8367
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8370
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8373
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8376
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8379
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8382
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8385
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8388
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8391
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8394
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8397
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8400
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8403
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8406
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8409
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8412
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8415
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8418
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8421
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8424
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8427
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8430
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8433
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8436
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8439
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8442
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8445
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8448
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8451
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8454
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8457
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8460
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8463
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8466
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8469
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8472
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8475
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8478
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8481
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8484
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8487
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8490
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8493
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8496
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8499
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8502
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8505
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8508
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8511
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8514
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8517
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8520
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8523
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8526
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8529
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8532
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8535
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8538
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8541
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8544
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8547
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8550
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8553
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8556
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8559
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8562
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8565
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8568
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8571
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8574
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8577
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8580
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8583
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8586
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8589
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8592
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8595
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8598
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8601
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8604
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8607
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8610
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8613
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8616
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8619
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8622
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8625
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8628
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8631
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8634
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8637
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8640
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8643
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8646
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8649
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8652
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8655
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8658
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8661
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8664
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8667
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8670
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8673
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8676
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8679
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8682
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8685
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8688
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8691
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8694
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8697
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8700
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8703
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8706
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8709
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8712
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8715
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8718
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8721
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8724
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8727
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8730
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8733
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8736
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8739
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8742
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8745
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8748
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8751
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8754
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8757
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8760
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8763
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8766
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8769
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8772
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8775
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8778
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8781
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8784
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8787
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8790
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8793
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8796
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8799
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8802
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8805
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8808
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8811
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8814
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8817
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8820
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8823
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8826
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8829
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8832
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8835
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8838
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8841
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8844
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8847
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8850
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8853
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8856
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8859
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8862
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8865
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8868
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8871
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8874
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8877
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8880
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8883
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8886
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8889
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8892
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8895
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8898
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8901
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8904
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8907
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8910
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8913
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8916
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8919
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8922
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8925
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8928
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8931
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8934
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8937
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8940
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8943
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8946
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8949
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8952
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8955
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8958
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8961
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8964
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8967
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8970
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8973
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8976
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8979
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8982
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8985
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8988
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8991
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8994
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:8997
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9000
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9003
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9006
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9009
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9012
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9015
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9018
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9021
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9024
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9027
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9030
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9033
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9036
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9039
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9042
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9045
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9048
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9051
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9054
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9057
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9060
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9063
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9066
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9069
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9072
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9075
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9078
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9081
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9084
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9087
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9090
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9093
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9096
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9099
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9102
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9105
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9108
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9111
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9114
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9117
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9120
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9123
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9126
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9129
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9132
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9135
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9138
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9141
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9144
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9147
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9150
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9153
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9156
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9159
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9162
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9165
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9168
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9171
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9174
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9177
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9180
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9183
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9186
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9189
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9192
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9195
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9198
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9201
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9204
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9207
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9210
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9213
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9216
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9219
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9222
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9225
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9228
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9231
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9234
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9237
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9240
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9243
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9246
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9249
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9252
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9255
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9258
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9261
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9264
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9267
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9270
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9273
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9276
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9279
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9282
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9285
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9288
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9291
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9294
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9297
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9300
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9303
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9306
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9309
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9312
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9315
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9318
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9321
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9324
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9327
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9330
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9333
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9336
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9339
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9342
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9345
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9348
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9351
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9354
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9357
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9360
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9363
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9366
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9369
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9372
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9375
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9378
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9381
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9384
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9387
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9390
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9393
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9396
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9399
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9402
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9405
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9408
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9411
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9414
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9417
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9420
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9423
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9426
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9429
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9432
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9435
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9438
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9441
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9444
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9447
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9450
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9453
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9456
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9459
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9462
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9465
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9468
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9471
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9474
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9477
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9480
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9483
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9486
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9489
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9492
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9495
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9498
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9501
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9504
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9507
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9510
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9513
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9516
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9519
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9522
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9525
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9528
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9531
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9534
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9537
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9540
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9543
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9546
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9549
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9552
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9555
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9558
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9561
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9564
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9567
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9570
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9573
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9576
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9579
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9582
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9585
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9588
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9591
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9594
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9597
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9600
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9603
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9606
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9609
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9612
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9615
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9618
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9621
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9624
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9627
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9630
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9633
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9636
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9639
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9642
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9645
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9648
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9651
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9654
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9657
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9660
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9663
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9666
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9669
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9672
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9675
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9678
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9681
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9684
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9687
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9690
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9693
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9696
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9699
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9702
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9705
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9708
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9711
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9714
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9717
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9720
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9723
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9726
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9729
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9732
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9735
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9738
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9741
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9744
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9747
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9750
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9753
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9756
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9759
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9762
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9765
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9768
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9771
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9774
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9777
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9780
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9783
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9786
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9789
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9792
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9795
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9798
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9801
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9804
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9807
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9810
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9813
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9816
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9819
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9822
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9825
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9828
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9831
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9834
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9837
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9840
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9843
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9846
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9849
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9852
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9855
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9858
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9861
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9864
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9867
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9870
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9873
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9876
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9879
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9882
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9885
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9888
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9891
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9894
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9897
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9900
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9903
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9906
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9909
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9912
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9915
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9918
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9921
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9924
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9927
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9930
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9933
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9936
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9939
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9942
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9945
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9948
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9951
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9954
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9957
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9960
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9963
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9966
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9969
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9972
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9975
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9978
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9981
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9984
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9987
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9990
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9993
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9996
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:9999
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10002
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10005
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10008
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10011
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10014
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10017
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10020
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10023
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10026
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10029
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10032
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10035
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10038
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10041
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10044
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10047
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10050
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10053
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10056
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10059
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10062
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10065
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10068
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10071
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10074
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10077
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10080
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10083
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10086
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10089
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10092
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10095
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10098
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10101
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10104
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10107
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10110
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10113
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10116
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10119
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10122
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10125
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10128
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10131
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10134
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10137
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10140
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10143
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10146
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10149
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10152
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10155
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10158
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10161
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10164
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10167
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10170
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10173
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10176
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10179
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10182
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10185
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10188
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10191
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10194
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10197
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10200
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10203
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10206
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10209
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10212
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10215
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10218
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10221
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10224
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10227
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10230
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10233
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10236
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10239
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10242
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10245
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10248
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10251
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10254
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10257
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10260
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10263
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10266
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10269
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10272
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10275
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10278
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10281
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10284
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10287
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10290
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10293
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10296
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10299
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10302
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10305
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10308
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10311
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10314
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10317
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10320
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10323
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10326
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10329
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10332
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10335
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10338
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10341
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10344
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10347
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10350
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10353
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10356
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10359
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10362
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10365
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10368
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10371
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10374
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10377
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10380
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10383
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10386
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10389
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10392
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10395
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10398
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10401
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10404
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10407
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10410
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10413
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10416
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10419
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10422
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10425
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10428
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10431
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10434
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10437
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10440
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10443
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10446
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10449
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10452
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10455
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10458
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10461
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10464
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10467
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10470
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10473
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10476
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10479
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10482
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10485
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10488
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10491
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10494
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10497
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10500
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10503
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10506
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10509
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10512
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10515
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10518
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10521
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10524
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10527
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10530
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10533
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10536
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10539
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10542
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10545
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10548
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10551
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10554
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10557
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10560
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10563
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10566
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10569
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10572
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10575
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10578
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10581
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10584
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10587
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10590
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10593
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10596
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10599
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10602
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10605
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10608
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10611
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10614
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10617
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10620
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10623
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10626
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10629
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10632
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10635
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10638
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10641
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10644
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10647
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10650
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10653
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10656
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10659
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10662
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10665
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10668
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10671
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10674
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10677
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10680
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10683
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10686
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10689
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10692
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10695
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10698
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10701
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10704
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10707
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10710
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10713
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10716
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10719
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10722
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10725
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10728
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10731
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10734
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10737
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10740
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10743
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10746
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xc0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10749
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10752
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10755
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10758
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10761
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10764
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10767
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10770
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10773
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10776
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10779
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10782
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10785
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10788
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10791
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10794
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10797
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10800
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10803
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10806
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10809
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10812
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10815
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10818
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10821
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10824
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10827
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10830
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10833
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10836
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10839
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10842
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10845
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10848
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10851
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10854
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10857
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10860
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10863
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10866
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10869
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10872
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10875
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10878
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xc0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10881
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10884
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10887
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10890
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10893
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10896
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10899
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10902
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10905
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10908
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10911
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10914
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10917
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10920
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10923
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10926
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10929
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10932
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10935
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10938
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10941
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10944
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10947
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10950
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10953
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10956
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10959
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10962
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10965
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10968
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10971
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10974
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10977
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10980
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10983
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10986
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10989
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10992
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10995
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:10998
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11001
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11004
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11007
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11010
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
      bytes("f32", [0x0, 0x0, 0xa0, 0x7f]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11013
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([0, 0, 0, 0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11016
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-0, -0, -0, -0]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11019
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11022
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11025
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11028
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11031
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([0.5, 0.5, 0.5, 0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11034
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-0.5, -0.5, -0.5, -0.5]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11037
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([1, 1, 1, 1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11040
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-1, -1, -1, -1]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11043
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11046
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11049
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11052
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11055
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([Infinity, Infinity, Infinity, Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11058
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11061
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11064
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11067
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11070
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11073
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11076
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11079
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11082
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11085
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([123456790, 123456790, 123456790, 123456790]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11088
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11091
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11094
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11097
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11100
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11103
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11106
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11109
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11112
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11115
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11118
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11121
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11124
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11127
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11130
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11133
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11136
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11139
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11142
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
      bytes("f32", [0x0, 0x0, 0xa0, 0xff]),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11145
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11148
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11151
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11154
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11157
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11160
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11163
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11166
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11169
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11172
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11175
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11178
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11181
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11184
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11187
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11190
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11193
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11196
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11199
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11202
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11205
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11208
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11211
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11214
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11217
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11220
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11223
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11226
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11229
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11232
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11235
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11238
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11241
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11244
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11247
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11250
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11253
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11256
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11259
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11262
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
        0x0,
        0x0,
        0xc0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11265
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11268
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11271
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11274
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11277
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11280
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11283
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11286
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11289
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11292
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11295
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11298
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11301
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11304
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11307
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11310
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11313
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11316
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11319
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11322
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11325
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11328
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11331
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11334
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11337
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11340
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11343
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11346
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11349
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11352
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11355
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11358
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11361
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11364
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11367
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11370
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11373
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11376
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11379
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11382
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
        0x0,
        0x0,
        0xc0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11385
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11388
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11391
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11394
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11397
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11400
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11403
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11406
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11409
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11412
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11415
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11418
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11421
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11424
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11427
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11430
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11433
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11436
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11439
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11442
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11445
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11448
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11451
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11454
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11457
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11460
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11463
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11466
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11469
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11472
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11475
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11478
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11481
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11484
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11487
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11490
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11493
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11496
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11499
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11502
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
        0x0,
        0x0,
        0xa0,
        0x7f,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11505
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0, 0, 0, 0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
      value("f32", 0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11508
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0, -0, -0, -0]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
      value("f32", -0),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11511
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
        0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
      value("f32", 0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11514
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
        -0.000000000000000000000000000000000000000000001,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
      value("f32", -0.000000000000000000000000000000000000000000001),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11517
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
        0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
      value("f32", 0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11520
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
        -0.000000000000000000000000000000000000011754944,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
      value("f32", -0.000000000000000000000000000000000000011754944),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11523
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([0.5, 0.5, 0.5, 0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
      value("f32", 0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11526
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-0.5, -0.5, -0.5, -0.5]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
      value("f32", -0.5),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11529
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([1, 1, 1, 1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
      value("f32", 1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11532
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-1, -1, -1, -1]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
      value("f32", -1),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11535
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([6.2831855, 6.2831855, 6.2831855, 6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
      value("f32", 6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11538
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-6.2831855, -6.2831855, -6.2831855, -6.2831855]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
      value("f32", -6.2831855),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11541
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
        340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
      value("f32", 340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11544
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
        -340282350000000000000000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
      value("f32", -340282350000000000000000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11547
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([Infinity, Infinity, Infinity, Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
      value("f32", Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11550
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([-Infinity, -Infinity, -Infinity, -Infinity]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
      value("f32", -Infinity),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11553
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11556
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11559
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11562
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11565
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11568
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11571
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11574
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11577
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([123456790, 123456790, 123456790, 123456790]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
      value("f32", 123456790),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11580
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11583
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
        1234567900000000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
      value("f32", 1234567900000000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11586
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
        0.000000000012345679,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
      value("f32", 0.000000000012345679),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11589
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11592
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11595
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11598
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11601
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11604
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11607
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11610
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11613
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        81985530000000000,
        81985530000000000,
        81985530000000000,
        81985530000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
      value("f32", 81985530000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11616
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11619
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
        42984030000000000000000,
      ]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
      value("f32", 42984030000000000000000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11622
assert_return(
  () =>
    invoke($0, `f32x4.pmax`, [
      f32x4([156374990000, 156374990000, 156374990000, 156374990000]),
      bytes("v128", [
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
        0x0,
        0x0,
        0xa0,
        0xff,
      ]),
    ]),
  [
    new F32x4Pattern(
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
      value("f32", 156374990000),
    ),
  ],
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11629
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i8x16.pmin (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11630
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i8x16.pmax (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11631
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i16x8.pmin (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11632
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i16x8.pmax (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11633
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i32x4.pmin (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11634
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i32x4.pmax (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11635
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i64x2.pmin (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11636
assert_malformed(
  () =>
    instantiate(
      `(memory 1) (func (result v128) (i64x2.pmax (v128.const i32x4 0 0 0 0) (v128.const i32x4 0 0 0 0))) `,
    ),
  `unknown operator`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11639
assert_invalid(
  () =>
    instantiate(
      `(module (func (result v128) (f32x4.pmin (i32.const 0) (f32.const 0.0))))`,
    ),
  `type mismatch`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11640
assert_invalid(
  () =>
    instantiate(
      `(module (func (result v128) (f32x4.pmax (i32.const 0) (f32.const 0.0))))`,
    ),
  `type mismatch`,
);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11644
assert_invalid(() =>
  instantiate(`(module
    (func $$f32x4.pmin-1st-arg-empty (result v128)
      (f32x4.pmin (v128.const f32x4 0 0 0 0))
    )
  )`), `type mismatch`);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11652
assert_invalid(() =>
  instantiate(`(module
    (func $$f32x4.pmin-arg-empty (result v128)
      (f32x4.pmin)
    )
  )`), `type mismatch`);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11660
assert_invalid(() =>
  instantiate(`(module
    (func $$f32x4.pmax-1st-arg-empty (result v128)
      (f32x4.pmax (v128.const f32x4 0 0 0 0))
    )
  )`), `type mismatch`);

// ./test/core/simd/simd_f32x4_pmin_pmax.wast:11668
assert_invalid(() =>
  instantiate(`(module
    (func $$f32x4.pmax-arg-empty (result v128)
      (f32x4.pmax)
    )
  )`), `type mismatch`);
