/* 
 *  THIS IS AN AUTOGENERATED FILE.  DO NOT EDIT
 *
 *  The content of this file has been generated based on the WebExtensions API
 *  JSONSchema using the following command:
 *
 *  export SCRIPT_DIR="toolkit/components/extensions/webidl-api"
 *  mach python $SCRIPT_DIR/GenerateWebIDLBindings.py -- runtime
 *
 *  More info about generating webidl API bindings for WebExtensions API at:
 *
 *  https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/webidl_bindings.html
 */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * You are granted a license to use, reproduce and create derivative works of
 * this document.
 */

// WebIDL definition for the "runtime" WebExtensions API
[Exposed=(ServiceWorker), LegacyNoInterfaceObject]
interface ExtensionRuntime {
  // API methods.

  [Throws, WebExtensionStub="Async"]
  any openOptionsPage(optional Function callback);

  [Throws, WebExtensionStub]
  any getManifest();

  [Throws, WebExtensionStub="ReturnsString"]
  DOMString getURL(DOMString path);

  [Throws, WebExtensionStub="Async"]
  any setUninstallURL(optional DOMString url, optional Function callback);

  [Throws, WebExtensionStub="NoReturn"]
  void reload();

  [Throws, WebExtensionStub="ReturnsPort"]
  ExtensionPort connect(optional DOMString extensionId, optional any connectInfo);

  [Throws, WebExtensionStub="ReturnsPort"]
  ExtensionPort connectNative(DOMString application);

  [Throws, WebExtensionStub="AsyncAmbiguous"]
  any sendMessage(any... args);

  [Throws, WebExtensionStub="Async"]
  any sendNativeMessage(DOMString application, any message, optional Function responseCallback);

  [Throws, WebExtensionStub="Async"]
  any getBrowserInfo(optional Function callback);

  [Throws, WebExtensionStub="Async"]
  any getPlatformInfo(optional Function callback);

  // API events.

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onStartup;

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onInstalled;

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onUpdateAvailable;

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onConnect;

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onConnectExternal;

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onMessage;

  [Replaceable, SameObject]
  readonly attribute ExtensionEventManager onMessageExternal;

  // API properties.

  [Replaceable]
  readonly attribute any lastError;

  [Replaceable]
  readonly attribute DOMString id;
};
