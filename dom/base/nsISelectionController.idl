/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


#include "nsISelectionDisplay.idl"

%{C++
typedef short SelectionRegion;
namespace mozilla {
namespace dom {
class Selection;
} // namespace dom
} // namespace mozilla
%}

interface nsIContent;
interface nsISelectionDisplay;

webidl Node;
webidl Selection;

[builtinclass, scriptable, uuid(3801c9d4-8e69-4bfc-9edb-b58278621f8f)]
interface nsISelectionController : nsISelectionDisplay
{
   // Begin of RawSelectionType values.
   const short SELECTION_NONE                      = 0;
   // Corresponds to the Selection exposed via window.getSelection() and
   // document.getSelection().
   const short SELECTION_NORMAL                    = 1;
   // Corresponds to the Selection used for spellchecking in <textarea>s and
   // "contentEditable" elements.
   const short SELECTION_SPELLCHECK                = 2;
   const short SELECTION_IME_RAWINPUT              = 3;
   const short SELECTION_IME_SELECTEDRAWTEXT       = 4;
   const short SELECTION_IME_CONVERTEDTEXT         = 5;
   const short SELECTION_IME_SELECTEDCONVERTEDTEXT = 6;
   // For accessibility API usage
   const short SELECTION_ACCESSIBILITY             = 7;
   const short SELECTION_FIND                      = 8;
   const short SELECTION_URLSECONDARY              = 9;
   const short SELECTION_URLSTRIKEOUT              = 10;
   // End of RawSelectionType values.
   const short NUM_SELECTIONTYPES                  = 11;

   // SelectionRegion values:
   const short SELECTION_ANCHOR_REGION = 0;
   const short SELECTION_FOCUS_REGION = 1;
   const short SELECTION_WHOLE_SELECTION = 2;
   const short NUM_SELECTION_REGIONS = 3;

   const short SELECTION_OFF = 0;
   const short SELECTION_HIDDEN =1;//>HIDDEN displays selection
   const short SELECTION_ON = 2;
   const short SELECTION_DISABLED = 3;
   const short SELECTION_ATTENTION = 4;

   /**
   * SetDisplaySelection will set the display mode for the selection. OFF,ON,DISABLED
   */
    void    setDisplaySelection(in short toggle);

   /**
   * GetDisplaySelection will get the display mode for the selection. OFF,ON,DISABLED
   */
    short   getDisplaySelection();

   /**
   * GetSelection will return the selection that the presentation
   *  shell may implement.
   *
   * @param aType This will hold the type of selection.  This value must be one
   *              of RawSelectionType values.
   * @param _return will hold the return value
   */
    [binaryname(GetSelectionFromScript)]
    Selection getSelection(in short type);

   /**
   * Return the selection object corresponding to a selection type.
   */
    [noscript,nostdcall,notxpcom,binaryname(GetSelection)]
    Selection getDOMSelection(in short aType);

   /**
    * Called when the selection controller should take the focus.
    *
    * This will take care to hide the previously-focused selection, show this
    * selection, and repaint both.
    */
   [noscript,nostdcall,notxpcom]
   void selectionWillTakeFocus();

   /**
    * Called when the selection controller has lost the focus.
    *
    * This will take care to hide and repaint the selection.
    */
   [noscript,nostdcall,notxpcom]
   void selectionWillLoseFocus();

   const short SCROLL_SYNCHRONOUS = 1<<1;
   const short SCROLL_FIRST_ANCESTOR_ONLY = 1<<2;
   const short SCROLL_CENTER_VERTICALLY = 1<<4;
   const short SCROLL_OVERFLOW_HIDDEN = 1<<5;
   const short SCROLL_FOR_CARET_MOVE = 1<<6;

   /**
   * ScrollSelectionIntoView scrolls a region of the selection,
   * so that it is visible in the scrolled view.
   *
   * @param aType the selection to scroll into view.  This value must be one
   *              of RawSelectionType values.
   * @param aRegion the region inside the selection to scroll into view. //SelectionRegion
   * @param aFlags the scroll flags.  Valid bits include:
   * SCROLL_SYNCHRONOUS: when set, scrolls the selection into view
   * before returning. If not set, posts a request which is processed
   * at some point after the method returns.
   * SCROLL_FIRST_ANCESTOR_ONLY: if set, only the first ancestor will be scrolled
   * into view.
   * SCROLL_OVERFLOW_HIDDEN: if set, scrolls even if the overflow is specified
   * as hidden.
   * SCROLL_FOR_CARET_MOVE: set to indicate whether scrolling is in response
   * to the caret being moved. Does not affect behavior (used for telemetry
   * purposes only).
   *
   * Note that if isSynchronous is true, then this might flush the pending
   * reflow. It's dangerous for some objects. See bug 418470 comment 12.
   */
    void scrollSelectionIntoView(in short type, in short region, in short flags);

   /**
   * RepaintSelection repaints the selection specified by aType.
   *
   * @param aType specifies the selection to repaint.
   */
    void repaintSelection(in short type);

   /**
   * Set the caret as enabled or disabled. An enabled caret will
   * draw or blink when made visible. A disabled caret will never show up.
   * Can be called any time.
   * @param aEnable PR_TRUE to enable caret.  PR_FALSE to disable.
   * @return always NS_OK
   */

    void setCaretEnabled(in boolean enabled);

   /**
   * Set the caret readonly or not. An readonly caret will
   * draw but not blink when made visible.
   * @param aReadOnly PR_TRUE to enable caret.  PR_FALSE to disable.
   * @return always NS_OK
   */
    void setCaretReadOnly(in boolean readOnly);

   /**
   * Gets the current state of the caret.
   * @param aEnabled  [OUT] set to the current caret state, as set by SetCaretEnabled
   * @return   if aOutEnabled==null, returns NS_ERROR_INVALID_ARG
   *           else NS_OK
   */
    boolean getCaretEnabled();

    /**
    * This is true if the caret is enabled, visible, and currently blinking.
    * This is still true when the caret is enabled, visible, but in its "off"
    * blink cycle.
    */
    readonly attribute boolean caretVisible;

   /**
   * Show the caret even in selections. By default the caret is hidden unless the
   * selection is collapsed. Use this function to show the caret even in selections.
   * @param aVisibility PR_TRUE to show the caret in selections.  PR_FALSE to hide.
   * @return always NS_OK
   */
    void setCaretVisibilityDuringSelection(in boolean visibility);

   /** CharacterMove will move the selection one character forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = PR_FALSE
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if PR_FALSE
   *  @param aExtend  should it collapse the selection of extend it?
   */
    void characterMove(in boolean forward, in boolean extend);

   /** PhysicalMove will move the selection one "unit" in a given direction
   *  within the document.
   *  this will also have the effect of collapsing the selection if the aExtend = PR_FALSE
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aDirection
   *  @param aAmount    character/line; word/lineBoundary
   *  @param aExtend    should it collapse the selection of extend it?
   */
    void physicalMove(in short direction, in short amount, in boolean extend);

   /**
    * nsFrameSelection::PhysicalMove depends on the ordering of these values;
    * do not change without checking there!
    */
   const short MOVE_LEFT = 0;
   const short MOVE_RIGHT = 1;
   const short MOVE_UP = 2;
   const short MOVE_DOWN = 3;

   /** WordMove will move the selection one word forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = PR_FALSE
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if PR_FALSE
   *  @param aExtend  should it collapse the selection of extend it?
   */

    void wordMove(in boolean forward, in boolean extend);

    /** LineMove will move the selection one line forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = PR_FALSE
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if PR_FALSE
   *  @param aExtend  should it collapse the selection of extend it?
   */
    void lineMove(in boolean forward, in boolean extend);

  /** IntraLineMove will move the selection to the front of the line or end of the line
   *  in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = PR_FALSE
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if PR_FALSE
   *  @param aExtend  should it collapse the selection of extend it?
   */
    void intraLineMove(in boolean forward, in boolean extend);

  /** PageMove will move the selection one page forward/backward in the document.
   *  this will also have the effect of collapsing the selection if the aExtend = PR_FALSE
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if PR_FALSE
   *  @param aExtend  should it collapse the selection of extend it?
   */
    [can_run_script]
    void pageMove(in boolean forward, in boolean extend);

  /** CompleteScroll will move page view to the top or bottom of the document
   *  @param aForward forward or backward if PR_FALSE
   */
    void completeScroll(in boolean forward);

  /** CompleteMove will move page view to the top or bottom of the document
   *  this will also have the effect of collapsing the selection if the aExtend = PR_FALSE
   *  the "point" of selection that is extended is considered the "focus" point.
   *  or the last point adjusted by the selection.
   *  @param aForward forward or backward if PR_FALSE
   *  @param aExtend  should it collapse the selection of extend it?
   */
    [can_run_script]
    void completeMove(in boolean forward, in boolean extend);


  /** ScrollPage will scroll the page without affecting the selection.
   *  @param aForward scroll forward or backwards in selection
   */
    void scrollPage(in boolean forward);

  /** ScrollLine will scroll line up or down dependent on the boolean
   *  @param aForward scroll forward or backwards in selection
   */
	  void scrollLine(in boolean forward);

  /** ScrollCharacter will scroll right or left dependent on the boolean
   *  @param aRight if true will scroll right. if not will scroll left.
   */
    void scrollCharacter(in boolean right);

  /** CheckVisibility will return true if textnode and offsets are actually rendered
   *  in the current precontext.
   *  @param aNode textNode to test
   *  @param aStartOffset  offset in dom to first char of textnode to test
   *  @param aEndOffset    offset in dom to last char of textnode to test
   *  @param aReturnBool   boolean returned TRUE if visible FALSE if not
   */
    boolean checkVisibility(in Node node, in short startOffset, in short endOffset);
    [noscript,nostdcall] boolean checkVisibilityContent(in nsIContent node, in short startOffset, in short endOffset);
};
%{ C++
   #define NS_ISELECTIONCONTROLLER_CID \
   { 0x513b9460, 0xd56a, 0x4c4e, \
   { 0xb6, 0xf9, 0x0b, 0x8a, 0xe4, 0x37, 0x2a, 0x3b }}

namespace mozilla {

// RawSelectionType should be used to store nsISelectionController::SELECTION_*.
typedef short RawSelectionType;

// SelectionTypeMask should be used to store bit-mask of selection types.
// The value can be retrieved with ToSelectionTypeMask() and checking if
// a selection type is in a mask with |SelectionType & SelectionTypeMask|.
typedef uint16_t SelectionTypeMask;

// SelectionType should be used in internal handling because of type safe.
enum class SelectionType : RawSelectionType
{
  eInvalid = -1,
  eNone = nsISelectionController::SELECTION_NONE,
  eNormal = nsISelectionController::SELECTION_NORMAL,
  eSpellCheck = nsISelectionController::SELECTION_SPELLCHECK,
  eIMERawClause = nsISelectionController::SELECTION_IME_RAWINPUT,
  eIMESelectedRawClause = nsISelectionController::SELECTION_IME_SELECTEDRAWTEXT,
  eIMEConvertedClause = nsISelectionController::SELECTION_IME_CONVERTEDTEXT,
  eIMESelectedClause =
    nsISelectionController::SELECTION_IME_SELECTEDCONVERTEDTEXT,
  eAccessibility = nsISelectionController::SELECTION_ACCESSIBILITY,
  eFind = nsISelectionController::SELECTION_FIND,
  eURLSecondary = nsISelectionController::SELECTION_URLSECONDARY,
  eURLStrikeout = nsISelectionController::SELECTION_URLSTRIKEOUT,
};

// Using anonymous enum to define constants because these constants may be
// used at defining fixed size array in some header files (e.g.,
// nsFrameSelection.h).  So, the values needs to be defined here, but we cannot
// use static/const even with extern since it causes failing to link or
// initializes them after such headers.
enum : size_t
{
  // kSelectionTypeCount is number of SelectionType.
  kSelectionTypeCount = nsISelectionController::NUM_SELECTIONTYPES,
};

// kPresentSelectionTypes is selection types which may be displayed.
// I.e., selection types except eNone.
static const SelectionType kPresentSelectionTypes[] = {
  SelectionType::eNormal,
  SelectionType::eSpellCheck,
  SelectionType::eIMERawClause,
  SelectionType::eIMESelectedRawClause,
  SelectionType::eIMEConvertedClause,
  SelectionType::eIMESelectedClause,
  SelectionType::eAccessibility,
  SelectionType::eFind,
  SelectionType::eURLSecondary,
  SelectionType::eURLStrikeout,
};

// Please include mozilla/dom/Selection.h for the following APIs.
const char* ToChar(SelectionType aSelectionType);
inline bool IsValidRawSelectionType(RawSelectionType aRawSelectionType);
inline SelectionType ToSelectionType(RawSelectionType aRawSelectionType);
inline RawSelectionType ToRawSelectionType(SelectionType aSelectionType);
inline SelectionTypeMask ToSelectionTypeMask(SelectionType aSelectionType);

} // namespace mozilla
%}
