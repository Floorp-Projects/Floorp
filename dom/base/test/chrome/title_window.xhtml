<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="chrome://global/skin"?>
<window title="Mozilla Bug 481777 subwindow"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="runTests()">

  <iframe type="content" id="html1" src="data:text/html,&lt;html&gt;&lt;head&gt;&lt;title id='t'&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;/html&gt;"/>
  <iframe type="content" id="html2" src="data:text/html,&lt;html&gt;&lt;head&gt;&lt;title id='t'&gt;Test&lt;/title&gt;&lt;title&gt;Foo&lt;/title&gt;&lt;/head&gt;&lt;/html&gt;"/>
  <iframe type="content" id="html3" src="data:text/html,&lt;html&gt;&lt;/html&gt;"/>
  <iframe type="content" id="xhtml1" src="data:text/xml,&lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&lt;body&gt;&lt;title id='t'&gt;Test&lt;/title&gt;&lt;/body&gt;&lt;/html&gt;"/>
  <iframe type="content" id="xhtml2" src="data:text/xml,&lt;title xmlns='http://www.w3.org/1999/xhtml'&gt;Test&lt;/title&gt;"/>
  <iframe type="content" id="xhtml3" src="data:text/xml,&lt;title xmlns='http://www.w3.org/1999/xhtml'&gt;Te&lt;div&gt;bogus&lt;/div&gt;st&lt;/title&gt;"/>
  <iframe type="content" id="xhtml4" src="data:text/xml,&lt;html xmlns='http://www.w3.org/1999/xhtml'/>"/>
  <iframe type="content" id="xhtml5" src="data:text/xml,&lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&lt;head/>&lt;/html&gt;"/>
  <iframe type="content" id="xhtml6" src="data:text/xml,&lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&lt;head&gt;&lt;style/>&lt;/head&gt;&lt;/html&gt;"/>
  <iframe id="xul1" src="file_title.xhtml"/>
  <iframe id="xul2" src="file_title.xhtml"/>
  <iframe type="content" id="svg1" src="data:text/xml,&lt;svg xmlns='http://www.w3.org/2000/svg'&gt;&lt;title id='t'&gt;Test&lt;/title&gt;&lt;/svg&gt;"/>
  <iframe type="content" id="svg2" src="data:text/xml,&lt;svg xmlns='http://www.w3.org/2000/svg'&gt;&lt;title id='t'&gt;Test&lt;/title&gt;&lt;/svg&gt;"/>

  <script type="application/javascript">
    <![CDATA[
    var imports = [ "SimpleTest", "is", "isnot", "ok" ];
    for (var name of imports) {
      window[name] = window.arguments[0][name];
    }

    function testStatics() {
      function testStatic(id, expect, description) {
        is(document.getElementById(id).contentDocument.title, expect, description);
      }

      testStatic("html1", "Test", "HTML <title>");
      testStatic("html2", "Test", "choose the first HTML <title>");
      testStatic("html3", "", "No title");
      testStatic("xhtml1", "Test", "XHTML <title> in body");
      testStatic("xhtml2", "Test", "XHTML <title> as root element");
      testStatic("xhtml3", "Test", "XHTML <title> containing an element");
      testStatic("xul1", "Test", "XUL <window> title attribute");
      testStatic("svg1", "Test", "SVG <title>");

      // This one does nothing and won't fire an event
      document.getElementById("xhtml4").contentDocument.title = "Hello";
      is(document.getElementById("xhtml4").contentDocument.title, "", "Setting 'title' does nothing with no <head>");
    }

    function testDynamics() {
      var inProgress = {};
      var inProgressDoc = {};
      var inProgressWin = {};
      function testDynamic(id, expect, description, op, checkDOM) {
        inProgress[description] = true;
        inProgressDoc[description] = true;
        inProgressWin[description] = true;
        var frame = document.getElementById(id);
        var done = false;

        function listener(ev) {
          inProgress[description] = false;
          is(frame.contentDocument.title, expect, "'title': " + description);
          is(frame.contentDocument, ev.target, "Unexpected target: " + description);
          if (typeof(checkDOM) != "undefined") {
            checkDOM(frame.contentDocument, "DOM: " + description);
          }
        }

        function listener2(ev) {
          inProgressDoc[description] = false;
        }
        function listener3(ev) {
          inProgressWin[description] = false;
        }
        frame.addEventListener("DOMTitleChanged", listener, false);
        frame.contentDocument.addEventListener("DOMTitleChanged", listener2, false);
        frame.contentWindow.addEventListener("DOMTitleChanged", listener3, false);

        op(frame.contentDocument);
      }

      var dynamicTests = [
        [ "html1", "Hello", "Setting HTML <title> text contents",
          function(doc){
            var t = doc.getElementById("t"); t.textContent = "Hello";
          } ],
        [ "html2", "Foo", "Removing HTML <title>",
          function(doc){
            var t = doc.getElementById("t"); t.remove();
          } ],
        [ "html3", "Hello", "Appending HTML <title> element to root element",
          function(doc){
            var t = doc.createElement("title"); t.textContent = "Hello"; doc.documentElement.appendChild(t);
          } ],
        [ "xhtml3", "Hello", "Setting 'title' clears existing <title> contents",
          function(doc){
            doc.title = "Hello";
          },
          function(doc, desc) {
            is(doc.documentElement.firstChild.data, "Hello", desc);
            is(doc.documentElement.firstChild.nextSibling, null, desc);
          } ],
        [ "xhtml5", "Hello", "Setting 'title' works with a <head>",
          function(doc){
            doc.title = "Hello";
          },
          function(doc, desc) {
            var head = doc.documentElement.firstChild;
            var title = head.firstChild;
            is(title.tagName.toLowerCase(), "title", desc);
            is(title.firstChild.data, "Hello", desc);
            is(title.firstChild.nextSibling, null, desc);
            is(title.nextSibling, null, desc);
          } ],
        [ "xhtml6", "Hello", "Setting 'title' appends to <head>",
          function(doc){
            doc.title = "Hello";
          },
          function(doc, desc) {
            var head = doc.documentElement.firstChild;
            is(head.firstChild.tagName.toLowerCase(), "style", desc);
            var title = head.firstChild.nextSibling;
            is(title.tagName.toLowerCase(), "title", desc);
            is(title.firstChild.data, "Hello", desc);
            is(title.firstChild.nextSibling, null, desc);
            is(title.nextSibling, null, desc);
          } ],
        [ "xul1", "Hello", "Setting XUL <window> title attribute",
          function(doc){
            doc.documentElement.setAttribute("title", "Hello");
          } ],
        [ "xul2", "Hello", "Setting 'title' in XUL",
          function(doc){
            doc.title = "Hello";
          },
          function(doc, desc) {
            is(doc.documentElement.getAttribute("title"), "Hello", desc);
            is(doc.documentElement.firstChild, null, desc);
          } ],
        [ "svg1", "Hello", "Setting SVG <title> text contents",
          function(doc){
            var t = doc.getElementById("t"); t.textContent = "Hello";
          } ],
        [ "svg2", "", "Removing SVG <title>",
          function(doc){
            var t = doc.getElementById("t"); t.remove();
          } ] ];

      var titleWindow = window;

      function runIndividualTest(i) {
        if (i == dynamicTests.length) {
          // Closing the window will nuke the global properties, since this
          // function is not really running on this window... or something
          // like that.  Thanks, executeSoon!
          var tester = SimpleTest;
          window.close();
          tester.finish();
        } else {
          var parameters = dynamicTests[i];
          var testElementId = parameters[0];
          var testExpectedValue = parameters[1];
          var testDescription = parameters[2];
          var testOp = parameters[3];
          var testCheckDOM = parameters[4];

          function checkTest() {
            ok(!inProgress[testDescription],
               testDescription + ": DOMTitleChange not fired");
            ok(inProgressDoc[testDescription],
               testDescription + ": DOMTitleChange fired on content document");
            ok(inProgressWin[testDescription],
               testDescription + ": DOMTitleChange fired on content window");
            // Run the next test in the context of the parent XUL window.
            titleWindow.setTimeout(runIndividualTest, 0, i+1);
          }
          function spinEventLoopOp(doc) {
            // Perform the test's operations.
            testOp(doc);
            // Spin the associated window's event loop to ensure we
            // drain any asynchronous changes and fire associated
            // events.
            doc.defaultView.setTimeout(checkTest, 0);
          }

          testDynamic(testElementId, testExpectedValue, testDescription,
                      spinEventLoopOp, testCheckDOM);
        }
      }

      window.setTimeout(runIndividualTest, 0, 0);
    }

    function runTests() {
      testStatics();
      testDynamics();
    }
    ]]>
  </script>
</window>
