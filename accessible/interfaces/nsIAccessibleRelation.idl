/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsIArray.idl"

interface nsIAccessible;

/**
 * This interface gives access to an accessible's set of relations.
 */
[scriptable, builtinclass, uuid(55b308c4-2ae4-46bc-b4cd-4d4370e0a660)]
interface nsIAccessibleRelation : nsISupports
{
  /**
   * This object is labelled by a target object.
   */
  const unsigned long RELATION_LABELLED_BY = 0x00;

  /**
   * This object is label for a target object.
   */
  const unsigned long RELATION_LABEL_FOR = 0x01;

  /**
   * This object is described by the target object.
   */
  const unsigned long RELATION_DESCRIBED_BY = 0x02;

  /**
   * This object is describes the target object.
   */
  const unsigned long RELATION_DESCRIPTION_FOR = 0x3;

  /**
   * This object is a child of a target object.
   */
  const unsigned long RELATION_NODE_CHILD_OF = 0x4;

  /**
   * This object is a parent of a target object. A dual relation to
   * RELATION_NODE_CHILD_OF
   */
  const unsigned long RELATION_NODE_PARENT_OF = 0x5;

  /**
   * Some attribute of this object is affected by a target object.
   */
  const unsigned long RELATION_CONTROLLED_BY = 0x06;

  /**
   * This object is interactive and controls some attribute of a target object.
   */
  const unsigned long RELATION_CONTROLLER_FOR = 0x07;

  /**
   * Content flows from this object to a target object, i.e. has content that
   * flows logically to another object in a sequential way, e.g. text flow.
   */
  const unsigned long RELATION_FLOWS_TO = 0x08;

  /**
   * Content flows to this object from a target object, i.e. has content that
   * flows logically from another object in a sequential way, e.g. text flow.
   */
  const unsigned long RELATION_FLOWS_FROM = 0x09;

  /**
   * This object is a member of a group of one or more objects. When there is
   * more than one object in the group each member may have one and the same
   * target, e.g. a grouping object.  It is also possible that each member has
   * multiple additional targets, e.g. one for every other member in the group.
   */
  const unsigned long RELATION_MEMBER_OF = 0x0a;

  /**
   * This object is a sub window of a target object.
   */
  const unsigned long RELATION_SUBWINDOW_OF = 0x0b;

  /**
   * This object embeds a target object. This relation can be used on the
   * OBJID_CLIENT accessible for a top level window to show where the content
   * areas are.
   */
  const unsigned long RELATION_EMBEDS = 0x0c;

  /**
   * This object is embedded by a target object.
   */
  const unsigned long RELATION_EMBEDDED_BY = 0x0d;

  /**
   * This object is a transient component related to the target object. When
   * this object is activated the target object doesn't lose focus.
   */
  const unsigned long RELATION_POPUP_FOR = 0x0e;

  /**
   * This object is a parent window of the target object.
   */
  const unsigned long RELATION_PARENT_WINDOW_OF = 0x0f;

  /**
   * Part of a form/dialog with a related default button. It is used for
   * MSAA/XPCOM, it isn't for IA2 or ATK.
   */
  const unsigned long RELATION_DEFAULT_BUTTON = 0x10;

  /**
   * The target object is the containing document object.
   */
  const unsigned long RELATION_CONTAINING_DOCUMENT = 0x11;

  /**
   * The target object is the topmost containing document object in the tab pane.
   */
  const unsigned long RELATION_CONTAINING_TAB_PANE = 0x12;

  /**
   * The target object is the containing window object.
   */
  const unsigned long RELATION_CONTAINING_WINDOW = 0x13;

  /**
   * The target object is the containing application object.
   */
  const unsigned long RELATION_CONTAINING_APPLICATION = 0x14;

  /**
   * The target object provides the detailed, extended description for this
   * object. It provides more detailed information than would normally be
   * provided using the DESCRIBED_BY relation. A common use for this relation is
   * in digital publishing where an extended description needs to be conveyed in
   * a book that requires structural markup or the embedding of other technology
   * to provide illustrative content.
   */
  const unsigned long RELATION_DETAILS = 0x15;

  /**
   * This object provides the detailed, extended description for the target
   * object. See DETAILS relation.
   */
  const unsigned long RELATION_DETAILS_FOR = 0x16;

  /**
   * The target object is the error message for this object.
   */
  const unsigned long RELATION_ERRORMSG = 0x17;

  /**
   * This object is the error message for the target object.
   */
  const unsigned long RELATION_ERRORMSG_FOR = 0x18;

  /**
   * The target object is the anchor referenced by this link.
   */
  const unsigned long RELATION_LINKS_TO = 0x19;

  /**
   * Returns the type of the relation.
   */
  readonly attribute unsigned long relationType;

  /**
   * Returns the number of targets for this relation.
   */
  readonly attribute unsigned long targetsCount;

  /**
   * Returns one accessible relation target.
   * @param index - 0 based index of relation target.
   */
  nsIAccessible getTarget(in unsigned long index);

  /**
   * Returns multiple accessible relation targets.
   */
  nsIArray getTargets();
};
