# SPDX-License-Identifier: MPL-2.0

name: "(A) 📦️ Package"
on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        required: true
        default: Windows-x64
        options:
          - Windows-x64
          - Linux-x64
          - Linux-aarch64
          - macOS-x64
      beta:
        type: boolean
        required: false
        default: false
      runtime_artifact_workflow_run_id:
        type: string
        default: ""
        required: false
      skip_signing:
        type: boolean
        required: false
        default: false
        description: "Skip code signing process"

  workflow_call:
    inputs:
      platform:
        type: string
        default: Windows-x64
        required: true
      beta:
        type: boolean
        required: false
        default: false
      runtime_artifact_workflow_run_id:
        type: string
        default: ""
        required: false
      skip_signing:
        type: boolean
        required: false
        default: false
        description: "Skip code signing process"

run-name: 📦️ Package ${{ inputs.platform }}${{ inputs.skip_signing && ' (Unsigned)' || '' }}
jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - name: Get commit hash from runtime_artifact_workflow_run_id
        if: ${{ inputs.runtime_artifact_workflow_run_id != '' }}
        id: get-commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const runId = '${{ inputs.runtime_artifact_workflow_run_id }}';
            const targetRepo = '${{ github.repository }}-runtime';
            const [owner, repo] = targetRepo.split('/');
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: runId
            });
            const commitHash = run.head_sha;
            if (!commitHash || !/^[0-9a-fA-F]{40}$/.test(commitHash)) {
              core.setFailed('Commit hash is missing or not a valid SHA-1: ' + commitHash);
              throw new Error('Commit hash is missing or not a valid SHA-1: ' + commitHash);
            }
            core.setOutput('commit_hash', commitHash);

      - name: Checkout ${{ github.repository }}-runtime
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}-runtime
          ref: ${{ steps.get-commit.outputs.commit_hash }}
          submodules: "recursive"

      - name: Apply upstream patches
        run: |
          PATCH_DIR=".github/patches/upstream"
          if [ -d "$PATCH_DIR" ]; then
            for patch in "$PATCH_DIR"/*.patch; do
              [ -e "$patch" ] || continue
              echo "Applying patch: $(basename "$patch")"
              git apply --verbose "$patch"
            done
          else
            echo "Patch directory not found, skipping patch application."
          fi

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          path: "noraneko"

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Noraneko
        run: |
          cd $GITHUB_WORKSPACE
          cd ./noraneko
          deno install --allow-scripts
          cd ..

      - name: Setup
        run: |
          sudo apt update
          sudo apt install msitools -y
          ./mach --no-interactive bootstrap --application-choice browser_artifact_mode

      - name: Write Versions
        run: |
          cd ./noraneko
          deno task feles-build misc writeVersion
          cd ..

      - name: Normalize platform
        run: |
          #!/bin/bash
          set -euo pipefail

          raw_platform="${{ inputs.platform }}"
          canon_platform="$raw_platform"
          case "$raw_platform" in
            *-x64) canon_platform="${raw_platform%-x64}-x86_64" ;;
          esac

          {
            echo "INPUT_PLATFORM=$raw_platform"
            echo "CANON_PLATFORM=$canon_platform"
          } >> "$GITHUB_ENV"

      - name: Copy branding files from runtime
        run: |
          if [ -d ".github/assets/branding" ]; then
            echo "Copying branding files from .github/assets/branding to browser/branding..."
            cp -r .github/assets/branding/* ./browser/branding/
            echo "Branding files copied successfully."
            ls -la ./browser/branding/
          else
            echo "Warning: .github/assets/branding directory not found, skipping branding copy."
          fi

      - name: Mach configure
        env:
          IS_BETA: ${{ inputs.beta }}
        run: |
          #!/bin/bash
          set -euo pipefail

          PLATFORM="${INPUT_PLATFORM:-${{ inputs.platform }}}"
          IS_BETA="${IS_BETA}"

          CANON_PLATFORM="${CANON_PLATFORM:-$PLATFORM}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi

          declare -A MOZCONFIGS=(
            ["Windows-x86_64"]="./.github/workflows/mozconfigs/windows-x86_64.mozconfig"
            ["Linux-x86_64"]="./.github/workflows/mozconfigs/linux-x86_64.mozconfig"
            ["Linux-aarch64"]="./.github/workflows/mozconfigs/linux-aarch64.mozconfig"
            ["macOS-x86_64"]="./.github/workflows/mozconfigs/macos-x86_64.mozconfig"
          )

          declare -A FALLBACK_MOZCONFIGS=(
            ["Windows-x86_64"]="./.github/workflows/mozconfigs/win64.mozconfig"
            ["Linux-x86_64"]="./.github/workflows/mozconfigs/linux64.mozconfig"
            ["Linux-aarch64"]="./.github/workflows/mozconfigs/linux64-aarch64.mozconfig"
            ["macOS-x86_64"]="./.github/workflows/mozconfigs/macosx64-x86_64.mozconfig"
          )

          MOZCONFIG="${MOZCONFIGS[$CANON_PLATFORM]}"
          if [ -z "${MOZCONFIG}" ] || [ ! -f "${MOZCONFIG}" ]; then
            MOZCONFIG="${FALLBACK_MOZCONFIGS[$CANON_PLATFORM]}"
          fi

          if [ -z "${MOZCONFIG}" ] || [ ! -f "${MOZCONFIG}" ]; then
            echo "mozconfig for platform ${CANON_PLATFORM} not found" >&2
            exit 1
          fi

          cp "${MOZCONFIG}" mozconfig

          if [ -d "./noraneko/static/gecko/branding" ]; then
            cp -r ./noraneko/static/gecko/branding/* ./browser/branding/
          fi

          AUTOGEN_DIR="./noraneko/static/gecko/config/autogenerated"
          mkdir -p "${AUTOGEN_DIR}"
          echo "$(cat ./noraneko/static/gecko/config/version.txt)@$(cat ./browser/config/version.txt)" > "${AUTOGEN_DIR}/version.txt"
          echo "$(cat ./noraneko/static/gecko/config/version_display.txt)@$(cat ./browser/config/version_display.txt)" > "${AUTOGEN_DIR}/version_display.txt"

          cat >> mozconfig <<'EOF'
          ac_add_options --with-version-file-path=noraneko/static/gecko/config/autogenerated
          ac_add_options --enable-release
          ac_add_options --disable-tests
          ac_add_options --enable-artifact-builds
          mk_add_options MOZ_OBJDIR=./obj-artifact-build-output
          EOF

          sed -i 's|^[[:space:]]*ac_add_options --disable-updater.*$||g' mozconfig
          sed -i 's|^[[:space:]]*ac_add_options --enable-unverified-updates.*$||g' mozconfig
          sed -i 's|^[[:space:]]*ac_add_options --enable-chrome-format=flat.*$||g' mozconfig
          sed -i 's|^[[:space:]]*ac_add_options --enable-update-channel=.*$||g' mozconfig
          sed -i 's|^[[:space:]]*ac_add_options --with-branding=.*$||g' mozconfig

          UPDATE_UTILS="./toolkit/modules/UpdateUtils.sys.mjs"
          if [ -f "${UPDATE_UTILS}" ]; then
            sed -i 's|return encodeURIComponent(replacement);|return name === "NORA_UPDATE_HOST" ? replacement : encodeURIComponent(replacement);|' "${UPDATE_UTILS}"
          fi

          CONFVARS="./browser/confvars.sh"

          find_branding_dir() {
            for candidate in "$@"; do
              if [ -d "./browser/branding/${candidate}" ]; then
                echo "${candidate}"
                return 0
              fi
            done
            return 1
          }

          if [ "${IS_BETA}" = "true" ]; then
            UPDATE_CHANNEL="beta"
            if BETA_BRANDING=$(find_branding_dir "floorp-daylight" "noraneko-daylight" "noraneko-alpha"); then
              sed -i "s|MOZ_BRANDING_DIRECTORY=browser/branding/unofficial|MOZ_BRANDING_DIRECTORY=browser/branding/${BETA_BRANDING}|g" "${CONFVARS}"
              echo "ac_add_options --enable-update-channel=${UPDATE_CHANNEL}" >> mozconfig
              echo "ac_add_options --with-branding=browser/branding/${BETA_BRANDING}" >> mozconfig
            else
              echo "Unable to locate beta branding directory" >&2
              echo "Available branding directories:" >&2
              ls -la ./browser/branding/ >&2
              exit 1
            fi
            BASE_URL="github.com/${{ github.repository }}/releases/download/beta/"
            declare -A PLATFORM_UPDATE_SUFFIX=(
              ["Windows-x86_64"]="WINNT_x86_64-msvc-x64."
              ["Linux-x86_64"]="Linux_x86_64."
              ["Linux-aarch64"]="Linux_aarch64."
              ["macOS-x86_64"]="Darwin_Universal."
            )
          else
            UPDATE_CHANNEL="release"
            if RELEASE_BRANDING=$(find_branding_dir "floorp-official" "noraneko-official" "noraneko"); then
              sed -i "s|MOZ_BRANDING_DIRECTORY=browser/branding/unofficial|MOZ_BRANDING_DIRECTORY=browser/branding/${RELEASE_BRANDING}|g" "${CONFVARS}"
              echo "ac_add_options --enable-update-channel=${UPDATE_CHANNEL}" >> mozconfig
              echo "ac_add_options --with-branding=browser/branding/${RELEASE_BRANDING}" >> mozconfig
            else
              echo "Unable to locate release branding directory" >&2
              echo "Available branding directories:" >&2
              ls -la ./browser/branding/ >&2
              exit 1
            fi
            VERSION_DISPLAY="$(cat ./browser/config/version_display.txt | tr -d '\r\n')"
            BASE_URL="updates.floorp.app/browser/stable/"
            declare -A PLATFORM_UPDATE_SUFFIX=(
              ["Windows-x86_64"]="WINNT/x86_64/"
              ["Linux-x86_64"]="Linux/x86_64/"
              ["Linux-aarch64"]="Linux/aarch64/"
              ["macOS-x86_64"]="Darwin/x86_64/"
            )
            echo "Using release update target version ${VERSION_DISPLAY}"
          fi

          UPDATE_SUFFIX="${PLATFORM_UPDATE_SUFFIX[$CANON_PLATFORM]}"
          if [ -n "${UPDATE_SUFFIX}" ] && [ -f "${UPDATE_UTILS}" ]; then
            sed -i "s|REPLACE_THIS_NORA_UPDATE_HOST_TARGET_PLACEHOLDER|${BASE_URL}${UPDATE_SUFFIX}|g" "${UPDATE_UTILS}"
          fi

          echo "UPDATE_CHANNEL=${UPDATE_CHANNEL}" >> "$GITHUB_ENV"

          if [ "${CANON_PLATFORM}" = "macOS-x86_64" ]; then
            mkdir -p ~/tools
            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/ceSQWV1AS76UlhYJ0_PfJQ/artifacts/public/build/dmg.tar.zst -o dmg.tar.zst
            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/N2SwCRLrRw2l-UWP4N7dhQ/artifacts/public/build/hfsplus.tar.zst -o hfsplus.tar.zst
            tar -I zstd -xf dmg.tar.zst -C ~/tools
            tar -I zstd -xf hfsplus.tar.zst -C ~/tools
            chmod 777 ~/tools/dmg ~/tools/hfsplus
            cat >> mozconfig <<EOF
          DMG_TOOL=$HOME/tools/dmg/dmg
          HFS_TOOL=$HOME/tools/dmg/hfsplus
          MKFSHFS=$HOME/tools/hfsplus/newfs_hfs
          EOF
          fi

          ./mach configure
          git apply --ignore-space-change --ignore-whitespace .github/patches/packaging/*.patch

      - name: Possibly retrieve run ID if not provided
        run: |
          if [ -z "${{ inputs.runtime_artifact_workflow_run_id }}" ]; then
            echo "RUNTIME_ARTIFACT_WORKFLOW_RUN_ID=false" >> $GITHUB_ENV
          else
            echo "RUNTIME_ARTIFACT_WORKFLOW_RUN_ID=${{ inputs.runtime_artifact_workflow_run_id }}" >> $GITHUB_ENV
          fi

      - name: Get Artifact Name
        shell: bash
        env:
          FORCE_COLOR: 3
        run: |
          #!/bin/bash
          set -e

          RAW_PLATFORM="${INPUT_PLATFORM:-${{ inputs.platform }}}"
          CANON_PLATFORM="${CANON_PLATFORM:-$RAW_PLATFORM}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi

          case "$CANON_PLATFORM" in
            "Windows-x86_64")
              echo "ARTIFACT_NAME=floorp-windows-x86_64-moz-artifact" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME=floorp-windows-x86_64-moz-artifact.zip" >> $GITHUB_ENV
              echo "OUTPUT_NAME=windows-x86_64" >> $GITHUB_ENV
              echo "INSTALLER_PATH=*installer.exe" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=floorp-windows-x86_64.installer.exe" >> $GITHUB_ENV
              echo "WORKSPACE_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
              ;;
            "Linux-x86_64")
              echo "ARTIFACT_NAME=floorp-linux-x86_64-moz-artifact" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME=floorp-linux-x86_64-moz-artifact.tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_NAME=linux-x86_64" >> $GITHUB_ENV
              echo "INSTALLER_PATH=floorp*tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=floorp-linux-x86_64.tar.xz" >> $GITHUB_ENV
              ;;
            "Linux-aarch64")
              echo "ARTIFACT_NAME=floorp-linux-aarch64-moz-artifact" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME=floorp-linux-aarch64-moz-artifact.tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_NAME=linux-aarch64" >> $GITHUB_ENV
              echo "INSTALLER_PATH=floorp*tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=floorp-linux-aarch64.tar.xz" >> $GITHUB_ENV
              ;;
            "macOS-x86_64")
              echo "ARTIFACT_NAME=floorp-mac-universal-moz-artifact" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME=floorp-macOS-universal-moz-artifact.dmg" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME_FRAMEWORK=floorp-macOS.update_framework_artifacts.zip" >> $GITHUB_ENV
              echo "OUTPUT_NAME=mac-universal" >> $GITHUB_ENV
              echo "INSTALLER_PATH=floorp-*dmg" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=floorp-macOS-universal.dmg" >> $GITHUB_ENV
              ;;
            *)
              echo "Unknown canonical platform: $CANON_PLATFORM"
              exit 1
              ;;
          esac

          echo "Environment variables set for platform: $RAW_PLATFORM (canonical: $CANON_PLATFORM)"

      - name: Download mozilla artifact from Actions
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: ~/downloads

      - name: Download Mozilla Artifact from GitHub Releases
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          mkdir -p ~/downloads
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          case "$CANON_PLATFORM" in
            "macOS-x86_64")
              curl -L "https://github.com/${{ github.repository }}-runtime/releases/latest/download/${ARTIFACT_FROM_RELEASE_NAME}" -o "$HOME/downloads/${ARTIFACT_FROM_RELEASE_NAME}"
              curl -L "https://github.com/${{ github.repository }}-runtime/releases/latest/download/${ARTIFACT_FROM_RELEASE_NAME_FRAMEWORK}" -o "$HOME/downloads/${ARTIFACT_FROM_RELEASE_NAME_FRAMEWORK}"
              ;;
            *)
              curl -L "https://github.com/${{ github.repository }}-runtime/releases/latest/download/${ARTIFACT_FROM_RELEASE_NAME}" -o "$HOME/downloads/${ARTIFACT_FROM_RELEASE_NAME}"
              ;;
          esac

      - name: Make Downloaded Artifact to Mozilla Artifact (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        run: |
          mkdir -p ~/artifacts
          cd ~/downloads
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          case "$CANON_PLATFORM" in
            "Windows-x86_64")
              TARGET_NAME="${ARTIFACT_NAME:-floorp-win-x86_64-moz-artifact}"
              zip -r "$HOME/artifacts/${TARGET_NAME}.zip" ./*
              ;;
            *)
              cp -r ./* ~/artifacts
              ;;
          esac
          cd "$GITHUB_WORKSPACE"

      - name: Make Download Artifact to Mozilla Artifact (GitHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          mkdir -p ~/artifacts
          cd ~/downloads
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          case "$CANON_PLATFORM" in
            "macOS-x86_64")
              if [ -f "$ARTIFACT_FROM_RELEASE_NAME" ]; then
                cp "$ARTIFACT_FROM_RELEASE_NAME" ~/artifacts/
              fi
              if [ -n "$ARTIFACT_FROM_RELEASE_NAME_FRAMEWORK" ] && [ -f "$ARTIFACT_FROM_RELEASE_NAME_FRAMEWORK" ]; then
                cp "$ARTIFACT_FROM_RELEASE_NAME_FRAMEWORK" ~/artifacts/
              fi
              ;;
            *)
              cp -r ./* ~/artifacts
              ;;
          esac
          cd "$GITHUB_WORKSPACE"

      - name: Build Noraneko
        run: |
          # Find the actual deno executable, resolving symlinks
          DENO_PATH=$(which deno)
          echo "Deno symlink path: $DENO_PATH"

          # Debug: Check what's in the deno directory
          echo "Contents of /opt/hostedtoolcache/deno/2.5.4/x64/:"
          ls -la /opt/hostedtoolcache/deno/2.5.4/x64/ || echo "Directory not accessible"

          echo "Looking for deno binary:"
          find /opt/hostedtoolcache/deno/2.5.4/ -name "deno" -type f 2>/dev/null || echo "No deno binary found"

          # Try to find the actual deno binary
          REAL_DENO_PATH=""
          for possible_path in \
            /opt/hostedtoolcache/deno/2.5.4/x64/bin/deno \
            /opt/hostedtoolcache/deno/2.5.4/x64/deno \
            /home/runner/.deno/bin/deno \
            "$DENO_PATH"; do
            echo "Checking: $possible_path"
            if [ -f "$possible_path" ] && [ -x "$possible_path" ]; then
              REAL_DENO_PATH="$possible_path"
              echo "Found executable deno at: $REAL_DENO_PATH"
              break
            fi
          done

          if [ -z "$REAL_DENO_PATH" ]; then
            echo "Error: Could not find deno binary"
            exit 1
          fi

          echo "Deno version: $(deno --version)"

          # Export the real deno path for use in TypeScript build tools
          export DENO_EXECUTABLE_PATH="$REAL_DENO_PATH"
          echo "DENO_EXECUTABLE_PATH set to: $DENO_EXECUTABLE_PATH"

          cd ./noraneko
          NODE_ENV='production' deno task feles-build build --phase before-mach
          cd ..

      - name: Build
        run: |
          #!/bin/bash
          set -euo pipefail
          ./mach configure

          find_first() {
            for pattern in "$@"; do
              local match
              match=$(find ~/artifacts -maxdepth 1 -type f -name "$pattern" 2>/dev/null | head -n 1)
              if [ -n "$match" ]; then
                echo "$match"
                return 0
              fi
            done
            return 1
          }

          PLATFORM="${INPUT_PLATFORM:-${{ inputs.platform }}}"
          CANON_PLATFORM="${CANON_PLATFORM:-$PLATFORM}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi

          case "$CANON_PLATFORM" in
            "Windows-x86_64")
              ARTIFACT=$(find_first "floorp-win*-moz-artifact*.zip" "noraneko-win*-moz-artifact*.zip" "*win*-moz-artifact*.zip")
              if [ -z "$ARTIFACT" ]; then
                echo "Windows artifact not found in ~/artifacts" >&2
                exit 1
              fi
              MOZ_ARTIFACT_FILE="$ARTIFACT" ./mach build
              ;;
            "Linux-x86_64")
              ARTIFACT=$(find_first "floorp-linux-x86_64-moz-artifact*.tar.xz" "noraneko-linux-x86_64-moz-artifact*.tar.xz" "*linux*x86_64*moz-artifact*.tar.xz")
              if [ -z "$ARTIFACT" ]; then
                echo "Linux x86_64 artifact not found in ~/artifacts" >&2
                exit 1
              fi
              MOZ_ARTIFACT_FILE="$ARTIFACT" ./mach build
              ;;
            "Linux-aarch64")
              ARTIFACT=$(find_first "floorp-linux-aarch64-moz-artifact*.tar.xz" "noraneko-linux-aarch64-moz-artifact*.tar.xz" "*linux*aarch64*moz-artifact*.tar.xz")
              if [ -z "$ARTIFACT" ]; then
                echo "Linux aarch64 artifact not found in ~/artifacts" >&2
                exit 1
              fi
              MOZ_ARTIFACT_FILE="$ARTIFACT" ./mach build
              ;;
            "macOS-x86_64")
              DMG=$(find_first "floorp-mac*-moz-artifact*.dmg" "noraneko-mac*-moz-artifact*.dmg" "*mac*moz-artifact*.dmg")
              FRAMEWORK=$(find_first "floorp-mac*.update_framework_artifacts.zip" "noraneko-mac*.update_framework_artifacts.zip" "*mac*.update_framework_artifacts.zip")
              if [ -z "$DMG" ] || [ -z "$FRAMEWORK" ]; then
                echo "macOS artifacts not found in ~/artifacts" >&2
                exit 1
              fi
              MOZ_ARTIFACT_FILE="${DMG}:${FRAMEWORK}" ./mach build
              ;;
            *)
              echo "Unsupported platform ${{ inputs.platform }}" >&2
              exit 1
              ;;
          esac

      - name: Inject Noraneko
        run: |
          cd ./noraneko
          deno task feles-build build --phase after-mach
          rsync -aL ../obj-artifact-build-output/dist/bin/ ../obj-artifact-build-output/dist/tmp__bin
          rm -rf ../obj-artifact-build-output/dist/bin
          mv ../obj-artifact-build-output/dist/tmp__bin ../obj-artifact-build-output/dist/bin
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          if [[ "$CANON_PLATFORM" == "macOS-x86_64" ]]; then
            # macOS .app の Resources に対してパッチを適用するが、
            # ワイルドカードが未展開のまま文字列になる環境(CI等)では
            # そのまま patch に渡るとエラーとなるため、配列展開して
            # 先頭要素の存在を -e でチェックしてからループする。
            patch_files=(./tools/build/tasks/git-patches/patches/*.patch)
            resource_dirs=(../obj-artifact-build-output/dist/*.app/Contents/Resources)
            if [ -e "${patch_files[0]}" ] && [ -e "${resource_dirs[0]}" ]; then
              for patch_file in "${patch_files[@]}"; do
                for resource_dir in "${resource_dirs[@]}"; do
                  if [ -e "$resource_dir" ]; then
                    if patch --follow-symlinks --dry-run -d "$resource_dir" -p1 < "$patch_file"; then
                      patch --follow-symlinks -d "$resource_dir" -p1 < "$patch_file"
                    else
                      echo "Dry-run failed for $patch_file in $resource_dir" >&2
                      exit 1
                    fi
                  fi
                done
              done
            fi
          else
            if ls ./tools/build/tasks/git-patches/patches/*.patch >/dev/null 2>&1; then
              git apply --reject ./tools/build/tasks/git-patches/patches/*.patch --directory ../obj-artifact-build-output/dist/bin --unsafe-paths --check --apply
            fi
          fi
          cd ..

      - name: Upload dist on failure (pre-packaging)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ inputs.platform }}-artifact-prepack-dist-on-failure
          path: ./obj-artifact-build-output/dist
          if-no-files-found: ignore
          compression-level: 9

      - name: Apply Firefox Preferences Override
        run: |
          cd ./noraneko
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          if [[ "$CANON_PLATFORM" == "macOS-x86_64" ]]; then
            for app_bundle in ../obj-artifact-build-output/dist/*.app; do
              if [ -d "$app_bundle" ]; then
                FIREFOX_JS_PATH="$app_bundle/Contents/Resources/browser/defaults/preferences/firefox.js"
                if [ -f "$FIREFOX_JS_PATH" ]; then
                  echo "Applying preferences override to: $FIREFOX_JS_PATH"
                  ./static/gecko/pref/override.sh "$FIREFOX_JS_PATH"
                else
                  echo "Warning: firefox.js not found at $FIREFOX_JS_PATH"
                fi
              fi
            done
          else
            CANDIDATES=(
              "../obj-artifact-build-output/dist/bin/browser/defaults/preferences/firefox.js"
              "../obj-artifact-build-output/dist/noraneko/browser/defaults/preferences/firefox.js"
              "../obj-artifact-build-output/dist/floorp/browser/defaults/preferences/firefox.js"
            )
            FIREFOX_JS_PATH=""
            for candidate in "${CANDIDATES[@]}"; do
              if [ -f "$candidate" ]; then
                FIREFOX_JS_PATH="$candidate"
                break
              fi
            done
            if [ -n "$FIREFOX_JS_PATH" ]; then
              echo "Applying preferences override to: $FIREFOX_JS_PATH"
              ./static/gecko/pref/override.sh "$FIREFOX_JS_PATH"
            else
              echo "Warning: firefox.js not found in expected locations"
            fi
          fi
          cd ..

      - name: Replace Icon (Beta)
        run: |
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          if [[ "$CANON_PLATFORM" == "Windows-x86_64" ]] && [ "${{inputs.beta}}" == "true" ]; then
            sudo apt update
            sudo apt install -y wine winetricks
            curl -Lo ./rcedit-x64.exe https://github.com/electron/rcedit/releases/latest/download/rcedit-x64.exe
            ICON_PATH=""
            for candidate in ./browser/branding/noraneko-daylight/firefox.ico ./browser/branding/floorp-daylight/firefox.ico; do
              if [ -f "$candidate" ]; then
                ICON_PATH="$candidate"
                break
              fi
            done
            if [ -z "$ICON_PATH" ]; then
              echo "Beta icon file not found" >&2
              exit 1
            fi
            TARGET_EXE=""
            for candidate in ./obj-artifact-build-output/dist/bin/noraneko.exe ./obj-artifact-build-output/dist/bin/floorp.exe; do
              if [ -f "$candidate" ]; then
                TARGET_EXE="$candidate"
                break
              fi
            done
            if [ -z "$TARGET_EXE" ]; then
              echo "Browser executable not found for icon replacement" >&2
              exit 1
            fi
            wine ./rcedit-x64.exe "$TARGET_EXE" --set-icon "$ICON_PATH"
          fi

      - name: Package noraneko
        run: |
          ./mach package

      - name: Prepare installer workspace
        run: |
          mkdir -p ~/noraneko-installer
          if [[ "${{ inputs.platform }}" == "Linux-x86_64" || "${{ inputs.platform }}" == "Linux-x64" ]]; then
            sudo apt update
            sudo apt install -y build-essential debhelper fakeroot
          fi

      - name: Repackage Linux DEB
        if: ${{ inputs.platform == 'Linux-x86_64' || inputs.platform == 'Linux-x64' }}
        run: |
          set -euo pipefail
          set -x

          VERSION=$(cat ./noraneko/static/gecko/config/version.txt)
          INPUT_ARCHIVE="$(echo obj-*/dist/$INSTALLER_PATH)"

          if [ ! -f "$INPUT_ARCHIVE" ]; then
            echo "Installer archive not found: $INPUT_ARCHIVE" >&2
            exit 1
          fi

          WORKDIR=$(mktemp -d)
          echo "Using temp workdir: $WORKDIR"

          # Ensure cleanup on exit
          trap 'rc=$?; rm -rf "$WORKDIR" || true; exit $rc' EXIT

          # Extract archive
          mkdir -p "$WORKDIR/src"
          tar -xJf "$INPUT_ARCHIVE" -C "$WORKDIR/src"

          # Find top-level candidate directory
          candidate=$(find "$WORKDIR/src" -maxdepth 1 -mindepth 1 -type d -print -quit || true)
          if [ -z "$candidate" ]; then
            mkdir -p "$WORKDIR/floorp"
            shopt -s dotglob || true
            mv "$WORKDIR/src"/* "$WORKDIR/floorp/" 2>/dev/null || true
          else
            cand_basename=$(basename "$candidate")
            if [ "$cand_basename" != "floorp" ]; then
              echo "Adjusting top-level directory from $cand_basename to floorp"
              mkdir -p "$WORKDIR/floorp"
              mv "$candidate"/* "$WORKDIR/floorp/" || true
            else
              echo "Archive already contains floorp/ top-level"
              mkdir -p "$WORKDIR/floorp"
              mv "$candidate"/* "$WORKDIR/floorp/" || true
            fi
          fi

          # Provide firefox/ copy for packaging scripts that expect it
          mkdir -p "$WORKDIR/firefox"
          cp -a "$WORKDIR/floorp/." "$WORKDIR/firefox/" || true

          # Remove duplicate metadata that can confuse mach
          rm -f "$WORKDIR/firefox/application.ini" "$WORKDIR/firefox/platform.ini" || true

          # Mark packaged app for mach's checks
          touch "$WORKDIR/floorp/is-packaged-app" "$WORKDIR/firefox/is-packaged-app" || true

          ADJUSTED_ARCHIVE="$WORKDIR/adjusted-installer.tar.xz"
          (cd "$WORKDIR" && tar -cJf "$ADJUSTED_ARCHIVE" floorp firefox)

          echo "Adjusted archive created: $ADJUSTED_ARCHIVE"
          tar -tJf "$ADJUSTED_ARCHIVE" | sed -n '1,200p' || true

          INSPECT_DIR="$WORKDIR/inspect"
          mkdir -p "$INSPECT_DIR"
          tar -xJf "$ADJUSTED_ARCHIVE" -C "$INSPECT_DIR"
          echo "Inspect listing (first 200 lines):"
          ls -laR "$INSPECT_DIR" | sed -n '1,200p' || true

          # Run repackager
          OUTPUT_DEB=~/noraneko-installer/noraneko.deb
          mkdir -p "$(dirname "$OUTPUT_DEB")"

          echo "Invoking mach repackage deb..."
          if ./mach repackage deb --input "$ADJUSTED_ARCHIVE" --output "$OUTPUT_DEB" --arch x86_64 --version "$VERSION" --build-number 1 --templates browser/installer/linux/app/debian --release-product firefox --release-type release; then
            echo "mach repackage deb succeeded -> $OUTPUT_DEB"
            ls -la "$OUTPUT_DEB" || true
          else
            echo "mach repackage deb failed. Dumping $WORKDIR for debugging" >&2
            ls -laR "$WORKDIR" || true
            exit 1
          fi

      - name: Upload Noraneko Artifact
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ inputs.platform }}-artifact-test-build-output
          path: ./obj-artifact-build-output/dist
          compression-level: 9

      - name: Prepare un-packaging installer files for windows-codesigning (binary)
        run: |
          mkdir -p ~/noraneko-installer
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          if [[ "$CANON_PLATFORM" == "Windows-x86_64" ]]; then
            sudo apt update
            sudo apt install -y p7zip-full
            mkdir -p "$GITHUB_WORKSPACE/noraneko-unsigned-installer/binary" "$GITHUB_WORKSPACE/noraneko-unsigned-installer/installer"
            cp ./noraneko/.github/workflows/assets/windows/* "$GITHUB_WORKSPACE/noraneko-unsigned-installer/"
            7z x obj-artifact-build-output/dist/$INSTALLER_PATH -o"$GITHUB_WORKSPACE/noraneko-unsigned-installer/binary"
          fi

      - name: Publish Unsigned Binary 🎁
        id: publish-unsigned-binary
        if: inputs.platform == 'Windows-x86_64' || inputs.platform == 'Windows-x64'
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-unsigned-binary
          path: ${{ env.WORKSPACE_HOME }}/noraneko-unsigned-installer/binary

      - name: Sign Binary 🖊️
        id: Sign-binary
        if: (inputs.platform == 'Windows-x86_64' || inputs.platform == 'Windows-x64') && !inputs.skip_signing
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: "${{ secrets.SIGNPATH_API_TOKEN }}"
          organization-id: "3b13ba3b-8062-4df7-a4a6-217a5ec352c4"
          project-slug: "Floorp"
          signing-policy-slug: "release-signing"
          artifact-configuration-slug: "core-signing"
          github-artifact-id: "${{ steps.publish-unsigned-binary.outputs.artifact-id }}"
          wait-for-completion-timeout-in-seconds: 7200
          wait-for-completion: true
          output-artifact-directory: noraneko-unsigned-installer/signed_binary

      - name: Prepare installer with codesigning and re-packaging (installer)
        run: |
          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          if [[ "$CANON_PLATFORM" == "Windows-x86_64" ]]; then
            if [ "${{inputs.skip_signing}}" == "true" ]; then
              cd "$GITHUB_WORKSPACE/noraneko-unsigned-installer/binary"
            else
              cd "$GITHUB_WORKSPACE/noraneko-unsigned-installer/signed_binary"
            fi
            7z a -r -t7z app.7z -mx -m0=BCJ2 -m1=LZMA:d24 -m2=LZMA:d19 -m3=LZMA:d19 -mb0:1 -mb0s1:2 -mb0s2:3
            cat ../7zSD.sfx ../app.tag app.7z > "$GITHUB_WORKSPACE/noraneko-unsigned-installer/installer/$OUTPUT_INSTALLER_NAME"
          fi

      - name: Publish Unsigned Installer 🎁
        id: publish-unsigned-installer
        if: inputs.platform == 'Windows-x86_64' || inputs.platform == 'Windows-x64'
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-unsigned-installer
          path: ${{ env.WORKSPACE_HOME }}/noraneko-unsigned-installer/installer

      - name: Sign Installer 🖊️
        id: Sign-installer
        if: (inputs.platform == 'Windows-x86_64' || inputs.platform == 'Windows-x64') && !inputs.skip_signing
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: "${{ secrets.SIGNPATH_API_TOKEN }}"
          organization-id: "3b13ba3b-8062-4df7-a4a6-217a5ec352c4"
          project-slug: "Floorp"
          signing-policy-slug: "release-signing"
          artifact-configuration-slug: "stub-signing"
          github-artifact-id: "${{ steps.publish-unsigned-installer.outputs.artifact-id }}"
          wait-for-completion-timeout-in-seconds: 7200
          wait-for-completion: true
          output-artifact-directory: noraneko-unsigned-installer/signed_installer

      - name: Prepare installer with codesigning and re-packaging (without windows)
        run: |
          set -euo pipefail

          mkdir -p ~/noraneko-installer

          RAW_PLATFORM="${INPUT_PLATFORM:-${{ inputs.platform }}}"
          CANON_PLATFORM="${CANON_PLATFORM:-$RAW_PLATFORM}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi

          case "$CANON_PLATFORM" in
            "Windows-x86_64")
              if [ "${{inputs.skip_signing}}" == "true" ]; then
                mv "$GITHUB_WORKSPACE/noraneko-unsigned-installer/installer/$OUTPUT_INSTALLER_NAME" ~/noraneko-installer/$OUTPUT_INSTALLER_NAME
              else
                mv "$GITHUB_WORKSPACE/noraneko-unsigned-installer/signed_installer/$OUTPUT_INSTALLER_NAME" ~/noraneko-installer/$OUTPUT_INSTALLER_NAME
              fi
              ;;
            "Linux-x86_64"|"Linux-aarch64")
              sudo apt update
              sudo apt install -y patchelf
              DIST_DIR=$(find obj-artifact-build-output/dist -maxdepth 1 -type d \( -name "noraneko" -o -name "floorp" \) | head -n 1)
              if [ -z "$DIST_DIR" ]; then
                DIST_DIR="obj-artifact-build-output/dist"
              fi
              if [ -f "$DIST_DIR/updater" ]; then
                patchelf --add-rpath '$ORIGIN' "$DIST_DIR/updater"
              fi
              mv obj-artifact-build-output/dist/$INSTALLER_PATH ~/noraneko-installer/$OUTPUT_INSTALLER_NAME
              ;;
            "macOS-x86_64")
              if [ "${{inputs.skip_signing}}" == "true" ]; then
                mv obj-artifact-build-output/dist/$INSTALLER_PATH ~/noraneko-installer/$OUTPUT_INSTALLER_NAME
              else
                mkdir -p ~/mac-code-signing/old ~/mac-code-signing/new
                mv obj-artifact-build-output/dist/$INSTALLER_PATH ~/noraneko-installer/$OUTPUT_INSTALLER_NAME
                ./mach python -m mozbuild.action.unpack_dmg ~/noraneko-installer/$OUTPUT_INSTALLER_NAME ~/mac-code-signing/old
                cargo install apple-codesign --locked
                echo ${{ secrets.APPLE_DEVELOPER_P12_BASE64 }} > floorp-cert.txt
                base64 --decode floorp-cert.txt > floorpCert.p12
                echo ${{ secrets.APPLE_DEVELOPER_P12_PASSWORD }} > floorpCertPassword.passwd
                APP_FILE=$(find ~/mac-code-signing/old -name "*.app" -type d | head -n 1)
                echo "Found app file: $APP_FILE"
                ./mach macos-sign -v -r -c "release" \
                  -a "$APP_FILE" \
                  --rcodesign-p12-file floorpCert.p12 \
                  --rcodesign-p12-password-file floorpCertPassword.passwd
                if [ "${{inputs.beta}}" == "true" ]; then
                  DS_STORE_PATH="./noraneko/.github/workflows/assets/mac/daylight/DS_Store"
                  BACKGROUND_PATH="./noraneko/.github/workflows/assets/mac/daylight/background.tiff"
                  VOLUME_NAME="Noraneko Daylight Installer"
                else
                  DS_STORE_PATH="./noraneko/.github/workflows/assets/mac/official/DS_Store"
                  BACKGROUND_PATH="./noraneko/.github/workflows/assets/mac/official/background.tiff"
                  VOLUME_NAME="Noraneko Installer"
                fi
                ./mach python -m mozbuild.action.make_dmg --dsstore "$DS_STORE_PATH" --background "$BACKGROUND_PATH" --volume-name "$VOLUME_NAME" ~/mac-code-signing/old ~/mac-code-signing/new/$OUTPUT_INSTALLER_NAME
                printf '%s\n' '${{ secrets.APPLE_DEVELOPER_API_KEY_JSON }}' > ~/mac-code-signing/key.json
                rcodesign notary-submit \
                  --api-key-file ~/mac-code-signing/key.json \
                  --wait \
                  ~/mac-code-signing/new/$OUTPUT_INSTALLER_NAME
                DIST_DIR=$(find obj-artifact-build-output/dist -maxdepth 1 -type d \( -name "noraneko" -o -name "floorp" \) | head -n 1)
                if [ -z "$DIST_DIR" ]; then
                  DIST_DIR="obj-artifact-build-output/dist"
                fi
                rm -rf "$DIST_DIR"/*.app
                cp -r ~/mac-code-signing/old/*.app "$DIST_DIR"
                mv ~/mac-code-signing/new/$OUTPUT_INSTALLER_NAME ~/noraneko-installer/$OUTPUT_INSTALLER_NAME
              fi
              ;;
            *)
              echo "Unsupported canonical platform for installer preparation: $CANON_PLATFORM" >&2
              exit 1
              ;;
          esac

      - name: Download artifact of MAR tools (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          pattern: "*dist-host"
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: obj-artifact-build-output/dist/host
          merge-multiple: true

      - name: Download artifact of MAR tools (GitHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          set -euo pipefail
          mkdir -p ~/downloads
          RAW_PLATFORM="${INPUT_PLATFORM:-${{ inputs.platform }}}"
          CANON_PLATFORM="${CANON_PLATFORM:-$RAW_PLATFORM}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          case "$CANON_PLATFORM" in
            "Windows-x86_64") files=("windows-x86_64-dist-host.zip") ;;
            "Linux-x86_64") files=("linux-x86_64-dist-host.zip") ;;
            "Linux-aarch64") files=("linux-aarch64-dist-host.zip") ;;
            "macOS-x86_64") files=("macOS-universal-dist-host.zip") ;;
            *) files=() ;;
          esac
          success=0
          for file in "${files[@]}"; do
            DOWNLOAD_PATH="$HOME/downloads/$file"
            if curl -fL "https://github.com/${{ github.repository }}-runtime/releases/latest/download/${file}" -o "$DOWNLOAD_PATH"; then
              unzip "$DOWNLOAD_PATH" -d ./obj-artifact-build-output/dist/host
              success=1
              break
            fi
          done
          if [ "$success" -ne 1 ]; then
            echo "Failed to download dist-host archive for any supported name (${files[*]})" >&2
            exit 1
          fi

      - name: Download artifact of binary for getting build information (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          pattern: "*application-ini"
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: ~/noraneko-dev
          merge-multiple: true

      - name: Download artifact of binary for getting build information (GiHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          set -euo pipefail
          mkdir -p ~/downloads ~/noraneko-dev
          RAW_PLATFORM="${INPUT_PLATFORM:-${{ inputs.platform }}}"
          CANON_PLATFORM="${CANON_PLATFORM:-$RAW_PLATFORM}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi
          case "$CANON_PLATFORM" in
            "Windows-x86_64") files=("windows-x86_64-application-ini.zip") ;;
            "Linux-x86_64") files=("linux-x86_64-application-ini.zip") ;;
            "Linux-aarch64") files=("linux-aarch64-application-ini.zip") ;;
            "macOS-x86_64") files=("macOS-universal-application-ini.zip") ;;
            *) files=() ;;
          esac
          success=0
          for file in "${files[@]}"; do
            DOWNLOAD_PATH="$HOME/downloads/$file"
            if curl -fL "https://github.com/${{ github.repository }}-runtime/releases/latest/download/${file}" -o "$DOWNLOAD_PATH"; then
              unzip "$DOWNLOAD_PATH" -d ~/noraneko-dev
              success=1
              break
            fi
          done
          if [ "$success" -ne 1 ]; then
            echo "Failed to download application-ini archive for any supported name (${files[*]})" >&2
            exit 1
          fi

      - name: Create MAR package
        env:
          FORCE_COLOR: 3
          UPDATE_CHANNEL: ${{ env.UPDATE_CHANNEL }}
        run: |
          #!/bin/bash
          set -euo pipefail
          OBJ_PATH=$(echo ./obj-*)
          MAR_DIR="$HOME/noraneko-mar"
          PUBLISH_DIR="$HOME/noraneko-publish"
          MAR_FILE="$MAR_DIR/noraneko-$OUTPUT_NAME-full.mar"
          mkdir -p "$MAR_DIR" "$PUBLISH_DIR"

          chmod +x "$OBJ_PATH/dist/host/bin/mar"

          awk -F "=" '/^Version/ {print $2}' "$HOME/noraneko-dev/floorp-application.ini" > "$MAR_DIR/version.txt"
          awk -F "=" '/^BuildID/ {print $2}' "$HOME/noraneko-dev/floorp-application.ini" > "$MAR_DIR/buildid.txt"

          if [ -f ./noraneko/static/gecko/config/version.txt ]; then
            cp ./noraneko/static/gecko/config/version.txt "$MAR_DIR/noraneko_version.txt"
          else
            echo "$VERSION" > "$MAR_DIR/noraneko_version.txt"
          fi

          if [ -f ./noraneko/_dist/buildid2 ]; then
            cp ./noraneko/_dist/buildid2 "$MAR_DIR/noraneko_buildid.txt"
          else
            BUILDID_FALLBACK=$(find "$OBJ_PATH" -name "buildid2" -print -quit)
            if [ -n "$BUILDID_FALLBACK" ]; then
              cp "$BUILDID_FALLBACK" "$MAR_DIR/noraneko_buildid.txt"
            else
              cp "$MAR_DIR/buildid.txt" "$MAR_DIR/noraneko_buildid.txt"
            fi
          fi

          VERSION=$(cat "$MAR_DIR/version.txt")
          NORANEKO_VERSION=$(cat "$MAR_DIR/noraneko_version.txt")
          VERSION_DISPLAY="${NORANEKO_VERSION}@${VERSION}"
          echo "$VERSION_DISPLAY" > "$MAR_DIR/version_display.txt"

          DIST_DIR=$(find "$OBJ_PATH/dist" -maxdepth 1 -type d \( -name "noraneko" -o -name "floorp" \) | head -n 1)
          if [ -z "$DIST_DIR" ]; then
            DIST_DIR="$OBJ_PATH/dist/noraneko"
          fi
          if [ ! -d "$DIST_DIR" ]; then
            echo "Distribution directory not found for MAR creation" >&2
            exit 1
          fi

          touch "$DIST_DIR/precomplete"

          CANON_PLATFORM="${CANON_PLATFORM:-${{ inputs.platform }}}"
          if [[ "$CANON_PLATFORM" == *-x64 ]]; then
            CANON_PLATFORM="${CANON_PLATFORM%-x64}-x86_64"
          fi

          if [[ "$CANON_PLATFORM" == "Windows-x86_64" ]] && [ "${{ inputs.skip_signing }}" != "true" ] && [ -d "$GITHUB_WORKSPACE/noraneko-unsigned-installer/signed_binary/core" ]; then
            echo "Replacing unsigned binaries with signed versions for MAR generation"
            rm -rf "$DIST_DIR"/*
            cp -r "$GITHUB_WORKSPACE/noraneko-unsigned-installer/signed_binary/core/"* "$DIST_DIR/"
          fi

          CHANNEL_ID="${UPDATE_CHANNEL:-release}"

          if [[ "$CANON_PLATFORM" == "macOS-x86_64" ]]; then
            APP_FILE=$(find "$DIST_DIR" -name "*.app" -type d | head -n 1)
            if [ -z "$APP_FILE" ]; then
              echo "macOS app bundle not found for MAR packaging" >&2
              exit 1
            fi
            MAR="$OBJ_PATH/dist/host/bin/mar" \
            MOZ_PRODUCT_VERSION="$VERSION" \
            MAR_CHANNEL_ID="$CHANNEL_ID" \
            ./tools/update-packaging/make_full_update.sh "$MAR_FILE" "$APP_FILE"
          else
            MAR="$OBJ_PATH/dist/host/bin/mar" \
            MOZ_PRODUCT_VERSION="$VERSION" \
            MAR_CHANNEL_ID="$CHANNEL_ID" \
            ./tools/update-packaging/make_full_update.sh "$MAR_FILE" "$DIST_DIR"
          fi

          shasum --algorithm 512 "$MAR_FILE" | cut -c 1-128 > "$MAR_DIR/mar_shasum.txt"
          stat --format "%s" "$MAR_FILE" > "$MAR_DIR/mar_size.txt"

          BUILDID=$(cat "$MAR_DIR/buildid.txt")
          MAR_SIZE=$(cat "$MAR_DIR/mar_size.txt")
          MAR_SHASUM=$(cat "$MAR_DIR/mar_shasum.txt")

          cat > "$PUBLISH_DIR/meta.json" <<EOF
          {
            "version_display": "$VERSION_DISPLAY",
            "version": "$VERSION",
            "noraneko_version": "$NORANEKO_VERSION",
            "noraneko_buildid": "$(cat "$MAR_DIR/noraneko_buildid.txt")",
            "mar_size": $MAR_SIZE,
            "mar_shasum": "$MAR_SHASUM",
            "buildid": "$BUILDID",
            "channel": "$CHANNEL_ID"
          }
          EOF

          cp "$MAR_DIR"/*.mar "$PUBLISH_DIR/"
          echo "MAR package created successfully!"

      - name: Verify installer workspace
        run: |
          set -euo pipefail
          mkdir -p ~/noraneko-installer

          # If already populated, show contents and continue
          if [ -n "$(find ~/noraneko-installer -mindepth 1 -print -quit 2>/dev/null)" ]; then
            echo "Installer workspace already populated:"
            ls -la ~/noraneko-installer || true
          else
            echo "Installer workspace is empty, searching common locations..."
            CANDIDATES=(
              "$GITHUB_WORKSPACE/noraneko-unsigned-installer/installer"
              "$GITHUB_WORKSPACE/noraneko-unsigned-installer/installer/$OUTPUT_INSTALLER_NAME"
              "$GITHUB_WORKSPACE/noraneko-unsigned-installer"
              "$GITHUB_WORKSPACE/noraneko-unsigned-installer/signed_installer"
              "./obj-artifact-build-output/dist"
              "$HOME/downloads"
              "$HOME/artifacts"
              "$GITHUB_WORKSPACE"
            )
            COPIED=0
            for d in "${CANDIDATES[@]}"; do
              # do not use eval; just take the literal candidate path
              expanded="$d"
              if [ -e "$expanded" ]; then
                echo "Inspecting candidate: $expanded"
                files_found=""
                for pat in "*${OUTPUT_INSTALLER_NAME}*" "*installer*" "*.dmg" "*.tar.xz" "*.deb" "*.exe" "*.7z" "*.zip"; do
                  candidate=$(find "$expanded" -maxdepth 2 -type f -name "$pat" -print -quit 2>/dev/null || true)
                  if [ -n "$candidate" ]; then
                    files_found="$candidate"
                    break
                  fi
                done
                if [ -n "$files_found" ]; then
                  echo "Found installer(s) in $expanded, copying to ~/noraneko-installer"
                  cp -a "$expanded"/* ~/noraneko-installer/ || true
                  COPIED=1
                  break
                fi
              fi
            done
            if [ "$COPIED" -eq 0 ]; then
              echo "Failed to locate installer files. Diagnostics:" >&2
              echo "Listing possible locations:" >&2
              for d in "${CANDIDATES[@]}"; do
                eval expanded="$d"
                echo "== $expanded ==" >&2
                ls -la "$expanded" 2>/dev/null || echo " (not found)" >&2
              done
              echo "Environment variables:" >&2
              echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >&2
              echo "OUTPUT_INSTALLER_NAME=$OUTPUT_INSTALLER_NAME" >&2
              echo "INSTALLER_PATH=$INSTALLER_PATH" >&2
              exit 1
            fi
          fi

      - name: Publish dist
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-installer${{ inputs.skip_signing && '-unsigned' || '' }}
          path: ~/noraneko-installer/*
          compression-level: 9

      - name: Publish MAR
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-mar-full${{ inputs.skip_signing && '-unsigned' || '' }}
          path: ~/noraneko-publish/*
