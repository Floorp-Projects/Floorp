# SPDX-License-Identifier: MPL-2.0

name: "(A) 📦️ Package"
on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        required: true
        default: Windows-x86_64
        options:
          - Windows-x86_64
          - Linux-x86_64
      runtime_artifact_workflow_run_id:
        type: string
        default: ""
        required: false

  workflow_call:
    inputs:
      platform:
        type: string
        default: Windows-x86_64
        required: true
      runtime_artifact_workflow_run_id:
        type: string
        default: ""
        required: false

run-name: 📦️ Package ${{ inputs.platform }}
jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - name: Get commit hash from runtime_artifact_workflow_run_id
        if: ${{ inputs.runtime_artifact_workflow_run_id != '' }}
        id: get-commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const runId = '${{ inputs.runtime_artifact_workflow_run_id }}';
            const targetRepo = '${{ github.repository }}-runtime';
            const [owner, repo] = targetRepo.split('/');
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: runId
            });
            const commitHash = run.head_sha;
            if (!commitHash || !/^[0-9a-fA-F]{40}$/.test(commitHash)) {
              core.setFailed('Commit hash is missing or not a valid SHA-1: ' + commitHash);
              throw new Error('Commit hash is missing or not a valid SHA-1: ' + commitHash);
            }
            core.setOutput('commit_hash', commitHash);

      - name: Checkout ${{ github.repository }}-runtime
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}-runtime
          ref: ${{ steps.get-commit.outputs.commit_hash }}
          submodules: "recursive"

      - name: Apply upstream patches
        run: |
          PATCH_DIR=".github/patches/upstream"
          if [ -d "$PATCH_DIR" ]; then
            for patch in "$PATCH_DIR"/*.patch; do
              [ -e "$patch" ] || continue
              echo "Applying patch: $(basename "$patch")"
              git apply --verbose "$patch"
            done
          else
            echo "Patch directory not found, skipping patch application."
          fi

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          path: "noraneko"

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Setup Noraneko
        run: |
          cd $GITHUB_WORKSPACE
          cd ./noraneko
          deno install --allow-scripts
          cd ..

      - name: Setup
        run: |
          sudo apt install msitools -y
          ./mach --no-interactive bootstrap --application-choice browser_artifact_mode

      - name: Write Versions
        run: |
          cd ./noraneko
          deno task feles-build misc writeVersion
          cd ..

      - name: Mach configure
        run: |
          #!/bin/bash
          set -e
          PLATFORM="${{inputs.platform}}"
          case "$PLATFORM" in
            "Windows-x86_64") cp ./.github/workflows/mozconfigs/windows-x86_64.mozconfig mozconfig ;;
            "Linux-x86_64") cp ./.github/workflows/mozconfigs/linux-x86_64.mozconfig mozconfig ;;
          esac
          cp -r ./noraneko/static/gecko/branding/* ./browser/branding/
          mkdir -p noraneko/static/gecko/config/autogenerated
          echo "$(cat noraneko/static/gecko/config/version.txt)@$(cat browser/config/version.txt)" > noraneko/static/gecko/config/autogenerated/version.txt
          echo "$(cat noraneko/static/gecko/config/version_display.txt)@$(cat browser/config/version_display.txt)" > noraneko/static/gecko/config/autogenerated/version_display.txt
          cat >> mozconfig << EOF
          ac_add_options --with-version-file-path=noraneko/static/gecko/config/autogenerated
          ac_add_options --enable-release
          ac_add_options --enable-update-channel=alpha
          ac_add_options --disable-tests
          ac_add_options --enable-artifact-builds
          mk_add_options MOZ_OBJDIR=./obj-artifact-build-output
          EOF
          sed -i 's|ac_add_options --disable-updater||g; s|ac_add_options --enable-unverified-updates||g; s|ac_add_options --enable-chrome-format=flat||g' ./mozconfig
          sed -i 's|MOZ_BRANDING_DIRECTORY=browser/branding/unofficial|MOZ_BRANDING_DIRECTORY=browser/branding/noraneko-unofficial|g' ./browser/confvars.sh
          if [ "$PLATFORM" = "macOS-x64" ]; then
            mkdir -p ~/tools
            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/ceSQWV1AS76UlhYJ0_PfJQ/artifacts/public/build/dmg.tar.zst -o dmg.tar.zst
            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/N2SwCRLrRw2l-UWP4N7dhQ/artifacts/public/build/hfsplus.tar.zst -o hfsplus.tar.zst
            tar -I zstd -xf dmg.tar.zst -C ~/tools && tar -I zstd -xf hfsplus.tar.zst -C ~/tools
            chmod 777 ~/tools/dmg ~/tools/hfsplus
            cat >> mozconfig << EOF
          DMG_TOOL=$HOME/tools/dmg/dmg
          HFS_TOOL=$HOME/tools/dmg/hfsplus
          MKFSHFS=$HOME/tools/hfsplus/newfs_hfs
          EOF
          fi
          ./mach configure
          git apply --ignore-space-change --ignore-whitespace .github/patches/packaging/*.patch

      - name: Possibly retrieve run ID if not provided
        run: |
          if [ -z "${{ inputs.runtime_artifact_workflow_run_id }}" ]; then
            echo "RUNTIME_ARTIFACT_WORKFLOW_RUN_ID=false" >> $GITHUB_ENV
          else
            echo "RUNTIME_ARTIFACT_WORKFLOW_RUN_ID=${{ inputs.runtime_artifact_workflow_run_id }}" >> $GITHUB_ENV
          fi

      - name: Get Artifact Name
        shell: bash
        env:
          FORCE_COLOR: 3
          BUILD_PLATFORM: ${{ inputs.platform }}
        run: |
          #!/bin/bash
          set -e
          case "$BUILD_PLATFORM" in
            "Windows-x86_64")
              echo "ARTIFACT_NAME=noraneko-windows-x86_64-moz-artifact" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME=noraneko-windows-x86_64-moz-artifact.zip" >> $GITHUB_ENV
              echo "OUTPUT_NAME=windows-x86_64" >> $GITHUB_ENV
              echo "INSTALLER_PATH=install/sea/*installer.exe" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=noraneko-windows-x86_64-installer.exe" >> $GITHUB_ENV
              ;;
            "Linux-x86_64")
              echo "ARTIFACT_FROM_RELEASE_NAME=noraneko-linux-x86_64-moz-artifact.tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_NAME=linux-x86_64" >> $GITHUB_ENV
              echo "INSTALLER_PATH=noraneko*tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=noraneko-linux-x86_64.tar.xz" >> $GITHUB_ENV
              ;;
            *)
              echo "Unknown platform: $BUILD_PLATFORM"
              exit 1
              ;;
          esac
          echo "Environment variables set for platform: $BUILD_PLATFORM"

      - name: Download mozilla artifact from Actions
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: ~/downloads

      - name: Download Mozilla Artifact from GitHub Releases
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          mkdir -p ~/downloads
          curl -L https://github.com/${{ github.repository }}-runtime/releases/latest/download/${{ env.ARTIFACT_FROM_RELEASE_NAME }} -o ~/downloads/${{ env.ARTIFACT_FROM_RELEASE_NAME }}

      - name: Make Downloaded Artifact to Mozilla Artifact (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        run: |
          mkdir -p ~/artifacts
          cp -r ~/downloads/* ~/artifacts
          ls -R ~/artifacts
          cd $GITHUB_WORKSPACE

      - name: Make Download Artifact to Mozilla Artifact (GitHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          mkdir -p ~/artifacts
          cp -r ~/downloads/* ~/artifacts
          ls -R ~/artifacts
          cd $GITHUB_WORKSPACE

      - name: Build Noraneko
        run: |
          cd ./noraneko
          NODE_ENV='production' deno task feles-build build --phase before-mach
          cd ..

      - name: Build
        run: |
          ./mach configure
          if [ "${{inputs.platform}}" == "Windows-x86_64" ]; then
            MOZ_ARTIFACT_FILE=$(echo ~/artifacts/noraneko-windows-x86_64-moz-artifact/noraneko-windows-x86_64-moz-artifact.zip) ./mach build
          elif [ "${{inputs.platform}}" == "Linux-x86_64" ]; then
            MOZ_ARTIFACT_FILE=$(echo ~/artifacts/noraneko-linux-x86_64-moz-artifact/noraneko-linux-x86_64-moz-artifact.tar.xz) ./mach build
          fi

      - name: Inject Noraneko
        run: |
          cd ./noraneko
          deno task feles-build build --phase after-mach
          rsync -aL ../obj-artifact-build-output/dist/bin/ ../obj-artifact-build-output/dist/tmp__bin
          rm -rf ../obj-artifact-build-output/dist/bin
          mv ../obj-artifact-build-output/dist/tmp__bin ../obj-artifact-build-output/dist/bin
          if [ "${{inputs.platform}}" == "macOS-x64" ]; then
            for patch_file in ./tools/build/tasks/git-patches/patches/*.patch; do
              for resource_dir in ../obj-artifact-build-output/dist/*.app/Contents/Resources; do
                if patch --follow-symlinks --dry-run -d "$resource_dir" -p1 < "$patch_file"; then
                  patch --follow-symlinks -d "$resource_dir" -p1 < "$patch_file"
                else
                  echo "Dry-run failed for $patch_file in $resource_dir" >&2
                  exit 1
                fi
              done
            done
          fi
          cd ..

      - name: Package noraneko
        run: |
          ./mach package

      - name: mkdir noraneko-installer
        run: |
          mkdir -p ~/noraneko-installer
          sudo apt install -y build-essential debhelper

      - name: Package noraneko
        if: ${{ inputs.platform == 'Linux-x86_64' }}
        run: |
          ./mach repackage deb --input "$(echo obj-*/dist/$INSTALLER_PATH)" --output ~/noraneko-installer/noraneko.deb --arch x86_64 --version "0.2.0" --build-number 1 --templates browser/installer/linux/app/debian --release-product firefox --release-type release

      - name: Rename and move installer
        run: |
          mv obj-*/dist/$INSTALLER_PATH ~/noraneko-installer/$OUTPUT_INSTALLER_NAME

      - name: Download artifact of MAR tools (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          pattern: "*dist-host"
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: obj-artifact-build-output/dist/host
          merge-multiple: true

      - name: Download artifact of MAR tools (GitHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          curl -L https://github.com/${{ github.repository }}-runtime/releases/latest/download/${{ inputs.platform }}-dist-host.zip -o ~/downloads/${{ inputs.platform }}-dist-host.zip
          unzip ~/downloads/${{ inputs.platform }}-dist-host.zip -d ./obj-artifact-build-output/dist/host

      - name: Download artifact of binary for getting build information (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          pattern: "*application-ini"
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: ~/noraneko-dev
          merge-multiple: true

      - name: Download artifact of binary for getting build information (GiHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          curl -L https://github.com/${{ github.repository }}-runtime/releases/latest/download/${{ inputs.platform }}-application-ini.zip -o ~/downloads/${{ inputs.platform }}-application-ini.zip
          unzip ~/downloads/${{ inputs.platform }}-application-ini.zip -d ~/noraneko-dev

      - name: Create MAR package
        env:
          FORCE_COLOR: 3
        run: |
          #!/bin/bash
          set -e
          OBJ_PATH=$(echo ./obj-*)
          MAR_DIR="$HOME/noraneko-mar"
          PUBLISH_DIR="$HOME/noraneko-publish"
          MAR_FILE="$MAR_DIR/noraneko-$OUTPUT_NAME-full.mar"
          mkdir -p "$MAR_DIR" "$PUBLISH_DIR"
          chmod +x "$OBJ_PATH/dist/host/bin/mar"
          awk -F "=" '/^Version/ {print $2}' "$HOME/noraneko-dev/nora-application.ini" > "$MAR_DIR/version.txt"
          awk -F "=" '/^BuildID/ {print $2}' "$HOME/noraneko-dev/nora-application.ini" > "$MAR_DIR/buildid.txt"
          cp noraneko/static/gecko/config/version.txt "$MAR_DIR/noraneko_version.txt"
          cp noraneko/_dist/buildid2 "$MAR_DIR/noraneko_buildid.txt"
          VERSION=$(cat "$MAR_DIR/version.txt")
          NORANEKO_VERSION=$(cat "$MAR_DIR/noraneko_version.txt")
          echo "${NORANEKO_VERSION}@${VERSION}" > "$MAR_DIR/version_display.txt"
          touch "$OBJ_PATH/dist/noraneko/precomplete"
          MAR="$OBJ_PATH/dist/host/bin/mar" \
          MOZ_PRODUCT_VERSION="$VERSION" \
          MAR_CHANNEL_ID=alpha \
          ./tools/update-packaging/make_full_update.sh "$MAR_FILE" "$OBJ_PATH/dist/noraneko"
          shasum --algorithm 512 "$MAR_FILE" | cut -c 1-128 > "$MAR_DIR/mar_shasum.txt"
          stat --format "%s" "$MAR_FILE" > "$MAR_DIR/mar_size.txt"
          cat > "$PUBLISH_DIR/meta.json" << EOF
          {
            "version": "$(cat "$MAR_DIR/version.txt")",
            "noraneko_version": "$(cat "$MAR_DIR/noraneko_version.txt")",
            "noraneko_buildid": "$(cat "$MAR_DIR/noraneko_buildid.txt")",
            "mar_size": "$(cat "$MAR_DIR/mar_size.txt")",
            "mar_shasum": "$(cat "$MAR_DIR/mar_shasum.txt")",
            "buildid": "$(cat "$MAR_DIR/buildid.txt")"
          }
          EOF
          cp "$MAR_DIR"/*.mar "$PUBLISH_DIR/"
          echo "MAR package created successfully!"

      - name: Publish dist
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-installer
          path: ~/noraneko-installer/*
          compression-level: 9

      - name: Publish MAR
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-mar-full
          path: ~/noraneko-publish/*
