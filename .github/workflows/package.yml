# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

name: "(A) üì¶Ô∏è Package"
on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        required: true
        default: Windows-x64
        options:
          - Windows-x64
          - Linux-x64
          - macOS-x64
      runtime_artifact_workflow_run_id:
        type: string
        default: ""
        required: false

  workflow_call:
    inputs:
      platform:
        type: string
        default: Windows-x64
        required: true
      runtime_artifact_workflow_run_id:
        type: string
        default: ""
        required: false

run-name: üì¶Ô∏è Package ${{ inputs.platform }}
jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - name: Checkout ${{ github.repository }}-runtime
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}-runtime
          submodules: "recursive"

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          path: "noraneko"

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: init zx
        run: |
          deno install -g -A npm:zx

      - name: Setup Noraneko
        run: |
          cd $GITHUB_WORKSPACE
          cd ./noraneko
          deno install --allow-scripts
          cd ..

      - name: Setup ü™õ
        run: |
          sudo apt install msitools -y

          ./mach --no-interactive bootstrap --application-choice browser_artifact_mode

      - name: Write Versions
        run: |
          cd ./noraneko
          deno task build --write-version
          cd ..

      - name: Mach configure
        run: |
          #!/bin/bash

          set -e

          PLATFORM="${{inputs.platform}}"

          # Copy mozconfig based on platform
          case "$PLATFORM" in
            "Windows-x64") cp ./.github/workflows/mozconfigs/win64.mozconfig mozconfig ;;
            "Linux-x64") cp ./.github/workflows/mozconfigs/linux64.mozconfig mozconfig ;;
            *) cp ./.github/workflows/mozconfigs/macosx64-x86_64.mozconfig mozconfig ;;
          esac

          # Copy branding and generate version files
          cp -r ./noraneko/gecko/branding/* ./browser/branding/
          mkdir -p noraneko/gecko/config/autogenerated
          echo "$(cat browser/config/version.txt)@$(cat noraneko/gecko/config/version.txt)" > noraneko/gecko/config/autogenerated/version.txt
          echo "$(cat browser/config/version_display.txt)@$(cat noraneko/gecko/config/version_display.txt)" > noraneko/gecko/config/autogenerated/version_display.txt

          # Update mozconfig
          cat >> mozconfig << EOF
          ac_add_options --with-version-file-path=noraneko/gecko/config/autogenerated
          ac_add_options --enable-release
          ac_add_options --enable-update-channel=alpha
          ac_add_options --disable-tests
          ac_add_options --enable-artifact-builds
          mk_add_options MOZ_OBJDIR=./obj-artifact-build-output
          EOF

          # Clean up mozconfig
          sed -i 's|ac_add_options --disable-updater||g; s|ac_add_options --enable-unverified-updates||g; s|ac_add_options --enable-chrome-format=flat||g' ./mozconfig
          sed -i 's|MOZ_BRANDING_DIRECTORY=browser/branding/unofficial|MOZ_BRANDING_DIRECTORY=browser/branding/noraneko-unofficial|g' ./browser/confvars.sh

          # macOS setup
          if [ "$PLATFORM" = "macOS-x64" ]; then
            mkdir -p ~/tools
            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/ceSQWV1AS76UlhYJ0_PfJQ/artifacts/public/build/dmg.tar.zst -o dmg.tar.zst
            curl -L https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task/N2SwCRLrRw2l-UWP4N7dhQ/artifacts/public/build/hfsplus.tar.zst -o hfsplus.tar.zst
            tar -I zstd -xf dmg.tar.zst -C ~/tools && tar -I zstd -xf hfsplus.tar.zst -C ~/tools
            chmod 777 ~/tools/dmg ~/tools/hfsplus
            cat >> mozconfig << EOF
          DMG_TOOL=$HOME/tools/dmg/dmg
          HFS_TOOL=$HOME/tools/dmg/hfsplus
          MKFSHFS=$HOME/tools/hfsplus/newfs_hfs
          EOF
          fi

          ./mach configure
          git apply --ignore-space-change --ignore-whitespace .github/patches/packaging/*.patch

      - name: Possibly retrieve run ID if not provided
        run: |
          if [ -z "${{ inputs.runtime_artifact_workflow_run_id }}" ]; then
            echo "RUNTIME_ARTIFACT_WORKFLOW_RUN_ID=false" >> $GITHUB_ENV
          else
            echo "RUNTIME_ARTIFACT_WORKFLOW_RUN_ID=${{ inputs.runtime_artifact_workflow_run_id }}" >> $GITHUB_ENV
          fi

      - name: Get Artifact Name
        shell: zx --verbose {0}
        env:
          FORCE_COLOR: 3
          BUILD_PLATFORM: ${{ inputs.platform }}
        run: |
          #!/bin/bash
          set -e  # Exit on any error

          case "$BUILD_PLATFORM" in
            "Windows-x64")
              echo "ARTIFACT_NAME=noraneko-win-amd64-moz-artifact" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME=noraneko-win-amd64-moz-artifact.zip" >> $GITHUB_ENV
              echo "OUTPUT_NAME=win-amd64" >> $GITHUB_ENV
              echo "INSTALLER_PATH=install/sea/*installer.exe" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=noraneko-win64-installer.exe" >> $GITHUB_ENV
              ;;
            "Linux-x64")
              echo "ARTIFACT_FROM_RELEASE_NAME=noraneko-linux-amd64-moz-artifact.tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_NAME=linux-amd64" >> $GITHUB_ENV
              echo "INSTALLER_PATH=noraneko*tar.xz" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=noraneko-linux-amd64.tar.xz" >> $GITHUB_ENV
              ;;
            "macOS-x64")
              echo "ARTIFACT_NAME=noraneko-mac-universal-moz-artifact-release" >> $GITHUB_ENV
              echo "ARTIFACT_FROM_RELEASE_NAME=noraneko-mac-universal-moz-artifact-release.zip" >> $GITHUB_ENV
              echo "OUTPUT_NAME=mac-universal" >> $GITHUB_ENV
              echo "INSTALLER_PATH=noraneko-*dmg" >> $GITHUB_ENV
              echo "OUTPUT_INSTALLER_NAME=noraneko-macOS-universal.dmg" >> $GITHUB_ENV
              ;;
            *)
              echo "‚ùå Unknown platform: $BUILD_PLATFORM"
              exit 1
              ;;
          esac

          echo "‚úÖ Environment variables set for platform: $BUILD_PLATFORM"

      - name: Download mozilla artifact from Actions
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: ~/downloads

      - name: Download Mozilla Artifact from GitHub Releases
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          mkdir -p ~/downloads
          curl -L https://github.com/${{ github.repository }}-runtime/releases/latest/download/${{ env.ARTIFACT_FROM_RELEASE_NAME }} -o ~/downloads/${{ env.ARTIFACT_FROM_RELEASE_NAME }}

      - name: Make Downloaded Artifact to Mozilla Artifact (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        run: |
          mkdir -p ~/artifacts
          cd ~/downloads
          if [ "${{inputs.platform}}" == "Windows-x64" ]; then
            zip -r ~/artifacts/noraneko-win-amd64-moz-artifact.zip ./*
          else
            cp -r ~/downloads/* ~/artifacts
          fi

          cd $GITHUB_WORKSPACE

      - name: Make Download Artifact to Mozilla Artifact (GitHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          mkdir -p ~/artifacts
          cd ~/downloads
          if [ "${{inputs.platform}}" == "macOS-x64" ]; then
            unzip noraneko-mac-universal-moz-artifact-release.zip -d ~/artifacts
          else
            cp -r ~/downloads/* ~/artifacts
          fi

          cd $GITHUB_WORKSPACE

      - name: Build Noraneko
        run: |
          cd ./noraneko
          NODE_ENV='production' deno task build --release-build-before
          cd ..

      - name: Build
        run: |
          if [ "${{inputs.platform}}" == "Windows-x64" ]; then
            MOZ_ARTIFACT_FILE=$(echo ~/artifacts/noraneko-win-amd64-moz-artifact.zip) ./mach build
          elif [ "${{inputs.platform}}" == "Linux-x64" ]; then
            MOZ_ARTIFACT_FILE=$(echo ~/artifacts/noraneko-linux-amd64-moz-artifact.tar.xz) ./mach build
          elif [ "${{inputs.platform}}" == "macOS-x64" ]; then
            MOZ_ARTIFACT_FILE="$(echo ~/artifacts/noraneko-macOS-universal-moz-artifact.dmg):$(echo ~/artifacts/noraneko-macOS.update_framework_artifacts.zip)" ./mach build
          fi

      - name: Inject Noraneko
        run: |
          cd ./noraneko
          deno task build --release-build-after

          # https://www.spinics.net/lists/git/msg391750.html
          rsync -aL ../obj-artifact-build-output/dist/bin/ ../obj-artifact-build-output/dist/tmp__bin
          rm -rf ../obj-artifact-build-output/dist/bin
          mv ../obj-artifact-build-output/dist/tmp__bin ../obj-artifact-build-output/dist/bin          if [ "${{inputs.platform}}" == "macOS-x64" ]; then
            for patch_file in ./tools/build/tasks/git-patches/patches/*.patch; do
              for resource_dir in ../obj-artifact-build-output/dist/*.app/Contents/Resources; do
                if patch --follow-symlinks --dry-run -d "$resource_dir" -p1 < "$patch_file"; then
                  patch --follow-symlinks -d "$resource_dir" -p1 < "$patch_file"
                else
                  echo "Dry-run failed for $patch_file in $resource_dir" >&2
                  exit 1
                fi
              done
            done
          else
            git apply --reject ./tools/build/tasks/git-patches/patches/*.patch --directory ../obj-artifact-build-output/dist/bin --unsafe-paths --check --apply
          fi

          cd ..

      - name: Package noraneko
        run: |
          ./mach package

      - name: Rename and move installer
        run: |
          mkdir -p ~/noraneko-installer
          mv obj-*/dist/$INSTALLER_PATH ~/noraneko-installer/$OUTPUT_INSTALLER_NAME

      - name: Download artifact of MAR tools (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          pattern: "*dist-host"
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: obj-artifact-build-output/dist/host
          merge-multiple: true

      - name: Download artifact of MAR tools (GitHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          curl -L https://github.com/${{ github.repository }}-runtime/releases/latest/download/${{ inputs.platform }}-dist-host.zip -o ~/downloads/${{ inputs.platform }}-dist-host.zip
          unzip ~/downloads/${{ inputs.platform }}-dist-host.zip -d ./obj-artifact-build-output/dist/host

      - name: Download artifact of binary for getting build information (Actions)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID != 'false' }}
        uses: actions/download-artifact@v4
        with:
          pattern: "*application-ini"
          run-id: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID }}
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}-runtime
          path: ~/noraneko-dev
          merge-multiple: true

      - name: Download artifact of binary for getting build information (GiHub Releases)
        if: ${{ env.RUNTIME_ARTIFACT_WORKFLOW_RUN_ID == 'false' }}
        run: |
          curl -L https://github.com/${{ github.repository }}-runtime/releases/latest/download/${{ inputs.platform }}-application-ini.zip -o ~/downloads/${{ inputs.platform }}-application-ini.zip
          unzip ~/downloads/${{ inputs.platform }}-application-ini.zip -d ~/noraneko-dev

      - name: Create MAR package
        env:
          FORCE_COLOR: 3
        run: |
          #!/bin/bash

          set -e  # Exit on any error

          # Configuration
          OBJ_PATH=$(echo ./obj-*)
          MAR_DIR="$HOME/noraneko-mar"
          PUBLISH_DIR="$HOME/noraneko-publish"
          MAR_FILE="$MAR_DIR/noraneko-$OUTPUT_NAME-full.mar"

          echo "üì¶ Creating MAR package..."

          # Setup directories
          mkdir -p "$MAR_DIR" "$PUBLISH_DIR"

          # Prepare MAR tool
          chmod +x "$OBJ_PATH/dist/host/bin/mar"

          # Extract version info
          awk -F "=" '/^Version/ {print $2}' "$HOME/noraneko-dev/nora-application.ini" > "$MAR_DIR/version.txt"
          awk -F "=" '/^BuildID/ {print $2}' "$HOME/noraneko-dev/nora-application.ini" > "$MAR_DIR/buildid.txt"

          # Copy version files
          cp noraneko/gecko/config/version.txt "$MAR_DIR/noraneko_version.txt"
          cp noraneko/_dist/buildid2 "$MAR_DIR/noraneko_buildid.txt"

          # Create version display
          VERSION=$(cat "$MAR_DIR/version.txt")
          NORANEKO_VERSION=$(cat "$MAR_DIR/noraneko_version.txt")
          echo "${NORANEKO_VERSION}@${VERSION}" > "$MAR_DIR/version_display.txt"

          # Create MAR package
          touch "$OBJ_PATH/dist/noraneko/precomplete"
          MAR="$OBJ_PATH/dist/host/bin/mar" \
          MOZ_PRODUCT_VERSION="$VERSION" \
          MAR_CHANNEL_ID=alpha \
          ./tools/update-packaging/make_full_update.sh "$MAR_FILE" "$OBJ_PATH/dist/noraneko"

          # Generate checksums and metadata
          shasum --algorithm 512 "$MAR_FILE" | cut -c 1-128 > "$MAR_DIR/mar_shasum.txt"
          stat --format "%s" "$MAR_FILE" > "$MAR_DIR/mar_size.txt"

          # Create JSON metadata
          cat > "$PUBLISH_DIR/meta.json" << EOF
          {
            "version": "$(cat "$MAR_DIR/version.txt")",
            "noraneko_version": "$(cat "$MAR_DIR/noraneko_version.txt")",
            "noraneko_buildid": "$(cat "$MAR_DIR/noraneko_buildid.txt")",
            "mar_size": "$(cat "$MAR_DIR/mar_size.txt")",
            "mar_shasum": "$(cat "$MAR_DIR/mar_shasum.txt")",
            "buildid": "$(cat "$MAR_DIR/buildid.txt")"
          }
          EOF

          # Copy MAR files to publish directory
          cp "$MAR_DIR"/*.mar "$PUBLISH_DIR/"

          echo "‚úÖ MAR package created successfully!"

      - name: Publish dist üéÅ
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-installer
          path: ~/noraneko-installer/*
          compression-level: 9

      - name: Publish MAR üéÅ
        uses: actions/upload-artifact@v4
        with:
          name: noraneko-${{ env.OUTPUT_NAME }}-mar-full
          path: ~/noraneko-publish/*
