/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsIProxiedChannel.idl"
#include "nsIRequest.idl"

interface nsILoadGroup;
interface nsIURI;
interface nsIInterfaceRequestor;

[builtinclass, uuid(701093ac-5c7f-429c-99e3-423b041fccb4)]
interface nsIHttpAuthenticableChannel : nsIProxiedChannel
{
    /**
     * If the channel being authenticated is using SSL.
     */
    [must_use] readonly attribute boolean isSSL;

    /**
     * Returns if the proxy HTTP method used is CONNECT. If no proxy is being
     * used it must return PR_FALSE.
     */
    [must_use] readonly attribute boolean proxyMethodIsConnect;

    /**
     * Cancels the current request. See nsIRequest.
     */
    [must_use] void cancel(in nsresult aStatus);

    /**
     * The load flags of this request. See nsIRequest.
     */
    [must_use] readonly attribute nsLoadFlags loadFlags;

    /**
     * The URI corresponding to the channel. See nsIChannel.
     */
    [must_use] readonly attribute nsIURI URI;

    /**
     * The load group of this request. It is here for querying its
     * notificationCallbacks. See nsIRequest.
     */
    [must_use] readonly attribute nsILoadGroup loadGroup;

    /**
     * The notification callbacks for the channel. See nsIChannel.
     */
    [must_use] readonly attribute nsIInterfaceRequestor notificationCallbacks;

    /**
     * The HTTP request method. See nsIHttpChannel.
     */
    [must_use] readonly attribute ACString requestMethod;

    /**
     * The "Server" response header.
     * Return NS_ERROR_NOT_AVAILABLE if not available.
     */
    [must_use] readonly attribute ACString serverResponseHeader;

    /**
     * The Proxy-Authenticate response header.
     */
    [must_use] readonly attribute ACString proxyChallenges;

    /**
     * The WWW-Authenticate response header.
     */
    [must_use] readonly attribute ACString WWWChallenges;

    /**
     * Sets the Proxy-Authorization request header. An empty string
     * will clear it.
     */
    [must_use] void setProxyCredentials(in ACString credentials);

    /**
     * Sets the Authorization request header. An empty string
     * will clear it.
     */
    [must_use] void setWWWCredentials(in ACString credentials);

    /**
     * Called when authentication information is ready and has been set on this
     * object using setWWWCredentials/setProxyCredentials. Implementations can
     * continue with the request and send the given information to the server.
     *
     * It is called asynchronously from
     * nsIHttpChannelAuthProvider::processAuthentication if that method returns
     * NS_ERROR_IN_PROGRESS.
     *
     * @note  Any exceptions thrown from this method should be ignored.
     */
    [must_use] void onAuthAvailable();

    /**
     * Notifies that the prompt was cancelled. It is called asynchronously
     * from nsIHttpChannelAuthProvider::processAuthentication if that method
     * returns NS_ERROR_IN_PROGRESS.
     *
     * @param userCancel
     *        If the user was cancelled has cancelled the authentication prompt.
     */
    [must_use] void onAuthCancelled(in boolean userCancel);

    /**
     * Tells the channel to drop and close any sticky connection, since this
     * connection oriented schema cannot be negotiated second time on
     * the same connection.
     */
    [must_use] void closeStickyConnection();

    /**
     * Tells the channel to mark the connection as allowed to restart on
     * authentication retry.  This is allowed when the request is a start
     * of a new authentication round.
     */
    void connectionRestartable(in boolean restartable);
};
