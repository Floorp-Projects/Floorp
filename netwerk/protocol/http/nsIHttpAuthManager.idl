/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIPrincipal;

/**
 * nsIHttpAuthManager
 *
 * This service provides access to cached HTTP authentication
 * user credentials (domain, username, password) for sites
 * visited during the current browser session.
 *
 * This interface exists to provide other HTTP stacks with the
 * ability to share HTTP authentication credentials with Necko.
 * This is currently used by the Java plugin (version 1.5 and
 * higher) to avoid duplicate authentication prompts when the
 * Java client fetches content from a HTTP site that the user
 * has already logged into.
 */
[scriptable, builtinclass, uuid(54f90444-c52b-4d2d-8916-c59a2bb25938)]
interface nsIHttpAuthManager : nsISupports
{
    /**
     * Lookup auth identity.
     *
     * @param aScheme
     *        the URL scheme (e.g., "http").  NOTE: for proxy authentication,
     *        this should be "http" (this includes authentication for CONNECT
     *        tunneling).
     * @param aHost
     *        the host of the server issuing a challenge (ASCII only).
     * @param aPort
     *        the port of the server issuing a challenge.
     * @param aAuthType
     *        optional string identifying auth type used (e.g., "basic")
     * @param aRealm
     *        optional string identifying auth realm.
     * @param aPath
     *        optional string identifying auth path. empty for proxy auth.
     * @param aUserDomain
     *        return value containing user domain.
     * @param aUserName
     *        return value containing user name.
     * @param aUserPassword
     *        return value containing user password.
     * @param aIsPrivate
     *        whether to look up a private or public identity (they are
     *        stored separately, for use by private browsing)
     * @param aPrincipal
     *        the principal from which to derive information about which
     *        app/mozbrowser is in use for this request
     */
    [must_use] void getAuthIdentity(in ACString aScheme,
                                    in ACString aHost,
                                    in int32_t  aPort,
                                    in ACString aAuthType,
                                    in ACString aRealm,
                                    in ACString aPath,
                                    out AString aUserDomain,
                                    out AString aUserName,
                                    out AString aUserPassword,
                                    [optional] in bool aIsPrivate,
                                    [optional] in nsIPrincipal aPrincipal);

    /**
     * Store auth identity.
     *
     * @param aScheme
     *        the URL scheme (e.g., "http").  NOTE: for proxy authentication,
     *        this should be "http" (this includes authentication for CONNECT
     *        tunneling).
     * @param aHost
     *        the host of the server issuing a challenge (ASCII only).
     * @param aPort
     *        the port of the server issuing a challenge.
     * @param aAuthType
     *        optional string identifying auth type used (e.g., "basic")
     * @param aRealm
     *        optional string identifying auth realm.
     * @param aPath
     *        optional string identifying auth path. empty for proxy auth.
     * @param aUserDomain
     *        optional string containing user domain.
     * @param aUserName
     *        optional string containing user name.
     * @param aUserPassword
     *        optional string containing user password.
     * @param aIsPrivate
     *        whether to store a private or public identity (they are
     *        stored separately, for use by private browsing)
     * @param aPrincipal
     *        the principal from which to derive information about which
     *        app/mozbrowser is in use for this request
     */
    [must_use] void setAuthIdentity(in ACString aScheme,
                                    in ACString aHost,
                                    in int32_t  aPort,
                                    in ACString aAuthType,
                                    in ACString aRealm,
                                    in ACString aPath,
                                    in AString  aUserDomain,
                                    in AString  aUserName,
                                    in AString  aUserPassword,
                                    [optional] in boolean aIsPrivate,
                                    [optional] in nsIPrincipal aPrincipal);

    /**
     * Clear all auth cache.
     */
    [must_use] void clearAll();
};
