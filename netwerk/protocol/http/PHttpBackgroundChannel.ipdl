/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set sw=2 ts=8 et tw=80 ft=cpp : */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PBackground;
include protocol PStreamFilter;
include NeckoChannelParams;
include HttpChannelParams;
include PURLClassifierInfo;

include "mozilla/net/NeckoMessageUtils.h";

using nsIHttpChannel::FlashPluginState from "nsIHttpChannel.h";

namespace mozilla {
namespace net {

//-------------------------------------------------------------------
[RefCounted] async protocol PHttpBackgroundChannel
{
  manager PBackground;

child:
  async OnStartRequest(nsHttpResponseHead  responseHead,
                       bool                useResponseHead,
                       nsHttpHeaderArray   requestHeaders,
                       HttpChannelOnStartRequestArgs args,
                       HttpChannelAltDataStream altData);

  // Combines a single OnDataAvailable and its associated OnProgress &
  // OnStatus calls into one IPDL message
  async OnTransportAndData(nsresult  channelStatus,
                           nsresult  transportStatus,
                           uint64_t  offset,
                           uint32_t  count,
                           nsDependentCSubstring data,
                           bool dataFromSocketProcess);


  async OnStopRequest(nsresult channelStatus,
                      ResourceTimingStructArgs timing,
                      TimeStamp lastActiveTabOptimization,
                      nsHttpHeaderArray responseTrailers,
                      ConsoleReportCollected[] consoleReport,
                      bool fromSocketProcess);

  async OnConsoleReport(ConsoleReportCollected[] consoleReport);

  async OnProgress(int64_t progress, int64_t progressMax);

  async OnStatus(nsresult status);

  // Forwards nsIMultiPartChannelListener::onAfterLastPart. Make sure we've
  // disconnected our listeners, since we might not have on the last
  // OnStopRequest.
  async OnAfterLastPart(nsresult aStatus);

  // Tell the child that the resource being loaded has been classified.
  async NotifyClassificationFlags(uint32_t aClassificationFlags, bool aIsThirdParty);

  // Tell the child that the current channel's document is not allowed to load
  // flash content.
  async NotifyFlashPluginStateChanged(FlashPluginState aState);

  // Tell the child information of matched URL againts SafeBrowsing list
  async SetClassifierMatchedInfo(ClassifierInfo info);

  // Tell the child information of matched URL againts SafeBrowsing tracking list
  async SetClassifierMatchedTrackingInfo(ClassifierInfo info);

  async AttachStreamFilter(Endpoint<PStreamFilterParent> aEndpoint);

  async __delete__();

};

} // namespace net
} // namespace mozilla
