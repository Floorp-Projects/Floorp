/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include MemoryReportTypes;
include PrefsTypes;

include protocol PProfiler;

#if defined(MOZ_SANDBOX) && defined(MOZ_DEBUG) && defined(ENABLE_TESTS)
include protocol PSandboxTesting;
#endif

include "mozilla/ipc/ByteBufUtils.h";

using mozilla::dom::NativeThreadId from "mozilla/dom/NativeThreadId.h";

namespace mozilla {

namespace ipc {

// This protocol allows the UI process to talk to the Utility process. There is
// one instance of this protocol, with the UtilityProcessParent living on the main thread
// of the Utility process and the UtilityProcessChild living on the main thread of the UI
// process.
[NeedsOtherPid] protocol PUtilityProcess
{
parent:
  async InitCrashReporter(NativeThreadId threadId);

  async AddMemoryReport(MemoryReport aReport);

  // Sent from time-to-time to limit the amount of telemetry vulnerable to loss
  // Buffer contains bincoded Rust structs.
  // https://firefox-source-docs.mozilla.org/toolkit/components/glean/dev/ipc.html
  async FOGData(ByteBuf buf);

  async InitCompleted();

child:
  async Init(FileDescriptor? sandboxBroker, bool canRecordReleaseTelemetry);

  async InitProfiler(Endpoint<PProfilerChild> endpoint);

  async RequestMemoryReport(uint32_t generation,
                            bool anonymize,
                            bool minimizeMemoryUsage,
                            FileDescriptor? DMDFile)
      returns (uint32_t aGeneration);

  async PreferenceUpdate(Pref pref);

  // Tells the Utility process to flush any pending telemetry.
  // Used in tests and ping assembly. Buffer contains bincoded Rust structs.
  // https://firefox-source-docs.mozilla.org/toolkit/components/glean/dev/ipc.html
  async FlushFOGData() returns (ByteBuf buf);

  // Test-only method.
  // Asks the Utility process to trigger test-only instrumentation.
  // The unused returned value is to have a promise we can await.
  async TestTriggerMetrics() returns (bool unused);

#if defined(MOZ_SANDBOX) && defined(MOZ_DEBUG) && defined(ENABLE_TESTS)
  async InitSandboxTesting(Endpoint<PSandboxTestingChild> aEndpoint);
#endif
};

} // namespace ipc

} // namespace mozilla
