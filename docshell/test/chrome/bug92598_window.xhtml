<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<?xml-stylesheet href="chrome://global/skin" type="text/css"?>

<window id="92598Test"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        width="600"
        height="600"
        onload="onLoad();"
        title="92598 test">

  <script type="application/javascript"><![CDATA[
    const {BrowserTestUtils} = ChromeUtils.import("resource://testing-common/BrowserTestUtils.jsm");
    const LISTEN_EVENTS = ["load", "unload", "pageshow", "pagehide"];

    var gBrowser;
    var gTestsIterator;
    var gExpected = [];

    function ok(condition, message) {
      window.arguments[0].SimpleTest.ok(condition, message);
    }

    function is(a, b, message) {
      window.arguments[0].SimpleTest.is(a, b, message);
    }

    function finish() {
      for (let eventType of LISTEN_EVENTS) {
        gBrowser.removeEventListener(eventType, eventListener, true);
      }

      // Work around bug 467960
      if (SpecialPowers.Services.appinfo.sessionHistoryInParent) {
        let history = gBrowser.browsingContext.sessionHistory;
        history.purgeHistory(history.count);
      } else {
        let history = gBrowser.webNavigation.sessionHistory;
        history.legacySHistory.purgeHistory(history.count);
      }

      window.close();
      window.arguments[0].SimpleTest.finish();
    }

    function onLoad() {
      gBrowser = document.getElementById("content");
      for (let eventType of LISTEN_EVENTS) {
        gBrowser.addEventListener(eventType, eventListener, true);
      }

      gTestsIterator = testsIterator();
      nextTest();
    }

    function eventListener(event) {
      ok(gExpected.length >= 1, "Unexpected event " + event.type);
      if (gExpected.length == 0) {
        // in case of unexpected event, try to continue anyway
        setTimeout(nextTest, 0);
        return;
      }

      var exp = gExpected.shift();
      is(event.type, exp.type, "Invalid event received");
      if (typeof(exp.persisted) != "undefined") {
        is(event.persisted, exp.persisted, "Invalid persisted state");
      }
      if (exp.title) {
        ok(event.originalTarget instanceof HTMLDocument,
           "originalTarget not a HTMLDocument");
        is(event.originalTarget.title, exp.title, "titles don't match");
      }

      if (gExpected.length == 0) {
        setTimeout(nextTest, 0);
      }
    }

    function nextTest() {
      gTestsIterator.next();
    }

    function* testsIterator() {
      // Load a page with a no-cache header, followed by a simple page
      // On pagehide, first page should report it is not being persisted
      var test1DocURI = "http://mochi.test:8888/tests/docshell/test/chrome/92598_nostore.html";

      gExpected = [{type: "pagehide", persisted: true},
                   {type: "load", title: "test1"},
                   {type: "pageshow", title: "test1", persisted: false}];
      BrowserTestUtils.loadURI(gBrowser, test1DocURI);
      yield undefined;

      var test2Doc = "data:text/html,<html><head><title>test2</title></head>" +
                     "<body>test2</body></html>";

      gExpected = [{type: "pagehide", title: "test1", persisted: false},
                   {type: "unload", title: "test1"},
                   {type: "load", title: "test2"},
                   {type: "pageshow", title: "test2", persisted: false}];
      BrowserTestUtils.loadURI(gBrowser, test2Doc);
      yield undefined;

      // Now go back in history. First page should not have been cached.
      // Check persisted property to confirm
      gExpected = [{type: "pagehide", title: "test2", persisted: true},
                   {type: "load", title: "test1"},
                   {type: "pageshow", title: "test1", persisted: false}];
      gBrowser.goBack();
      yield undefined;

      finish();
    }
  ]]></script>

  <browser type="content" primary="true" flex="1" id="content" src="about:blank"/>
</window>
