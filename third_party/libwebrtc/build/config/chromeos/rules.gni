# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chrome_build.gni")
import("//build/config/chromeos/args.gni")
import("//build/config/gclient_args.gni")

assert(is_chromeos)

# Determine the real paths for various items in the SDK, which may be used
# in the 'generate_runner_script' template below. We do so outside the template
# to confine exec_script to a single invocation.
cros_is_vm = false
if (is_chromeos_device && cros_sdk_version != "") {
  _cache_path_prefix =
      "//build/cros_cache/chrome-sdk/symlinks/${cros_board}+${cros_sdk_version}"

  foreach(b, string_split(cros_boards_with_qemu_images, ":")) {
    if (cros_board == b) {
      cros_is_vm = true
    }
  }

  _symlinks = [
    # Tast harness & test data.
    rebase_path("${_cache_path_prefix}+chromeos-base/tast-cmd"),
    rebase_path("${_cache_path_prefix}+chromeos-base/tast-remote-tests-cros"),

    # Binutils (and other toolchain tools) used to deploy Chrome to the device.
    rebase_path(
        "${_cache_path_prefix}+environment_chromeos-base_chromeos-chrome.tar.xz"),
    rebase_path("${_cache_path_prefix}+target_toolchain"),
  ]
  if (cros_is_vm) {
    # VM-related tools.
    _symlinks += [
      rebase_path("${_cache_path_prefix}+sys-firmware/seabios"),
      rebase_path("${_cache_path_prefix}+chromiumos_qemu_image.tar.xz"),
      rebase_path("${_cache_path_prefix}+app-emulation/qemu"),
    ]
  }
  _symlink_targets =
      exec_script("//build/get_symlink_targets.py", _symlinks, "list lines")
  tast_sdk_items = [
    _symlink_targets[0],
    _symlink_targets[1],
  ]
  toolchain_sdk_items = [
    _symlink_targets[2],
    _symlink_targets[3],
  ]
  if (cros_is_vm) {
    vm_sdk_items = [
      _symlink_targets[4],
      _symlink_targets[5],
      _symlink_targets[6],
    ]
  }
}

# Creates a script at $generated_script that can be used to launch a cros VM
# and optionally run a test within it.
# Args:
#   test_exe: Name of test binary located in the out dir. This will get copied
#       to the VM and executed there.
#   tast_attr_expr: Tast expression to pass to local_test_runner on the VM.
#   tast_tests: List of Tast tests to run on the VM. Note that when this is
#       specified, the target name used to invoke this template will be
#       designated as the "name" of this test and will primarly used for test
#       results tracking and displaying (eg: flakiness dashboard).
#   generated_script: Path to place the generated script.
#   deploy_chrome: If true, deploys a locally built chrome located in the root
#       build dir to the VM after launching it.
#   runtime_deps_file: Path to file listing runtime deps for the test. If set,
#       all files listed will be copied to the VM before testing.
template("generate_runner_script") {
  forward_variables_from(invoker,
                         [
                           "deploy_chrome",
                           "generated_script",
                           "runtime_deps_file",
                           "tast_attr_expr",
                           "tast_tests",
                           "testonly",
                           "test_exe",
                         ])
  if (!defined(deploy_chrome)) {
    deploy_chrome = false
  }

  assert(defined(generated_script),
         "Must specify where to place generated test launcher script via " +
             "'generated_script'")
  is_tast = defined(tast_attr_expr) || defined(tast_tests)
  assert(!(is_tast && defined(test_exe)),
         "Tast tests are invoked from binaries shipped with the VM image. " +
             "There should be no locally built binary needed.")

  action(target_name) {
    if (defined(runtime_deps_file)) {
      write_runtime_deps = runtime_deps_file
    }
    script = "//build/chromeos/create_test_runner_script.py"

    outputs = [ generated_script ]

    deps = [ "//testing/buildbot/filters:chromeos_filters" ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    data = [
      # We use android test-runner's results libs to construct gtest output
      # json.
      "//build/android/pylib/__init__.py",
      "//build/android/pylib/base/",
      "//build/android/pylib/results/",
      generated_script,
      "//build/chromeos/",

      # Needed for various SDK components used below.
      "//build/cros_cache/chrome-sdk/misc/",
      "//build/cros_cache/chrome-sdk/symlinks/",

      # The LKGM file controls what version of the VM image to download. Add it
      # as data here so that changes to it will trigger analyze.
      "//chromeos/CHROMEOS_LKGM",
      "//third_party/chromite/",
    ]

    if (defined(invoker.data)) {
      deps += invoker.data
    }

    if (defined(invoker.data_deps)) {
      data_deps = invoker.data_deps
    }

    # Required arguments used at build time by the runner script generator.
    args = [
      "--script-output-path",
      rebase_path(generated_script, root_build_dir),
      "--cros-cache",
      rebase_path("//build/cros_cache/", root_build_dir),
      "--board",
      cros_board,
      "--output-directory",
      rebase_path(root_out_dir, root_build_dir),
    ]

    if (cros_is_vm) {
      args += [ "--use-vm" ]
    }

    # If we have public Chromium builds, use public Chromium OS images when
    # flashing the test device.
    if (!is_chrome_branded) {
      args += [ "--public-image" ]
    }

    if (deploy_chrome) {
      args += [ "--deploy-chrome" ]
    }

    # If we're in the cros chrome-sdk (and not the raw ebuild), the test will
    # need some additional runtime data located in the SDK cache.
    if (cros_sdk_version != "") {
      # Add the VM/QEMU-launching bits if needed.
      if (cros_is_vm) {
        data += vm_sdk_items
      }
      if (is_tast) {
        data += tast_sdk_items
      }
      if (deploy_chrome) {
        # To deploy chrome to the VM, it needs to be stripped down to fit into
        # the VM. This is done by using binutils in the toolchain. So add the
        # toolchain to the data.
        data += toolchain_sdk_items
      }
    }

    # When --test-exe is specified, test_runner.py will push the exe to the VM
    # and execute it. Otherwise it wraps a host-side command and just takes care
    # launching & tearing-down the VM.
    if (defined(test_exe)) {
      args += [
        "--test-exe",
        test_exe,
      ]
      if (defined(runtime_deps_file)) {
        args += [
          "--runtime-deps-path",
          rebase_path(runtime_deps_file, root_build_dir),
        ]
      }
    } else if (is_tast) {
      # When --tast-tests is specified, test_runner.py will call
      # local_test_runner on the VM to run the set of tests.
      args += [
        "--suite-name",
        target_name,
      ]
      if (defined(tast_attr_expr)) {
        args += [
          "--tast-attr-expr",
          tast_attr_expr,
        ]
      } else {
        foreach(test, tast_tests) {
          args += [
            "--tast-tests",
            test,
          ]
        }
      }
    }
  }
}

template("tast_test") {
  forward_variables_from(invoker, "*")

  # Default the expression to match any chrome-related test.
  if (!defined(tast_attr_expr) && !defined(tast_tests)) {
    # The following expression filters out all non-critical tests. See the link
    # below for more details:
    # https://chromium.googlesource.com/chromiumos/platform/tast/+/master/docs/test_attributes.md
    tast_attr_expr = "\"group:mainline\" && \"dep:chrome\""

    if (defined(enable_tast_informational_tests) &&
        enable_tast_informational_tests) {
      tast_attr_expr += " && informational"
    } else {
      tast_attr_expr += " && !informational"
    }
    if (!is_chrome_branded) {
      tast_attr_expr += " && !\"dep:chrome_internal\""
    }
  } else {
    assert(defined(tast_attr_expr) != defined(tast_tests),
           "Specify one of tast_tests or tast_attr_expr.")
  }

  # Append any disabled tests to the expression.
  if (defined(tast_disabled_tests)) {
    assert(defined(tast_attr_expr),
           "tast_attr_expr must be used when specifying tast_disabled_tests.")
    foreach(test, tast_disabled_tests) {
      tast_attr_expr += " && !\"name:${test}\""
    }
  }
  if (defined(tast_attr_expr)) {
    tast_attr_expr = "( " + tast_attr_expr + " )"
  }
  generate_runner_script(target_name) {
    testonly = true
    generated_script = "$root_build_dir/bin/run_${target_name}"
    runtime_deps_file = "$root_out_dir/${target_name}.runtime_deps"
    deploy_chrome = true
    data_deps = [
      "//:chromiumos_preflight",  # Builds the browser.
      "//chromeos:cros_chrome_deploy",  # Adds additional browser run-time deps.
    ]
  }
}
