# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/coverage/coverage.gni")
import("//build/config/ios/ios_sdk.gni")
import("//build/config/sysroot.gni")
import("//build/toolchain/toolchain.gni")

declare_args() {
  # Enabling this option makes clang compile to an intermediate
  # representation ("bitcode"), and not to native code. This is preferred
  # when including WebRTC in the apps that will be sent to Apple's App Store
  # and mandatory for the apps that run on watchOS or tvOS.
  # The option only works when building with Xcode (use_xcode_clang = true).
  # Mimicking how Xcode handles it, the production builds (is_debug = false)
  # get real bitcode sections added, while the debug builds (is_debug = true)
  # only get bitcode-section "markers" added in them.
  # NOTE: This option is ignored when building versions for the iOS simulator,
  # where a part of libvpx is compiled from the assembly code written using
  # Intel assembly syntax; Yasm / Nasm do not support emitting bitcode parts.
  # That is not a limitation for now as Xcode mandates the presence of bitcode
  # only when building bitcode-enabled projects for real devices (ARM CPUs).
  enable_ios_bitcode = false
}

# This is included by reference in the //build/config/compiler config that
# is applied to all targets. It is here to separate out the logic.
config("compiler") {
  # These flags are shared between the C compiler and linker.
  common_ios_flags = []

  # CPU architecture.
  if (target_cpu == "x64") {
    common_ios_flags += [
      "-arch",
      "x86_64",
    ]
    swiftflags = [
      "-target",
      "x86_64-apple-ios$ios_deployment_target-simulator",
    ]
  } else if (target_cpu == "x86") {
    common_ios_flags += [
      "-arch",
      "i386",
    ]
    swiftflags = [
      "-target",
      "i386-apple-ios$ios_deployment_target-simulator",
    ]
  } else if (target_cpu == "armv7" || target_cpu == "arm") {
    common_ios_flags += [
      "-arch",
      "armv7",
    ]
    swiftflags = [
      "-target",
      "armv7-apple-ios$ios_deployment_target",
    ]
  } else if (target_cpu == "arm64") {
    common_ios_flags += [
      "-arch",
      "arm64",
    ]
    swiftflags = [
      "-target",
      "arm64-apple-ios$ios_deployment_target",
    ]
  }

  swiftflags += [
    "-swift-version",
    "5",
  ]

  # This is here so that all files get recompiled after an Xcode update.
  # (defines are passed via the command line, and build system rebuild things
  # when their commandline changes). Nothing should ever read this define.
  defines = [ "CR_XCODE_VERSION=$xcode_version" ]

  asmflags = common_ios_flags
  cflags = common_ios_flags

  # Without this, the constructors and destructors of a C++ object inside
  # an Objective C struct won't be called, which is very bad.
  cflags_objcc = [ "-fobjc-call-cxx-cdtors" ]

  ldflags = common_ios_flags
}

# This is included by reference in the //build/config/compiler:runtime_library
# config that is applied to all targets. It is here to separate out the logic
# that is iOS-only. Please see that target for advice on what should go in
# :runtime_library vs. :compiler.
config("runtime_library") {
  if (ios_enable_relative_sdk_path) {
    common_flags = [
      "-isysroot",
      rebase_path(sysroot, root_build_dir),
    ]
    swiftflags = [
      "-sdk",
      rebase_path(sysroot, root_build_dir),
    ]
  } else {
    common_flags = [
      "-isysroot",
      sysroot,
    ]
    swiftflags = [
      "-sdk",
      sysroot,
    ]
  }

  if (use_ios_simulator) {
    common_flags += [ "-mios-simulator-version-min=$ios_deployment_target" ]
  } else {
    common_flags += [ "-miphoneos-version-min=$ios_deployment_target" ]
  }

  if (use_xcode_clang && enable_ios_bitcode && !use_ios_simulator) {
    if (is_debug) {
      common_flags += [ "-fembed-bitcode-marker" ]
    } else {
      common_flags += [ "-fembed-bitcode" ]
    }
  }

  asmflags = common_flags
  cflags = common_flags
  ldflags = common_flags

  if (use_clang_coverage) {
    configs = [ "//build/config/coverage:default_coverage" ]
  }
}

config("ios_executable_flags") {
}

config("ios_dynamic_flags") {
  ldflags = [ "-Wl,-ObjC" ]  # Always load Objective-C categories and class.
  lib_dirs = [ "$sysroot/usr/lib/swift" ]
}

config("xctest_config") {
  framework_dirs = [ "$ios_sdk_platform_path/Developer/Library/Frameworks" ]

  frameworks = [
    "Foundation.framework",
    "XCTest.framework",
  ]
}

group("xctest") {
  public_configs = [ ":xctest_config" ]
}

_xctrunner_path =
    "$ios_sdk_platform_abs_path/Developer/Library/Xcode/Agents/XCTRunner.app"

# When building with Goma RBE, $ios_sdk_platform_abs_path corresponds to a
# symlink below $root_build_dir that points to the real SDK to use. Because
# the files are below $root_build_dir, it is not possible to list them as a
# target input without gn complaining (as it can't find a target creating
# those files).
#
# The symlinks are created by //build/config/mac/sdk_info.py script invoked
# via exec_script() from //build/config/{ios/ios_sdk.gni,mac/mac_sdk.gni}.
# As the invocation is done by exec_script, there is no target that can list
# those files as output.
#
# To workaround this, add a target that pretends to create those files
# (but does nothing). See https://crbug.com/1061487 for why this is needed.
if (ios_use_goma_rbe) {
  action("copy_xctrunner_app") {
    testonly = true
    script = "//build/noop.py"
    outputs = [
      "$_xctrunner_path/Info.plist",
      "$_xctrunner_path/PkgInfo",
      "$_xctrunner_path/XCTRunner",
    ]
  }
}

# When creating the test runner for an XCUITest, the arm64e slice of the binary
# must be removed (at least until the app ships with arm64e slice which is not
# yet supported by Apple).
action("xctest_runner_without_arm64e") {
  testonly = true
  script = "//build/config/ios/strip_arm64e.py"
  sources = [ "$_xctrunner_path/XCTRunner" ]
  outputs = [ "$target_out_dir/XCTRunner" ]
  args = [
    "--output",
    rebase_path(outputs[0], root_build_dir),
    "--input",
    rebase_path(sources[0], root_build_dir),
    "--xcode-version",
    xcode_version,
  ]

  if (ios_use_goma_rbe) {
    deps = [ ":copy_xctrunner_app" ]
  }
}
