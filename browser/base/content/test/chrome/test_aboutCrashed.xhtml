<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<?xml-stylesheet href="chrome://global/skin/global.css" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css" type="text/css"?>

<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />
  <iframe type="content" id="frame1"/>
  <iframe type="content" id="frame2" onload="doTest()"/>
  <script type="application/javascript"><![CDATA[
    const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
    ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");

    SimpleTest.waitForExplicitFinish();

    // Load error pages do not fire "load" events, so let's use a progressListener.
    function waitForErrorPage(frame) {
      return new Promise(resolve => {
        let progressListener = {
          onLocationChange(aWebProgress, aRequest, aLocation, aFlags) {
            if (aFlags & Ci.nsIWebProgressListener.LOCATION_CHANGE_ERROR_PAGE) {
              frame.docShell.QueryInterface(Ci.nsIInterfaceRequestor)
                            .getInterface(Ci.nsIWebProgress)
                            .removeProgressListener(progressListener,
                                                    Ci.nsIWebProgress.NOTIFY_LOCATION);

              resolve();
            }
          },

          QueryInterface: ChromeUtils.generateQI(["nsIWebProgressListener",
                                                  "nsISupportsWeakReference"])
        };

        frame.docShell.QueryInterface(Ci.nsIInterfaceRequestor)
                      .getInterface(Ci.nsIWebProgress)
                      .addProgressListener(progressListener,
                                           Ci.nsIWebProgress.NOTIFY_LOCATION);
      });
    }

  function doTest() {
    (async function testBody() {
      let frame1 = document.getElementById("frame1");
      let frame2 = document.getElementById("frame2");
      let uri1 = Services.io.newURI("http://www.example.com/1");
      let uri2 = Services.io.newURI("http://www.example.com/2");

      let errorPageReady = waitForErrorPage(frame1);
      frame1.docShell.chromeEventHandler.setAttribute("crashedPageTitle", "pageTitle");
      frame1.docShell.displayLoadError(Cr.NS_ERROR_CONTENT_CRASHED, uri1, null);

      await errorPageReady;
      frame1.docShell.chromeEventHandler.removeAttribute("crashedPageTitle");

      SimpleTest.is(frame1.contentDocument.documentURI,
                    "about:tabcrashed?e=tabcrashed&u=http%3A//www.example.com/1&c=UTF-8&d=pageTitle",
                    "Correct about:tabcrashed displayed for page with title.");

      errorPageReady = waitForErrorPage(frame2);
      frame2.docShell.displayLoadError(Cr.NS_ERROR_CONTENT_CRASHED, uri2, null);

      await errorPageReady;

      SimpleTest.is(frame2.contentDocument.documentURI,
                    "about:tabcrashed?e=tabcrashed&u=http%3A//www.example.com/2&c=UTF-8&d=%20",
                    "Correct about:tabcrashed displayed for page with no title.");

      SimpleTest.finish();
    })().catch(ex => SimpleTest.ok(false, ex));
  }
  ]]></script>

  <body xmlns="http://www.w3.org/1999/xhtml" style="height: 300px; overflow: auto;" />
</window>
