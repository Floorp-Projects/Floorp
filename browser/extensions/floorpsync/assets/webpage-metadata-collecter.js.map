{"version":3,"sources":["webpack://xbrowsersync-app/webpack/bootstrap","webpack://xbrowsersync-app/webpack/runtime/define property getters","webpack://xbrowsersync-app/webpack/runtime/hasOwnProperty shorthand","webpack://xbrowsersync-app/./src/modules/webext/webpage-metadata-collecter/webpage-metadata-collecter.ts","webpack://xbrowsersync-app/./src/modules/shared/metadata/get-metadata.ts"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","url","html","htmlDoc","DOMParser","parseFromString","getDecodedTextValue","text","txt","createElement","innerHTML","trim","value","getMetaElements","metaName","returnAll","elements","Array","from","querySelectorAll","toLowerCase","toUpperCase","length","slice","title","ogTitle","content","twitterTitle","getPageTitle","description","ogDescription","twitterDescription","defaultDescription","getPageDescription","tags","keywordsArr","Set","forEach","tag","add","metaKeywords","split","keyword","keywords","filter","Boolean","join","getPageKeywords","getMetadata","document","location","href","documentElement"],"mappings":"gDACA,IAAIA,EAAsB,CCA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,kCCQlF,QALA,MACE,yBACE,MCHuB,EAACI,EAAaC,KAEvC,MACMC,GADS,IAAIC,WACIC,gBAAgBH,EAAM,aAEvCI,EAAuBC,IAC3B,IAAKA,EACH,MAAO,GAET,MAAMC,EAAML,EAAQM,cAAc,YAElC,OADAD,EAAIE,UAAYH,EAAKI,OACdH,EAAII,OAGPC,EAAkB,CAACC,EAAkBC,GAAY,KACrD,MAAMC,EAAWC,MAAMC,KACrBf,EAAQgB,iBACN,cAAcL,EAASM,kCAAkCN,EAASM,8BAA8BN,EAASO,kCAAkCP,EAASO,oBAGxJ,GAAKL,GAAUM,OAGf,OAAOP,EAAYC,EAAWA,EAASO,OAAO,GAAG,IAqD7CC,EAbe,MACnB,MAAMC,EAAUZ,EAAgB,YAChC,GAAIY,GAASC,QACX,OAAOpB,EAAoBmB,EAAQC,SAErC,MAAMC,EAAed,EAAgB,iBACrC,OACSP,EADLqB,GAAcD,QACWC,EAAaD,QAEfvB,EAAQqB,QAIvBI,GAGd,MAAO,CACLC,YAtDyB,MACzB,MAAMC,EAAgBjB,EAAgB,kBACtC,GAAIiB,GAAeJ,QACjB,OAAOpB,EAAoBwB,EAAcJ,SAE3C,MAAMK,EAAqBlB,EAAgB,uBAC3C,GAAIkB,GAAoBL,QACtB,OAAOpB,EAAoByB,EAAmBL,SAEhD,MAAMM,EAAqBnB,EAAgB,eAC3C,OAAImB,GAAoBN,QACfpB,EAAoB0B,EAAmBN,cADhD,GAyCkBO,GAIlBC,KAxCsB,MACtB,MAAMC,EAAc,IAAIC,IACJvB,EAAgB,gBAAgB,IACvCwB,SAASC,IAChBA,GAAKZ,SACPS,EAAYI,IAAIjC,EAAoBgC,EAAIZ,SAASN,mBAGrD,MAAMoB,EAAe3B,EAAgB,YACjC2B,GAAcd,SAChBc,EAAad,QAAQe,MAAM,KAAKJ,SAASK,IACnCA,GACFP,EAAYI,IAAIjC,EAAoBoC,GAAStB,mBAInD,MAAMuB,EAAW,IAAIR,GAAaS,OAAOC,SAASC,OAClD,GAAIH,EAASrB,OACX,OAAOqB,GAmBEI,GAIXvB,QACAvB,QDhFO+C,CAAYC,SAASC,SAASC,KAAMF,SAASG,gBAAgB1C,c","file":"webpage-metadata-collecter.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { WebpageMetadata } from '../../shared/global-shared.interface';\nimport { getMetadata } from '../../shared/metadata/get-metadata';\n\nclass WebpageMetadataCollecter {\n  static CollectMetadata(): WebpageMetadata {\n    return getMetadata(document.location.href, document.documentElement.innerHTML);\n  }\n}\nexport default WebpageMetadataCollecter;\n","import { WebpageMetadata } from '../global-shared.interface';\n\nexport const getMetadata = (url: string, html: string): WebpageMetadata => {\n  // Extract metadata values\n  const parser = new DOMParser();\n  const htmlDoc = parser.parseFromString(html, 'text/html');\n\n  const getDecodedTextValue = (text: string): string => {\n    if (!text) {\n      return '';\n    }\n    const txt = htmlDoc.createElement('textarea');\n    txt.innerHTML = text.trim();\n    return txt.value;\n  };\n\n  const getMetaElements = (metaName: string, returnAll = false): Element | Element[] => {\n    const elements = Array.from(\n      htmlDoc.querySelectorAll(\n        `meta[name=\"${metaName.toLowerCase()}\"],meta[property=\"${metaName.toLowerCase()}\"],meta[name=\"${metaName.toUpperCase()}\"],meta[property=\"${metaName.toUpperCase()}\"]`\n      )\n    );\n    if (!elements?.length) {\n      return;\n    }\n    return returnAll ? elements : elements.slice(-1)[0];\n  };\n\n  const getPageDescription = (): string => {\n    const ogDescription = getMetaElements('og:description') as HTMLMetaElement;\n    if (ogDescription?.content) {\n      return getDecodedTextValue(ogDescription.content);\n    }\n    const twitterDescription = getMetaElements('twitter:description') as HTMLMetaElement;\n    if (twitterDescription?.content) {\n      return getDecodedTextValue(twitterDescription.content);\n    }\n    const defaultDescription = getMetaElements('description') as HTMLMetaElement;\n    if (defaultDescription?.content) {\n      return getDecodedTextValue(defaultDescription.content);\n    }\n  };\n\n  const getPageKeywords = (): string => {\n    const keywordsArr = new Set<string>();\n    const ogVideoTags = getMetaElements('og:video:tag', true) as HTMLMetaElement[];\n    ogVideoTags?.forEach((tag) => {\n      if (tag?.content) {\n        keywordsArr.add(getDecodedTextValue(tag.content?.toLowerCase()));\n      }\n    });\n    const metaKeywords = getMetaElements('keywords') as HTMLMetaElement;\n    if (metaKeywords?.content) {\n      metaKeywords.content.split(',').forEach((keyword) => {\n        if (keyword) {\n          keywordsArr.add(getDecodedTextValue(keyword?.toLowerCase()));\n        }\n      });\n    }\n    const keywords = [...keywordsArr].filter(Boolean).join();\n    if (keywords.length) {\n      return keywords;\n    }\n  };\n\n  const getPageTitle = (): string => {\n    const ogTitle = getMetaElements('og:title') as HTMLMetaElement;\n    if (ogTitle?.content) {\n      return getDecodedTextValue(ogTitle.content);\n    }\n    const twitterTitle = getMetaElements('twitter:title') as HTMLMetaElement;\n    if (twitterTitle?.content) {\n      return getDecodedTextValue(twitterTitle.content);\n    }\n    return getDecodedTextValue(htmlDoc.title);\n  };\n\n  // Return metadata object\n  const title = getPageTitle();\n  const description = getPageDescription();\n  const tags = getPageKeywords();\n  return {\n    description,\n    tags,\n    title,\n    url\n  };\n};\n"],"sourceRoot":""}